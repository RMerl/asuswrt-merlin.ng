Version 2.03 August 1, 2014

A Partial List of Missing Features
==================================

Contributions are welcome.  There are plenty of opportunities
for visible, important contributions to this module.  Here
is a partial list of the known problems and missing features:

a) SMB3 (and SMB3.02) missing optional features:
   - RDMA
   - multichannel (started)
   - directory leases (improved metadata caching)
   - T10 copy offload (copy chunk is only mechanism supported)
   - encrypted shares

b) improved sparse file support

c) Directory entry caching relies on a 1 second timer, rather than
using FindNotify or equivalent.  - (started)

d) quota support (needs minor kernel change since quota calls
to make it to network filesystems or deviceless filesystems)

e) improve support for very old servers (OS/2 and Win9x for example)
Including support for changing the time remotely (utimes command).

f) hook lower into the sockets api (as NFS/SunRPC does) to avoid the
extra copy in/out of the socket buffers in some cases.

g) Better optimize open (and pathbased setfilesize) to reduce the
oplock breaks coming from windows srv.  Piggyback identical file
opens on top of each other by incrementing reference count rather
than resending (helps reduce server resource utilization and avoid
spurious oplock breaks).

h) Add support for storing symlink info to Windows servers
in the Extended Attribute format their SFU clients would recognize.

i) Finish inotify support so kde and gnome file list windows
will autorefresh (partially complete by Asser). Needs minor kernel
vfs change to support removing D_NOTIFY on a file.   

j) Add GUI tool to configure /proc/fs/cifs settings and for display of
the CIFS statistics (started)

k) implement support for security and trusted categories of xattrs
(requires minor protocol extension) to enable better support for SELINUX

l) Implement O_DIRECT flag on open (already supported on mount)

m) Create UID mapping facility so server UIDs can be mapped on a per
mount or a per server basis to client UIDs or nobody if no mapping
exists.  This is helpful when Unix extensions are negotiated to
allow better permission checking when UIDs differ on the server
and client.  Add new protocol request to the CIFS protocol 
standard for asking the server for the corresponding name of a
particular uid.

n) DOS attrs - returned as pseudo-xattr in Samba format (check VFAT and NTFS for this too)

o) mount check for unmatched uids

p) Add support for new vfs entry point for fallocate

q) Add tools to take advantage of cifs/smb3 specific ioctls and features
such as "CopyChunk" (fast server side file copy)

r) encrypted file support

s) improved stats gathering, tools (perhaps integration with nfsometer?)

t) allow setting more NTFS/SMB3 file attributes remotely (currently limited to compressed
file attribute via chflags)

u) mount helper GUI (to simplify the various configuration options on mount)


KNOWN BUGS
====================================
See http://bugzilla.samba.org - search on product "CifsVFS" for
current bug list.  Also check http://bugzilla.kernel.org (Product = File System, Component = CIFS)

1) existing symbolic links (Windows reparse points) are recognized but
can not be created remotely. They are implemented for Samba and those that
support the CIFS Unix extensions, although earlier versions of Samba
overly restrict the pathnames.
2) follow_link and readdir code does not follow dfs junctions
but recognizes them

Misc testing to do
==================
1) check out max path names and max path name components against various server
types. Try nested symlinks (8 deep). Return max path name in stat -f information

2) Improve xfstest's cifs enablement and adapt xfstests where needed to test
cifs better

3) Additional performance testing and optimization using iozone and similar - 
there are some easy changes that can be done to parallelize sequential writes,
and when signing is disabled to request larger read sizes (larger than 
negotiated size) and send larger write sizes to modern servers.

4) More exhaustively test against less common servers
