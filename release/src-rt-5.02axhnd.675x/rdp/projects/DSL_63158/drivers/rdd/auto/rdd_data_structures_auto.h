/*
   Copyright (c) 2015 Broadcom
   All Rights Reserved

    <:label-BRCM:2015:DUAL/GPL:standard

    Unless you and Broadcom execute a separate written software license
    agreement governing use of this software, this software is licensed
    to you under the terms of the GNU General Public License version 2
    (the "GPL"), available at http://www.broadcom.com/licenses/GPLv2.php,
    with the following added to such license:

       As a special exception, the copyright holders of this software give
       you permission to link this software with independent modules, and
       to copy and distribute the resulting executable under terms of your
       choice, provided that you also meet, for each linked independent
       module, the terms and conditions of the license of that module.
       An independent module is a module which is not derived from this
       software.  The special exception does not apply to any modifications
       of the software.

    Not withstanding the above, under no circumstances may you combine
    this software in any way with any other Broadcom software provided
    under a license other than the GPL, without Broadcom's express prior
    written consent.

:>
*/



/* This is an automated file. Do not edit its contents. */


#ifndef _RDD_DATA_STRUCTURES_AUTO_H_
#define _RDD_DATA_STRUCTURES_AUTO_H_

#define GROUPED_EN_SEGMENTS_NUM       6
#define INVALID_TABLE_ADDRESS         0xFFFFFF

#ifdef __clang__
#define ALIGNMENT8 __attribute__((align_value(8)))
#else
#define ALIGNMENT8
#endif


/* DDR */

/* >>>IPTV_DDR_PORT_BUFFER_TABLE */

/* >>>RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS */
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_NUMBER	56

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	header[RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_NUMBER];
	uint32_t	context_0                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context_1                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint8_t	header[RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_NUMBER];
	uint32_t	context_0                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context_1                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS;

typedef RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS * aligned_RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[16];
    uint64_t dword_val64[8];
    RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS fields;
} RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS_NEW;
typedef RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS_NEW * aligned_RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_READ_G(r, g, idx, i)          GROUP_MREAD_I_8(g, idx*sizeof(RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS), i, r)
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_WRITE_G(v, g, idx, i)         GROUP_MWRITE_I_8(g, idx*sizeof(RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS), i, v)
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_READ(r, p, i)                 MREAD_I_8((uint8_t *)p, i, r)
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_WRITE(v, p, i)                MWRITE_I_8((uint8_t *)p, i, v)
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS) + 56, r)
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS) + 56, v)
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_READ(r, p)                 MREAD_32((uint8_t *)p + 56, r)
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_WRITE(v, p)                MWRITE_32((uint8_t *)p + 56, v)
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS) + 60, r)
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS) + 60, v)
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_READ(r, p)                 MREAD_32((uint8_t *)p + 60, r)
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_WRITE(v, p)                MWRITE_32((uint8_t *)p + 60, v)
/* <<<RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS */


#define RDD_IPTV_DDR_PORT_BUFFER_TABLE_SIZE     14
typedef struct
{
	RDD_IPTV_DDR_PORT_BUFFER_ENTRY_DTS	entry[ RDD_IPTV_DDR_PORT_BUFFER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_DDR_PORT_BUFFER_TABLE_DTS;

/* <<<IPTV_DDR_PORT_BUFFER_TABLE */


/* >>>IPTV_DDR_CONTEXT_TABLE */

/* >>>RDD_IPTV_DDR_CONTEXT_ENTRY_DTS */
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_NUMBER	16
#define RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_NUMBER	16
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_NUMBER	32

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	valid                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_ver                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	any_vid                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	any_src_ip                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vid                                                               	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	next_entry_idx                                                    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ssid_vector_0_or_flooding_vport                                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ssid_vector_1                                                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ssid_vector_2                                                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	radio_dhd_vector                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_if                                                             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wlan_mcast_proxy_enabled                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wlan_mcast_index                                                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wlan_mcast_tx_prio                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                                                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pool_num                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	replications                                                      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                                                         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cntr_id                                                           	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	egress_ports_vector                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	src_ip                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	src_ipv6_addr[RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_NUMBER];
	uint8_t	dst_ipv6_addr[RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_NUMBER];
	uint8_t	result[RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_NUMBER];
#else
	uint32_t	next_entry_idx                                                    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vid                                                               	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	any_src_ip                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	any_vid                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_ver                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	valid                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ssid_vector_1                                                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ssid_vector_0_or_flooding_vport                                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wlan_mcast_index                                                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wlan_mcast_proxy_enabled                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_if                                                             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	radio_dhd_vector                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ssid_vector_2                                                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cntr_id                                                           	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                                                         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	replications                                                      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pool_num                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                                                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wlan_mcast_tx_prio                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	egress_ports_vector                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	src_ip                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	src_ipv6_addr[RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_NUMBER];
	uint8_t	dst_ipv6_addr[RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_NUMBER];
	uint8_t	result[RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_DDR_CONTEXT_ENTRY_DTS;

typedef RDD_IPTV_DDR_CONTEXT_ENTRY_DTS * aligned_RDD_IPTV_DDR_CONTEXT_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[22];
    uint64_t dword_val64[11];
    RDD_IPTV_DDR_CONTEXT_ENTRY_DTS fields;
} RDD_IPTV_DDR_CONTEXT_ENTRY_DTS_NEW;
typedef RDD_IPTV_DDR_CONTEXT_ENTRY_DTS_NEW * aligned_RDD_IPTV_DDR_CONTEXT_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_IPTV_DDR_CONTEXT_ENTRY_VALID_READ_G(r, g, idx)                                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS), 7, 1, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VALID_WRITE_G(v, g, idx)                                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS), 7, 1, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VALID_READ(r, p)                                           FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VALID_WRITE(v, p)                                          FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_IP_VER_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS), 6, 1, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_IP_VER_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS), 6, 1, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_IP_VER_READ(r, p)                                          FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_IP_VER_WRITE(v, p)                                         FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_VID_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS), 5, 1, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_VID_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS), 5, 1, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_VID_READ(r, p)                                         FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_VID_WRITE(v, p)                                        FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS), 4, 1, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS), 4, 1, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VID_READ_G(r, g, idx)                                      GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS), 0, 12, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VID_WRITE_G(v, g, idx)                                     GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS), 0, 12, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VID_READ(r, p)                                             FIELD_MREAD_16((uint8_t *)p, 0, 12, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VID_WRITE(v, p)                                            FIELD_MWRITE_16((uint8_t *)p, 0, 12, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_READ_G(r, g, idx)                           GROUP_MREAD_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 2, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WRITE_G(v, g, idx)                          GROUP_MWRITE_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 2, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_READ(r, p)                                  MREAD_16((uint8_t *)p + 2, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WRITE(v, p)                                 MWRITE_16((uint8_t *)p + 2, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 4, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 4, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_READ(r, p)                 MREAD_16((uint8_t *)p + 4, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_WRITE(v, p)                MWRITE_16((uint8_t *)p + 4, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_READ_G(r, g, idx)                            GROUP_MREAD_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 6, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_WRITE_G(v, g, idx)                           GROUP_MWRITE_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 6, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_READ(r, p)                                   MREAD_16((uint8_t *)p + 6, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_WRITE(v, p)                                  MWRITE_16((uint8_t *)p + 6, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_READ_G(r, g, idx)                            GROUP_MREAD_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 8, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_WRITE_G(v, g, idx)                           GROUP_MWRITE_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 8, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_READ(r, p)                                   MREAD_16((uint8_t *)p + 8, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_WRITE(v, p)                                  MWRITE_16((uint8_t *)p + 8, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 10, 5, 3, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 10, 5, 3, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 10, 5, 3, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 10, 5, 3, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RX_IF_READ_G(r, g, idx)                                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 10, 0, 5, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RX_IF_WRITE_G(v, g, idx)                                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 10, 0, 5, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RX_IF_READ(r, p)                                           FIELD_MREAD_8((uint8_t *)p + 10, 0, 5, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RX_IF_WRITE(v, p)                                          FIELD_MWRITE_8((uint8_t *)p + 10, 0, 5, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 11, 7, 1, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 11, 7, 1, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 11, 7, 1, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 11, 7, 1, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 11, 0, 7, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 11, 0, 7, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 11, 0, 7, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 11, 0, 7, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 12, 4, 3, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 12, 4, 3, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 12, 4, 3, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 12, 4, 3, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 13, 6, 2, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 13, 6, 2, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_READ(r, p)                                        FIELD_MREAD_8((uint8_t *)p + 13, 6, 2, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_WRITE(v, p)                                       FIELD_MWRITE_8((uint8_t *)p + 13, 6, 2, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 13, 0, 6, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 13, 0, 6, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 13, 0, 6, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 13, 0, 6, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 14, 0, 10, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 14, 0, 10, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_READ(r, p)                                         FIELD_MREAD_16((uint8_t *)p + 14, 0, 10, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_WRITE(v, p)                                        FIELD_MWRITE_16((uint8_t *)p + 14, 0, 10, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 16, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 16, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_READ(r, p)                             MREAD_32((uint8_t *)p + 16, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 16, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IP_READ_G(r, g, idx)                                   GROUP_MREAD_32(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 20, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IP_WRITE_G(v, g, idx)                                  GROUP_MWRITE_32(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 20, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IP_READ(r, p)                                          MREAD_32((uint8_t *)p + 20, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IP_WRITE(v, p)                                         MWRITE_32((uint8_t *)p + 20, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_READ_G(r, g, idx, i)                         GROUP_MREAD_I_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 24, i, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_WRITE_G(v, g, idx, i)                        GROUP_MWRITE_I_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 24, i, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_READ(r, p, i)                                MREAD_I_8((uint8_t *)p + 24, i, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_WRITE(v, p, i)                               MWRITE_I_8((uint8_t *)p + 24, i, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_READ_G(r, g, idx, i)                         GROUP_MREAD_I_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 40, i, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_WRITE_G(v, g, idx, i)                        GROUP_MWRITE_I_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 40, i, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_READ(r, p, i)                                MREAD_I_8((uint8_t *)p + 40, i, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_WRITE(v, p, i)                               MWRITE_I_8((uint8_t *)p + 40, i, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_READ_G(r, g, idx, i)                                GROUP_MREAD_I_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 56, i, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_WRITE_G(v, g, idx, i)                               GROUP_MWRITE_I_8(g, idx*sizeof(RDD_IPTV_DDR_CONTEXT_ENTRY_DTS) + 56, i, v)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_READ(r, p, i)                                       MREAD_I_8((uint8_t *)p + 56, i, r)
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_WRITE(v, p, i)                                      MWRITE_I_8((uint8_t *)p + 56, i, v)
/* <<<RDD_IPTV_DDR_CONTEXT_ENTRY_DTS */


#define RDD_IPTV_DDR_CONTEXT_TABLE_SIZE     1024
typedef struct
{
	RDD_IPTV_DDR_CONTEXT_ENTRY_DTS	entry[ RDD_IPTV_DDR_CONTEXT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_DDR_CONTEXT_TABLE_DTS;

/* <<<IPTV_DDR_CONTEXT_TABLE */


/* >>>WLAN_MCAST_DHD_LIST_TABLE */

/* >>>RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS */
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_NUMBER	64

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	dhd_station[RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_NUMBER];
#else
	uint8_t	dhd_station[RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS;

typedef RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS * aligned_RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[16];
    uint64_t dword_val64[8];
    RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS fields;
} RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS_NEW;
typedef RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS_NEW * aligned_RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS_NEW ALIGNMENT8;

#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS), i, r)
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS), i, v)
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_READ(r, p, i)              MREAD_I_8((uint8_t *)p, i, r)
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p, i, v)
/* <<<RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS */


#define RDD_WLAN_MCAST_DHD_LIST_TABLE_SIZE     64
typedef struct
{
	RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DTS	entry[ RDD_WLAN_MCAST_DHD_LIST_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_DHD_LIST_TABLE_DTS;

/* <<<WLAN_MCAST_DHD_LIST_TABLE */


/* >>>WLAN_MCAST_DHD_LIST_FORMAT_TABLE */

/* >>>RDD_WLAN_MCAST_DHD_LIST_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	valid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	index     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint8_t	index     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	valid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_DHD_LIST_ENTRY_DTS;

typedef RDD_WLAN_MCAST_DHD_LIST_ENTRY_DTS * aligned_RDD_WLAN_MCAST_DHD_LIST_ENTRY_DTS ALIGNMENT8;

#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_VALID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_LIST_ENTRY_DTS), 7, 1, r)
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_VALID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_LIST_ENTRY_DTS), 7, 1, v)
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_VALID_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_VALID_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_INDEX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_LIST_ENTRY_DTS), 0, 7, r)
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_INDEX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_LIST_ENTRY_DTS), 0, 7, v)
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_INDEX_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 0, 7, r)
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_INDEX_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 0, 7, v)
/* <<<RDD_WLAN_MCAST_DHD_LIST_ENTRY_DTS */

typedef struct
{
	RDD_WLAN_MCAST_DHD_LIST_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_DHD_LIST_FORMAT_TABLE_DTS;

/* <<<WLAN_MCAST_DHD_LIST_FORMAT_TABLE */

/* PSRAM */
/* CORE_0 */

/* >>>BASIC_RATE_LIMITER_TABLE_DS */

/* >>>RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	rl_type       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2     	:21	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	block_type    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	block_index   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	current_budget	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	alloc_mantissa	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	alloc_exponent	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	limit_mantissa	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	limit_exponent	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	block_index   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	block_type    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2     	:21	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rl_type       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	current_budget	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	limit_exponent	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	limit_mantissa	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	alloc_exponent	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	alloc_mantissa	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS;

typedef RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS * aligned_RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS fields;
} RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS_NEW;
typedef RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS_NEW * aligned_RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_RL_TYPE_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_RL_TYPE_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_RL_TYPE_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_RL_TYPE_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 2, 0, 2, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 2, 0, 2, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 2, 0, 2, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 2, 0, 2, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_READ_G(r, g, idx)             GROUP_MREAD_8(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 3, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_WRITE_G(v, g, idx)            GROUP_MWRITE_8(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 3, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_READ(r, p)                    MREAD_8((uint8_t *)p + 3, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_WRITE(v, p)                   MWRITE_8((uint8_t *)p + 3, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 4, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 4, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 8, 2, 14, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 8, 2, 14, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 8, 2, 14, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 8, 2, 14, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 9, 0, 2, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 9, 0, 2, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 9, 0, 2, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 9, 0, 2, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 10, 2, 14, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 10, 2, 14, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 10, 2, 14, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 10, 2, 14, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 11, 0, 2, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS) + 11, 0, 2, v)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 11, 0, 2, r)
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 11, 0, 2, v)
/* <<<RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS */


#define RDD_BASIC_RATE_LIMITER_TABLE_DS_SIZE     128
typedef struct
{
	RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS	entry[ RDD_BASIC_RATE_LIMITER_TABLE_DS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BASIC_RATE_LIMITER_TABLE_DS_DTS;

extern uint32_t RDD_BASIC_RATE_LIMITER_TABLE_DS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BASIC_RATE_LIMITER_TABLE_DS_PTR(core_id)	( RDD_BASIC_RATE_LIMITER_TABLE_DS_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BASIC_RATE_LIMITER_TABLE_DS_ADDRESS_ARR[core_id] ))

/* <<<BASIC_RATE_LIMITER_TABLE_DS */


/* >>>SERVICE_QUEUES_PD_FIFO_TABLE */

/* >>>RDD_PROCESSING_TX_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	serial_num    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_serial_num    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_serial_num    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_serial_num    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_serial_num    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	mcst_bcst_union	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ingress_port  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	union3        	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cong_state              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	ingress_cong            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	reserved1_lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	bn1_first               	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	mcst_packet             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	bcst_packet             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	_ingress_cong           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	reserved2_lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	source_port             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	abs3                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	stream_id               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	reserved3_lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lag_port                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	lan_vport               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	reserved3_union3        	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_mcst_bcst_union	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_vport                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	flow_id                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	reserved4_union3        	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sop                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	bn0_first               	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs1                    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	abs0                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	serial_num    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_serial_num    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_serial_num    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_serial_num    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_serial_num    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	union3        	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	ingress_port  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	mcst_bcst_union	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	bn1_first               	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
			uint32_t	flow                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	reserved1_lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cong_state              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	ingress_cong            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	reserved1_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	abs3                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
			uint32_t	source_port             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	reserved2_lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	mcst_packet             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	bcst_packet             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	_ingress_cong           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	reserved2_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_union3        	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lag_port                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	lan_vport               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	reserved3_lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	stream_id               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcst_bcst_union union */
			uint32_t	reserved3_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_union3        	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_vport                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	flow_id                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	reserved4_lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_mcst_bcst_union	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	bn0_first               	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
			uint32_t	sop                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	reserved1_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	abs0                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
			uint32_t	abs1                    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	reserved2_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PROCESSING_TX_DESCRIPTOR_DTS;

typedef RDD_PROCESSING_TX_DESCRIPTOR_DTS * aligned_RDD_PROCESSING_TX_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_PROCESSING_TX_DESCRIPTOR_DTS fields;
} RDD_PROCESSING_TX_DESCRIPTOR_DTS_NEW;
typedef RDD_PROCESSING_TX_DESCRIPTOR_DTS_NEW * aligned_RDD_PROCESSING_TX_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_L_READ( wv )                        FIELD_GET( wv, 31, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_L_WRITE( v, wv )                    FIELD_SET( v, 31, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 6, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 6, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_L_READ( wv )                     FIELD_GET( wv, 30, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_L_WRITE( v, wv )                 FIELD_SET( v, 30, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 5, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 5, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_L_READ( wv )                     FIELD_GET( wv, 29, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_L_WRITE( v, wv )                 FIELD_SET( v, 29, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 4, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 4, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_L_READ( wv )                      FIELD_GET( wv, 28, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_L_WRITE( v, wv )                  FIELD_SET( v, 28, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 3, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 3, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 3, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 3, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_L_READ( wv )                    FIELD_GET( wv, 27, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_L_WRITE( v, wv )                FIELD_SET( v, 27, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 2, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 2, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p, 2, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p, 2, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_L_READ( wv )                        FIELD_GET( wv, 26, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_L_WRITE( v, wv )                    FIELD_SET( v, 26, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 1, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 1, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p, 1, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p, 1, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_L_READ( wv )                   FIELD_GET( wv, 25, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_L_WRITE( v, wv )               FIELD_SET( v, 25, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 0, 9, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS), 0, 9, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p, 0, 9, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p, 0, 9, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_L_READ( wv )               FIELD_GET( wv, 16, 9 )
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_L_WRITE( v, wv )           FIELD_SET( v, 16, 9, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 2, 7, 9, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 2, 7, 9, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                  FIELD_MREAD_16((uint8_t *)p + 2, 7, 9, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)p + 2, 7, 9, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_L_READ( wv )                FIELD_GET( wv, 7, 9 )
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_L_WRITE( v, wv )            FIELD_SET( v, 7, 9, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 3, 6, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 3, 6, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 3, 6, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 3, 6, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_L_READ( wv )                    FIELD_GET( wv, 6, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_L_WRITE( v, wv )                FIELD_SET( v, 6, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 3, 5, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 3, 5, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 3, 5, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 3, 5, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_L_READ( wv )                     FIELD_GET( wv, 5, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_L_WRITE( v, wv )                 FIELD_SET( v, 5, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 3, 0, 5, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 3, 0, 5, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 3, 0, 5, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 3, 0, 5, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_L_READ( wv )                           FIELD_GET( wv, 0, 5 )
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_L_WRITE( v, wv )                       FIELD_SET( v, 0, 5, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_READ_G(r, g, idx)              GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 4, 6, 10, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 4, 6, 10, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_READ(r, p)                     FIELD_MREAD_16((uint8_t *)p + 4, 6, 10, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_WRITE(v, p)                    FIELD_MWRITE_16((uint8_t *)p + 4, 6, 10, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_L_READ( wv )                   FIELD_GET( wv, 22, 10 )
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_L_WRITE( v, wv )               FIELD_SET( v, 22, 10, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 5, 5, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 5, 5, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 5, 5, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 5, 5, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_L_READ( wv )                     FIELD_GET( wv, 21, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_L_WRITE( v, wv )                 FIELD_SET( v, 21, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 4, 14, 7, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 4, 14, 7, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_READ(r, p)                         FIELD_MREAD_32((uint8_t *)p + 4, 14, 7, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)p + 4, 14, 7, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_L_READ( wv )                       FIELD_GET( wv, 14, 7 )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_L_WRITE( v, wv )                   FIELD_SET( v, 14, 7, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 6, 0, 14, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 6, 0, 14, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                  FIELD_MREAD_16((uint8_t *)p + 6, 0, 14, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)p + 6, 0, 14, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_L_READ( wv )                FIELD_GET( wv, 0, 14 )
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_L_WRITE( v, wv )            FIELD_SET( v, 0, 14, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 7, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 7, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p + 8, 7, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p + 8, 7, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_L_READ( wv )                         FIELD_GET( wv, 31, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_L_WRITE( v, wv )                     FIELD_SET( v, 31, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 6, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 6, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 8, 6, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 8, 6, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_L_READ( wv )                 FIELD_GET( wv, 30, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_L_WRITE( v, wv )             FIELD_SET( v, 30, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_BCST_UNION_READ_G(r, g, idx)         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 3, 3, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_BCST_UNION_WRITE_G(v, g, idx)        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 3, 3, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_BCST_UNION_READ(r, p)                FIELD_MREAD_8((uint8_t *)p + 8, 3, 3, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_BCST_UNION_WRITE(v, p)               FIELD_MWRITE_8((uint8_t *)p + 8, 3, 3, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_BCST_UNION_L_READ( wv )              FIELD_GET( wv, 27, 3 )
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_BCST_UNION_L_WRITE( v, wv )          FIELD_SET( v, 27, 3, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 4, 2, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 4, 2, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 8, 4, 2, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 8, 4, 2, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_L_READ( wv )                   FIELD_GET( wv, 28, 2 )
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_L_WRITE( v, wv )               FIELD_SET( v, 28, 2, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 3, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 3, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 8, 3, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 8, 3, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_L_READ( wv )                 FIELD_GET( wv, 27, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_L_WRITE( v, wv )             FIELD_SET( v, 27, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_PACKET_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 5, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_PACKET_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 5, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_PACKET_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 8, 5, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_PACKET_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 8, 5, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_PACKET_L_READ( wv )                  FIELD_GET( wv, 29, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_MCST_PACKET_L_WRITE( v, wv )              FIELD_SET( v, 29, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_BCST_PACKET_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 4, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_BCST_PACKET_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 4, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_BCST_PACKET_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 8, 4, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_BCST_PACKET_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 8, 4, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_BCST_PACKET_L_READ( wv )                  FIELD_GET( wv, 28, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_BCST_PACKET_L_WRITE( v, wv )              FIELD_SET( v, 28, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR__INGRESS_CONG_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 3, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR__INGRESS_CONG_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 3, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR__INGRESS_CONG_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 8, 3, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR__INGRESS_CONG_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 8, 3, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR__INGRESS_CONG_L_READ( wv )                FIELD_GET( wv, 27, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR__INGRESS_CONG_L_WRITE( v, wv )            FIELD_SET( v, 27, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 3, 3, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 3, 3, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 8, 3, 3, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 8, 3, 3, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_L_READ( wv )                    FIELD_GET( wv, 27, 3 )
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_L_WRITE( v, wv )                FIELD_SET( v, 27, 3, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 2, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 2, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 8, 2, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 8, 2, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_L_READ( wv )                          FIELD_GET( wv, 26, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_L_WRITE( v, wv )                      FIELD_SET( v, 26, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_READ(r, p)                   FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_L_READ( wv )                 FIELD_GET( wv, 18, 8 )
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_L_WRITE( v, wv )             FIELD_SET( v, 18, 8, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_READ(r, p)                           FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_L_READ( wv )                         FIELD_GET( wv, 18, 8 )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_L_WRITE( v, wv )                     FIELD_SET( v, 18, 8, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_READ(r, p)                    FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_L_READ( wv )                  FIELD_GET( wv, 18, 8 )
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_L_WRITE( v, wv )              FIELD_SET( v, 18, 8, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 0, 2, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 0, 2, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 8, 0, 2, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 8, 0, 2, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_L_READ( wv )                     FIELD_GET( wv, 24, 2 )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_L_WRITE( v, wv )                 FIELD_SET( v, 24, 2, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 9, 2, 6, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 9, 2, 6, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 9, 2, 6, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 9, 2, 6, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_L_READ( wv )                    FIELD_GET( wv, 18, 6 )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_L_WRITE( v, wv )                FIELD_SET( v, 18, 6, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 1, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 1, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 8, 1, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 8, 1, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_L_READ( wv )                     FIELD_GET( wv, 25, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_L_WRITE( v, wv )                 FIELD_SET( v, 25, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 2, 7, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 2, 7, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_READ(r, p)                        FIELD_MREAD_16((uint8_t *)p + 8, 2, 7, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)p + 8, 2, 7, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_L_READ( wv )                      FIELD_GET( wv, 18, 7 )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_L_WRITE( v, wv )                  FIELD_SET( v, 18, 7, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_READ(r, p)                         FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_L_READ( wv )                       FIELD_GET( wv, 0, 18 )
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_L_WRITE( v, wv )                   FIELD_SET( v, 0, 18, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_READ_G(r, g, idx)               GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_READ(r, p)                      FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_WRITE(v, p)                     FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_L_READ( wv )                    FIELD_GET( wv, 0, 18 )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_L_WRITE( v, wv )                FIELD_SET( v, 0, 18, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS3_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS3_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 8, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS3_READ(r, p)                           FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS3_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS3_L_READ( wv )                         FIELD_GET( wv, 0, 18 )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS3_L_WRITE( v, wv )                     FIELD_SET( v, 0, 18, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 7, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 7, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 12, 7, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 12, 7, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_L_READ( wv )                       FIELD_GET( wv, 31, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_L_WRITE( v, wv )                   FIELD_SET( v, 31, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 6, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 6, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 12, 6, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 12, 6, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_L_READ( wv )                 FIELD_GET( wv, 30, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_L_WRITE( v, wv )             FIELD_SET( v, 30, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 5, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 5, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 12, 5, 1, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 12, 5, 1, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_L_READ( wv )                          FIELD_GET( wv, 29, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_L_WRITE( v, wv )                      FIELD_SET( v, 29, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_READ_G(r, g, idx) GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WRITE_G(v, g, idx)GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_READ(r, p)        FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WRITE(v, p)       FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_L_READ( wv )      FIELD_GET( wv, 18, 11 )
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_L_WRITE( v, wv )  FIELD_SET( v, 18, 11, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_READ(r, p)                            FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_L_READ( wv )                          FIELD_GET( wv, 18, 11 )
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_L_WRITE( v, wv )                      FIELD_SET( v, 18, 11, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS1_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS1_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS1_READ(r, p)                           FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS1_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS1_L_READ( wv )                         FIELD_GET( wv, 18, 11 )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS1_L_WRITE( v, wv )                     FIELD_SET( v, 18, 11, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_READ_G(r, g, idx)GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WRITE_G(v, g, idx)GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_READ(r, p)       FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WRITE(v, p)      FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_L_READ( wv )     FIELD_GET( wv, 0, 18 )
#define RDD_PROCESSING_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_L_WRITE( v, wv ) FIELD_SET( v, 0, 18, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)               GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_READ(r, p)                      FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                     FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_L_READ( wv )                    FIELD_GET( wv, 0, 18 )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_L_WRITE( v, wv )                FIELD_SET( v, 0, 18, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS0_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS0_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_TX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS0_READ(r, p)                           FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS0_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS0_L_READ( wv )                         FIELD_GET( wv, 0, 18 )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS0_L_WRITE( v, wv )                     FIELD_SET( v, 0, 18, wv )
/* <<<RDD_PROCESSING_TX_DESCRIPTOR_DTS */


#define RDD_SERVICE_QUEUES_PD_FIFO_TABLE_SIZE     64
typedef struct
{
	RDD_PROCESSING_TX_DESCRIPTOR_DTS	entry[ RDD_SERVICE_QUEUES_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SERVICE_QUEUES_PD_FIFO_TABLE_DTS;

extern uint32_t RDD_SERVICE_QUEUES_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_PD_FIFO_TABLE_PTR(core_id)	( RDD_SERVICE_QUEUES_PD_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_PD_FIFO_TABLE */


/* >>>COMPLEX_SCHEDULER_TABLE */

/* >>>RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS */
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RESERVED3_NUMBER	3
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_NUMBER	32

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reserved0                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_positive_budget                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bbh_queue                                                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rate_limiter_index                                                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dwrr_offset_pir                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dwrr_offset_sir                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	last_served_block_pir                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	last_served_block_sir                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	status_bit_vector                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	slot_budget_bit_vector_0                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	slot_budget_bit_vector_1                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_scheduler_slot                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_scheduler_basic                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ovl_rl_en                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rate_limit_enable                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	parent_scheduler_exists                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	parent_scheduler_index                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	parent_scheduler_slot_index                                         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2                                                           	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	deficit_counter                                                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	quantum_number                                                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved3[RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RESERVED3_NUMBER];
	uint8_t	block_index[RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_NUMBER];
#else
	uint32_t	last_served_block_sir                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	last_served_block_pir                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dwrr_offset_sir                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dwrr_offset_pir                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rate_limiter_index                                                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bbh_queue                                                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_positive_budget                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	status_bit_vector                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	slot_budget_bit_vector_0                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	slot_budget_bit_vector_1                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_scheduler_slot                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_scheduler_basic                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	deficit_counter                                                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2                                                           	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	parent_scheduler_slot_index                                         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	parent_scheduler_index                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	parent_scheduler_exists                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rate_limit_enable                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ovl_rl_en                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved3[RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RESERVED3_NUMBER];
	uint32_t	quantum_number                                                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	block_index[RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS;

typedef RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS * aligned_RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[16];
    uint64_t dword_val64[8];
    RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS fields;
} RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS_NEW;
typedef RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS_NEW * aligned_RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS), 6, 1, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS), 6, 1, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BBH_QUEUE_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS), 7, 6, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BBH_QUEUE_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS), 7, 6, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BBH_QUEUE_READ(r, p)                                   FIELD_MREAD_16((uint8_t *)p, 7, 6, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BBH_QUEUE_WRITE(v, p)                                  FIELD_MWRITE_16((uint8_t *)p, 7, 6, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 1, 0, 7, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 1, 0, 7, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 1, 0, 7, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 1, 0, 7, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_PIR_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 2, 5, 3, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_PIR_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 2, 5, 3, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_PIR_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 2, 5, 3, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_PIR_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 2, 5, 3, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_SIR_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 2, 2, 3, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_SIR_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 2, 2, 3, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_SIR_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 2, 2, 3, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_SIR_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 2, 2, 3, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_PIR_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 2, 5, 5, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_PIR_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 2, 5, 5, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_PIR_READ(r, p)                       FIELD_MREAD_16((uint8_t *)p + 2, 5, 5, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_PIR_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)p + 2, 5, 5, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_SIR_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 3, 0, 5, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_SIR_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 3, 0, 5, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_SIR_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 3, 0, 5, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_SIR_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 3, 0, 5, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_READ_G(r, g, idx)                    GROUP_MREAD_32(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 4, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_WRITE_G(v, g, idx)                   GROUP_MWRITE_32(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 4, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_READ(r, p)                           MREAD_32((uint8_t *)p + 4, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_WRITE(v, p)                          MWRITE_32((uint8_t *)p + 4, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_0_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 8, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_0_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 8, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_0_READ(r, p)                    MREAD_32((uint8_t *)p + 8, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_0_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 8, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_1_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 12, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_1_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 12, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_1_READ(r, p)                    MREAD_32((uint8_t *)p + 12, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_1_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 12, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_SLOT_READ_G(r, g, idx)                    GROUP_MREAD_32(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 16, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_SLOT_WRITE_G(v, g, idx)                   GROUP_MWRITE_32(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 16, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_SLOT_READ(r, p)                           MREAD_32((uint8_t *)p + 16, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_SLOT_WRITE(v, p)                          MWRITE_32((uint8_t *)p + 16, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_BASIC_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 20, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_BASIC_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 20, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_BASIC_READ(r, p)                          MREAD_32((uint8_t *)p + 20, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_BASIC_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 20, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_OVL_RL_EN_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 24, 7, 1, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_OVL_RL_EN_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 24, 7, 1, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_OVL_RL_EN_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p + 24, 7, 1, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_OVL_RL_EN_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p + 24, 7, 1, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 24, 6, 1, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 24, 6, 1, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p + 24, 6, 1, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p + 24, 6, 1, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_EXISTS_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 24, 5, 1, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_EXISTS_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 24, 5, 1, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_EXISTS_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 24, 5, 1, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_EXISTS_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 24, 5, 1, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_INDEX_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 24, 1, 4, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_INDEX_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 24, 1, 4, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_INDEX_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 24, 1, 4, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_INDEX_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 24, 1, 4, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_SLOT_INDEX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 24, 4, 5, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_SLOT_INDEX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 24, 4, 5, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_SLOT_INDEX_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 24, 4, 5, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_SLOT_INDEX_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 24, 4, 5, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_READ_G(r, g, idx)                      GROUP_MREAD_16(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 26, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_WRITE_G(v, g, idx)                     GROUP_MWRITE_16(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 26, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_READ(r, p)                             MREAD_16((uint8_t *)p + 26, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_WRITE(v, p)                            MWRITE_16((uint8_t *)p + 26, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_READ_G(r, g, idx)                       GROUP_MREAD_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 28, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_WRITE_G(v, g, idx)                      GROUP_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 28, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_READ(r, p)                              MREAD_8((uint8_t *)p + 28, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_WRITE(v, p)                             MWRITE_8((uint8_t *)p + 28, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_READ_G(r, g, idx, i)                       GROUP_MREAD_I_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 32, i, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_WRITE_G(v, g, idx, i)                      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS) + 32, i, v)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_READ(r, p, i)                              MREAD_I_8((uint8_t *)p + 32, i, r)
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_WRITE(v, p, i)                             MWRITE_I_8((uint8_t *)p + 32, i, v)
/* <<<RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS */


#define RDD_COMPLEX_SCHEDULER_TABLE_SIZE     16
typedef struct
{
	RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS	entry[ RDD_COMPLEX_SCHEDULER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_COMPLEX_SCHEDULER_TABLE_DTS;

extern uint32_t RDD_COMPLEX_SCHEDULER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_COMPLEX_SCHEDULER_TABLE_PTR(core_id)	( RDD_COMPLEX_SCHEDULER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_COMPLEX_SCHEDULER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<COMPLEX_SCHEDULER_TABLE */


/* >>>DS_TM_PD_FIFO_TABLE */

#define RDD_DS_TM_PD_FIFO_TABLE_SIZE     96
typedef struct
{
	RDD_PROCESSING_TX_DESCRIPTOR_DTS	entry[ RDD_DS_TM_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_PD_FIFO_TABLE_DTS;

extern uint32_t RDD_DS_TM_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_PD_FIFO_TABLE_PTR(core_id)	( RDD_DS_TM_PD_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_PD_FIFO_TABLE */


/* >>>BASIC_SCHEDULER_TABLE_DS */

/* >>>RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS */
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_NUMBER	8

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	rate_limit_enable                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	complex_scheduler_exists                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dwrr_offset                                                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	parent_index_2                                                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	slot_budget_bit_vector                                           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	parent_index_1                                                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	last_served_queue                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	status_bit_vector                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_rate_limit_enable                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_complex_scheduler_exists                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_dwrr_offset                                                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	complex_scheduler_index                                                    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
			uint32_t	reserved1_slot_budget_bit_vector                                           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	complex_scheduler_slot_index                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
			uint32_t	reserved1_last_served_queue                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_status_bit_vector                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_rate_limit_enable                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_complex_scheduler_exists                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_dwrr_offset                                                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bbh_queue_msb                                                              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
			uint32_t	ovl_rl_en                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
			uint32_t	reserved1                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
			uint32_t	reserved2_slot_budget_bit_vector                                           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_positive_budget                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
			uint32_t	bbh_queue_lsb                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
			uint32_t	reserved2_last_served_queue                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_status_bit_vector                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	rate_limiter_index                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	quantum_number                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	deficit_counter                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_rate_limiter_index                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_quantum_number                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_deficit_counter                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_rate_limiter_index                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_quantum_number                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_deficit_counter                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	queue_index[RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_queue_index[RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_queue_index[RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_NUMBER];
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	status_bit_vector                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	last_served_queue                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	parent_index_1                                                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	slot_budget_bit_vector                                           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	parent_index_2                                                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	dwrr_offset                                                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	complex_scheduler_exists                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	rate_limit_enable                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_status_bit_vector                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_last_served_queue                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	complex_scheduler_slot_index                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
			uint32_t	reserved1_slot_budget_bit_vector                                           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	complex_scheduler_index                                                    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
			uint32_t	reserved1_dwrr_offset                                                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_complex_scheduler_exists                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_rate_limit_enable                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_status_bit_vector                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_last_served_queue                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_positive_budget                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
			uint32_t	bbh_queue_lsb                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
			uint32_t	reserved2_slot_budget_bit_vector                                           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bbh_queue_msb                                                              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
			uint32_t	ovl_rl_en                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
			uint32_t	reserved1                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
			uint32_t	reserved2_dwrr_offset                                                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_complex_scheduler_exists                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_rate_limit_enable                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	deficit_counter                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	quantum_number                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	rate_limiter_index                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_deficit_counter                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_quantum_number                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_rate_limiter_index                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_deficit_counter                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_quantum_number                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_rate_limiter_index                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	queue_index[RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_queue_index[RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_queue_index[RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_NUMBER];
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS;

typedef RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS * aligned_RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS fields;
} RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS_NEW;
typedef RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS_NEW * aligned_RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_EXISTS_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 6, 1, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_EXISTS_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 6, 1, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_EXISTS_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_EXISTS_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 4, 2, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 4, 2, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p, 4, 2, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p, 4, 2, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_2_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 0, 4, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_2_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 0, 4, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_2_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p, 0, 4, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_2_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p, 0, 4, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_INDEX_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 0, 4, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_INDEX_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 0, 4, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_INDEX_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 0, 4, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_INDEX_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 0, 4, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_MSB_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 2, 2, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_MSB_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 2, 2, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_MSB_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p, 2, 2, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_MSB_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p, 2, 2, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_OVL_RL_EN_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 1, 1, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_OVL_RL_EN_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS), 1, 1, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_OVL_RL_EN_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p, 1, 1, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_OVL_RL_EN_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p, 1, 1, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_READ_G(r, g, idx)                GROUP_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 1, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_WRITE_G(v, g, idx)               GROUP_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 1, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_READ(r, p)                       MREAD_8((uint8_t *)p + 1, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_WRITE(v, p)                      MWRITE_8((uint8_t *)p + 1, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_1_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 2, 3, 5, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_1_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 2, 3, 5, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_1_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 2, 3, 5, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_1_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 2, 3, 5, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_SLOT_INDEX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 2, 3, 5, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_SLOT_INDEX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 2, 3, 5, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_SLOT_INDEX_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 2, 3, 5, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_SLOT_INDEX_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 2, 3, 5, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 2, 7, 1, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 2, 7, 1, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p + 2, 7, 1, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p + 2, 7, 1, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_LSB_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 2, 3, 4, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_LSB_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 2, 3, 4, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_LSB_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 2, 3, 4, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_LSB_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 2, 3, 4, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_LAST_SERVED_QUEUE_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 2, 0, 3, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_LAST_SERVED_QUEUE_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 2, 0, 3, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_LAST_SERVED_QUEUE_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 2, 0, 3, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_LAST_SERVED_QUEUE_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 2, 0, 3, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_READ_G(r, g, idx)                     GROUP_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 3, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_WRITE_G(v, g, idx)                    GROUP_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 3, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_READ(r, p)                            MREAD_8((uint8_t *)p + 3, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_WRITE(v, p)                           MWRITE_8((uint8_t *)p + 3, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_READ_G(r, g, idx)                    GROUP_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 4, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE_G(v, g, idx)                   GROUP_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 4, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_READ(r, p)                           MREAD_8((uint8_t *)p + 4, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE(v, p)                          MWRITE_8((uint8_t *)p + 4, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_READ_G(r, g, idx)                        GROUP_MREAD_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 5, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_WRITE_G(v, g, idx)                       GROUP_MWRITE_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 5, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_READ(r, p)                               MREAD_8((uint8_t *)p + 5, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_WRITE(v, p)                              MWRITE_8((uint8_t *)p + 5, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_READ_G(r, g, idx)                       GROUP_MREAD_16(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 6, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_WRITE_G(v, g, idx)                      GROUP_MWRITE_16(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 6, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_READ(r, p)                              MREAD_16((uint8_t *)p + 6, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_WRITE(v, p)                             MWRITE_16((uint8_t *)p + 6, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_READ_G(r, g, idx, i)                        GROUP_MREAD_I_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 8, i, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_WRITE_G(v, g, idx, i)                       GROUP_MWRITE_I_8(g, idx*sizeof(RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS) + 8, i, v)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_READ(r, p, i)                               MREAD_I_8((uint8_t *)p + 8, i, r)
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_WRITE(v, p, i)                              MWRITE_I_8((uint8_t *)p + 8, i, v)
/* <<<RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS */


#define RDD_BASIC_SCHEDULER_TABLE_DS_SIZE     32
typedef struct
{
	RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS	entry[ RDD_BASIC_SCHEDULER_TABLE_DS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BASIC_SCHEDULER_TABLE_DS_DTS;

extern uint32_t RDD_BASIC_SCHEDULER_TABLE_DS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BASIC_SCHEDULER_TABLE_DS_PTR(core_id)	( RDD_BASIC_SCHEDULER_TABLE_DS_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BASIC_SCHEDULER_TABLE_DS_ADDRESS_ARR[core_id] ))

/* <<<BASIC_SCHEDULER_TABLE_DS */


/* >>>DS_TM_SCHEDULING_QUEUE_TABLE */

/* >>>RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	rate_limit_enable 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	block_type        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	prefetch_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	enable            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bbh_queue_index   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	scheduler_index   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	queue_bit_mask    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rate_limiter_index	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	quantum_number    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	deficit_counter   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	queue_bit_mask    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	scheduler_index   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bbh_queue_index   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	enable            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	prefetch_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	block_type        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rate_limit_enable 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	deficit_counter   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	quantum_number    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rate_limiter_index	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS;

typedef RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS * aligned_RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS fields;
} RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS_NEW;
typedef RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS_NEW * aligned_RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMIT_ENABLE_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMIT_ENABLE_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BLOCK_TYPE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS), 6, 1, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BLOCK_TYPE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS), 6, 1, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BLOCK_TYPE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BLOCK_TYPE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_PREFETCH_PD_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS), 5, 1, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_PREFETCH_PD_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS), 5, 1, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_PREFETCH_PD_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_PREFETCH_PD_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_ENABLE_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS), 4, 1, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_ENABLE_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS), 4, 1, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_ENABLE_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_ENABLE_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BBH_QUEUE_INDEX_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 1, 0, 6, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BBH_QUEUE_INDEX_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 1, 0, 6, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BBH_QUEUE_INDEX_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 1, 0, 6, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BBH_QUEUE_INDEX_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 1, 0, 6, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_READ_G(r, g, idx)             GROUP_MREAD_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 2, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_WRITE_G(v, g, idx)            GROUP_MWRITE_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 2, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_READ(r, p)                    MREAD_8((uint8_t *)p + 2, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_WRITE(v, p)                   MWRITE_8((uint8_t *)p + 2, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUEUE_BIT_MASK_READ_G(r, g, idx)              GROUP_MREAD_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 3, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUEUE_BIT_MASK_WRITE_G(v, g, idx)             GROUP_MWRITE_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 3, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUEUE_BIT_MASK_READ(r, p)                     MREAD_8((uint8_t *)p + 3, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUEUE_BIT_MASK_WRITE(v, p)                    MWRITE_8((uint8_t *)p + 3, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMITER_INDEX_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 4, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 4, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMITER_INDEX_READ(r, p)                 MREAD_8((uint8_t *)p + 4, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE(v, p)                MWRITE_8((uint8_t *)p + 4, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUANTUM_NUMBER_READ_G(r, g, idx)              GROUP_MREAD_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 5, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUANTUM_NUMBER_WRITE_G(v, g, idx)             GROUP_MWRITE_8(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 5, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUANTUM_NUMBER_READ(r, p)                     MREAD_8((uint8_t *)p + 5, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUANTUM_NUMBER_WRITE(v, p)                    MWRITE_8((uint8_t *)p + 5, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_DEFICIT_COUNTER_READ_G(r, g, idx)             GROUP_MREAD_16(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 6, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_DEFICIT_COUNTER_WRITE_G(v, g, idx)            GROUP_MWRITE_16(g, idx*sizeof(RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS) + 6, v)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_DEFICIT_COUNTER_READ(r, p)                    MREAD_16((uint8_t *)p + 6, r)
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_DEFICIT_COUNTER_WRITE(v, p)                   MWRITE_16((uint8_t *)p + 6, v)
/* <<<RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS */


#define RDD_DS_TM_SCHEDULING_QUEUE_TABLE_SIZE     80
typedef struct
{
	RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS	entry[ RDD_DS_TM_SCHEDULING_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_SCHEDULING_QUEUE_TABLE_DTS;

extern uint32_t RDD_DS_TM_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_SCHEDULING_QUEUE_TABLE_PTR(core_id)	( RDD_DS_TM_SCHEDULING_QUEUE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_SCHEDULING_QUEUE_TABLE */


/* >>>DS_TM_TM_FLOW_CNTR_TABLE */

/* >>>RDD_TM_FLOW_CNTR_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	cntr_id   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint8_t	cntr_id   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TM_FLOW_CNTR_ENTRY_DTS;

typedef RDD_TM_FLOW_CNTR_ENTRY_DTS * aligned_RDD_TM_FLOW_CNTR_ENTRY_DTS ALIGNMENT8;

#define RDD_TM_FLOW_CNTR_ENTRY_CNTR_ID_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_TM_FLOW_CNTR_ENTRY_DTS), r)
#define RDD_TM_FLOW_CNTR_ENTRY_CNTR_ID_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_TM_FLOW_CNTR_ENTRY_DTS), v)
#define RDD_TM_FLOW_CNTR_ENTRY_CNTR_ID_READ(r, p)                 MREAD_8((uint8_t *)p, r)
#define RDD_TM_FLOW_CNTR_ENTRY_CNTR_ID_WRITE(v, p)                MWRITE_8((uint8_t *)p, v)
/* <<<RDD_TM_FLOW_CNTR_ENTRY_DTS */


#define RDD_DS_TM_TM_FLOW_CNTR_TABLE_SIZE     64
typedef struct
{
	RDD_TM_FLOW_CNTR_ENTRY_DTS	entry[ RDD_DS_TM_TM_FLOW_CNTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_TM_FLOW_CNTR_TABLE_DTS;

extern uint32_t RDD_DS_TM_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_TM_FLOW_CNTR_TABLE_PTR(core_id)	( RDD_DS_TM_TM_FLOW_CNTR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_TM_FLOW_CNTR_TABLE */


/* >>>SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE */
typedef struct
{
	RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE_DTS;

extern uint32_t RDD_SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE_PTR(core_id)	( RDD_SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE */


/* >>>SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE */

#define RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_SIZE     32
typedef struct
{
	RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS	entry[ RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_DTS;

extern uint32_t RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_PTR(core_id)	( RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE */


/* >>>RUNNER_PROFILING_TRACE_BUFFER */

/* >>>RDD_TRACE_EVENT_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	timestamp              	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	event_id               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	trace_event_info       	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_timestamp              	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_event_id               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	incoming_task_num                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	reserved                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	task_pc                          	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_timestamp              	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_event_id               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	incoming_bbhrx_src_addr          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	dma_wr                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	dma_rd                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	dma_wr_reply                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	ramrd                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	parser                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	bbhtx                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	bbhrx_async                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	bbhrx_sync                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	cpu                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	fw_self                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	fw                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	timer                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_timestamp              	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_event_id               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2                        	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	acc_type                         	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	trace_event_info       	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	event_id               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	timestamp              	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	incoming_task_num                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	reserved                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	task_pc                          	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	reserved1_event_id               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_timestamp              	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	incoming_bbhrx_src_addr          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	dma_wr                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	dma_rd                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	dma_wr_reply                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	ramrd                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	parser                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	bbhtx                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	bbhrx_async                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	bbhrx_sync                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	cpu                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	fw_self                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	fw                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	timer                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	reserved2_event_id               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_timestamp              	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved2                        	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	acc_type                         	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
			uint32_t	reserved3_event_id               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_timestamp              	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TRACE_EVENT_DTS;

typedef RDD_TRACE_EVENT_DTS * aligned_RDD_TRACE_EVENT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_TRACE_EVENT_DTS fields;
} RDD_TRACE_EVENT_DTS_NEW;
typedef RDD_TRACE_EVENT_DTS_NEW * aligned_RDD_TRACE_EVENT_DTS_NEW ALIGNMENT8;

#define RDD_TRACE_EVENT_TIMESTAMP_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_TRACE_EVENT_DTS), 4, 12, r)
#define RDD_TRACE_EVENT_TIMESTAMP_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_TRACE_EVENT_DTS), 4, 12, v)
#define RDD_TRACE_EVENT_TIMESTAMP_READ(r, p)                               FIELD_MREAD_16((uint8_t *)p, 4, 12, r)
#define RDD_TRACE_EVENT_TIMESTAMP_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)p, 4, 12, v)
#define RDD_TRACE_EVENT_EVENT_ID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 1, 2, 2, r)
#define RDD_TRACE_EVENT_EVENT_ID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 1, 2, 2, v)
#define RDD_TRACE_EVENT_EVENT_ID_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 1, 2, 2, r)
#define RDD_TRACE_EVENT_EVENT_ID_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 1, 2, 2, v)
#define RDD_TRACE_EVENT_TRACE_EVENT_INFO_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 0, 0, 18, r)
#define RDD_TRACE_EVENT_TRACE_EVENT_INFO_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 0, 0, 18, v)
#define RDD_TRACE_EVENT_TRACE_EVENT_INFO_READ(r, p)                        FIELD_MREAD_32((uint8_t *)p + 0, 0, 18, r)
#define RDD_TRACE_EVENT_TRACE_EVENT_INFO_WRITE(v, p)                       FIELD_MWRITE_32((uint8_t *)p + 0, 0, 18, v)
#define RDD_TRACE_EVENT_INCOMING_TASK_NUM_READ_G(r, g, idx)                GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 0, 14, 4, r)
#define RDD_TRACE_EVENT_INCOMING_TASK_NUM_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 0, 14, 4, v)
#define RDD_TRACE_EVENT_INCOMING_TASK_NUM_READ(r, p)                       FIELD_MREAD_32((uint8_t *)p + 0, 14, 4, r)
#define RDD_TRACE_EVENT_INCOMING_TASK_NUM_WRITE(v, p)                      FIELD_MWRITE_32((uint8_t *)p + 0, 14, 4, v)
#define RDD_TRACE_EVENT_TASK_PC_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 0, 13, r)
#define RDD_TRACE_EVENT_TASK_PC_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 0, 13, v)
#define RDD_TRACE_EVENT_TASK_PC_READ(r, p)                                 FIELD_MREAD_16((uint8_t *)p + 2, 0, 13, r)
#define RDD_TRACE_EVENT_TASK_PC_WRITE(v, p)                                FIELD_MWRITE_16((uint8_t *)p + 2, 0, 13, v)
#define RDD_TRACE_EVENT_INCOMING_BBHRX_SRC_ADDR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 0, 12, 6, r)
#define RDD_TRACE_EVENT_INCOMING_BBHRX_SRC_ADDR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 0, 12, 6, v)
#define RDD_TRACE_EVENT_INCOMING_BBHRX_SRC_ADDR_READ(r, p)                 FIELD_MREAD_32((uint8_t *)p + 0, 12, 6, r)
#define RDD_TRACE_EVENT_INCOMING_BBHRX_SRC_ADDR_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)p + 0, 12, 6, v)
#define RDD_TRACE_EVENT_DMA_WR_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 3, 1, r)
#define RDD_TRACE_EVENT_DMA_WR_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 3, 1, v)
#define RDD_TRACE_EVENT_DMA_WR_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 2, 3, 1, r)
#define RDD_TRACE_EVENT_DMA_WR_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 2, 3, 1, v)
#define RDD_TRACE_EVENT_DMA_RD_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 2, 1, r)
#define RDD_TRACE_EVENT_DMA_RD_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 2, 1, v)
#define RDD_TRACE_EVENT_DMA_RD_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 2, 2, 1, r)
#define RDD_TRACE_EVENT_DMA_RD_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 2, 2, 1, v)
#define RDD_TRACE_EVENT_DMA_WR_REPLY_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 1, 1, r)
#define RDD_TRACE_EVENT_DMA_WR_REPLY_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 1, 1, v)
#define RDD_TRACE_EVENT_DMA_WR_REPLY_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 2, 1, 1, r)
#define RDD_TRACE_EVENT_DMA_WR_REPLY_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 2, 1, 1, v)
#define RDD_TRACE_EVENT_RAMRD_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 0, 1, r)
#define RDD_TRACE_EVENT_RAMRD_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 0, 1, v)
#define RDD_TRACE_EVENT_RAMRD_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p + 2, 0, 1, r)
#define RDD_TRACE_EVENT_RAMRD_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p + 2, 0, 1, v)
#define RDD_TRACE_EVENT_PARSER_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 7, 1, r)
#define RDD_TRACE_EVENT_PARSER_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 7, 1, v)
#define RDD_TRACE_EVENT_PARSER_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 3, 7, 1, r)
#define RDD_TRACE_EVENT_PARSER_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 3, 7, 1, v)
#define RDD_TRACE_EVENT_BBHTX_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 6, 1, r)
#define RDD_TRACE_EVENT_BBHTX_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 6, 1, v)
#define RDD_TRACE_EVENT_BBHTX_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p + 3, 6, 1, r)
#define RDD_TRACE_EVENT_BBHTX_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p + 3, 6, 1, v)
#define RDD_TRACE_EVENT_BBHRX_ASYNC_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 5, 1, r)
#define RDD_TRACE_EVENT_BBHRX_ASYNC_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 5, 1, v)
#define RDD_TRACE_EVENT_BBHRX_ASYNC_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 3, 5, 1, r)
#define RDD_TRACE_EVENT_BBHRX_ASYNC_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 3, 5, 1, v)
#define RDD_TRACE_EVENT_BBHRX_SYNC_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 4, 1, r)
#define RDD_TRACE_EVENT_BBHRX_SYNC_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 4, 1, v)
#define RDD_TRACE_EVENT_BBHRX_SYNC_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 3, 4, 1, r)
#define RDD_TRACE_EVENT_BBHRX_SYNC_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 3, 4, 1, v)
#define RDD_TRACE_EVENT_CPU_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 3, 1, r)
#define RDD_TRACE_EVENT_CPU_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 3, 1, v)
#define RDD_TRACE_EVENT_CPU_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)p + 3, 3, 1, r)
#define RDD_TRACE_EVENT_CPU_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)p + 3, 3, 1, v)
#define RDD_TRACE_EVENT_FW_SELF_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 2, 1, r)
#define RDD_TRACE_EVENT_FW_SELF_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 2, 1, v)
#define RDD_TRACE_EVENT_FW_SELF_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 3, 2, 1, r)
#define RDD_TRACE_EVENT_FW_SELF_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 3, 2, 1, v)
#define RDD_TRACE_EVENT_FW_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 1, 1, r)
#define RDD_TRACE_EVENT_FW_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 1, 1, v)
#define RDD_TRACE_EVENT_FW_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)p + 3, 1, 1, r)
#define RDD_TRACE_EVENT_FW_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)p + 3, 1, 1, v)
#define RDD_TRACE_EVENT_TIMER_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 0, 1, r)
#define RDD_TRACE_EVENT_TIMER_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 3, 0, 1, v)
#define RDD_TRACE_EVENT_TIMER_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p + 3, 0, 1, r)
#define RDD_TRACE_EVENT_TIMER_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p + 3, 0, 1, v)
#define RDD_TRACE_EVENT_ACC_TYPE_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 0, 12, r)
#define RDD_TRACE_EVENT_ACC_TYPE_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_TRACE_EVENT_DTS) + 2, 0, 12, v)
#define RDD_TRACE_EVENT_ACC_TYPE_READ(r, p)                                FIELD_MREAD_16((uint8_t *)p + 2, 0, 12, r)
#define RDD_TRACE_EVENT_ACC_TYPE_WRITE(v, p)                               FIELD_MWRITE_16((uint8_t *)p + 2, 0, 12, v)
/* <<<RDD_TRACE_EVENT_DTS */


#define RDD_RUNNER_PROFILING_TRACE_BUFFER_SIZE     128
typedef struct
{
	RDD_TRACE_EVENT_DTS	entry[ RDD_RUNNER_PROFILING_TRACE_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RUNNER_PROFILING_TRACE_BUFFER_DTS;

extern uint32_t RDD_RUNNER_PROFILING_TRACE_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RUNNER_PROFILING_TRACE_BUFFER_PTR(core_id)	( RDD_RUNNER_PROFILING_TRACE_BUFFER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RUNNER_PROFILING_TRACE_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<RUNNER_PROFILING_TRACE_BUFFER */


/* >>>DBG_DUMP_TABLE */

/* >>>RDD_BYTES_4_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	bits      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	bits      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BYTES_4_DTS;

typedef RDD_BYTES_4_DTS * aligned_RDD_BYTES_4_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_BYTES_4_DTS fields;
} RDD_BYTES_4_DTS_NEW;
typedef RDD_BYTES_4_DTS_NEW * aligned_RDD_BYTES_4_DTS_NEW ALIGNMENT8;

#define RDD_BYTES_4_BITS_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_BYTES_4_DTS), r)
#define RDD_BYTES_4_BITS_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_BYTES_4_DTS), v)
#define RDD_BYTES_4_BITS_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_BYTES_4_BITS_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
/* <<<RDD_BYTES_4_DTS */


#define RDD_DBG_DUMP_TABLE_SIZE     128
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DBG_DUMP_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DBG_DUMP_TABLE_DTS;

extern uint32_t RDD_DBG_DUMP_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DBG_DUMP_TABLE_PTR(core_id)	( RDD_DBG_DUMP_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DBG_DUMP_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DBG_DUMP_TABLE */


/* >>>REPORTING_QUEUE_DESCRIPTOR_TABLE */

/* >>>RDD_REPORTING_QUEUE_DESCRIPTOR_DTS */
#define RDD_REPORTING_QUEUE_DESCRIPTOR_RESERVED_NUMBER	6

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reported_bytes                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reported_overhead                                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	counter_ptr                                                	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved[RDD_REPORTING_QUEUE_DESCRIPTOR_RESERVED_NUMBER];
#else
	uint32_t	reported_bytes                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reported_overhead                                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved[RDD_REPORTING_QUEUE_DESCRIPTOR_RESERVED_NUMBER];
	uint32_t	counter_ptr                                                	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_REPORTING_QUEUE_DESCRIPTOR_DTS;

typedef RDD_REPORTING_QUEUE_DESCRIPTOR_DTS * aligned_RDD_REPORTING_QUEUE_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_REPORTING_QUEUE_DESCRIPTOR_DTS fields;
} RDD_REPORTING_QUEUE_DESCRIPTOR_DTS_NEW;
typedef RDD_REPORTING_QUEUE_DESCRIPTOR_DTS_NEW * aligned_RDD_REPORTING_QUEUE_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_REPORTING_QUEUE_DESCRIPTOR_DTS), r)
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_REPORTING_QUEUE_DESCRIPTOR_DTS), v)
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_READ(r, p)                    MREAD_32((uint8_t *)p, r)
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_WRITE(v, p)                   MWRITE_32((uint8_t *)p, v)
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_REPORTING_QUEUE_DESCRIPTOR_DTS) + 4, r)
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_REPORTING_QUEUE_DESCRIPTOR_DTS) + 4, v)
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
#define RDD_REPORTING_QUEUE_DESCRIPTOR_COUNTER_PTR_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_REPORTING_QUEUE_DESCRIPTOR_DTS) + 8, r)
#define RDD_REPORTING_QUEUE_DESCRIPTOR_COUNTER_PTR_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_REPORTING_QUEUE_DESCRIPTOR_DTS) + 8, v)
#define RDD_REPORTING_QUEUE_DESCRIPTOR_COUNTER_PTR_READ(r, p)                       MREAD_16((uint8_t *)p + 8, r)
#define RDD_REPORTING_QUEUE_DESCRIPTOR_COUNTER_PTR_WRITE(v, p)                      MWRITE_16((uint8_t *)p + 8, v)
/* <<<RDD_REPORTING_QUEUE_DESCRIPTOR_DTS */


#define RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_SIZE     80
typedef struct
{
	RDD_REPORTING_QUEUE_DESCRIPTOR_DTS	entry[ RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_DTS;

extern uint32_t RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_PTR(core_id)	( RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<REPORTING_QUEUE_DESCRIPTOR_TABLE */


/* >>>REPORTING_QUEUE_ACCUMULATED_TABLE */

/* >>>RDD_QM_QUEUE_COUNTER_DATA_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	packets   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bytes     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	packets   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bytes     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_QM_QUEUE_COUNTER_DATA_DTS;

typedef RDD_QM_QUEUE_COUNTER_DATA_DTS * aligned_RDD_QM_QUEUE_COUNTER_DATA_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_QM_QUEUE_COUNTER_DATA_DTS fields;
} RDD_QM_QUEUE_COUNTER_DATA_DTS_NEW;
typedef RDD_QM_QUEUE_COUNTER_DATA_DTS_NEW * aligned_RDD_QM_QUEUE_COUNTER_DATA_DTS_NEW ALIGNMENT8;

#define RDD_QM_QUEUE_COUNTER_DATA_PACKETS_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_QM_QUEUE_COUNTER_DATA_DTS), r)
#define RDD_QM_QUEUE_COUNTER_DATA_PACKETS_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_QM_QUEUE_COUNTER_DATA_DTS), v)
#define RDD_QM_QUEUE_COUNTER_DATA_PACKETS_READ(r, p)                   MREAD_32((uint8_t *)p, r)
#define RDD_QM_QUEUE_COUNTER_DATA_PACKETS_WRITE(v, p)                  MWRITE_32((uint8_t *)p, v)
#define RDD_QM_QUEUE_COUNTER_DATA_BYTES_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_QM_QUEUE_COUNTER_DATA_DTS) + 4, r)
#define RDD_QM_QUEUE_COUNTER_DATA_BYTES_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_QM_QUEUE_COUNTER_DATA_DTS) + 4, v)
#define RDD_QM_QUEUE_COUNTER_DATA_BYTES_READ(r, p)                     MREAD_32((uint8_t *)p + 4, r)
#define RDD_QM_QUEUE_COUNTER_DATA_BYTES_WRITE(v, p)                    MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_QM_QUEUE_COUNTER_DATA_DTS */


#define RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_SIZE     16
typedef struct
{
	RDD_QM_QUEUE_COUNTER_DATA_DTS	entry[ RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_DTS;

extern uint32_t RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_PTR(core_id)	( RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_ADDRESS_ARR[core_id] ))

/* <<<REPORTING_QUEUE_ACCUMULATED_TABLE */


/* >>>REPORTING_COUNTER_TABLE */

#define RDD_REPORTING_COUNTER_TABLE_SIZE     40
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_REPORTING_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_REPORTING_COUNTER_TABLE_DTS;

extern uint32_t RDD_REPORTING_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REPORTING_COUNTER_TABLE_PTR(core_id)	( RDD_REPORTING_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REPORTING_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<REPORTING_COUNTER_TABLE */


/* >>>RUNNER_GLOBAL_REGISTERS_INIT */

#define RDD_RUNNER_GLOBAL_REGISTERS_INIT_SIZE     8
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_RUNNER_GLOBAL_REGISTERS_INIT_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RUNNER_GLOBAL_REGISTERS_INIT_DTS;

extern uint32_t RDD_RUNNER_GLOBAL_REGISTERS_INIT_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RUNNER_GLOBAL_REGISTERS_INIT_PTR(core_id)	( RDD_RUNNER_GLOBAL_REGISTERS_INIT_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RUNNER_GLOBAL_REGISTERS_INIT_ADDRESS_ARR[core_id] ))

/* <<<RUNNER_GLOBAL_REGISTERS_INIT */


/* >>>DS_TM_TM_ACTION_PTR_TABLE */

/* >>>RDD_BYTES_2_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	bits      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	bits      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BYTES_2_DTS;

typedef RDD_BYTES_2_DTS * aligned_RDD_BYTES_2_DTS ALIGNMENT8;

#define RDD_BYTES_2_BITS_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_BYTES_2_DTS), r)
#define RDD_BYTES_2_BITS_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_BYTES_2_DTS), v)
#define RDD_BYTES_2_BITS_READ(r, p)                 MREAD_16((uint8_t *)p, r)
#define RDD_BYTES_2_BITS_WRITE(v, p)                MWRITE_16((uint8_t *)p, v)
/* <<<RDD_BYTES_2_DTS */


#define RDD_DS_TM_TM_ACTION_PTR_TABLE_SIZE     17
typedef struct
{
	RDD_BYTES_2_DTS	entry[ RDD_DS_TM_TM_ACTION_PTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_TM_ACTION_PTR_TABLE_DTS;

extern uint32_t RDD_DS_TM_TM_ACTION_PTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_TM_ACTION_PTR_TABLE_PTR(core_id)	( RDD_DS_TM_TM_ACTION_PTR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_TM_ACTION_PTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_TM_ACTION_PTR_TABLE */


/* >>>BUDGET_ALLOCATION_TIMER_VALUE */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BUDGET_ALLOCATION_TIMER_VALUE_DTS;

extern uint32_t RDD_BUDGET_ALLOCATION_TIMER_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BUDGET_ALLOCATION_TIMER_VALUE_PTR(core_id)	( RDD_BUDGET_ALLOCATION_TIMER_VALUE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BUDGET_ALLOCATION_TIMER_VALUE_ADDRESS_ARR[core_id] ))

/* <<<BUDGET_ALLOCATION_TIMER_VALUE */


/* >>>TM_HW_FLUSH */

/* >>>RDD_HW_FLUSH_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	qm_queue   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hw_flush_en	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	us         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flush_aggr 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	flush_aggr 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	us         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hw_flush_en	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	qm_queue   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_HW_FLUSH_ENTRY_DTS;

typedef RDD_HW_FLUSH_ENTRY_DTS * aligned_RDD_HW_FLUSH_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_HW_FLUSH_ENTRY_DTS fields;
} RDD_HW_FLUSH_ENTRY_DTS_NEW;
typedef RDD_HW_FLUSH_ENTRY_DTS_NEW * aligned_RDD_HW_FLUSH_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_HW_FLUSH_ENTRY_QM_QUEUE_READ_G(r, g, idx)             GROUP_MREAD_16(g, idx*sizeof(RDD_HW_FLUSH_ENTRY_DTS), r)
#define RDD_HW_FLUSH_ENTRY_QM_QUEUE_WRITE_G(v, g, idx)            GROUP_MWRITE_16(g, idx*sizeof(RDD_HW_FLUSH_ENTRY_DTS), v)
#define RDD_HW_FLUSH_ENTRY_QM_QUEUE_READ(r, p)                    MREAD_16((uint8_t *)p, r)
#define RDD_HW_FLUSH_ENTRY_QM_QUEUE_WRITE(v, p)                   MWRITE_16((uint8_t *)p, v)
#define RDD_HW_FLUSH_ENTRY_HW_FLUSH_EN_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_HW_FLUSH_ENTRY_DTS) + 2, 7, 1, r)
#define RDD_HW_FLUSH_ENTRY_HW_FLUSH_EN_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_HW_FLUSH_ENTRY_DTS) + 2, 7, 1, v)
#define RDD_HW_FLUSH_ENTRY_HW_FLUSH_EN_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 2, 7, 1, r)
#define RDD_HW_FLUSH_ENTRY_HW_FLUSH_EN_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 2, 7, 1, v)
#define RDD_HW_FLUSH_ENTRY_US_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_HW_FLUSH_ENTRY_DTS) + 2, 6, 1, r)
#define RDD_HW_FLUSH_ENTRY_US_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_HW_FLUSH_ENTRY_DTS) + 2, 6, 1, v)
#define RDD_HW_FLUSH_ENTRY_US_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 2, 6, 1, r)
#define RDD_HW_FLUSH_ENTRY_US_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 2, 6, 1, v)
#define RDD_HW_FLUSH_ENTRY_FLUSH_AGGR_READ_G(r, g, idx)           GROUP_MREAD_8(g, idx*sizeof(RDD_HW_FLUSH_ENTRY_DTS) + 3, r)
#define RDD_HW_FLUSH_ENTRY_FLUSH_AGGR_WRITE_G(v, g, idx)          GROUP_MWRITE_8(g, idx*sizeof(RDD_HW_FLUSH_ENTRY_DTS) + 3, v)
#define RDD_HW_FLUSH_ENTRY_FLUSH_AGGR_READ(r, p)                  MREAD_8((uint8_t *)p + 3, r)
#define RDD_HW_FLUSH_ENTRY_FLUSH_AGGR_WRITE(v, p)                 MWRITE_8((uint8_t *)p + 3, v)
/* <<<RDD_HW_FLUSH_ENTRY_DTS */

typedef struct
{
	RDD_HW_FLUSH_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TM_HW_FLUSH_DTS;

extern uint32_t RDD_TM_HW_FLUSH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TM_HW_FLUSH_PTR(core_id)	( RDD_TM_HW_FLUSH_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TM_HW_FLUSH_ADDRESS_ARR[core_id] ))

/* <<<TM_HW_FLUSH */


/* >>>DS_TM_BBH_TX_QUEUE_ID_TABLE */

/* >>>RDD_BBH_TX_QUEUE_ID_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	bytes_in_bbh	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	queue       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	queue       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bytes_in_bbh	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BBH_TX_QUEUE_ID_ENTRY_DTS;

typedef RDD_BBH_TX_QUEUE_ID_ENTRY_DTS * aligned_RDD_BBH_TX_QUEUE_ID_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_BBH_TX_QUEUE_ID_ENTRY_DTS fields;
} RDD_BBH_TX_QUEUE_ID_ENTRY_DTS_NEW;
typedef RDD_BBH_TX_QUEUE_ID_ENTRY_DTS_NEW * aligned_RDD_BBH_TX_QUEUE_ID_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_BBH_TX_QUEUE_ID_ENTRY_BYTES_IN_BBH_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_BBH_TX_QUEUE_ID_ENTRY_DTS), 8, 24, r)
#define RDD_BBH_TX_QUEUE_ID_ENTRY_BYTES_IN_BBH_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_BBH_TX_QUEUE_ID_ENTRY_DTS), 8, 24, v)
#define RDD_BBH_TX_QUEUE_ID_ENTRY_BYTES_IN_BBH_READ(r, p)                 FIELD_MREAD_32((uint8_t *)p, 8, 24, r)
#define RDD_BBH_TX_QUEUE_ID_ENTRY_BYTES_IN_BBH_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)p, 8, 24, v)
#define RDD_BBH_TX_QUEUE_ID_ENTRY_QUEUE_READ_G(r, g, idx)                 GROUP_MREAD_8(g, idx*sizeof(RDD_BBH_TX_QUEUE_ID_ENTRY_DTS) + 3, r)
#define RDD_BBH_TX_QUEUE_ID_ENTRY_QUEUE_WRITE_G(v, g, idx)                GROUP_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_QUEUE_ID_ENTRY_DTS) + 3, v)
#define RDD_BBH_TX_QUEUE_ID_ENTRY_QUEUE_READ(r, p)                        MREAD_8((uint8_t *)p + 3, r)
#define RDD_BBH_TX_QUEUE_ID_ENTRY_QUEUE_WRITE(v, p)                       MWRITE_8((uint8_t *)p + 3, v)
/* <<<RDD_BBH_TX_QUEUE_ID_ENTRY_DTS */


#define RDD_DS_TM_BBH_TX_QUEUE_ID_TABLE_SIZE     2
typedef struct
{
	RDD_BBH_TX_QUEUE_ID_ENTRY_DTS	entry[ RDD_DS_TM_BBH_TX_QUEUE_ID_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_BBH_TX_QUEUE_ID_TABLE_DTS;

extern uint32_t RDD_DS_TM_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_BBH_TX_QUEUE_ID_TABLE_PTR(core_id)	( RDD_DS_TM_BBH_TX_QUEUE_ID_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_BBH_TX_QUEUE_ID_TABLE */


/* >>>DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE */

#define RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE */


/* >>>GHOST_REPORTING_GLOBAL_CFG */

/* >>>RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	mac_type      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	disable       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved      	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	timer_interval	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	timer_interval	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved      	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	disable       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mac_type      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS;

typedef RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS * aligned_RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS fields;
} RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS_NEW;
typedef RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS_NEW * aligned_RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_MAC_TYPE_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS), 5, 3, r)
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_MAC_TYPE_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS), 5, 3, v)
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_MAC_TYPE_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p, 5, 3, r)
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_MAC_TYPE_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p, 5, 3, v)
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DISABLE_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS), 4, 1, r)
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DISABLE_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS), 4, 1, v)
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DISABLE_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DISABLE_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_TIMER_INTERVAL_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS) + 2, r)
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_TIMER_INTERVAL_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS) + 2, v)
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_TIMER_INTERVAL_READ(r, p)                 MREAD_16((uint8_t *)p + 2, r)
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_TIMER_INTERVAL_WRITE(v, p)                MWRITE_16((uint8_t *)p + 2, v)
/* <<<RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS */

typedef struct
{
	RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_GHOST_REPORTING_GLOBAL_CFG_DTS;

extern uint32_t RDD_GHOST_REPORTING_GLOBAL_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_GHOST_REPORTING_GLOBAL_CFG_PTR(core_id)	( RDD_GHOST_REPORTING_GLOBAL_CFG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_GHOST_REPORTING_GLOBAL_CFG_ADDRESS_ARR[core_id] ))

/* <<<GHOST_REPORTING_GLOBAL_CFG */


/* >>>NATC_TBL_CFG */

/* >>>RDD_NATC_TBL_CONFIGURATION_DTS */
#define RDD_NATC_TBL_CONFIGURATION_RESERVED1_NUMBER	5

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	key_addr_low                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_addr_high                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	res_addr_low                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	res_addr_high                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved                                                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	miss_cache_enable                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_size                                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context_size                                             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved1[RDD_NATC_TBL_CONFIGURATION_RESERVED1_NUMBER];
#else
	uint32_t	key_addr_low                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_addr_high                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	res_addr_low                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	res_addr_high                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved1[RDD_NATC_TBL_CONFIGURATION_RESERVED1_NUMBER];
	uint32_t	context_size                                             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_size                                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	miss_cache_enable                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved                                                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NATC_TBL_CONFIGURATION_DTS;

typedef RDD_NATC_TBL_CONFIGURATION_DTS * aligned_RDD_NATC_TBL_CONFIGURATION_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[6];
    uint64_t dword_val64[3];
    RDD_NATC_TBL_CONFIGURATION_DTS fields;
} RDD_NATC_TBL_CONFIGURATION_DTS_NEW;
typedef RDD_NATC_TBL_CONFIGURATION_DTS_NEW * aligned_RDD_NATC_TBL_CONFIGURATION_DTS_NEW ALIGNMENT8;

#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_LOW_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS), r)
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS), v)
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_LOW_READ(r, p)                      MREAD_32((uint8_t *)p, r)
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)p, v)
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_HIGH_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 4, r)
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 4, v)
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_HIGH_READ(r, p)                     MREAD_32((uint8_t *)p + 4, r)
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_HIGH_WRITE(v, p)                    MWRITE_32((uint8_t *)p + 4, v)
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_LOW_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 8, r)
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 8, v)
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_LOW_READ(r, p)                      MREAD_32((uint8_t *)p + 8, r)
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 8, v)
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_HIGH_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 12, r)
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 12, v)
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_HIGH_READ(r, p)                     MREAD_32((uint8_t *)p + 12, r)
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_HIGH_WRITE(v, p)                    MWRITE_32((uint8_t *)p + 12, v)
#define RDD_NATC_TBL_CONFIGURATION_MISS_CACHE_ENABLE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 16, 0, 1, r)
#define RDD_NATC_TBL_CONFIGURATION_MISS_CACHE_ENABLE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 16, 0, 1, v)
#define RDD_NATC_TBL_CONFIGURATION_MISS_CACHE_ENABLE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 16, 0, 1, r)
#define RDD_NATC_TBL_CONFIGURATION_MISS_CACHE_ENABLE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 16, 0, 1, v)
#define RDD_NATC_TBL_CONFIGURATION_KEY_SIZE_READ_G(r, g, idx)                   GROUP_MREAD_8(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 17, r)
#define RDD_NATC_TBL_CONFIGURATION_KEY_SIZE_WRITE_G(v, g, idx)                  GROUP_MWRITE_8(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 17, v)
#define RDD_NATC_TBL_CONFIGURATION_KEY_SIZE_READ(r, p)                          MREAD_8((uint8_t *)p + 17, r)
#define RDD_NATC_TBL_CONFIGURATION_KEY_SIZE_WRITE(v, p)                         MWRITE_8((uint8_t *)p + 17, v)
#define RDD_NATC_TBL_CONFIGURATION_CONTEXT_SIZE_READ_G(r, g, idx)               GROUP_MREAD_8(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 18, r)
#define RDD_NATC_TBL_CONFIGURATION_CONTEXT_SIZE_WRITE_G(v, g, idx)              GROUP_MWRITE_8(g, idx*sizeof(RDD_NATC_TBL_CONFIGURATION_DTS) + 18, v)
#define RDD_NATC_TBL_CONFIGURATION_CONTEXT_SIZE_READ(r, p)                      MREAD_8((uint8_t *)p + 18, r)
#define RDD_NATC_TBL_CONFIGURATION_CONTEXT_SIZE_WRITE(v, p)                     MWRITE_8((uint8_t *)p + 18, v)
/* <<<RDD_NATC_TBL_CONFIGURATION_DTS */


#define RDD_NATC_TBL_CFG_SIZE     4
typedef struct
{
	RDD_NATC_TBL_CONFIGURATION_DTS	entry[ RDD_NATC_TBL_CFG_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NATC_TBL_CFG_DTS;

extern uint32_t RDD_NATC_TBL_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NATC_TBL_CFG_PTR(core_id)	( RDD_NATC_TBL_CFG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NATC_TBL_CFG_ADDRESS_ARR[core_id] ))

/* <<<NATC_TBL_CFG */


/* >>>REGISTERS_BUFFER */

#define RDD_REGISTERS_BUFFER_SIZE     32
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_REGISTERS_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_REGISTERS_BUFFER_DTS;

extern uint32_t RDD_REGISTERS_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REGISTERS_BUFFER_PTR(core_id)	( RDD_REGISTERS_BUFFER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REGISTERS_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<REGISTERS_BUFFER */


/* >>>DS_TM_SCHEDULING_FLUSH_VECTOR */

#define RDD_DS_TM_SCHEDULING_FLUSH_VECTOR_SIZE     5
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DS_TM_SCHEDULING_FLUSH_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_SCHEDULING_FLUSH_VECTOR_DTS;

extern uint32_t RDD_DS_TM_SCHEDULING_FLUSH_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_SCHEDULING_FLUSH_VECTOR_PTR(core_id)	( RDD_DS_TM_SCHEDULING_FLUSH_VECTOR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_SCHEDULING_FLUSH_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_SCHEDULING_FLUSH_VECTOR */


/* >>>DS_TM_BB_DESTINATION_TABLE */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_BB_DESTINATION_TABLE_DTS;

extern uint32_t RDD_DS_TM_BB_DESTINATION_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_BB_DESTINATION_TABLE_PTR(core_id)	( RDD_DS_TM_BB_DESTINATION_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_BB_DESTINATION_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_BB_DESTINATION_TABLE */


/* >>>SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE_DTS;

extern uint32_t RDD_SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE_PTR(core_id)	( RDD_SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE */


/* >>>GENERAL_QUEUE_DYNAMIC_MNG_TABLE */

/* >>>RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	qm_queue_us_start  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	qm_queue_us_end    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	qm_queue_ds_start  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	qm_queue_ds_end    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	qm_queue_epon_start	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	qm_queue_sq_start  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	qm_queue_ds_end    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	qm_queue_ds_start  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	qm_queue_us_end    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	qm_queue_us_start  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	qm_queue_sq_start  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	qm_queue_epon_start	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS;

typedef RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS * aligned_RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS fields;
} RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS_NEW;
typedef RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS_NEW * aligned_RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_START_READ_G(r, g, idx)            GROUP_MREAD_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS), r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_START_WRITE_G(v, g, idx)           GROUP_MWRITE_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS), v)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_START_READ(r, p)                   MREAD_8((uint8_t *)p, r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_START_WRITE(v, p)                  MWRITE_8((uint8_t *)p, v)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_END_READ_G(r, g, idx)              GROUP_MREAD_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS) + 1, r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_END_WRITE_G(v, g, idx)             GROUP_MWRITE_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS) + 1, v)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_END_READ(r, p)                     MREAD_8((uint8_t *)p + 1, r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_END_WRITE(v, p)                    MWRITE_8((uint8_t *)p + 1, v)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_START_READ_G(r, g, idx)            GROUP_MREAD_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS) + 2, r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_START_WRITE_G(v, g, idx)           GROUP_MWRITE_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS) + 2, v)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_START_READ(r, p)                   MREAD_8((uint8_t *)p + 2, r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_START_WRITE(v, p)                  MWRITE_8((uint8_t *)p + 2, v)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_END_READ_G(r, g, idx)              GROUP_MREAD_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS) + 3, r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_END_WRITE_G(v, g, idx)             GROUP_MWRITE_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS) + 3, v)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_END_READ(r, p)                     MREAD_8((uint8_t *)p + 3, r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_END_WRITE(v, p)                    MWRITE_8((uint8_t *)p + 3, v)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_EPON_START_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS) + 4, r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_EPON_START_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS) + 4, v)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_EPON_START_READ(r, p)                 MREAD_8((uint8_t *)p + 4, r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_EPON_START_WRITE(v, p)                MWRITE_8((uint8_t *)p + 4, v)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_SQ_START_READ_G(r, g, idx)            GROUP_MREAD_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS) + 5, r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_SQ_START_WRITE_G(v, g, idx)           GROUP_MWRITE_8(g, idx*sizeof(RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS) + 5, v)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_SQ_START_READ(r, p)                   MREAD_8((uint8_t *)p + 5, r)
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_SQ_START_WRITE(v, p)                  MWRITE_8((uint8_t *)p + 5, v)
/* <<<RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS */

typedef struct
{
	RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_GENERAL_QUEUE_DYNAMIC_MNG_TABLE_DTS;

extern uint32_t RDD_GENERAL_QUEUE_DYNAMIC_MNG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_GENERAL_QUEUE_DYNAMIC_MNG_TABLE_PTR(core_id)	( RDD_GENERAL_QUEUE_DYNAMIC_MNG_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_GENERAL_QUEUE_DYNAMIC_MNG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<GENERAL_QUEUE_DYNAMIC_MNG_TABLE */


/* >>>SERVICE_QUEUES_TM_ACTION_PTR_TABLE */

#define RDD_SERVICE_QUEUES_TM_ACTION_PTR_TABLE_SIZE     17
typedef struct
{
	RDD_BYTES_2_DTS	entry[ RDD_SERVICE_QUEUES_TM_ACTION_PTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SERVICE_QUEUES_TM_ACTION_PTR_TABLE_DTS;

extern uint32_t RDD_SERVICE_QUEUES_TM_ACTION_PTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_TM_ACTION_PTR_TABLE_PTR(core_id)	( RDD_SERVICE_QUEUES_TM_ACTION_PTR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_TM_ACTION_PTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_TM_ACTION_PTR_TABLE */


/* >>>SCHEDULING_FLUSH_GLOBAL_CFG */

/* >>>RDD_BYTE_1_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	bits      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint8_t	bits      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BYTE_1_DTS;

typedef RDD_BYTE_1_DTS * aligned_RDD_BYTE_1_DTS ALIGNMENT8;

#define RDD_BYTE_1_BITS_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_BYTE_1_DTS), r)
#define RDD_BYTE_1_BITS_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_BYTE_1_DTS), v)
#define RDD_BYTE_1_BITS_READ(r, p)                 MREAD_8((uint8_t *)p, r)
#define RDD_BYTE_1_BITS_WRITE(v, p)                MWRITE_8((uint8_t *)p, v)
/* <<<RDD_BYTE_1_DTS */

typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SCHEDULING_FLUSH_GLOBAL_CFG_DTS;

extern uint32_t RDD_SCHEDULING_FLUSH_GLOBAL_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SCHEDULING_FLUSH_GLOBAL_CFG_PTR(core_id)	( RDD_SCHEDULING_FLUSH_GLOBAL_CFG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SCHEDULING_FLUSH_GLOBAL_CFG_ADDRESS_ARR[core_id] ))

/* <<<SCHEDULING_FLUSH_GLOBAL_CFG */


/* >>>CORE_ID_TABLE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CORE_ID_TABLE_DTS;

extern uint32_t RDD_CORE_ID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CORE_ID_TABLE_PTR(core_id)	( RDD_CORE_ID_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CORE_ID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CORE_ID_TABLE */


/* >>>TASK_IDX */
typedef struct
{
	RDD_BYTES_4_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TASK_IDX_DTS;

extern uint32_t RDD_TASK_IDX_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TASK_IDX_PTR(core_id)	( RDD_TASK_IDX_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TASK_IDX_ADDRESS_ARR[core_id] ))

/* <<<TASK_IDX */


/* >>>ACB_PORT_STATUS_TABLE */

#define RDD_ACB_PORT_STATUS_TABLE_SIZE     8
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_ACB_PORT_STATUS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_ACB_PORT_STATUS_TABLE_DTS;

extern uint32_t RDD_ACB_PORT_STATUS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_ACB_PORT_STATUS_TABLE_PTR(core_id)	( RDD_ACB_PORT_STATUS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_ACB_PORT_STATUS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<ACB_PORT_STATUS_TABLE */


/* >>>SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE */

#define RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE */


/* >>>TX_MIRRORING_CONFIGURATION */

/* >>>RDD_MIRRORING_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	mirror_en 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	dst_vport 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	dst_queue 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	dst_queue 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	dst_vport 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	mirror_en 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_MIRRORING_DESCRIPTOR_DTS;

typedef RDD_MIRRORING_DESCRIPTOR_DTS * aligned_RDD_MIRRORING_DESCRIPTOR_DTS ALIGNMENT8;

#define RDD_MIRRORING_DESCRIPTOR_MIRROR_EN_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MIRRORING_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_MIRRORING_DESCRIPTOR_MIRROR_EN_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MIRRORING_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_MIRRORING_DESCRIPTOR_MIRROR_EN_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_MIRRORING_DESCRIPTOR_MIRROR_EN_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_MIRRORING_DESCRIPTOR_DST_VPORT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MIRRORING_DESCRIPTOR_DTS), 1, 6, r)
#define RDD_MIRRORING_DESCRIPTOR_DST_VPORT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MIRRORING_DESCRIPTOR_DTS), 1, 6, v)
#define RDD_MIRRORING_DESCRIPTOR_DST_VPORT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 1, 6, r)
#define RDD_MIRRORING_DESCRIPTOR_DST_VPORT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 1, 6, v)
#define RDD_MIRRORING_DESCRIPTOR_DST_QUEUE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_MIRRORING_DESCRIPTOR_DTS), 0, 9, r)
#define RDD_MIRRORING_DESCRIPTOR_DST_QUEUE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_MIRRORING_DESCRIPTOR_DTS), 0, 9, v)
#define RDD_MIRRORING_DESCRIPTOR_DST_QUEUE_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p, 0, 9, r)
#define RDD_MIRRORING_DESCRIPTOR_DST_QUEUE_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p, 0, 9, v)
/* <<<RDD_MIRRORING_DESCRIPTOR_DTS */

typedef struct
{
	RDD_MIRRORING_DESCRIPTOR_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TX_MIRRORING_CONFIGURATION_DTS;

extern uint32_t RDD_TX_MIRRORING_CONFIGURATION_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TX_MIRRORING_CONFIGURATION_PTR(core_id)	( RDD_TX_MIRRORING_CONFIGURATION_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TX_MIRRORING_CONFIGURATION_ADDRESS_ARR[core_id] ))

/* <<<TX_MIRRORING_CONFIGURATION */


/* >>>SRAM_DUMMY_STORE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SRAM_DUMMY_STORE_DTS;

extern uint32_t RDD_SRAM_DUMMY_STORE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SRAM_DUMMY_STORE_PTR(core_id)	( RDD_SRAM_DUMMY_STORE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SRAM_DUMMY_STORE_ADDRESS_ARR[core_id] ))

/* <<<SRAM_DUMMY_STORE */


/* >>>RATE_LIMIT_OVERHEAD */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RATE_LIMIT_OVERHEAD_DTS;

extern uint32_t RDD_RATE_LIMIT_OVERHEAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RATE_LIMIT_OVERHEAD_PTR(core_id)	( RDD_RATE_LIMIT_OVERHEAD_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RATE_LIMIT_OVERHEAD_ADDRESS_ARR[core_id] ))

/* <<<RATE_LIMIT_OVERHEAD */


/* >>>UPDATE_FIFO_TABLE */

/* >>>RDD_UPDATE_FIFO_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	valid            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pd_fifo_write_ptr	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	queue_number     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	queue_number     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pd_fifo_write_ptr	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	valid            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_UPDATE_FIFO_ENTRY_DTS;

typedef RDD_UPDATE_FIFO_ENTRY_DTS * aligned_RDD_UPDATE_FIFO_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_UPDATE_FIFO_ENTRY_DTS fields;
} RDD_UPDATE_FIFO_ENTRY_DTS_NEW;
typedef RDD_UPDATE_FIFO_ENTRY_DTS_NEW * aligned_RDD_UPDATE_FIFO_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_UPDATE_FIFO_ENTRY_VALID_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_UPDATE_FIFO_ENTRY_DTS), 7, 1, r)
#define RDD_UPDATE_FIFO_ENTRY_VALID_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_UPDATE_FIFO_ENTRY_DTS), 7, 1, v)
#define RDD_UPDATE_FIFO_ENTRY_VALID_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_UPDATE_FIFO_ENTRY_VALID_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_UPDATE_FIFO_ENTRY_PD_FIFO_WRITE_PTR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_UPDATE_FIFO_ENTRY_DTS), 0, 14, r)
#define RDD_UPDATE_FIFO_ENTRY_PD_FIFO_WRITE_PTR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_UPDATE_FIFO_ENTRY_DTS), 0, 14, v)
#define RDD_UPDATE_FIFO_ENTRY_PD_FIFO_WRITE_PTR_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p, 0, 14, r)
#define RDD_UPDATE_FIFO_ENTRY_PD_FIFO_WRITE_PTR_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p, 0, 14, v)
#define RDD_UPDATE_FIFO_ENTRY_QUEUE_NUMBER_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_UPDATE_FIFO_ENTRY_DTS) + 2, 0, 9, r)
#define RDD_UPDATE_FIFO_ENTRY_QUEUE_NUMBER_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_UPDATE_FIFO_ENTRY_DTS) + 2, 0, 9, v)
#define RDD_UPDATE_FIFO_ENTRY_QUEUE_NUMBER_READ(r, p)                      FIELD_MREAD_16((uint8_t *)p + 2, 0, 9, r)
#define RDD_UPDATE_FIFO_ENTRY_QUEUE_NUMBER_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)p + 2, 0, 9, v)
/* <<<RDD_UPDATE_FIFO_ENTRY_DTS */


#define RDD_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	RDD_UPDATE_FIFO_ENTRY_DTS	entry[ RDD_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_UPDATE_FIFO_TABLE_DTS;

extern uint32_t RDD_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_UPDATE_FIFO_TABLE_PTR(core_id)	( RDD_UPDATE_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<UPDATE_FIFO_TABLE */


/* >>>DS_TM_SCHEDULING_QUEUE_AGING_VECTOR */

#define RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_SIZE     5
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_DTS;

extern uint32_t RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_PTR(core_id)	( RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_SCHEDULING_QUEUE_AGING_VECTOR */


/* >>>DS_TM_SCHEDULING_GLOBAL_FLUSH_CFG */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_SCHEDULING_GLOBAL_FLUSH_CFG_DTS;

extern uint32_t RDD_DS_TM_SCHEDULING_GLOBAL_FLUSH_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_SCHEDULING_GLOBAL_FLUSH_CFG_PTR(core_id)	( RDD_DS_TM_SCHEDULING_GLOBAL_FLUSH_CFG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_SCHEDULING_GLOBAL_FLUSH_CFG_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_SCHEDULING_GLOBAL_FLUSH_CFG */


/* >>>DS_TM_FIRST_QUEUE_MAPPING */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_FIRST_QUEUE_MAPPING_DTS;

extern uint32_t RDD_DS_TM_FIRST_QUEUE_MAPPING_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_FIRST_QUEUE_MAPPING_PTR(core_id)	( RDD_DS_TM_FIRST_QUEUE_MAPPING_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_FIRST_QUEUE_MAPPING_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_FIRST_QUEUE_MAPPING */


/* >>>DS_TM_FLUSH_AGGREGATION_TASK_DISABLE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_FLUSH_AGGREGATION_TASK_DISABLE_DTS;

extern uint32_t RDD_DS_TM_FLUSH_AGGREGATION_TASK_DISABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_FLUSH_AGGREGATION_TASK_DISABLE_PTR(core_id)	( RDD_DS_TM_FLUSH_AGGREGATION_TASK_DISABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_FLUSH_AGGREGATION_TASK_DISABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_FLUSH_AGGREGATION_TASK_DISABLE */


/* >>>SERVICE_QUEUES_FIRST_QUEUE_MAPPING */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SERVICE_QUEUES_FIRST_QUEUE_MAPPING_DTS;

extern uint32_t RDD_SERVICE_QUEUES_FIRST_QUEUE_MAPPING_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_FIRST_QUEUE_MAPPING_PTR(core_id)	( RDD_SERVICE_QUEUES_FIRST_QUEUE_MAPPING_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_FIRST_QUEUE_MAPPING_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_FIRST_QUEUE_MAPPING */


/* >>>EGRESS_PORT_TO_BROADCOM_SWITCH_PORT_TABLE */

#define RDD_EGRESS_PORT_TO_BROADCOM_SWITCH_PORT_TABLE_SIZE     8
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_EGRESS_PORT_TO_BROADCOM_SWITCH_PORT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_EGRESS_PORT_TO_BROADCOM_SWITCH_PORT_TABLE_DTS;

extern uint32_t RDD_EGRESS_PORT_TO_BROADCOM_SWITCH_PORT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_EGRESS_PORT_TO_BROADCOM_SWITCH_PORT_TABLE_PTR(core_id)	( RDD_EGRESS_PORT_TO_BROADCOM_SWITCH_PORT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_EGRESS_PORT_TO_BROADCOM_SWITCH_PORT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<EGRESS_PORT_TO_BROADCOM_SWITCH_PORT_TABLE */


/* >>>SERVICE_QUEUES_UPDATE_FIFO_TABLE */

#define RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	RDD_UPDATE_FIFO_ENTRY_DTS	entry[ RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_DTS;

extern uint32_t RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_PTR(core_id)	( RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_UPDATE_FIFO_TABLE */


/* >>>SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR */

#define RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_SIZE     5
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_DTS;

extern uint32_t RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_PTR(core_id)	( RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR */


/* >>>DEBUG_PRINT_CORE_LOCK */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DEBUG_PRINT_CORE_LOCK_DTS;

extern uint32_t RDD_DEBUG_PRINT_CORE_LOCK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DEBUG_PRINT_CORE_LOCK_PTR(core_id)	( RDD_DEBUG_PRINT_CORE_LOCK_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DEBUG_PRINT_CORE_LOCK_ADDRESS_ARR[core_id] ))

/* <<<DEBUG_PRINT_CORE_LOCK */


/* >>>BBH_TX_INGRESS_COUNTER_TABLE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BBH_TX_INGRESS_COUNTER_TABLE_DTS;

extern uint32_t RDD_BBH_TX_INGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BBH_TX_INGRESS_COUNTER_TABLE_PTR(core_id)	( RDD_BBH_TX_INGRESS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BBH_TX_INGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BBH_TX_INGRESS_COUNTER_TABLE */


/* >>>MIRRORING_SCRATCH */

/* >>>RDD_BYTES_8_DTS */
#define RDD_BYTES_8_BITS_NUMBER	2

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	bits[RDD_BYTES_8_BITS_NUMBER];
#else
	uint32_t	bits[RDD_BYTES_8_BITS_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BYTES_8_DTS;

typedef RDD_BYTES_8_DTS * aligned_RDD_BYTES_8_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_BYTES_8_DTS fields;
} RDD_BYTES_8_DTS_NEW;
typedef RDD_BYTES_8_DTS_NEW * aligned_RDD_BYTES_8_DTS_NEW ALIGNMENT8;

#define RDD_BYTES_8_BITS_READ_G(r, g, idx, i)       GROUP_MREAD_I_32(g, idx*sizeof(RDD_BYTES_8_DTS), i, r)
#define RDD_BYTES_8_BITS_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_32(g, idx*sizeof(RDD_BYTES_8_DTS), i, v)
#define RDD_BYTES_8_BITS_READ(r, p, i)              MREAD_I_32((uint8_t *)p, i, r)
#define RDD_BYTES_8_BITS_WRITE(v, p, i)             MWRITE_I_32((uint8_t *)p, i, v)
/* <<<RDD_BYTES_8_DTS */

typedef struct
{
	RDD_BYTES_8_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_MIRRORING_SCRATCH_DTS;

extern uint32_t RDD_MIRRORING_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_MIRRORING_SCRATCH_PTR(core_id)	( RDD_MIRRORING_SCRATCH_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_MIRRORING_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<MIRRORING_SCRATCH */


/* >>>DS_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR */

#define RDD_DS_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_SIZE     5
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DS_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_DTS;

extern uint32_t RDD_DS_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_PTR(core_id)	( RDD_DS_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR */


/* >>>DEBUG_SCRATCHPAD */

#define RDD_DEBUG_SCRATCHPAD_SIZE     10
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DEBUG_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DEBUG_SCRATCHPAD_DTS;

extern uint32_t RDD_DEBUG_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DEBUG_SCRATCHPAD_PTR(core_id)	( RDD_DEBUG_SCRATCHPAD_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DEBUG_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<DEBUG_SCRATCHPAD */


/* >>>GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE */

#define RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_SIZE     5
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_DTS;

extern uint32_t RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_PTR(core_id)	( RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE */


/* >>>REPORT_BBH_TX_QUEUE_ID_TABLE */

#define RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_SIZE     2
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_DTS;

extern uint32_t RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_PTR(core_id)	( RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<REPORT_BBH_TX_QUEUE_ID_TABLE */


/* >>>QUEUE_TO_REPORT_BIT_VECTOR */

#define RDD_QUEUE_TO_REPORT_BIT_VECTOR_SIZE     5
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_QUEUE_TO_REPORT_BIT_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_QUEUE_TO_REPORT_BIT_VECTOR_DTS;

extern uint32_t RDD_QUEUE_TO_REPORT_BIT_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_QUEUE_TO_REPORT_BIT_VECTOR_PTR(core_id)	( RDD_QUEUE_TO_REPORT_BIT_VECTOR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_QUEUE_TO_REPORT_BIT_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<QUEUE_TO_REPORT_BIT_VECTOR */


/* >>>BBH_TX_EGRESS_REPORT_COUNTER_TABLE */

/* >>>RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	counter   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0 	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved0 	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	counter   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS;

typedef RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS * aligned_RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS fields;
} RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS_NEW;
typedef RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS_NEW * aligned_RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_BBH_TX_EGRESS_COUNTER_ENTRY_COUNTER_READ_G(r, g, idx)            GROUP_MREAD_8(g, idx*sizeof(RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS), r)
#define RDD_BBH_TX_EGRESS_COUNTER_ENTRY_COUNTER_WRITE_G(v, g, idx)           GROUP_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS), v)
#define RDD_BBH_TX_EGRESS_COUNTER_ENTRY_COUNTER_READ(r, p)                   MREAD_8((uint8_t *)p, r)
#define RDD_BBH_TX_EGRESS_COUNTER_ENTRY_COUNTER_WRITE(v, p)                  MWRITE_8((uint8_t *)p, v)
/* <<<RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS */

typedef struct
{
	RDD_BBH_TX_EGRESS_COUNTER_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BBH_TX_EGRESS_REPORT_COUNTER_TABLE_DTS;

extern uint32_t RDD_BBH_TX_EGRESS_REPORT_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BBH_TX_EGRESS_REPORT_COUNTER_TABLE_PTR(core_id)	( RDD_BBH_TX_EGRESS_REPORT_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BBH_TX_EGRESS_REPORT_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BBH_TX_EGRESS_REPORT_COUNTER_TABLE */


/* >>>ACB_PACKET_SENT_PD_COPY */

/* >>>RDD_BYTES_16_DTS */
#define RDD_BYTES_16_BITS_NUMBER	4

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	bits[RDD_BYTES_16_BITS_NUMBER];
#else
	uint32_t	bits[RDD_BYTES_16_BITS_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BYTES_16_DTS;

typedef RDD_BYTES_16_DTS * aligned_RDD_BYTES_16_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_BYTES_16_DTS fields;
} RDD_BYTES_16_DTS_NEW;
typedef RDD_BYTES_16_DTS_NEW * aligned_RDD_BYTES_16_DTS_NEW ALIGNMENT8;

#define RDD_BYTES_16_BITS_READ_G(r, g, idx, i)       GROUP_MREAD_I_32(g, idx*sizeof(RDD_BYTES_16_DTS), i, r)
#define RDD_BYTES_16_BITS_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_32(g, idx*sizeof(RDD_BYTES_16_DTS), i, v)
#define RDD_BYTES_16_BITS_READ(r, p, i)              MREAD_I_32((uint8_t *)p, i, r)
#define RDD_BYTES_16_BITS_WRITE(v, p, i)             MWRITE_I_32((uint8_t *)p, i, v)
/* <<<RDD_BYTES_16_DTS */

typedef struct
{
	RDD_BYTES_16_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_ACB_PACKET_SENT_PD_COPY_DTS;

extern uint32_t RDD_ACB_PACKET_SENT_PD_COPY_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_ACB_PACKET_SENT_PD_COPY_PTR(core_id)	( RDD_ACB_PACKET_SENT_PD_COPY_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_ACB_PACKET_SENT_PD_COPY_ADDRESS_ARR[core_id] ))

/* <<<ACB_PACKET_SENT_PD_COPY */


/* >>>SPDSVC_BBH_TX_PARAMS_TABLE */

/* >>>RDD_SPDSVC_BBH_TX_PARAMS_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	processing_tx_pd_3	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	spdsvc_sent       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	spdsvc_bbh_id     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	processing_tx_pd_3	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	spdsvc_sent       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	spdsvc_bbh_id     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_BBH_TX_PARAMS_DTS;

typedef RDD_SPDSVC_BBH_TX_PARAMS_DTS * aligned_RDD_SPDSVC_BBH_TX_PARAMS_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[3];
    uint64_t dword_val64[1];
    RDD_SPDSVC_BBH_TX_PARAMS_DTS fields;
} RDD_SPDSVC_BBH_TX_PARAMS_DTS_NEW;
typedef RDD_SPDSVC_BBH_TX_PARAMS_DTS_NEW * aligned_RDD_SPDSVC_BBH_TX_PARAMS_DTS_NEW ALIGNMENT8;

#define RDD_SPDSVC_BBH_TX_PARAMS_PROCESSING_TX_PD_3_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_BBH_TX_PARAMS_DTS), r)
#define RDD_SPDSVC_BBH_TX_PARAMS_PROCESSING_TX_PD_3_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_BBH_TX_PARAMS_DTS), v)
#define RDD_SPDSVC_BBH_TX_PARAMS_PROCESSING_TX_PD_3_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_SPDSVC_BBH_TX_PARAMS_PROCESSING_TX_PD_3_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
#define RDD_SPDSVC_BBH_TX_PARAMS_SPDSVC_SENT_READ_G(r, g, idx)                 GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_BBH_TX_PARAMS_DTS) + 4, r)
#define RDD_SPDSVC_BBH_TX_PARAMS_SPDSVC_SENT_WRITE_G(v, g, idx)                GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_BBH_TX_PARAMS_DTS) + 4, v)
#define RDD_SPDSVC_BBH_TX_PARAMS_SPDSVC_SENT_READ(r, p)                        MREAD_32((uint8_t *)p + 4, r)
#define RDD_SPDSVC_BBH_TX_PARAMS_SPDSVC_SENT_WRITE(v, p)                       MWRITE_32((uint8_t *)p + 4, v)
#define RDD_SPDSVC_BBH_TX_PARAMS_SPDSVC_BBH_ID_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_BBH_TX_PARAMS_DTS) + 8, r)
#define RDD_SPDSVC_BBH_TX_PARAMS_SPDSVC_BBH_ID_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_BBH_TX_PARAMS_DTS) + 8, v)
#define RDD_SPDSVC_BBH_TX_PARAMS_SPDSVC_BBH_ID_READ(r, p)                      MREAD_32((uint8_t *)p + 8, r)
#define RDD_SPDSVC_BBH_TX_PARAMS_SPDSVC_BBH_ID_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 8, v)
/* <<<RDD_SPDSVC_BBH_TX_PARAMS_DTS */

typedef struct
{
	RDD_SPDSVC_BBH_TX_PARAMS_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_BBH_TX_PARAMS_TABLE_DTS;

extern uint32_t RDD_SPDSVC_BBH_TX_PARAMS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_BBH_TX_PARAMS_TABLE_PTR(core_id)	( RDD_SPDSVC_BBH_TX_PARAMS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_BBH_TX_PARAMS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_BBH_TX_PARAMS_TABLE */


/* >>>SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE */

#define RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_SIZE     4
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_DTS;

extern uint32_t RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_PTR(core_id)	( RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE */


/* >>>TX_MIRRORING_DISPATCHER_CREDIT_TABLE */

#define RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TX_MIRRORING_DISPATCHER_CREDIT_TABLE */


/* >>>RATE_LIMITER_VALID_TABLE_DS */

#define RDD_RATE_LIMITER_VALID_TABLE_DS_SIZE     4
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_RATE_LIMITER_VALID_TABLE_DS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RATE_LIMITER_VALID_TABLE_DS_DTS;

extern uint32_t RDD_RATE_LIMITER_VALID_TABLE_DS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RATE_LIMITER_VALID_TABLE_DS_PTR(core_id)	( RDD_RATE_LIMITER_VALID_TABLE_DS_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RATE_LIMITER_VALID_TABLE_DS_ADDRESS_ARR[core_id] ))

/* <<<RATE_LIMITER_VALID_TABLE_DS */


/* >>>DEBUG_PRINT_TABLE */

/* >>>RDD_DEBUG_PRINT_INFO_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	addr_low  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	addr_high 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	size      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	table_id  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved  	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	addr_low  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	addr_high 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	size      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved  	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	table_id  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DEBUG_PRINT_INFO_DTS;

typedef RDD_DEBUG_PRINT_INFO_DTS * aligned_RDD_DEBUG_PRINT_INFO_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_DEBUG_PRINT_INFO_DTS fields;
} RDD_DEBUG_PRINT_INFO_DTS_NEW;
typedef RDD_DEBUG_PRINT_INFO_DTS_NEW * aligned_RDD_DEBUG_PRINT_INFO_DTS_NEW ALIGNMENT8;

#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DEBUG_PRINT_INFO_DTS), r)
#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DEBUG_PRINT_INFO_DTS), v)
#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_READ(r, p)                  MREAD_32((uint8_t *)p, r)
#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p, v)
#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DEBUG_PRINT_INFO_DTS) + 4, r)
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DEBUG_PRINT_INFO_DTS) + 4, v)
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_L_READ( wv )               FIELD_GET( wv, 0, 32 )
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_L_WRITE( v, wv )           FIELD_SET( v, 0, 32, wv )
#define RDD_DEBUG_PRINT_INFO_SIZE_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_DEBUG_PRINT_INFO_DTS) + 8, r)
#define RDD_DEBUG_PRINT_INFO_SIZE_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_DEBUG_PRINT_INFO_DTS) + 8, v)
#define RDD_DEBUG_PRINT_INFO_SIZE_READ(r, p)                      MREAD_32((uint8_t *)p + 8, r)
#define RDD_DEBUG_PRINT_INFO_SIZE_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 8, v)
#define RDD_DEBUG_PRINT_INFO_SIZE_L_READ( wv )                    FIELD_GET( wv, 0, 32 )
#define RDD_DEBUG_PRINT_INFO_SIZE_L_WRITE( v, wv )                FIELD_SET( v, 0, 32, wv )
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_READ_G(r, g, idx)           GROUP_MREAD_8(g, idx*sizeof(RDD_DEBUG_PRINT_INFO_DTS) + 12, r)
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_WRITE_G(v, g, idx)          GROUP_MWRITE_8(g, idx*sizeof(RDD_DEBUG_PRINT_INFO_DTS) + 12, v)
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_READ(r, p)                  MREAD_8((uint8_t *)p + 12, r)
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_WRITE(v, p)                 MWRITE_8((uint8_t *)p + 12, v)
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_L_READ( wv )                FIELD_GET( wv, 24, 8 )
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_L_WRITE( v, wv )            FIELD_SET( v, 24, 8, wv )
/* <<<RDD_DEBUG_PRINT_INFO_DTS */

typedef struct
{
	RDD_DEBUG_PRINT_INFO_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DEBUG_PRINT_TABLE_DTS;

extern uint32_t RDD_DEBUG_PRINT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DEBUG_PRINT_TABLE_PTR(core_id)	( RDD_DEBUG_PRINT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DEBUG_PRINT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DEBUG_PRINT_TABLE */


/* >>>FPM_GLOBAL_CFG */

/* >>>RDD_FPM_GLOBAL_CFG_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	fpm_base_low        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_base_high       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_token_size_asr_8	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0           	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	fpm_base_low        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_base_high       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0           	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_token_size_asr_8	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FPM_GLOBAL_CFG_DTS;

typedef RDD_FPM_GLOBAL_CFG_DTS * aligned_RDD_FPM_GLOBAL_CFG_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[3];
    uint64_t dword_val64[1];
    RDD_FPM_GLOBAL_CFG_DTS fields;
} RDD_FPM_GLOBAL_CFG_DTS_NEW;
typedef RDD_FPM_GLOBAL_CFG_DTS_NEW * aligned_RDD_FPM_GLOBAL_CFG_DTS_NEW ALIGNMENT8;

#define RDD_FPM_GLOBAL_CFG_FPM_BASE_LOW_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_FPM_GLOBAL_CFG_DTS), r)
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_LOW_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_FPM_GLOBAL_CFG_DTS), v)
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_LOW_READ(r, p)                         MREAD_32((uint8_t *)p, r)
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_LOW_WRITE(v, p)                        MWRITE_32((uint8_t *)p, v)
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_HIGH_READ_G(r, g, idx)                 GROUP_MREAD_32(g, idx*sizeof(RDD_FPM_GLOBAL_CFG_DTS) + 4, r)
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_HIGH_WRITE_G(v, g, idx)                GROUP_MWRITE_32(g, idx*sizeof(RDD_FPM_GLOBAL_CFG_DTS) + 4, v)
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_HIGH_READ(r, p)                        MREAD_32((uint8_t *)p + 4, r)
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_HIGH_WRITE(v, p)                       MWRITE_32((uint8_t *)p + 4, v)
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_ASR_8_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_FPM_GLOBAL_CFG_DTS) + 8, r)
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_ASR_8_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_FPM_GLOBAL_CFG_DTS) + 8, v)
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_ASR_8_READ(r, p)                 MREAD_8((uint8_t *)p + 8, r)
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_ASR_8_WRITE(v, p)                MWRITE_8((uint8_t *)p + 8, v)
/* <<<RDD_FPM_GLOBAL_CFG_DTS */

typedef struct
{
	RDD_FPM_GLOBAL_CFG_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FPM_GLOBAL_CFG_TABLE_DTS;

extern uint32_t RDD_FPM_GLOBAL_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_FPM_GLOBAL_CFG_PTR(core_id)	( RDD_FPM_GLOBAL_CFG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_FPM_GLOBAL_CFG_ADDRESS_ARR[core_id] ))

/* <<<FPM_GLOBAL_CFG */


/* >>>XGPON_REPORT_ZERO_SENT_TABLE */

#define RDD_XGPON_REPORT_ZERO_SENT_TABLE_SIZE     10
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_XGPON_REPORT_ZERO_SENT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_XGPON_REPORT_ZERO_SENT_TABLE_DTS;

extern uint32_t RDD_XGPON_REPORT_ZERO_SENT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_XGPON_REPORT_ZERO_SENT_TABLE_PTR(core_id)	( RDD_XGPON_REPORT_ZERO_SENT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_XGPON_REPORT_ZERO_SENT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<XGPON_REPORT_ZERO_SENT_TABLE */


/* >>>DS_TM_BBH_TX_EGRESS_COUNTER_TABLE */

#define RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_SIZE     8
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_DTS;

extern uint32_t RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_PTR(core_id)	( RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_BBH_TX_EGRESS_COUNTER_TABLE */


/* >>>DS_TM_BBH_QUEUE_TABLE */

/* >>>RDD_BBH_QUEUE_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	hw_bbh_qid     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mirroring_en   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	priority       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	scheduler_index	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	scheduler_type 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bb_destination 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ingress_counter	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	ingress_counter	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bb_destination 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	scheduler_type 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	scheduler_index	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	priority       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mirroring_en   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hw_bbh_qid     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BBH_QUEUE_DESCRIPTOR_DTS;

typedef RDD_BBH_QUEUE_DESCRIPTOR_DTS * aligned_RDD_BBH_QUEUE_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_BBH_QUEUE_DESCRIPTOR_DTS fields;
} RDD_BBH_QUEUE_DESCRIPTOR_DTS_NEW;
typedef RDD_BBH_QUEUE_DESCRIPTOR_DTS_NEW * aligned_RDD_BBH_QUEUE_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_BBH_QUEUE_DESCRIPTOR_HW_BBH_QID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS), 2, 6, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_HW_BBH_QID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS), 2, 6, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_HW_BBH_QID_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 2, 6, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_HW_BBH_QID_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 2, 6, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS), 1, 1, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS), 1, 1, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p, 1, 1, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p, 1, 1, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_PRIORITY_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS), 0, 1, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_PRIORITY_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS), 0, 1, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_PRIORITY_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 0, 1, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_PRIORITY_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 0, 1, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS) + 1, 1, 7, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS) + 1, 1, 7, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 1, 1, 7, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 1, 1, 7, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS) + 1, 0, 1, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS) + 1, 0, 1, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 1, 0, 1, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 1, 0, 1, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_READ_G(r, g, idx)           GROUP_MREAD_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS) + 2, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_WRITE_G(v, g, idx)          GROUP_MWRITE_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS) + 2, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_READ(r, p)                  MREAD_8((uint8_t *)p + 2, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_WRITE(v, p)                 MWRITE_8((uint8_t *)p + 2, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS) + 3, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_BBH_QUEUE_DESCRIPTOR_DTS) + 3, v)
#define RDD_BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_READ(r, p)                 MREAD_8((uint8_t *)p + 3, r)
#define RDD_BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_WRITE(v, p)                MWRITE_8((uint8_t *)p + 3, v)
/* <<<RDD_BBH_QUEUE_DESCRIPTOR_DTS */


#define RDD_DS_TM_BBH_QUEUE_TABLE_SIZE     8
typedef struct
{
	RDD_BBH_QUEUE_DESCRIPTOR_DTS	entry[ RDD_DS_TM_BBH_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_BBH_QUEUE_TABLE_DTS;

extern uint32_t RDD_DS_TM_BBH_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_BBH_QUEUE_TABLE_PTR(core_id)	( RDD_DS_TM_BBH_QUEUE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_BBH_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_BBH_QUEUE_TABLE */


/* >>>DS_TM_BBH_TX_ABS_COUNTER_TABLE */

#define RDD_DS_TM_BBH_TX_ABS_COUNTER_TABLE_SIZE     8
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_DS_TM_BBH_TX_ABS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_BBH_TX_ABS_COUNTER_TABLE_DTS;

extern uint32_t RDD_DS_TM_BBH_TX_ABS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_BBH_TX_ABS_COUNTER_TABLE_PTR(core_id)	( RDD_DS_TM_BBH_TX_ABS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_BBH_TX_ABS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_BBH_TX_ABS_COUNTER_TABLE */


/* >>>DS_TM_EGRESS_PORT_RR_TABLE */

/* >>>RDD_DS_TM_EGRESS_PORT_RR_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	next_sched	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	status    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	status    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	next_sched	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_EGRESS_PORT_RR_ENTRY_DTS;

typedef RDD_DS_TM_EGRESS_PORT_RR_ENTRY_DTS * aligned_RDD_DS_TM_EGRESS_PORT_RR_ENTRY_DTS ALIGNMENT8;

#define RDD_DS_TM_EGRESS_PORT_RR_ENTRY_NEXT_SCHED_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_DS_TM_EGRESS_PORT_RR_ENTRY_DTS), r)
#define RDD_DS_TM_EGRESS_PORT_RR_ENTRY_NEXT_SCHED_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_DS_TM_EGRESS_PORT_RR_ENTRY_DTS), v)
#define RDD_DS_TM_EGRESS_PORT_RR_ENTRY_NEXT_SCHED_READ(r, p)                 MREAD_8((uint8_t *)p, r)
#define RDD_DS_TM_EGRESS_PORT_RR_ENTRY_NEXT_SCHED_WRITE(v, p)                MWRITE_8((uint8_t *)p, v)
#define RDD_DS_TM_EGRESS_PORT_RR_ENTRY_STATUS_READ_G(r, g, idx)              GROUP_MREAD_8(g, idx*sizeof(RDD_DS_TM_EGRESS_PORT_RR_ENTRY_DTS) + 1, r)
#define RDD_DS_TM_EGRESS_PORT_RR_ENTRY_STATUS_WRITE_G(v, g, idx)             GROUP_MWRITE_8(g, idx*sizeof(RDD_DS_TM_EGRESS_PORT_RR_ENTRY_DTS) + 1, v)
#define RDD_DS_TM_EGRESS_PORT_RR_ENTRY_STATUS_READ(r, p)                     MREAD_8((uint8_t *)p + 1, r)
#define RDD_DS_TM_EGRESS_PORT_RR_ENTRY_STATUS_WRITE(v, p)                    MWRITE_8((uint8_t *)p + 1, v)
/* <<<RDD_DS_TM_EGRESS_PORT_RR_ENTRY_DTS */


#define RDD_DS_TM_EGRESS_PORT_RR_TABLE_SIZE     3
typedef struct
{
	RDD_DS_TM_EGRESS_PORT_RR_ENTRY_DTS	entry[ RDD_DS_TM_EGRESS_PORT_RR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_TM_EGRESS_PORT_RR_TABLE_DTS;

extern uint32_t RDD_DS_TM_EGRESS_PORT_RR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_EGRESS_PORT_RR_TABLE_PTR(core_id)	( RDD_DS_TM_EGRESS_PORT_RR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_EGRESS_PORT_RR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_EGRESS_PORT_RR_TABLE */


/* >>>SERVICE_QUEUES_RATE_LIMITER_TABLE */

#define RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_SIZE     66
typedef struct
{
	RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS	entry[ RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_DTS;

extern uint32_t RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_PTR(core_id)	( RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_RATE_LIMITER_TABLE */


/* >>>DEBUG_TRACE */

#define RDD_DEBUG_TRACE_SIZE     512
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_DEBUG_TRACE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DEBUG_TRACE_DTS;

extern uint32_t RDD_DEBUG_TRACE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DEBUG_TRACE_PTR(core_id)	( RDD_DEBUG_TRACE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DEBUG_TRACE_ADDRESS_ARR[core_id] ))

/* <<<DEBUG_TRACE */

/* CORE_1 */

/* >>>DDR_PREFETCH_PINGPONG_BUFFER */

#define RDD_DDR_PREFETCH_PINGPONG_BUFFER_SIZE     512
typedef struct
{
	RDD_BYTES_8_DTS	entry[ RDD_DDR_PREFETCH_PINGPONG_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DDR_PREFETCH_PINGPONG_BUFFER_DTS;

extern uint32_t RDD_DDR_PREFETCH_PINGPONG_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DDR_PREFETCH_PINGPONG_BUFFER_PTR(core_id)	( RDD_DDR_PREFETCH_PINGPONG_BUFFER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DDR_PREFETCH_PINGPONG_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<DDR_PREFETCH_PINGPONG_BUFFER */


/* >>>BASIC_RATE_LIMITER_TABLE_US */

#define RDD_BASIC_RATE_LIMITER_TABLE_US_SIZE     128
typedef struct
{
	RDD_BASIC_RATE_LIMITER_DESCRIPTOR_DTS	entry[ RDD_BASIC_RATE_LIMITER_TABLE_US_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BASIC_RATE_LIMITER_TABLE_US_DTS;

extern uint32_t RDD_BASIC_RATE_LIMITER_TABLE_US_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BASIC_RATE_LIMITER_TABLE_US_PTR(core_id)	( RDD_BASIC_RATE_LIMITER_TABLE_US_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BASIC_RATE_LIMITER_TABLE_US_ADDRESS_ARR[core_id] ))

/* <<<BASIC_RATE_LIMITER_TABLE_US */


/* >>>DDR_PREFETCH_PD_FIFO */

/* >>>RDD_BBH_TX_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	sof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	eof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	g9991_const   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sid_1_0       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sid_9_2       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	frag_length   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_sof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_eof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_g9991_const   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_sid_1_0       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_sid_9_2       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_frag_length   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_sof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_eof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_g9991_const   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_sid_1_0       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_sid_9_2       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_frag_length   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	last          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	mc_header_size	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	fpm_free_dis  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	g9991_frag    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_last          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_mc_header_size	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_fpm_free_dis  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_g9991_frag    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_last          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_mc_header_size	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_fpm_free_dis  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_g9991_frag    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved0     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ingress_port  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	buffer_number_1_or_abs_2	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved0     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved1     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	bn1_first               	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_1_or_abs_2 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved0     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved1     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	source_port             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	abs3                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_1_or_abs_2 union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sop                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	bn0_first               	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs1                    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	abs0                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	frag_length   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sid_9_2       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sid_1_0       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	g9991_const   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	eof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_frag_length   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_sid_9_2       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_sid_1_0       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_g9991_const   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_eof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_sof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_frag_length   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_sid_9_2       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_sid_1_0       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_g9991_const   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_eof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_sof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	g9991_frag    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	fpm_free_dis  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	mc_header_size	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	last          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_g9991_frag    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_fpm_free_dis  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_mc_header_size	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_last          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_bn_num        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_g9991_frag    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_fpm_free_dis  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_mc_header_size	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_last          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	buffer_number_1_or_abs_2	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	ingress_port  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	reserved1     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved0     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	bn1_first               	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_1_or_abs_2 union */
			uint32_t	flow                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	reserved1_reserved1     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved0     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	abs3                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_1_or_abs_2 union */
			uint32_t	source_port             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	reserved2_reserved1     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved0     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	bn0_first               	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
			uint32_t	sop                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	reserved1_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	abs0                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
			uint32_t	abs1                    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	reserved2_abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BBH_TX_DESCRIPTOR_DTS;

typedef RDD_BBH_TX_DESCRIPTOR_DTS * aligned_RDD_BBH_TX_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_BBH_TX_DESCRIPTOR_DTS fields;
} RDD_BBH_TX_DESCRIPTOR_DTS_NEW;
typedef RDD_BBH_TX_DESCRIPTOR_DTS_NEW * aligned_RDD_BBH_TX_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_BBH_TX_DESCRIPTOR_SOF_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_SOF_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_SOF_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_SOF_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_EOF_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS), 6, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_EOF_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS), 6, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_EOF_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_EOF_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_G9991_CONST_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS), 2, 4, r)
#define RDD_BBH_TX_DESCRIPTOR_G9991_CONST_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS), 2, 4, v)
#define RDD_BBH_TX_DESCRIPTOR_G9991_CONST_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p, 2, 4, r)
#define RDD_BBH_TX_DESCRIPTOR_G9991_CONST_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p, 2, 4, v)
#define RDD_BBH_TX_DESCRIPTOR_SID_1_0_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS), 0, 2, r)
#define RDD_BBH_TX_DESCRIPTOR_SID_1_0_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS), 0, 2, v)
#define RDD_BBH_TX_DESCRIPTOR_SID_1_0_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 0, 2, r)
#define RDD_BBH_TX_DESCRIPTOR_SID_1_0_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 0, 2, v)
#define RDD_BBH_TX_DESCRIPTOR_SID_9_2_READ_G(r, g, idx)                 GROUP_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 1, r)
#define RDD_BBH_TX_DESCRIPTOR_SID_9_2_WRITE_G(v, g, idx)                GROUP_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 1, v)
#define RDD_BBH_TX_DESCRIPTOR_SID_9_2_READ(r, p)                        MREAD_8((uint8_t *)p + 1, r)
#define RDD_BBH_TX_DESCRIPTOR_SID_9_2_WRITE(v, p)                       MWRITE_8((uint8_t *)p + 1, v)
#define RDD_BBH_TX_DESCRIPTOR_FRAG_LENGTH_READ_G(r, g, idx)             GROUP_MREAD_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 2, r)
#define RDD_BBH_TX_DESCRIPTOR_FRAG_LENGTH_WRITE_G(v, g, idx)            GROUP_MWRITE_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 2, v)
#define RDD_BBH_TX_DESCRIPTOR_FRAG_LENGTH_READ(r, p)                    MREAD_16((uint8_t *)p + 2, r)
#define RDD_BBH_TX_DESCRIPTOR_FRAG_LENGTH_WRITE(v, p)                   MWRITE_16((uint8_t *)p + 2, v)
#define RDD_BBH_TX_DESCRIPTOR_LAST_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 7, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_LAST_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 7, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_LAST_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p + 4, 7, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_LAST_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p + 4, 7, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_MC_HEADER_SIZE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 6, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_MC_HEADER_SIZE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 6, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_MC_HEADER_SIZE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 4, 6, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_MC_HEADER_SIZE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 4, 6, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_FPM_FREE_DIS_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 5, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_FPM_FREE_DIS_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 5, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_FPM_FREE_DIS_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 4, 5, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_FPM_FREE_DIS_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 4, 5, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_G9991_FRAG_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 4, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_G9991_FRAG_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 4, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_G9991_FRAG_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 4, 4, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_G9991_FRAG_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 4, 4, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 3, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 3, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_FLAG_1588_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 4, 3, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_FLAG_1588_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 4, 3, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_COHERENT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 2, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_COHERENT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 2, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_COHERENT_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 4, 2, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_COHERENT_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 4, 2, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_HN_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 5, 5, r)
#define RDD_BBH_TX_DESCRIPTOR_HN_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 5, 5, v)
#define RDD_BBH_TX_DESCRIPTOR_HN_READ(r, p)                             FIELD_MREAD_16((uint8_t *)p + 4, 5, 5, r)
#define RDD_BBH_TX_DESCRIPTOR_HN_WRITE(v, p)                            FIELD_MWRITE_16((uint8_t *)p + 4, 5, 5, v)
#define RDD_BBH_TX_DESCRIPTOR_BN_NUM_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 14, 7, r)
#define RDD_BBH_TX_DESCRIPTOR_BN_NUM_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 4, 14, 7, v)
#define RDD_BBH_TX_DESCRIPTOR_BN_NUM_READ(r, p)                         FIELD_MREAD_32((uint8_t *)p + 4, 14, 7, r)
#define RDD_BBH_TX_DESCRIPTOR_BN_NUM_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)p + 4, 14, 7, v)
#define RDD_BBH_TX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 6, 0, 14, r)
#define RDD_BBH_TX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 6, 0, 14, v)
#define RDD_BBH_TX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                  FIELD_MREAD_16((uint8_t *)p + 6, 0, 14, r)
#define RDD_BBH_TX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)p + 6, 0, 14, v)
#define RDD_BBH_TX_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 6, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 6, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 8, 6, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 8, 6, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_INGRESS_PORT_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_BBH_TX_DESCRIPTOR_INGRESS_PORT_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_BBH_TX_DESCRIPTOR_INGRESS_PORT_READ(r, p)                   FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_BBH_TX_DESCRIPTOR_INGRESS_PORT_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_BBH_TX_DESCRIPTOR_FLOW_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_BBH_TX_DESCRIPTOR_FLOW_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_BBH_TX_DESCRIPTOR_FLOW_READ(r, p)                           FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_BBH_TX_DESCRIPTOR_FLOW_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_BBH_TX_DESCRIPTOR_SOURCE_PORT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_BBH_TX_DESCRIPTOR_SOURCE_PORT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_BBH_TX_DESCRIPTOR_SOURCE_PORT_READ(r, p)                    FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_BBH_TX_DESCRIPTOR_SOURCE_PORT_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_BBH_TX_DESCRIPTOR_BUFFER_NUMBER_1_OR_ABS_2_READ_G(r, g, idx)GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_BUFFER_NUMBER_1_OR_ABS_2_WRITE_G(v, g, idx)GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 0, 18, v)
#define RDD_BBH_TX_DESCRIPTOR_BUFFER_NUMBER_1_OR_ABS_2_READ(r, p)       FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_BUFFER_NUMBER_1_OR_ABS_2_WRITE(v, p)      FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_BBH_TX_DESCRIPTOR_BN1_FIRST_READ_G(r, g, idx)               GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_BN1_FIRST_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 0, 18, v)
#define RDD_BBH_TX_DESCRIPTOR_BN1_FIRST_READ(r, p)                      FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_BN1_FIRST_WRITE(v, p)                     FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_BBH_TX_DESCRIPTOR_ABS3_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_ABS3_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 8, 0, 18, v)
#define RDD_BBH_TX_DESCRIPTOR_ABS3_READ(r, p)                           FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_ABS3_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_BBH_TX_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 7, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 7, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_AGG_PD_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 12, 7, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_AGG_PD_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 12, 7, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 6, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 6, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 12, 6, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 12, 6, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_ABS_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 5, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 5, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_ABS_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 12, 5, 1, r)
#define RDD_BBH_TX_DESCRIPTOR_ABS_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 12, 5, 1, v)
#define RDD_BBH_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_READ_G(r, g, idx) GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_BBH_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WRITE_G(v, g, idx)GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_BBH_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_READ(r, p)        FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_BBH_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WRITE(v, p)       FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_BBH_TX_DESCRIPTOR_SOP_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_BBH_TX_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_BBH_TX_DESCRIPTOR_SOP_READ(r, p)                            FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_BBH_TX_DESCRIPTOR_SOP_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_BBH_TX_DESCRIPTOR_ABS1_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_BBH_TX_DESCRIPTOR_ABS1_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_BBH_TX_DESCRIPTOR_ABS1_READ(r, p)                           FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_BBH_TX_DESCRIPTOR_ABS1_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_BBH_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_READ_G(r, g, idx)GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WRITE_G(v, g, idx)GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_BBH_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_READ(r, p)       FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WRITE(v, p)      FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
#define RDD_BBH_TX_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)               GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_BBH_TX_DESCRIPTOR_BN0_FIRST_READ(r, p)                      FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                     FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
#define RDD_BBH_TX_DESCRIPTOR_ABS0_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_ABS0_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_BBH_TX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_BBH_TX_DESCRIPTOR_ABS0_READ(r, p)                           FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_BBH_TX_DESCRIPTOR_ABS0_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
/* <<<RDD_BBH_TX_DESCRIPTOR_DTS */


#define RDD_DDR_PREFETCH_PD_FIFO_SIZE     64
typedef struct
{
	RDD_BBH_TX_DESCRIPTOR_DTS	entry[ RDD_DDR_PREFETCH_PD_FIFO_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DDR_PREFETCH_PD_FIFO_DTS;

extern uint32_t RDD_DDR_PREFETCH_PD_FIFO_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DDR_PREFETCH_PD_FIFO_PTR(core_id)	( RDD_DDR_PREFETCH_PD_FIFO_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DDR_PREFETCH_PD_FIFO_ADDRESS_ARR[core_id] ))

/* <<<DDR_PREFETCH_PD_FIFO */


/* >>>US_TM_PD_FIFO_TABLE */

#define RDD_US_TM_PD_FIFO_TABLE_SIZE     160
typedef struct
{
	RDD_PROCESSING_TX_DESCRIPTOR_DTS	entry[ RDD_US_TM_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_PD_FIFO_TABLE_DTS;

extern uint32_t RDD_US_TM_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_PD_FIFO_TABLE_PTR(core_id)	( RDD_US_TM_PD_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_PD_FIFO_TABLE */


/* >>>BASIC_SCHEDULER_TABLE_US */

#define RDD_BASIC_SCHEDULER_TABLE_US_SIZE     32
typedef struct
{
	RDD_BASIC_SCHEDULER_DESCRIPTOR_DTS	entry[ RDD_BASIC_SCHEDULER_TABLE_US_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BASIC_SCHEDULER_TABLE_US_DTS;

extern uint32_t RDD_BASIC_SCHEDULER_TABLE_US_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BASIC_SCHEDULER_TABLE_US_PTR(core_id)	( RDD_BASIC_SCHEDULER_TABLE_US_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BASIC_SCHEDULER_TABLE_US_ADDRESS_ARR[core_id] ))

/* <<<BASIC_SCHEDULER_TABLE_US */


/* >>>US_TM_SCHEDULING_QUEUE_TABLE */

#define RDD_US_TM_SCHEDULING_QUEUE_TABLE_SIZE     80
typedef struct
{
	RDD_SCHEDULING_QUEUE_DESCRIPTOR_DTS	entry[ RDD_US_TM_SCHEDULING_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_SCHEDULING_QUEUE_TABLE_DTS;

extern uint32_t RDD_US_TM_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_SCHEDULING_QUEUE_TABLE_PTR(core_id)	( RDD_US_TM_SCHEDULING_QUEUE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_SCHEDULING_QUEUE_TABLE */


/* >>>US_TM_PON_TM_FLOW_CNTR_TABLE */

#define RDD_US_TM_PON_TM_FLOW_CNTR_TABLE_SIZE     64
typedef struct
{
	RDD_TM_FLOW_CNTR_ENTRY_DTS	entry[ RDD_US_TM_PON_TM_FLOW_CNTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_PON_TM_FLOW_CNTR_TABLE_DTS;

extern uint32_t RDD_US_TM_PON_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_PON_TM_FLOW_CNTR_TABLE_PTR(core_id)	( RDD_US_TM_PON_TM_FLOW_CNTR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_PON_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_PON_TM_FLOW_CNTR_TABLE */


/* >>>PFC_FRAME */

#define RDD_PFC_FRAME_SIZE     64
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_PFC_FRAME_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PFC_FRAME_DTS;

extern uint32_t RDD_PFC_FRAME_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PFC_FRAME_PTR(core_id)	( RDD_PFC_FRAME_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PFC_FRAME_ADDRESS_ARR[core_id] ))

/* <<<PFC_FRAME */


/* >>>US_TM_DSL_TM_FLOW_CNTR_TABLE */

#define RDD_US_TM_DSL_TM_FLOW_CNTR_TABLE_SIZE     256
typedef struct
{
	RDD_TM_FLOW_CNTR_ENTRY_DTS	entry[ RDD_US_TM_DSL_TM_FLOW_CNTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_DSL_TM_FLOW_CNTR_TABLE_DTS;

extern uint32_t RDD_US_TM_DSL_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_DSL_TM_FLOW_CNTR_TABLE_PTR(core_id)	( RDD_US_TM_DSL_TM_FLOW_CNTR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_DSL_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_DSL_TM_FLOW_CNTR_TABLE */


/* >>>DDR_PREFETCH_SBPM_FIFO */

#define RDD_DDR_PREFETCH_SBPM_FIFO_SIZE     32
typedef struct
{
	RDD_BYTES_8_DTS	entry[ RDD_DDR_PREFETCH_SBPM_FIFO_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DDR_PREFETCH_SBPM_FIFO_DTS;

extern uint32_t RDD_DDR_PREFETCH_SBPM_FIFO_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DDR_PREFETCH_SBPM_FIFO_PTR(core_id)	( RDD_DDR_PREFETCH_SBPM_FIFO_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DDR_PREFETCH_SBPM_FIFO_ADDRESS_ARR[core_id] ))

/* <<<DDR_PREFETCH_SBPM_FIFO */


/* >>>US_TM_BBH_QUEUE_TABLE */

#define RDD_US_TM_BBH_QUEUE_TABLE_SIZE     50
typedef struct
{
	RDD_BBH_QUEUE_DESCRIPTOR_DTS	entry[ RDD_US_TM_BBH_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_BBH_QUEUE_TABLE_DTS;

extern uint32_t RDD_US_TM_BBH_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_BBH_QUEUE_TABLE_PTR(core_id)	( RDD_US_TM_BBH_QUEUE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_BBH_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_BBH_QUEUE_TABLE */


/* >>>US_TM_AE2P5_BBH_TX_QUEUE_ID_TABLE */

#define RDD_US_TM_AE2P5_BBH_TX_QUEUE_ID_TABLE_SIZE     2
typedef struct
{
	RDD_BBH_TX_QUEUE_ID_ENTRY_DTS	entry[ RDD_US_TM_AE2P5_BBH_TX_QUEUE_ID_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_AE2P5_BBH_TX_QUEUE_ID_TABLE_DTS;

extern uint32_t RDD_US_TM_AE2P5_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_AE2P5_BBH_TX_QUEUE_ID_TABLE_PTR(core_id)	( RDD_US_TM_AE2P5_BBH_TX_QUEUE_ID_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_AE2P5_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_AE2P5_BBH_TX_QUEUE_ID_TABLE */


/* >>>DIRECT_PROCESSING_PD_TABLE */

/* >>>RDD_PROCESSING_RX_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	pd_info           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	key_index                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	fragment_type               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	options                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	reserved0                   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	ctrl_key_index              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	ctrl_fragment_type          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	sfc                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	reserved1                   	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	g9991_tci_sof               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	g9991_tci_eof               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	g9991_tci_const             	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	g9991_tci_sid_1_0           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	g9991_tci_sid_9_2           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	g9991_length_time           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
		/* Sub Union 4 */
		struct{
			uint32_t	timestamp                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bn_num            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_bn_num            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_bn_num            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_bn_num            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_bn_num            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ingress_port      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	bn1_last_or_abs1  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	bn1_last                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	source_port                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	abs1                        	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_ingress_port      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_bn1_last_or_abs1  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_ingress_port      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_bn1_last_or_abs1  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs_or_xdsl       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	error_type_or_cpu_tx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	sop               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bn0_first         	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of abs_or_xdsl union */
			uint32_t	error_type                  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
			uint32_t	reserved1_sop               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_bn0_first         	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	xdsl                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of abs_or_xdsl union */
			uint32_t	is_loopback                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
			uint32_t	cpu_tx                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
			uint32_t	g9991_system_port           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
			uint32_t	reserved2                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
			uint32_t	reserved2_sop               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_bn0_first         	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs_or_xdsl       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_error_type_or_cpu_tx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_sop               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_bn0_first         	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_abs_or_xdsl       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_error_type_or_cpu_tx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_sop               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_bn0_first         	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	pd_info           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	key_index                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	fragment_type               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	options                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	reserved0                   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	ctrl_key_index              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	ctrl_fragment_type          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	sfc                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	reserved1                   	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	g9991_tci_sof               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	g9991_tci_eof               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	g9991_tci_const             	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	g9991_tci_sid_1_0           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	g9991_tci_sid_9_2           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
			uint32_t	g9991_length_time           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
		/* Sub Union 4 */
		struct{
			uint32_t	timestamp                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bn_num            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_bn_num            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_bn_num            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_bn_num            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_bn_num            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	bn1_last_or_abs1  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	ingress_port      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	bn1_last                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
			uint32_t	flow                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	reserved1_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	abs1                        	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
			uint32_t	source_port                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
			uint32_t	reserved2_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_bn1_last_or_abs1  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_ingress_port      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_bn1_last_or_abs1  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_ingress_port      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	bn0_first         	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sop               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	error_type_or_cpu_tx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	abs_or_xdsl       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_bn0_first         	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_sop               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	error_type                  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
			uint32_t	abs                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of abs_or_xdsl union */
			uint32_t	reserved1_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_bn0_first         	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_sop               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_loopback                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
			uint32_t	cpu_tx                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
			uint32_t	g9991_system_port           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
			uint32_t	reserved2                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
			uint32_t	xdsl                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of abs_or_xdsl union */
			uint32_t	reserved2_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_bn0_first         	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_sop               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_error_type_or_cpu_tx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs_or_xdsl       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_bn0_first         	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_sop               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_error_type_or_cpu_tx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_abs_or_xdsl       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PROCESSING_RX_DESCRIPTOR_DTS;

typedef RDD_PROCESSING_RX_DESCRIPTOR_DTS * aligned_RDD_PROCESSING_RX_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_PROCESSING_RX_DESCRIPTOR_DTS fields;
} RDD_PROCESSING_RX_DESCRIPTOR_DTS_NEW;
typedef RDD_PROCESSING_RX_DESCRIPTOR_DTS_NEW * aligned_RDD_PROCESSING_RX_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_PROCESSING_RX_DESCRIPTOR_PD_INFO_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), r)
#define RDD_PROCESSING_RX_DESCRIPTOR_PD_INFO_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), v)
#define RDD_PROCESSING_RX_DESCRIPTOR_PD_INFO_READ(r, p)                            MREAD_32((uint8_t *)p, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_PD_INFO_WRITE(v, p)                           MWRITE_32((uint8_t *)p, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_KEY_INDEX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 6, 2, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_KEY_INDEX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 6, 2, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_KEY_INDEX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p, 6, 2, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_KEY_INDEX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p, 6, 2, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_FRAGMENT_TYPE_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_FRAGMENT_TYPE_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_FRAGMENT_TYPE_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_FRAGMENT_TYPE_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_OPTIONS_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 11, 18, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_OPTIONS_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 11, 18, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_OPTIONS_READ(r, p)                            FIELD_MREAD_32((uint8_t *)p, 11, 18, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_OPTIONS_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)p, 11, 18, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_KEY_INDEX_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 6, 2, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_KEY_INDEX_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 6, 2, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_KEY_INDEX_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p, 6, 2, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_KEY_INDEX_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p, 6, 2, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_FRAGMENT_TYPE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_FRAGMENT_TYPE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_FRAGMENT_TYPE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_FRAGMENT_TYPE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_SFC_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 3, 10, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_SFC_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 3, 10, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_SFC_READ(r, p)                                FIELD_MREAD_16((uint8_t *)p, 3, 10, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_SFC_WRITE(v, p)                               FIELD_MWRITE_16((uint8_t *)p, 3, 10, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SOF_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SOF_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SOF_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SOF_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_EOF_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 6, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_EOF_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 6, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_EOF_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_EOF_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_CONST_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 2, 4, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_CONST_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 2, 4, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_CONST_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p, 2, 4, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_CONST_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p, 2, 4, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_1_0_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 0, 2, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_1_0_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), 0, 2, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_1_0_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p, 0, 2, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_1_0_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p, 0, 2, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_9_2_READ_G(r, g, idx)           GROUP_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_9_2_WRITE_G(v, g, idx)          GROUP_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_9_2_READ(r, p)                  MREAD_8((uint8_t *)p + 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_9_2_WRITE(v, p)                 MWRITE_8((uint8_t *)p + 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_LENGTH_TIME_READ_G(r, g, idx)           GROUP_MREAD_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 2, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_LENGTH_TIME_WRITE_G(v, g, idx)          GROUP_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 2, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_LENGTH_TIME_READ(r, p)                  MREAD_16((uint8_t *)p + 2, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_LENGTH_TIME_WRITE(v, p)                 MWRITE_16((uint8_t *)p + 2, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_TIMESTAMP_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), r)
#define RDD_PROCESSING_RX_DESCRIPTOR_TIMESTAMP_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS), v)
#define RDD_PROCESSING_RX_DESCRIPTOR_TIMESTAMP_READ(r, p)                          MREAD_32((uint8_t *)p, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_TIMESTAMP_WRITE(v, p)                         MWRITE_32((uint8_t *)p, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_SERIAL_NUM_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 4, 6, 10, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_SERIAL_NUM_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 4, 6, 10, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_SERIAL_NUM_READ(r, p)                         FIELD_MREAD_16((uint8_t *)p + 4, 6, 10, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_SERIAL_NUM_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)p + 4, 6, 10, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_PLOAM_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 5, 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_PLOAM_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 5, 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_PLOAM_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 5, 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_PLOAM_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 5, 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_NUM_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 4, 14, 7, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_NUM_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 4, 14, 7, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_NUM_READ(r, p)                             FIELD_MREAD_32((uint8_t *)p + 4, 14, 7, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_NUM_WRITE(v, p)                            FIELD_MWRITE_32((uint8_t *)p + 4, 14, 7, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 6, 0, 14, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 6, 0, 14, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                      FIELD_MREAD_16((uint8_t *)p + 6, 0, 14, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)p + 6, 0, 14, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 7, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 7, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 8, 7, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 8, 7, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 6, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 6, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 8, 6, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 8, 6, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_CONG_STATE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 4, 2, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_CONG_STATE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 4, 2, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_CONG_STATE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 8, 4, 2, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_CONG_STATE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 8, 4, 2, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_CONG_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 3, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_CONG_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 3, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_CONG_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 8, 3, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_CONG_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 8, 3, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_LAN_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 2, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 2, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_LAN_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 8, 2, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_LAN_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 8, 2, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_PORT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_PORT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_PORT_READ(r, p)                       FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_PORT_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_FLOW_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_FLOW_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_FLOW_READ(r, p)                               FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_FLOW_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_SOURCE_PORT_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_SOURCE_PORT_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_SOURCE_PORT_READ(r, p)                        FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_SOURCE_PORT_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_OR_ABS1_READ_G(r, g, idx)            GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 0, 18, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_OR_ABS1_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 0, 18, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_OR_ABS1_READ(r, p)                   FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_OR_ABS1_WRITE(v, p)                  FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 0, 18, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 0, 18, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_READ(r, p)                           FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS1_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 0, 18, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS1_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 8, 0, 18, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS1_READ(r, p)                               FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS1_WRITE(v, p)                              FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 7, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 7, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_AGG_PD_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 12, 7, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_AGG_PD_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 12, 7, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 6, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 6, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 12, 6, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 12, 6, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_OR_XDSL_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_OR_XDSL_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_OR_XDSL_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 12, 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_OR_XDSL_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 12, 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 12, 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 12, 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_XDSL_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_XDSL_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_XDSL_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 12, 5, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_XDSL_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 12, 5, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_OR_CPU_TX_READ_G(r, g, idx)        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 1, 4, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_OR_CPU_TX_WRITE_G(v, g, idx)       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 1, 4, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_OR_CPU_TX_READ(r, p)               FIELD_MREAD_8((uint8_t *)p + 12, 1, 4, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_OR_CPU_TX_WRITE(v, p)              FIELD_MWRITE_8((uint8_t *)p + 12, 1, 4, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 1, 4, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 1, 4, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 12, 1, 4, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 12, 1, 4, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_IS_LOOPBACK_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 4, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_IS_LOOPBACK_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 4, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_IS_LOOPBACK_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 12, 4, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_IS_LOOPBACK_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 12, 4, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_CPU_TX_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 3, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_CPU_TX_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 3, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_CPU_TX_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 12, 3, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_CPU_TX_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 12, 3, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_SYSTEM_PORT_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 2, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_SYSTEM_PORT_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 2, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_SYSTEM_PORT_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 12, 2, 1, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_SYSTEM_PORT_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 12, 2, 1, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 2, 7, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 2, 7, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_READ(r, p)                                FIELD_MREAD_16((uint8_t *)p + 12, 2, 7, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_WRITE(v, p)                               FIELD_MWRITE_16((uint8_t *)p + 12, 2, 7, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_RX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN0_FIRST_READ(r, p)                          FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_PROCESSING_RX_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                         FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
/* <<<RDD_PROCESSING_RX_DESCRIPTOR_DTS */

typedef struct
{
	RDD_PROCESSING_RX_DESCRIPTOR_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DIRECT_PROCESSING_PD_TABLE_DTS;

extern uint32_t RDD_DIRECT_PROCESSING_PD_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DIRECT_PROCESSING_PD_TABLE_PTR(core_id)	( RDD_DIRECT_PROCESSING_PD_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DIRECT_PROCESSING_PD_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DIRECT_PROCESSING_PD_TABLE */


/* >>>DIRECT_PROCESSING_FLOW_CNTR_TABLE */

#define RDD_DIRECT_PROCESSING_FLOW_CNTR_TABLE_SIZE     32
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_DIRECT_PROCESSING_FLOW_CNTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DIRECT_PROCESSING_FLOW_CNTR_TABLE_DTS;

extern uint32_t RDD_DIRECT_PROCESSING_FLOW_CNTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DIRECT_PROCESSING_FLOW_CNTR_TABLE_PTR(core_id)	( RDD_DIRECT_PROCESSING_FLOW_CNTR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DIRECT_PROCESSING_FLOW_CNTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DIRECT_PROCESSING_FLOW_CNTR_TABLE */


/* >>>BBH_TX_EPON_INGRESS_COUNTER_TABLE */

#define RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_SIZE     40
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_DTS;

extern uint32_t RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_PTR(core_id)	( RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BBH_TX_EPON_INGRESS_COUNTER_TABLE */


/* >>>US_TM_AE10_BBH_TX_QUEUE_ID_TABLE */

#define RDD_US_TM_AE10_BBH_TX_QUEUE_ID_TABLE_SIZE     2
typedef struct
{
	RDD_BBH_TX_QUEUE_ID_ENTRY_DTS	entry[ RDD_US_TM_AE10_BBH_TX_QUEUE_ID_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_AE10_BBH_TX_QUEUE_ID_TABLE_DTS;

extern uint32_t RDD_US_TM_AE10_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_AE10_BBH_TX_QUEUE_ID_TABLE_PTR(core_id)	( RDD_US_TM_AE10_BBH_TX_QUEUE_ID_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_AE10_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_AE10_BBH_TX_QUEUE_ID_TABLE */


/* >>>OVERALL_RATE_LIMITER_TABLE */

/* >>>RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	bbh_queue_en_vec	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	current_budget  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	alloc_mantissa  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	alloc_exponent  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	limit_mantissa  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	limit_exponent  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	bbh_queue_en_vec	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	current_budget  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	limit_exponent  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	limit_mantissa  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	alloc_exponent  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	alloc_mantissa  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS;

typedef RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS * aligned_RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS fields;
} RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS_NEW;
typedef RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS_NEW * aligned_RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_BBH_QUEUE_EN_VEC_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS), r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_BBH_QUEUE_EN_VEC_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS), v)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_BBH_QUEUE_EN_VEC_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_BBH_QUEUE_EN_VEC_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS) + 4, r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS) + 4, v)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_READ(r, p)                   MREAD_32((uint8_t *)p + 4, r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 4, v)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS) + 8, 2, 14, r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS) + 8, 2, 14, v)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_READ(r, p)                   FIELD_MREAD_16((uint8_t *)p + 8, 2, 14, r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)p + 8, 2, 14, v)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS) + 9, 0, 2, r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS) + 9, 0, 2, v)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 9, 0, 2, r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 9, 0, 2, v)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS) + 10, 2, 14, r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS) + 10, 2, 14, v)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_READ(r, p)                   FIELD_MREAD_16((uint8_t *)p + 10, 2, 14, r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)p + 10, 2, 14, v)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS) + 11, 0, 2, r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS) + 11, 0, 2, v)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 11, 0, 2, r)
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 11, 0, 2, v)
/* <<<RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS */

typedef struct
{
	RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_OVERALL_RATE_LIMITER_TABLE_DTS;

extern uint32_t RDD_OVERALL_RATE_LIMITER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_OVERALL_RATE_LIMITER_TABLE_PTR(core_id)	( RDD_OVERALL_RATE_LIMITER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_OVERALL_RATE_LIMITER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<OVERALL_RATE_LIMITER_TABLE */


/* >>>US_TM_TM_ACTION_PTR_TABLE */

#define RDD_US_TM_TM_ACTION_PTR_TABLE_SIZE     17
typedef struct
{
	RDD_BYTES_2_DTS	entry[ RDD_US_TM_TM_ACTION_PTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_TM_ACTION_PTR_TABLE_DTS;

extern uint32_t RDD_US_TM_TM_ACTION_PTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_TM_ACTION_PTR_TABLE_PTR(core_id)	( RDD_US_TM_TM_ACTION_PTR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_TM_ACTION_PTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_TM_ACTION_PTR_TABLE */


/* >>>US_TM_DSL_BBH_TX_QUEUE_ID_TABLE */

#define RDD_US_TM_DSL_BBH_TX_QUEUE_ID_TABLE_SIZE     2
typedef struct
{
	RDD_BBH_TX_QUEUE_ID_ENTRY_DTS	entry[ RDD_US_TM_DSL_BBH_TX_QUEUE_ID_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_DSL_BBH_TX_QUEUE_ID_TABLE_DTS;

extern uint32_t RDD_US_TM_DSL_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_DSL_BBH_TX_QUEUE_ID_TABLE_PTR(core_id)	( RDD_US_TM_DSL_BBH_TX_QUEUE_ID_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_DSL_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_DSL_BBH_TX_QUEUE_ID_TABLE */


/* >>>US_TM_FLUSH_DISPATCHER_CREDIT_TABLE */

#define RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_FLUSH_DISPATCHER_CREDIT_TABLE */


/* >>>SPDTEST_GEN_PARAM */

/* >>>RDD_SPDTEST_GEN_CFG_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	test_type        	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_on            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_endless_tx    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	not_valid_license	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved         	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved         	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	not_valid_license	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_endless_tx    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_on            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	test_type        	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDTEST_GEN_CFG_DTS;

typedef RDD_SPDTEST_GEN_CFG_DTS * aligned_RDD_SPDTEST_GEN_CFG_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_SPDTEST_GEN_CFG_DTS fields;
} RDD_SPDTEST_GEN_CFG_DTS_NEW;
typedef RDD_SPDTEST_GEN_CFG_DTS_NEW * aligned_RDD_SPDTEST_GEN_CFG_DTS_NEW ALIGNMENT8;

#define RDD_SPDTEST_GEN_CFG_TEST_TYPE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SPDTEST_GEN_CFG_DTS), 2, 6, r)
#define RDD_SPDTEST_GEN_CFG_TEST_TYPE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SPDTEST_GEN_CFG_DTS), 2, 6, v)
#define RDD_SPDTEST_GEN_CFG_TEST_TYPE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p, 2, 6, r)
#define RDD_SPDTEST_GEN_CFG_TEST_TYPE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p, 2, 6, v)
#define RDD_SPDTEST_GEN_CFG_IS_ON_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SPDTEST_GEN_CFG_DTS), 1, 1, r)
#define RDD_SPDTEST_GEN_CFG_IS_ON_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SPDTEST_GEN_CFG_DTS), 1, 1, v)
#define RDD_SPDTEST_GEN_CFG_IS_ON_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p, 1, 1, r)
#define RDD_SPDTEST_GEN_CFG_IS_ON_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p, 1, 1, v)
#define RDD_SPDTEST_GEN_CFG_IS_ENDLESS_TX_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SPDTEST_GEN_CFG_DTS), 0, 1, r)
#define RDD_SPDTEST_GEN_CFG_IS_ENDLESS_TX_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SPDTEST_GEN_CFG_DTS), 0, 1, v)
#define RDD_SPDTEST_GEN_CFG_IS_ENDLESS_TX_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p, 0, 1, r)
#define RDD_SPDTEST_GEN_CFG_IS_ENDLESS_TX_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p, 0, 1, v)
#define RDD_SPDTEST_GEN_CFG_NOT_VALID_LICENSE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SPDTEST_GEN_CFG_DTS) + 1, 7, 1, r)
#define RDD_SPDTEST_GEN_CFG_NOT_VALID_LICENSE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SPDTEST_GEN_CFG_DTS) + 1, 7, 1, v)
#define RDD_SPDTEST_GEN_CFG_NOT_VALID_LICENSE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 1, 7, 1, r)
#define RDD_SPDTEST_GEN_CFG_NOT_VALID_LICENSE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 1, 7, 1, v)
/* <<<RDD_SPDTEST_GEN_CFG_DTS */

typedef struct
{
	RDD_SPDTEST_GEN_CFG_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDTEST_GEN_PARAM_DTS;

extern uint32_t RDD_SPDTEST_GEN_PARAM_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDTEST_GEN_PARAM_PTR(core_id)	( RDD_SPDTEST_GEN_PARAM_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDTEST_GEN_PARAM_ADDRESS_ARR[core_id] ))

/* <<<SPDTEST_GEN_PARAM */


/* >>>PFC_TX_STATUS_TABLE */

#define RDD_PFC_TX_STATUS_TABLE_SIZE     8
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_PFC_TX_STATUS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PFC_TX_STATUS_TABLE_DTS;

extern uint32_t RDD_PFC_TX_STATUS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PFC_TX_STATUS_TABLE_PTR(core_id)	( RDD_PFC_TX_STATUS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PFC_TX_STATUS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<PFC_TX_STATUS_TABLE */


/* >>>EPON_UPDATE_FIFO_TABLE */

#define RDD_EPON_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	RDD_UPDATE_FIFO_ENTRY_DTS	entry[ RDD_EPON_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_EPON_UPDATE_FIFO_TABLE_DTS;

extern uint32_t RDD_EPON_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_EPON_UPDATE_FIFO_TABLE_PTR(core_id)	( RDD_EPON_UPDATE_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_EPON_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<EPON_UPDATE_FIFO_TABLE */


/* >>>PFC_PD_TABLE */

#define RDD_PFC_PD_TABLE_SIZE     2
typedef struct
{
	RDD_PROCESSING_RX_DESCRIPTOR_DTS	entry[ RDD_PFC_PD_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PFC_PD_TABLE_DTS;

extern uint32_t RDD_PFC_PD_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PFC_PD_TABLE_PTR(core_id)	( RDD_PFC_PD_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PFC_PD_TABLE_ADDRESS_ARR[core_id] ))

/* <<<PFC_PD_TABLE */


/* >>>US_TM_PON_BBH_TX_EGRESS_COUNTER_TABLE */

#define RDD_US_TM_PON_BBH_TX_EGRESS_COUNTER_TABLE_SIZE     32
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_US_TM_PON_BBH_TX_EGRESS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_PON_BBH_TX_EGRESS_COUNTER_TABLE_DTS;

extern uint32_t RDD_US_TM_PON_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_PON_BBH_TX_EGRESS_COUNTER_TABLE_PTR(core_id)	( RDD_US_TM_PON_BBH_TX_EGRESS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_PON_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_PON_BBH_TX_EGRESS_COUNTER_TABLE */


/* >>>DIRECT_PROCESSING_EPON_CONTROL_SCRATCH */

#define RDD_DIRECT_PROCESSING_EPON_CONTROL_SCRATCH_SIZE     22
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_DIRECT_PROCESSING_EPON_CONTROL_SCRATCH_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DIRECT_PROCESSING_EPON_CONTROL_SCRATCH_DTS;

extern uint32_t RDD_DIRECT_PROCESSING_EPON_CONTROL_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DIRECT_PROCESSING_EPON_CONTROL_SCRATCH_PTR(core_id)	( RDD_DIRECT_PROCESSING_EPON_CONTROL_SCRATCH_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DIRECT_PROCESSING_EPON_CONTROL_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<DIRECT_PROCESSING_EPON_CONTROL_SCRATCH */


/* >>>US_TM_BB_DESTINATION_TABLE */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_BB_DESTINATION_TABLE_DTS;

extern uint32_t RDD_US_TM_BB_DESTINATION_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_BB_DESTINATION_TABLE_PTR(core_id)	( RDD_US_TM_BB_DESTINATION_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_BB_DESTINATION_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_BB_DESTINATION_TABLE */


/* >>>US_TM_PON_BBH_TX_QUEUE_ID_TABLE */

#define RDD_US_TM_PON_BBH_TX_QUEUE_ID_TABLE_SIZE     2
typedef struct
{
	RDD_BBH_TX_QUEUE_ID_ENTRY_DTS	entry[ RDD_US_TM_PON_BBH_TX_QUEUE_ID_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_PON_BBH_TX_QUEUE_ID_TABLE_DTS;

extern uint32_t RDD_US_TM_PON_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_PON_BBH_TX_QUEUE_ID_TABLE_PTR(core_id)	( RDD_US_TM_PON_BBH_TX_QUEUE_ID_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_PON_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_PON_BBH_TX_QUEUE_ID_TABLE */


/* >>>US_TM_PON_BBH_TX_ABS_COUNTER_TABLE */

#define RDD_US_TM_PON_BBH_TX_ABS_COUNTER_TABLE_SIZE     32
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_US_TM_PON_BBH_TX_ABS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_PON_BBH_TX_ABS_COUNTER_TABLE_DTS;

extern uint32_t RDD_US_TM_PON_BBH_TX_ABS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_PON_BBH_TX_ABS_COUNTER_TABLE_PTR(core_id)	( RDD_US_TM_PON_BBH_TX_ABS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_PON_BBH_TX_ABS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_PON_BBH_TX_ABS_COUNTER_TABLE */


/* >>>US_TM_SCHEDULING_FLUSH_VECTOR */

#define RDD_US_TM_SCHEDULING_FLUSH_VECTOR_SIZE     5
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_US_TM_SCHEDULING_FLUSH_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_SCHEDULING_FLUSH_VECTOR_DTS;

extern uint32_t RDD_US_TM_SCHEDULING_FLUSH_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_SCHEDULING_FLUSH_VECTOR_PTR(core_id)	( RDD_US_TM_SCHEDULING_FLUSH_VECTOR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_SCHEDULING_FLUSH_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<US_TM_SCHEDULING_FLUSH_VECTOR */


/* >>>US_TM_EPON_BBH_TX_QUEUE_ID_TABLE */

#define RDD_US_TM_EPON_BBH_TX_QUEUE_ID_TABLE_SIZE     2
typedef struct
{
	RDD_BBH_TX_QUEUE_ID_ENTRY_DTS	entry[ RDD_US_TM_EPON_BBH_TX_QUEUE_ID_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_EPON_BBH_TX_QUEUE_ID_TABLE_DTS;

extern uint32_t RDD_US_TM_EPON_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_EPON_BBH_TX_QUEUE_ID_TABLE_PTR(core_id)	( RDD_US_TM_EPON_BBH_TX_QUEUE_ID_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_EPON_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_EPON_BBH_TX_QUEUE_ID_TABLE */


/* >>>BBH_TX_EPON_EGRESS_COUNTER_TABLE */

#define RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_SIZE     32
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_DTS;

extern uint32_t RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_PTR(core_id)	( RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BBH_TX_EPON_EGRESS_COUNTER_TABLE */


/* >>>US_TM_SCHEDULING_QUEUE_AGING_VECTOR */

#define RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_SIZE     5
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_DTS;

extern uint32_t RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_PTR(core_id)	( RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<US_TM_SCHEDULING_QUEUE_AGING_VECTOR */


/* >>>TX_TASK_DDR_PREFETCH_FIFO_PTR */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TX_TASK_DDR_PREFETCH_FIFO_PTR_DTS;

extern uint32_t RDD_TX_TASK_DDR_PREFETCH_FIFO_PTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TX_TASK_DDR_PREFETCH_FIFO_PTR_PTR(core_id)	( RDD_TX_TASK_DDR_PREFETCH_FIFO_PTR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TX_TASK_DDR_PREFETCH_FIFO_PTR_ADDRESS_ARR[core_id] ))

/* <<<TX_TASK_DDR_PREFETCH_FIFO_PTR */


/* >>>US_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR */

#define RDD_US_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_SIZE     5
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_US_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_DTS;

extern uint32_t RDD_US_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_PTR(core_id)	( RDD_US_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<US_TM_SCHEDULING_AGGREGATION_CONTEXT_VECTOR */


/* >>>DDR_READ_DDR_PREFETCH_FIFO_PTR */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DDR_READ_DDR_PREFETCH_FIFO_PTR_DTS;

extern uint32_t RDD_DDR_READ_DDR_PREFETCH_FIFO_PTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DDR_READ_DDR_PREFETCH_FIFO_PTR_PTR(core_id)	( RDD_DDR_READ_DDR_PREFETCH_FIFO_PTR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DDR_READ_DDR_PREFETCH_FIFO_PTR_ADDRESS_ARR[core_id] ))

/* <<<DDR_READ_DDR_PREFETCH_FIFO_PTR */


/* >>>PSRAM_WRITE_DDR_PREFETCH_FIFO_PTR */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PSRAM_WRITE_DDR_PREFETCH_FIFO_PTR_DTS;

extern uint32_t RDD_PSRAM_WRITE_DDR_PREFETCH_FIFO_PTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PSRAM_WRITE_DDR_PREFETCH_FIFO_PTR_PTR(core_id)	( RDD_PSRAM_WRITE_DDR_PREFETCH_FIFO_PTR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PSRAM_WRITE_DDR_PREFETCH_FIFO_PTR_ADDRESS_ARR[core_id] ))

/* <<<PSRAM_WRITE_DDR_PREFETCH_FIFO_PTR */


/* >>>SCRATCH */

#define RDD_SCRATCH_SIZE     8
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_SCRATCH_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SCRATCH_DTS;

extern uint32_t RDD_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SCRATCH_PTR(core_id)	( RDD_SCRATCH_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<SCRATCH */


/* >>>RATE_LIMITER_VALID_TABLE_US */

#define RDD_RATE_LIMITER_VALID_TABLE_US_SIZE     4
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_RATE_LIMITER_VALID_TABLE_US_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RATE_LIMITER_VALID_TABLE_US_DTS;

extern uint32_t RDD_RATE_LIMITER_VALID_TABLE_US_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RATE_LIMITER_VALID_TABLE_US_PTR(core_id)	( RDD_RATE_LIMITER_VALID_TABLE_US_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RATE_LIMITER_VALID_TABLE_US_ADDRESS_ARR[core_id] ))

/* <<<RATE_LIMITER_VALID_TABLE_US */


/* >>>DISPATCHER_CREDIT_TABLE */

#define RDD_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DISPATCHER_CREDIT_TABLE */


/* >>>DDR_READ_DDR_PREFETCH_PINGPONG_BUFFER_PTR */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DDR_READ_DDR_PREFETCH_PINGPONG_BUFFER_PTR_DTS;

extern uint32_t RDD_DDR_READ_DDR_PREFETCH_PINGPONG_BUFFER_PTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DDR_READ_DDR_PREFETCH_PINGPONG_BUFFER_PTR_PTR(core_id)	( RDD_DDR_READ_DDR_PREFETCH_PINGPONG_BUFFER_PTR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DDR_READ_DDR_PREFETCH_PINGPONG_BUFFER_PTR_ADDRESS_ARR[core_id] ))

/* <<<DDR_READ_DDR_PREFETCH_PINGPONG_BUFFER_PTR */


/* >>>PSRAM_WRITE_DDR_PREFETCH_PINGPONG_BUFFER_PTR */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PSRAM_WRITE_DDR_PREFETCH_PINGPONG_BUFFER_PTR_DTS;

extern uint32_t RDD_PSRAM_WRITE_DDR_PREFETCH_PINGPONG_BUFFER_PTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PSRAM_WRITE_DDR_PREFETCH_PINGPONG_BUFFER_PTR_PTR(core_id)	( RDD_PSRAM_WRITE_DDR_PREFETCH_PINGPONG_BUFFER_PTR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PSRAM_WRITE_DDR_PREFETCH_PINGPONG_BUFFER_PTR_ADDRESS_ARR[core_id] ))

/* <<<PSRAM_WRITE_DDR_PREFETCH_PINGPONG_BUFFER_PTR */


/* >>>US_TM_DSL_BBH_TX_EGRESS_COUNTER_TABLE */

#define RDD_US_TM_DSL_BBH_TX_EGRESS_COUNTER_TABLE_SIZE     16
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_US_TM_DSL_BBH_TX_EGRESS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_DSL_BBH_TX_EGRESS_COUNTER_TABLE_DTS;

extern uint32_t RDD_US_TM_DSL_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_DSL_BBH_TX_EGRESS_COUNTER_TABLE_PTR(core_id)	( RDD_US_TM_DSL_BBH_TX_EGRESS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_DSL_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_DSL_BBH_TX_EGRESS_COUNTER_TABLE */


/* >>>WAN_TX_DDR_READ_DISPATCHER_CREDIT_TABLE */

#define RDD_WAN_TX_DDR_READ_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_WAN_TX_DDR_READ_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WAN_TX_DDR_READ_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_WAN_TX_DDR_READ_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WAN_TX_DDR_READ_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_WAN_TX_DDR_READ_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WAN_TX_DDR_READ_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<WAN_TX_DDR_READ_DISPATCHER_CREDIT_TABLE */


/* >>>WRITE_DDR_PREFETCH_SBPM_FIFO_PTR */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WRITE_DDR_PREFETCH_SBPM_FIFO_PTR_DTS;

extern uint32_t RDD_WRITE_DDR_PREFETCH_SBPM_FIFO_PTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WRITE_DDR_PREFETCH_SBPM_FIFO_PTR_PTR(core_id)	( RDD_WRITE_DDR_PREFETCH_SBPM_FIFO_PTR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WRITE_DDR_PREFETCH_SBPM_FIFO_PTR_ADDRESS_ARR[core_id] ))

/* <<<WRITE_DDR_PREFETCH_SBPM_FIFO_PTR */


/* >>>READ_DDR_PREFETCH_SBPM_FIFO_PTR */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_READ_DDR_PREFETCH_SBPM_FIFO_PTR_DTS;

extern uint32_t RDD_READ_DDR_PREFETCH_SBPM_FIFO_PTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_READ_DDR_PREFETCH_SBPM_FIFO_PTR_PTR(core_id)	( RDD_READ_DDR_PREFETCH_SBPM_FIFO_PTR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_READ_DDR_PREFETCH_SBPM_FIFO_PTR_ADDRESS_ARR[core_id] ))

/* <<<READ_DDR_PREFETCH_SBPM_FIFO_PTR */


/* >>>WAN_TX_PSRAM_WRITE_DISPATCHER_CREDIT_TABLE */

#define RDD_WAN_TX_PSRAM_WRITE_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_WAN_TX_PSRAM_WRITE_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WAN_TX_PSRAM_WRITE_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_WAN_TX_PSRAM_WRITE_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WAN_TX_PSRAM_WRITE_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_WAN_TX_PSRAM_WRITE_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WAN_TX_PSRAM_WRITE_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<WAN_TX_PSRAM_WRITE_DISPATCHER_CREDIT_TABLE */


/* >>>TX_TASK_DDR_READ_DISP_BB_ID */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TX_TASK_DDR_READ_DISP_BB_ID_DTS;

extern uint32_t RDD_TX_TASK_DDR_READ_DISP_BB_ID_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TX_TASK_DDR_READ_DISP_BB_ID_PTR(core_id)	( RDD_TX_TASK_DDR_READ_DISP_BB_ID_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TX_TASK_DDR_READ_DISP_BB_ID_ADDRESS_ARR[core_id] ))

/* <<<TX_TASK_DDR_READ_DISP_BB_ID */


/* >>>PFC_TX_ENABLE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PFC_TX_ENABLE_DTS;

extern uint32_t RDD_PFC_TX_ENABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PFC_TX_ENABLE_PTR(core_id)	( RDD_PFC_TX_ENABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PFC_TX_ENABLE_ADDRESS_ARR[core_id] ))

/* <<<PFC_TX_ENABLE */


/* >>>MAC_TYPE */

/* >>>RDD_MAC_TYPE_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	type      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint8_t	type      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_MAC_TYPE_ENTRY_DTS;

typedef RDD_MAC_TYPE_ENTRY_DTS * aligned_RDD_MAC_TYPE_ENTRY_DTS ALIGNMENT8;

#define RDD_MAC_TYPE_ENTRY_TYPE_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_MAC_TYPE_ENTRY_DTS), r)
#define RDD_MAC_TYPE_ENTRY_TYPE_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_MAC_TYPE_ENTRY_DTS), v)
#define RDD_MAC_TYPE_ENTRY_TYPE_READ(r, p)                 MREAD_8((uint8_t *)p, r)
#define RDD_MAC_TYPE_ENTRY_TYPE_WRITE(v, p)                MWRITE_8((uint8_t *)p, v)
/* <<<RDD_MAC_TYPE_ENTRY_DTS */

typedef struct
{
	RDD_MAC_TYPE_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_MAC_TYPE_DTS;

extern uint32_t RDD_MAC_TYPE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_MAC_TYPE_PTR(core_id)	( RDD_MAC_TYPE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_MAC_TYPE_ADDRESS_ARR[core_id] ))

/* <<<MAC_TYPE */


/* >>>US_TM_DSL_BBH_TX_ABS_COUNTER_TABLE */

#define RDD_US_TM_DSL_BBH_TX_ABS_COUNTER_TABLE_SIZE     16
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_US_TM_DSL_BBH_TX_ABS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_DSL_BBH_TX_ABS_COUNTER_TABLE_DTS;

extern uint32_t RDD_US_TM_DSL_BBH_TX_ABS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_DSL_BBH_TX_ABS_COUNTER_TABLE_PTR(core_id)	( RDD_US_TM_DSL_BBH_TX_ABS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_DSL_BBH_TX_ABS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_DSL_BBH_TX_ABS_COUNTER_TABLE */


/* >>>US_TM_SCHEDULING_GLOBAL_FLUSH_CFG */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_SCHEDULING_GLOBAL_FLUSH_CFG_DTS;

extern uint32_t RDD_US_TM_SCHEDULING_GLOBAL_FLUSH_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_SCHEDULING_GLOBAL_FLUSH_CFG_PTR(core_id)	( RDD_US_TM_SCHEDULING_GLOBAL_FLUSH_CFG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_SCHEDULING_GLOBAL_FLUSH_CFG_ADDRESS_ARR[core_id] ))

/* <<<US_TM_SCHEDULING_GLOBAL_FLUSH_CFG */


/* >>>US_TM_ETH_BBH_TX_FIFO_SIZE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_ETH_BBH_TX_FIFO_SIZE_DTS;

extern uint32_t RDD_US_TM_ETH_BBH_TX_FIFO_SIZE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_ETH_BBH_TX_FIFO_SIZE_PTR(core_id)	( RDD_US_TM_ETH_BBH_TX_FIFO_SIZE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_ETH_BBH_TX_FIFO_SIZE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_ETH_BBH_TX_FIFO_SIZE */


/* >>>US_TM_DSL_BBH_TX_FIFO_SIZE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_DSL_BBH_TX_FIFO_SIZE_DTS;

extern uint32_t RDD_US_TM_DSL_BBH_TX_FIFO_SIZE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_DSL_BBH_TX_FIFO_SIZE_PTR(core_id)	( RDD_US_TM_DSL_BBH_TX_FIFO_SIZE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_DSL_BBH_TX_FIFO_SIZE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_DSL_BBH_TX_FIFO_SIZE */


/* >>>US_TM_PON_BBH_TX_FIFO_SIZE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_PON_BBH_TX_FIFO_SIZE_DTS;

extern uint32_t RDD_US_TM_PON_BBH_TX_FIFO_SIZE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_PON_BBH_TX_FIFO_SIZE_PTR(core_id)	( RDD_US_TM_PON_BBH_TX_FIFO_SIZE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_PON_BBH_TX_FIFO_SIZE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_PON_BBH_TX_FIFO_SIZE */


/* >>>US_TM_ETH_TM_FLOW_CNTR_TABLE */
typedef struct
{
	RDD_TM_FLOW_CNTR_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_ETH_TM_FLOW_CNTR_TABLE_DTS;

extern uint32_t RDD_US_TM_ETH_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_ETH_TM_FLOW_CNTR_TABLE_PTR(core_id)	( RDD_US_TM_ETH_TM_FLOW_CNTR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_ETH_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_ETH_TM_FLOW_CNTR_TABLE */


/* >>>US_TM_FIRST_QUEUE_MAPPING */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_FIRST_QUEUE_MAPPING_DTS;

extern uint32_t RDD_US_TM_FIRST_QUEUE_MAPPING_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_FIRST_QUEUE_MAPPING_PTR(core_id)	( RDD_US_TM_FIRST_QUEUE_MAPPING_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_FIRST_QUEUE_MAPPING_ADDRESS_ARR[core_id] ))

/* <<<US_TM_FIRST_QUEUE_MAPPING */


/* >>>US_TM_FLUSH_AGGREGATION_TASK_DISABLE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_FLUSH_AGGREGATION_TASK_DISABLE_DTS;

extern uint32_t RDD_US_TM_FLUSH_AGGREGATION_TASK_DISABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_FLUSH_AGGREGATION_TASK_DISABLE_PTR(core_id)	( RDD_US_TM_FLUSH_AGGREGATION_TASK_DISABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_FLUSH_AGGREGATION_TASK_DISABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_FLUSH_AGGREGATION_TASK_DISABLE */


/* >>>DDR_PREFETCH_PD_FIFO_CNTR */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DDR_PREFETCH_PD_FIFO_CNTR_DTS;

extern uint32_t RDD_DDR_PREFETCH_PD_FIFO_CNTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DDR_PREFETCH_PD_FIFO_CNTR_PTR(core_id)	( RDD_DDR_PREFETCH_PD_FIFO_CNTR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DDR_PREFETCH_PD_FIFO_CNTR_ADDRESS_ARR[core_id] ))

/* <<<DDR_PREFETCH_PD_FIFO_CNTR */


/* >>>DDR_PREFETCH_WAKEUP_FLAG */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DDR_PREFETCH_WAKEUP_FLAG_DTS;

extern uint32_t RDD_DDR_PREFETCH_WAKEUP_FLAG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DDR_PREFETCH_WAKEUP_FLAG_PTR(core_id)	( RDD_DDR_PREFETCH_WAKEUP_FLAG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DDR_PREFETCH_WAKEUP_FLAG_ADDRESS_ARR[core_id] ))

/* <<<DDR_PREFETCH_WAKEUP_FLAG */


/* >>>US_TM_AE2P5_BBH_TX_EGRESS_COUNTER_TABLE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_AE2P5_BBH_TX_EGRESS_COUNTER_TABLE_DTS;

extern uint32_t RDD_US_TM_AE2P5_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_AE2P5_BBH_TX_EGRESS_COUNTER_TABLE_PTR(core_id)	( RDD_US_TM_AE2P5_BBH_TX_EGRESS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_AE2P5_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_AE2P5_BBH_TX_EGRESS_COUNTER_TABLE */


/* >>>US_TM_AE10_BBH_TX_EGRESS_COUNTER_TABLE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_AE10_BBH_TX_EGRESS_COUNTER_TABLE_DTS;

extern uint32_t RDD_US_TM_AE10_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_AE10_BBH_TX_EGRESS_COUNTER_TABLE_PTR(core_id)	( RDD_US_TM_AE10_BBH_TX_EGRESS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_AE10_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_AE10_BBH_TX_EGRESS_COUNTER_TABLE */


/* >>>US_TM_AE2P5_BBH_TX_ABS_COUNTER_TABLE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_AE2P5_BBH_TX_ABS_COUNTER_TABLE_DTS;

extern uint32_t RDD_US_TM_AE2P5_BBH_TX_ABS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_AE2P5_BBH_TX_ABS_COUNTER_TABLE_PTR(core_id)	( RDD_US_TM_AE2P5_BBH_TX_ABS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_AE2P5_BBH_TX_ABS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_AE2P5_BBH_TX_ABS_COUNTER_TABLE */


/* >>>US_TM_AE10_BBH_TX_ABS_COUNTER_TABLE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_TM_AE10_BBH_TX_ABS_COUNTER_TABLE_DTS;

extern uint32_t RDD_US_TM_AE10_BBH_TX_ABS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_AE10_BBH_TX_ABS_COUNTER_TABLE_PTR(core_id)	( RDD_US_TM_AE10_BBH_TX_ABS_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_AE10_BBH_TX_ABS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_AE10_BBH_TX_ABS_COUNTER_TABLE */

/* CORE_2 */

/* >>>CPU_TX_SCRATCHPAD */

#define RDD_CPU_TX_SCRATCHPAD_SIZE     256
typedef struct
{
	RDD_BYTES_8_DTS	entry[ RDD_CPU_TX_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_SCRATCHPAD_DTS;

extern uint32_t RDD_CPU_TX_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_SCRATCHPAD_PTR(core_id)	( RDD_CPU_TX_SCRATCHPAD_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_SCRATCHPAD */


/* >>>TCAM_IC_CMD_TABLE */

/* >>>RDD_TCAM_IC_CMD_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	handler_ptr	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	src_offset 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dst_offset 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	dst_offset 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	src_offset 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	handler_ptr	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCAM_IC_CMD_DTS;

typedef RDD_TCAM_IC_CMD_DTS * aligned_RDD_TCAM_IC_CMD_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_TCAM_IC_CMD_DTS fields;
} RDD_TCAM_IC_CMD_DTS_NEW;
typedef RDD_TCAM_IC_CMD_DTS_NEW * aligned_RDD_TCAM_IC_CMD_DTS_NEW ALIGNMENT8;

#define RDD_TCAM_IC_CMD_HANDLER_PTR_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_TCAM_IC_CMD_DTS), r)
#define RDD_TCAM_IC_CMD_HANDLER_PTR_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_TCAM_IC_CMD_DTS), v)
#define RDD_TCAM_IC_CMD_HANDLER_PTR_READ(r, p)                 MREAD_16((uint8_t *)p, r)
#define RDD_TCAM_IC_CMD_HANDLER_PTR_WRITE(v, p)                MWRITE_16((uint8_t *)p, v)
#define RDD_TCAM_IC_CMD_HANDLER_PTR_L_READ( wv )               FIELD_GET( wv, 16, 16 )
#define RDD_TCAM_IC_CMD_HANDLER_PTR_L_WRITE( v, wv )           FIELD_SET( v, 16, 16, wv )
#define RDD_TCAM_IC_CMD_SRC_OFFSET_READ_G(r, g, idx)           GROUP_MREAD_8(g, idx*sizeof(RDD_TCAM_IC_CMD_DTS) + 2, r)
#define RDD_TCAM_IC_CMD_SRC_OFFSET_WRITE_G(v, g, idx)          GROUP_MWRITE_8(g, idx*sizeof(RDD_TCAM_IC_CMD_DTS) + 2, v)
#define RDD_TCAM_IC_CMD_SRC_OFFSET_READ(r, p)                  MREAD_8((uint8_t *)p + 2, r)
#define RDD_TCAM_IC_CMD_SRC_OFFSET_WRITE(v, p)                 MWRITE_8((uint8_t *)p + 2, v)
#define RDD_TCAM_IC_CMD_SRC_OFFSET_L_READ( wv )                FIELD_GET( wv, 8, 8 )
#define RDD_TCAM_IC_CMD_SRC_OFFSET_L_WRITE( v, wv )            FIELD_SET( v, 8, 8, wv )
#define RDD_TCAM_IC_CMD_DST_OFFSET_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TCAM_IC_CMD_DTS) + 3, 0, 6, r)
#define RDD_TCAM_IC_CMD_DST_OFFSET_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TCAM_IC_CMD_DTS) + 3, 0, 6, v)
#define RDD_TCAM_IC_CMD_DST_OFFSET_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 3, 0, 6, r)
#define RDD_TCAM_IC_CMD_DST_OFFSET_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 3, 0, 6, v)
#define RDD_TCAM_IC_CMD_DST_OFFSET_L_READ( wv )                FIELD_GET( wv, 0, 6 )
#define RDD_TCAM_IC_CMD_DST_OFFSET_L_WRITE( v, wv )            FIELD_SET( v, 0, 6, wv )
/* <<<RDD_TCAM_IC_CMD_DTS */


#define RDD_TCAM_IC_CMD_TABLE_SIZE     9

#define RDD_TCAM_IC_CMD_TABLE_SIZE2    16
typedef struct
{
	RDD_TCAM_IC_CMD_DTS	entry[ RDD_TCAM_IC_CMD_TABLE_SIZE ][ RDD_TCAM_IC_CMD_TABLE_SIZE2 ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCAM_IC_CMD_TABLE_DTS;

extern uint32_t RDD_TCAM_IC_CMD_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCAM_IC_CMD_TABLE_PTR(core_id)	( RDD_TCAM_IC_CMD_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCAM_IC_CMD_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TCAM_IC_CMD_TABLE */


/* >>>GLOBAL_DSCP_TO_PBITS_TABLE */

#define RDD_GLOBAL_DSCP_TO_PBITS_TABLE_SIZE2    64
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_GLOBAL_DSCP_TO_PBITS_TABLE_SIZE2 ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_GLOBAL_DSCP_TO_PBITS_TABLE_DTS;

extern uint32_t RDD_GLOBAL_DSCP_TO_PBITS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_GLOBAL_DSCP_TO_PBITS_TABLE_PTR(core_id)	( RDD_GLOBAL_DSCP_TO_PBITS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_GLOBAL_DSCP_TO_PBITS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<GLOBAL_DSCP_TO_PBITS_TABLE */


/* >>>CPU_TX_DBG_CNTRS_TABLE */

/* >>>RDD_CPU_TX_DBG_CNTRS_DTS */
#define RDD_CPU_TX_DBG_CNTRS_RESERVED_NUMBER	5

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	sbpm_no_next                                     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sbpm_no_first                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_flow_disable                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_fpm                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	task_exit                                        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sync_wait                                        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_dispatcher_scheduler                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	recycle_fifo_full                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	drop_pkt                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	task_start                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_fwd                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved[RDD_CPU_TX_DBG_CNTRS_RESERVED_NUMBER];
#else
	uint32_t	sbpm_no_next                                     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sbpm_no_first                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_flow_disable                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_fpm                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	task_exit                                        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sync_wait                                        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_dispatcher_scheduler                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	recycle_fifo_full                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	drop_pkt                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	task_start                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_fwd                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved[RDD_CPU_TX_DBG_CNTRS_RESERVED_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_DBG_CNTRS_DTS;

typedef RDD_CPU_TX_DBG_CNTRS_DTS * aligned_RDD_CPU_TX_DBG_CNTRS_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[16];
    uint64_t dword_val64[8];
    RDD_CPU_TX_DBG_CNTRS_DTS fields;
} RDD_CPU_TX_DBG_CNTRS_DTS_NEW;
typedef RDD_CPU_TX_DBG_CNTRS_DTS_NEW * aligned_RDD_CPU_TX_DBG_CNTRS_DTS_NEW ALIGNMENT8;

#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS), r)
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS), v)
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_READ(r, p)                            MREAD_32((uint8_t *)p, r)
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_WRITE(v, p)                           MWRITE_32((uint8_t *)p, v)
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_READ_G(r, g, idx)                    GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 4, r)
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_WRITE_G(v, g, idx)                   GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 4, v)
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_READ(r, p)                           MREAD_32((uint8_t *)p + 4, r)
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_WRITE(v, p)                          MWRITE_32((uint8_t *)p + 4, v)
#define RDD_CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 8, r)
#define RDD_CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 8, v)
#define RDD_CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_READ(r, p)                         MREAD_32((uint8_t *)p + 8, r)
#define RDD_CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_WRITE(v, p)                        MWRITE_32((uint8_t *)p + 8, v)
#define RDD_CPU_TX_DBG_CNTRS_NO_FPM_READ_G(r, g, idx)                           GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 12, r)
#define RDD_CPU_TX_DBG_CNTRS_NO_FPM_WRITE_G(v, g, idx)                          GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 12, v)
#define RDD_CPU_TX_DBG_CNTRS_NO_FPM_READ(r, p)                                  MREAD_32((uint8_t *)p + 12, r)
#define RDD_CPU_TX_DBG_CNTRS_NO_FPM_WRITE(v, p)                                 MWRITE_32((uint8_t *)p + 12, v)
#define RDD_CPU_TX_DBG_CNTRS_TASK_EXIT_READ_G(r, g, idx)                        GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 16, r)
#define RDD_CPU_TX_DBG_CNTRS_TASK_EXIT_WRITE_G(v, g, idx)                       GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 16, v)
#define RDD_CPU_TX_DBG_CNTRS_TASK_EXIT_READ(r, p)                               MREAD_32((uint8_t *)p + 16, r)
#define RDD_CPU_TX_DBG_CNTRS_TASK_EXIT_WRITE(v, p)                              MWRITE_32((uint8_t *)p + 16, v)
#define RDD_CPU_TX_DBG_CNTRS_SYNC_WAIT_READ_G(r, g, idx)                        GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 20, r)
#define RDD_CPU_TX_DBG_CNTRS_SYNC_WAIT_WRITE_G(v, g, idx)                       GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 20, v)
#define RDD_CPU_TX_DBG_CNTRS_SYNC_WAIT_READ(r, p)                               MREAD_32((uint8_t *)p + 20, r)
#define RDD_CPU_TX_DBG_CNTRS_SYNC_WAIT_WRITE(v, p)                              MWRITE_32((uint8_t *)p + 20, v)
#define RDD_CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 24, r)
#define RDD_CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 24, v)
#define RDD_CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_READ(r, p)                 MREAD_32((uint8_t *)p + 24, r)
#define RDD_CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_WRITE(v, p)                MWRITE_32((uint8_t *)p + 24, v)
#define RDD_CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 28, r)
#define RDD_CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 28, v)
#define RDD_CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_READ(r, p)                       MREAD_32((uint8_t *)p + 28, r)
#define RDD_CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 28, v)
#define RDD_CPU_TX_DBG_CNTRS_DROP_PKT_READ_G(r, g, idx)                         GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 32, r)
#define RDD_CPU_TX_DBG_CNTRS_DROP_PKT_WRITE_G(v, g, idx)                        GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 32, v)
#define RDD_CPU_TX_DBG_CNTRS_DROP_PKT_READ(r, p)                                MREAD_32((uint8_t *)p + 32, r)
#define RDD_CPU_TX_DBG_CNTRS_DROP_PKT_WRITE(v, p)                               MWRITE_32((uint8_t *)p + 32, v)
#define RDD_CPU_TX_DBG_CNTRS_TASK_START_READ_G(r, g, idx)                       GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 36, r)
#define RDD_CPU_TX_DBG_CNTRS_TASK_START_WRITE_G(v, g, idx)                      GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 36, v)
#define RDD_CPU_TX_DBG_CNTRS_TASK_START_READ(r, p)                              MREAD_32((uint8_t *)p + 36, r)
#define RDD_CPU_TX_DBG_CNTRS_TASK_START_WRITE(v, p)                             MWRITE_32((uint8_t *)p + 36, v)
#define RDD_CPU_TX_DBG_CNTRS_NO_FWD_READ_G(r, g, idx)                           GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 40, r)
#define RDD_CPU_TX_DBG_CNTRS_NO_FWD_WRITE_G(v, g, idx)                          GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DBG_CNTRS_DTS) + 40, v)
#define RDD_CPU_TX_DBG_CNTRS_NO_FWD_READ(r, p)                                  MREAD_32((uint8_t *)p + 40, r)
#define RDD_CPU_TX_DBG_CNTRS_NO_FWD_WRITE(v, p)                                 MWRITE_32((uint8_t *)p + 40, v)
/* <<<RDD_CPU_TX_DBG_CNTRS_DTS */


#define RDD_CPU_TX_DBG_CNTRS_TABLE_SIZE     2
typedef struct
{
	RDD_CPU_TX_DBG_CNTRS_DTS	entry[ RDD_CPU_TX_DBG_CNTRS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_DBG_CNTRS_TABLE_DTS;

extern uint32_t RDD_CPU_TX_DBG_CNTRS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_DBG_CNTRS_TABLE_PTR(core_id)	( RDD_CPU_TX_DBG_CNTRS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_DBG_CNTRS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_DBG_CNTRS_TABLE */


/* >>>DSCP_TO_PBITS_MAP_TABLE */

#define RDD_DSCP_TO_PBITS_MAP_TABLE_SIZE     4

#define RDD_DSCP_TO_PBITS_MAP_TABLE_SIZE2    64
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_DSCP_TO_PBITS_MAP_TABLE_SIZE ][ RDD_DSCP_TO_PBITS_MAP_TABLE_SIZE2 ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DSCP_TO_PBITS_MAP_TABLE_DTS;

extern uint32_t RDD_DSCP_TO_PBITS_MAP_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DSCP_TO_PBITS_MAP_TABLE_PTR(core_id)	( RDD_DSCP_TO_PBITS_MAP_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DSCP_TO_PBITS_MAP_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DSCP_TO_PBITS_MAP_TABLE */


/* >>>TC_TO_QUEUE_TABLE */

/* >>>RDD_TC_TO_QUEUE_8_DTS */
#define RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_NUMBER	8

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	queue_offset[RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_NUMBER];
#else
	uint8_t	queue_offset[RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TC_TO_QUEUE_8_DTS;

typedef RDD_TC_TO_QUEUE_8_DTS * aligned_RDD_TC_TO_QUEUE_8_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_TC_TO_QUEUE_8_DTS fields;
} RDD_TC_TO_QUEUE_8_DTS_NEW;
typedef RDD_TC_TO_QUEUE_8_DTS_NEW * aligned_RDD_TC_TO_QUEUE_8_DTS_NEW ALIGNMENT8;

#define RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_TC_TO_QUEUE_8_DTS), i, r)
#define RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_TC_TO_QUEUE_8_DTS), i, v)
#define RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_READ(r, p, i)              MREAD_I_8((uint8_t *)p, i, r)
#define RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p, i, v)
/* <<<RDD_TC_TO_QUEUE_8_DTS */


#define RDD_TC_TO_QUEUE_TABLE_SIZE     65
typedef struct
{
	RDD_TC_TO_QUEUE_8_DTS	entry[ RDD_TC_TO_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TC_TO_QUEUE_TABLE_DTS;

extern uint32_t RDD_TC_TO_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TC_TO_QUEUE_TABLE_PTR(core_id)	( RDD_TC_TO_QUEUE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TC_TO_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TC_TO_QUEUE_TABLE */


/* >>>IPTV_CONFIGURATION_TABLE */

/* >>>RDD_HW_IPTV_CONFIGURATION_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	fpm_base_token_size	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hn_size1           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hn_size0           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ddr_sop_offset0    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ddr_sop_offset1    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	hn_size0           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hn_size1           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_base_token_size	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ddr_sop_offset1    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ddr_sop_offset0    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_HW_IPTV_CONFIGURATION_DTS;

typedef RDD_HW_IPTV_CONFIGURATION_DTS * aligned_RDD_HW_IPTV_CONFIGURATION_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_HW_IPTV_CONFIGURATION_DTS fields;
} RDD_HW_IPTV_CONFIGURATION_DTS_NEW;
typedef RDD_HW_IPTV_CONFIGURATION_DTS_NEW * aligned_RDD_HW_IPTV_CONFIGURATION_DTS_NEW ALIGNMENT8;

#define RDD_HW_IPTV_CONFIGURATION_FPM_BASE_TOKEN_SIZE_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_HW_IPTV_CONFIGURATION_DTS), r)
#define RDD_HW_IPTV_CONFIGURATION_FPM_BASE_TOKEN_SIZE_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_HW_IPTV_CONFIGURATION_DTS), v)
#define RDD_HW_IPTV_CONFIGURATION_FPM_BASE_TOKEN_SIZE_READ(r, p)                 MREAD_16((uint8_t *)p, r)
#define RDD_HW_IPTV_CONFIGURATION_FPM_BASE_TOKEN_SIZE_WRITE(v, p)                MWRITE_16((uint8_t *)p, v)
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE1_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_HW_IPTV_CONFIGURATION_DTS) + 2, 0, 7, r)
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE1_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_HW_IPTV_CONFIGURATION_DTS) + 2, 0, 7, v)
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE1_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 2, 0, 7, r)
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE1_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 2, 0, 7, v)
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE0_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_HW_IPTV_CONFIGURATION_DTS) + 3, 0, 7, r)
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE0_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_HW_IPTV_CONFIGURATION_DTS) + 3, 0, 7, v)
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE0_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 3, 0, 7, r)
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE0_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 3, 0, 7, v)
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET0_READ_G(r, g, idx)              GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_HW_IPTV_CONFIGURATION_DTS) + 4, 0, 11, r)
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET0_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_HW_IPTV_CONFIGURATION_DTS) + 4, 0, 11, v)
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET0_READ(r, p)                     FIELD_MREAD_16((uint8_t *)p + 4, 0, 11, r)
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET0_WRITE(v, p)                    FIELD_MWRITE_16((uint8_t *)p + 4, 0, 11, v)
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET1_READ_G(r, g, idx)              GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_HW_IPTV_CONFIGURATION_DTS) + 6, 0, 11, r)
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET1_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_HW_IPTV_CONFIGURATION_DTS) + 6, 0, 11, v)
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET1_READ(r, p)                     FIELD_MREAD_16((uint8_t *)p + 6, 0, 11, r)
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET1_WRITE(v, p)                    FIELD_MWRITE_16((uint8_t *)p + 6, 0, 11, v)
/* <<<RDD_HW_IPTV_CONFIGURATION_DTS */

typedef struct
{
	RDD_HW_IPTV_CONFIGURATION_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_CONFIGURATION_TABLE_DTS;

extern uint32_t RDD_IPTV_CONFIGURATION_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPTV_CONFIGURATION_TABLE_PTR(core_id)	( RDD_IPTV_CONFIGURATION_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPTV_CONFIGURATION_TABLE_ADDRESS_ARR[core_id] ))

/* <<<IPTV_CONFIGURATION_TABLE */


/* >>>FPM_REPLY */

#define RDD_FPM_REPLY_SIZE     2
typedef struct
{
	RDD_BYTES_8_DTS	entry[ RDD_FPM_REPLY_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FPM_REPLY_DTS;

extern uint32_t RDD_FPM_REPLY_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_FPM_REPLY_PTR(core_id)	( RDD_FPM_REPLY_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_FPM_REPLY_ADDRESS_ARR[core_id] ))

/* <<<FPM_REPLY */


/* >>>FPM_POOL_NUMBER_MAPPING_TABLE */

/* >>>RDD_FPM_POOL_NUMBER_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	reserved   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	pool_number	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint8_t	pool_number	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FPM_POOL_NUMBER_DTS;

typedef RDD_FPM_POOL_NUMBER_DTS * aligned_RDD_FPM_POOL_NUMBER_DTS ALIGNMENT8;

#define RDD_FPM_POOL_NUMBER_POOL_NUMBER_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FPM_POOL_NUMBER_DTS), 0, 2, r)
#define RDD_FPM_POOL_NUMBER_POOL_NUMBER_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FPM_POOL_NUMBER_DTS), 0, 2, v)
#define RDD_FPM_POOL_NUMBER_POOL_NUMBER_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 0, 2, r)
#define RDD_FPM_POOL_NUMBER_POOL_NUMBER_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 0, 2, v)
/* <<<RDD_FPM_POOL_NUMBER_DTS */


#define RDD_FPM_POOL_NUMBER_MAPPING_TABLE_SIZE     64
typedef struct
{
	RDD_FPM_POOL_NUMBER_DTS	entry[ RDD_FPM_POOL_NUMBER_MAPPING_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FPM_POOL_NUMBER_MAPPING_TABLE_DTS;

extern uint32_t RDD_FPM_POOL_NUMBER_MAPPING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_FPM_POOL_NUMBER_MAPPING_TABLE_PTR(core_id)	( RDD_FPM_POOL_NUMBER_MAPPING_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_FPM_POOL_NUMBER_MAPPING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<FPM_POOL_NUMBER_MAPPING_TABLE */


/* >>>CPU_TX_FPM_POOL_NUMBER_MAPPING_TABLE */

#define RDD_CPU_TX_FPM_POOL_NUMBER_MAPPING_TABLE_SIZE     64
typedef struct
{
	RDD_FPM_POOL_NUMBER_DTS	entry[ RDD_CPU_TX_FPM_POOL_NUMBER_MAPPING_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_FPM_POOL_NUMBER_MAPPING_TABLE_DTS;

extern uint32_t RDD_CPU_TX_FPM_POOL_NUMBER_MAPPING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_FPM_POOL_NUMBER_MAPPING_TABLE_PTR(core_id)	( RDD_CPU_TX_FPM_POOL_NUMBER_MAPPING_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_FPM_POOL_NUMBER_MAPPING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_FPM_POOL_NUMBER_MAPPING_TABLE */


/* >>>PON_TX_FLOW_TABLE */

/* >>>RDD_TX_FLOW_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	qos_table_ptr	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint8_t	qos_table_ptr	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TX_FLOW_ENTRY_DTS;

typedef RDD_TX_FLOW_ENTRY_DTS * aligned_RDD_TX_FLOW_ENTRY_DTS ALIGNMENT8;

#define RDD_TX_FLOW_ENTRY_VALID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TX_FLOW_ENTRY_DTS), 7, 1, r)
#define RDD_TX_FLOW_ENTRY_VALID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TX_FLOW_ENTRY_DTS), 7, 1, v)
#define RDD_TX_FLOW_ENTRY_VALID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_TX_FLOW_ENTRY_VALID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_TX_FLOW_ENTRY_QOS_TABLE_PTR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TX_FLOW_ENTRY_DTS), 0, 7, r)
#define RDD_TX_FLOW_ENTRY_QOS_TABLE_PTR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TX_FLOW_ENTRY_DTS), 0, 7, v)
#define RDD_TX_FLOW_ENTRY_QOS_TABLE_PTR_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 0, 7, r)
#define RDD_TX_FLOW_ENTRY_QOS_TABLE_PTR_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 0, 7, v)
/* <<<RDD_TX_FLOW_ENTRY_DTS */


#define RDD_PON_TX_FLOW_TABLE_SIZE     64
typedef struct
{
	RDD_TX_FLOW_ENTRY_DTS	entry[ RDD_PON_TX_FLOW_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PON_TX_FLOW_TABLE_DTS;

extern uint32_t RDD_PON_TX_FLOW_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PON_TX_FLOW_TABLE_PTR(core_id)	( RDD_PON_TX_FLOW_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PON_TX_FLOW_TABLE_ADDRESS_ARR[core_id] ))

/* <<<PON_TX_FLOW_TABLE */


/* >>>DSL_TX_FLOW_TABLE */

#define RDD_DSL_TX_FLOW_TABLE_SIZE     256
typedef struct
{
	RDD_TX_FLOW_ENTRY_DTS	entry[ RDD_DSL_TX_FLOW_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DSL_TX_FLOW_TABLE_DTS;

extern uint32_t RDD_DSL_TX_FLOW_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DSL_TX_FLOW_TABLE_PTR(core_id)	( RDD_DSL_TX_FLOW_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DSL_TX_FLOW_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DSL_TX_FLOW_TABLE */


/* >>>DS_PACKET_BUFFER */

/* >>>RDD_PACKET_BUFFER_DTS */
#define RDD_PACKET_BUFFER_PACKET_HEADER_NUMBER	160
#define RDD_PACKET_BUFFER_PARSER_RESULT_NUMBER	56
#define RDD_PACKET_BUFFER_SCRATCH_NUMBER	104
#define RDD_PACKET_BUFFER_PD_NUMBER	16
#define RDD_PACKET_BUFFER_RESOLUTION_CONTEXT_NUMBER	16
#define RDD_PACKET_BUFFER_CLASSIFICATION_RESULTS_NUMBER	7
#define RDD_PACKET_BUFFER_RESERVED_NUMBER	4
#define RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_NUMBER	128

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	packet_header[RDD_PACKET_BUFFER_PACKET_HEADER_NUMBER];
	uint8_t	parser_result[RDD_PACKET_BUFFER_PARSER_RESULT_NUMBER];
	uint8_t	scratch[RDD_PACKET_BUFFER_SCRATCH_NUMBER];
	uint8_t	pd[RDD_PACKET_BUFFER_PD_NUMBER];
	uint8_t	resolution_context[RDD_PACKET_BUFFER_RESOLUTION_CONTEXT_NUMBER];
	uint32_t	classification_results[RDD_PACKET_BUFFER_CLASSIFICATION_RESULTS_NUMBER];
	uint8_t	reserved[RDD_PACKET_BUFFER_RESERVED_NUMBER];
	uint8_t	classification_contexts_list[RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_NUMBER];
#else
	uint8_t	packet_header[RDD_PACKET_BUFFER_PACKET_HEADER_NUMBER];
	uint8_t	parser_result[RDD_PACKET_BUFFER_PARSER_RESULT_NUMBER];
	uint8_t	scratch[RDD_PACKET_BUFFER_SCRATCH_NUMBER];
	uint8_t	pd[RDD_PACKET_BUFFER_PD_NUMBER];
	uint8_t	resolution_context[RDD_PACKET_BUFFER_RESOLUTION_CONTEXT_NUMBER];
	uint32_t	classification_results[RDD_PACKET_BUFFER_CLASSIFICATION_RESULTS_NUMBER];
	uint8_t	reserved[RDD_PACKET_BUFFER_RESERVED_NUMBER];
	uint8_t	classification_contexts_list[RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PACKET_BUFFER_DTS;

typedef RDD_PACKET_BUFFER_DTS * aligned_RDD_PACKET_BUFFER_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[128];
    uint64_t dword_val64[64];
    RDD_PACKET_BUFFER_DTS fields;
} RDD_PACKET_BUFFER_DTS_NEW;
typedef RDD_PACKET_BUFFER_DTS_NEW * aligned_RDD_PACKET_BUFFER_DTS_NEW ALIGNMENT8;

#define RDD_PACKET_BUFFER_PACKET_HEADER_READ_G(r, g, idx, i)                      GROUP_MREAD_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS), i, r)
#define RDD_PACKET_BUFFER_PACKET_HEADER_WRITE_G(v, g, idx, i)                     GROUP_MWRITE_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS), i, v)
#define RDD_PACKET_BUFFER_PACKET_HEADER_READ(r, p, i)                             MREAD_I_8((uint8_t *)p, i, r)
#define RDD_PACKET_BUFFER_PACKET_HEADER_WRITE(v, p, i)                            MWRITE_I_8((uint8_t *)p, i, v)
#define RDD_PACKET_BUFFER_PARSER_RESULT_READ_G(r, g, idx, i)                      GROUP_MREAD_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 160, i, r)
#define RDD_PACKET_BUFFER_PARSER_RESULT_WRITE_G(v, g, idx, i)                     GROUP_MWRITE_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 160, i, v)
#define RDD_PACKET_BUFFER_PARSER_RESULT_READ(r, p, i)                             MREAD_I_8((uint8_t *)p + 160, i, r)
#define RDD_PACKET_BUFFER_PARSER_RESULT_WRITE(v, p, i)                            MWRITE_I_8((uint8_t *)p + 160, i, v)
#define RDD_PACKET_BUFFER_SCRATCH_READ_G(r, g, idx, i)                            GROUP_MREAD_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 216, i, r)
#define RDD_PACKET_BUFFER_SCRATCH_WRITE_G(v, g, idx, i)                           GROUP_MWRITE_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 216, i, v)
#define RDD_PACKET_BUFFER_SCRATCH_READ(r, p, i)                                   MREAD_I_8((uint8_t *)p + 216, i, r)
#define RDD_PACKET_BUFFER_SCRATCH_WRITE(v, p, i)                                  MWRITE_I_8((uint8_t *)p + 216, i, v)
#define RDD_PACKET_BUFFER_PD_READ_G(r, g, idx, i)                                 GROUP_MREAD_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 320, i, r)
#define RDD_PACKET_BUFFER_PD_WRITE_G(v, g, idx, i)                                GROUP_MWRITE_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 320, i, v)
#define RDD_PACKET_BUFFER_PD_READ(r, p, i)                                        MREAD_I_8((uint8_t *)p + 320, i, r)
#define RDD_PACKET_BUFFER_PD_WRITE(v, p, i)                                       MWRITE_I_8((uint8_t *)p + 320, i, v)
#define RDD_PACKET_BUFFER_RESOLUTION_CONTEXT_READ_G(r, g, idx, i)                 GROUP_MREAD_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 336, i, r)
#define RDD_PACKET_BUFFER_RESOLUTION_CONTEXT_WRITE_G(v, g, idx, i)                GROUP_MWRITE_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 336, i, v)
#define RDD_PACKET_BUFFER_RESOLUTION_CONTEXT_READ(r, p, i)                        MREAD_I_8((uint8_t *)p + 336, i, r)
#define RDD_PACKET_BUFFER_RESOLUTION_CONTEXT_WRITE(v, p, i)                       MWRITE_I_8((uint8_t *)p + 336, i, v)
#define RDD_PACKET_BUFFER_CLASSIFICATION_RESULTS_READ_G(r, g, idx, i)             GROUP_MREAD_I_32(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 352, i, r)
#define RDD_PACKET_BUFFER_CLASSIFICATION_RESULTS_WRITE_G(v, g, idx, i)            GROUP_MWRITE_I_32(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 352, i, v)
#define RDD_PACKET_BUFFER_CLASSIFICATION_RESULTS_READ(r, p, i)                    MREAD_I_32((uint8_t *)p + 352, i, r)
#define RDD_PACKET_BUFFER_CLASSIFICATION_RESULTS_WRITE(v, p, i)                   MWRITE_I_32((uint8_t *)p + 352, i, v)
#define RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 384, i, r)
#define RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_DTS) + 384, i, v)
#define RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_READ(r, p, i)              MREAD_I_8((uint8_t *)p + 384, i, r)
#define RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p + 384, i, v)
/* <<<RDD_PACKET_BUFFER_DTS */


#define RDD_DS_PACKET_BUFFER_SIZE     8
typedef struct
{
	RDD_PACKET_BUFFER_DTS	entry[ RDD_DS_PACKET_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_PACKET_BUFFER_DTS;

extern uint32_t RDD_DS_PACKET_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_PACKET_BUFFER_PTR(core_id)	( RDD_DS_PACKET_BUFFER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_PACKET_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<DS_PACKET_BUFFER */


/* >>>RX_FLOW_TABLE */

/* >>>RDD_RX_FLOW_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	virtual_port	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	flow_dest   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	exception   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	reserved    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	cntr_id     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	cntr_id     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	reserved    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	exception   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	flow_dest   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	virtual_port	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RX_FLOW_ENTRY_DTS;

typedef RDD_RX_FLOW_ENTRY_DTS * aligned_RDD_RX_FLOW_ENTRY_DTS ALIGNMENT8;

#define RDD_RX_FLOW_ENTRY_VIRTUAL_PORT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RX_FLOW_ENTRY_DTS), 3, 5, r)
#define RDD_RX_FLOW_ENTRY_VIRTUAL_PORT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RX_FLOW_ENTRY_DTS), 3, 5, v)
#define RDD_RX_FLOW_ENTRY_VIRTUAL_PORT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 3, 5, r)
#define RDD_RX_FLOW_ENTRY_VIRTUAL_PORT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 3, 5, v)
#define RDD_RX_FLOW_ENTRY_FLOW_DEST_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RX_FLOW_ENTRY_DTS), 2, 1, r)
#define RDD_RX_FLOW_ENTRY_FLOW_DEST_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RX_FLOW_ENTRY_DTS), 2, 1, v)
#define RDD_RX_FLOW_ENTRY_FLOW_DEST_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p, 2, 1, r)
#define RDD_RX_FLOW_ENTRY_FLOW_DEST_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p, 2, 1, v)
#define RDD_RX_FLOW_ENTRY_EXCEPTION_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RX_FLOW_ENTRY_DTS), 1, 1, r)
#define RDD_RX_FLOW_ENTRY_EXCEPTION_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RX_FLOW_ENTRY_DTS), 1, 1, v)
#define RDD_RX_FLOW_ENTRY_EXCEPTION_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p, 1, 1, r)
#define RDD_RX_FLOW_ENTRY_EXCEPTION_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p, 1, 1, v)
#define RDD_RX_FLOW_ENTRY_CNTR_ID_READ_G(r, g, idx)               GROUP_MREAD_8(g, idx*sizeof(RDD_RX_FLOW_ENTRY_DTS) + 1, r)
#define RDD_RX_FLOW_ENTRY_CNTR_ID_WRITE_G(v, g, idx)              GROUP_MWRITE_8(g, idx*sizeof(RDD_RX_FLOW_ENTRY_DTS) + 1, v)
#define RDD_RX_FLOW_ENTRY_CNTR_ID_READ(r, p)                      MREAD_8((uint8_t *)p + 1, r)
#define RDD_RX_FLOW_ENTRY_CNTR_ID_WRITE(v, p)                     MWRITE_8((uint8_t *)p + 1, v)
/* <<<RDD_RX_FLOW_ENTRY_DTS */


#define RDD_RX_FLOW_TABLE_SIZE     330
typedef struct
{
	RDD_RX_FLOW_ENTRY_DTS	entry[ RDD_RX_FLOW_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RX_FLOW_TABLE_DTS;

extern uint32_t RDD_RX_FLOW_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RX_FLOW_TABLE_PTR(core_id)	( RDD_RX_FLOW_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RX_FLOW_TABLE_ADDRESS_ARR[core_id] ))

/* <<<RX_FLOW_TABLE */


/* >>>VPORT_TO_DSCP_TO_PBITS_TABLE */

#define RDD_VPORT_TO_DSCP_TO_PBITS_TABLE_SIZE     32
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_VPORT_TO_DSCP_TO_PBITS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_VPORT_TO_DSCP_TO_PBITS_TABLE_DTS;

extern uint32_t RDD_VPORT_TO_DSCP_TO_PBITS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_VPORT_TO_DSCP_TO_PBITS_TABLE_PTR(core_id)	( RDD_VPORT_TO_DSCP_TO_PBITS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_VPORT_TO_DSCP_TO_PBITS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<VPORT_TO_DSCP_TO_PBITS_TABLE */


/* >>>VPORT_TX_FLOW_TABLE */

#define RDD_VPORT_TX_FLOW_TABLE_SIZE     64
typedef struct
{
	RDD_TX_FLOW_ENTRY_DTS	entry[ RDD_VPORT_TX_FLOW_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_VPORT_TX_FLOW_TABLE_DTS;

extern uint32_t RDD_VPORT_TX_FLOW_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_VPORT_TX_FLOW_TABLE_PTR(core_id)	( RDD_VPORT_TX_FLOW_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_VPORT_TX_FLOW_TABLE_ADDRESS_ARR[core_id] ))

/* <<<VPORT_TX_FLOW_TABLE */


/* >>>QM_QUEUE_TO_TX_FLOW_TABLE_PTR_TABLE */

#define RDD_QM_QUEUE_TO_TX_FLOW_TABLE_PTR_TABLE_SIZE     128
typedef struct
{
	RDD_BYTES_2_DTS	entry[ RDD_QM_QUEUE_TO_TX_FLOW_TABLE_PTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_QM_QUEUE_TO_TX_FLOW_TABLE_PTR_TABLE_DTS;

extern uint32_t RDD_QM_QUEUE_TO_TX_FLOW_TABLE_PTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_QM_QUEUE_TO_TX_FLOW_TABLE_PTR_TABLE_PTR(core_id)	( RDD_QM_QUEUE_TO_TX_FLOW_TABLE_PTR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_QM_QUEUE_TO_TX_FLOW_TABLE_PTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<QM_QUEUE_TO_TX_FLOW_TABLE_PTR_TABLE */


/* >>>PBIT_TO_QUEUE_TABLE */

/* >>>RDD_PBIT_TO_QUEUE_8_DTS */
#define RDD_PBIT_TO_QUEUE_8_QUEUE_OFFSET_NUMBER	8

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	queue_offset[RDD_PBIT_TO_QUEUE_8_QUEUE_OFFSET_NUMBER];
#else
	uint8_t	queue_offset[RDD_PBIT_TO_QUEUE_8_QUEUE_OFFSET_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PBIT_TO_QUEUE_8_DTS;

typedef RDD_PBIT_TO_QUEUE_8_DTS * aligned_RDD_PBIT_TO_QUEUE_8_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_PBIT_TO_QUEUE_8_DTS fields;
} RDD_PBIT_TO_QUEUE_8_DTS_NEW;
typedef RDD_PBIT_TO_QUEUE_8_DTS_NEW * aligned_RDD_PBIT_TO_QUEUE_8_DTS_NEW ALIGNMENT8;

#define RDD_PBIT_TO_QUEUE_8_QUEUE_OFFSET_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_PBIT_TO_QUEUE_8_DTS), i, r)
#define RDD_PBIT_TO_QUEUE_8_QUEUE_OFFSET_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_PBIT_TO_QUEUE_8_DTS), i, v)
#define RDD_PBIT_TO_QUEUE_8_QUEUE_OFFSET_READ(r, p, i)              MREAD_I_8((uint8_t *)p, i, r)
#define RDD_PBIT_TO_QUEUE_8_QUEUE_OFFSET_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p, i, v)
/* <<<RDD_PBIT_TO_QUEUE_8_DTS */


#define RDD_PBIT_TO_QUEUE_TABLE_SIZE     65
typedef struct
{
	RDD_PBIT_TO_QUEUE_8_DTS	entry[ RDD_PBIT_TO_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PBIT_TO_QUEUE_TABLE_DTS;

extern uint32_t RDD_PBIT_TO_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PBIT_TO_QUEUE_TABLE_PTR(core_id)	( RDD_PBIT_TO_QUEUE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PBIT_TO_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<PBIT_TO_QUEUE_TABLE */


/* >>>PROCESSING_QUEUE_DYNAMIC_MNG_TABLE */
typedef struct
{
	RDD_QUEUE_DYNAMIC_MNG_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PROCESSING_QUEUE_DYNAMIC_MNG_TABLE_DTS;

extern uint32_t RDD_PROCESSING_QUEUE_DYNAMIC_MNG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PROCESSING_QUEUE_DYNAMIC_MNG_TABLE_PTR(core_id)	( RDD_PROCESSING_QUEUE_DYNAMIC_MNG_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PROCESSING_QUEUE_DYNAMIC_MNG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<PROCESSING_QUEUE_DYNAMIC_MNG_TABLE */


/* >>>CPU_RECYCLE_INTERRUPT_COALESCING_TABLE */

/* >>>RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	timer_period        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_timer_period        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_timer_period        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	not_empty_or_int_vec	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	not_empty                     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of not_empty_or_int_vec union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	int_vec                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of not_empty_or_int_vec union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	scratch             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_scratch             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_scratch             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	recycle_timer_cnt   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	recycle_timer_factor	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_recycle_timer_cnt   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_recycle_timer_factor	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_recycle_timer_cnt   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_recycle_timer_factor	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	timer_period        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_timer_period        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_timer_period        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	not_empty_or_int_vec	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	not_empty                     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of not_empty_or_int_vec union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	int_vec                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of not_empty_or_int_vec union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	scratch             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_scratch             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_scratch             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	recycle_timer_factor	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	recycle_timer_cnt   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_recycle_timer_factor	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_recycle_timer_cnt   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_recycle_timer_factor	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_recycle_timer_cnt   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS;

typedef RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS * aligned_RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS fields;
} RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS_NEW;
typedef RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS_NEW * aligned_RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_TIMER_PERIOD_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS), r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_TIMER_PERIOD_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS), v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_TIMER_PERIOD_READ(r, p)                         MREAD_32((uint8_t *)p, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_TIMER_PERIOD_WRITE(v, p)                        MWRITE_32((uint8_t *)p, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_OR_INT_VEC_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 4, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_OR_INT_VEC_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 4, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_OR_INT_VEC_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_OR_INT_VEC_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 4, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 4, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_READ(r, p)                            MREAD_32((uint8_t *)p + 4, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 4, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_INT_VEC_READ_G(r, g, idx)                       GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 4, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_INT_VEC_WRITE_G(v, g, idx)                      GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 4, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_INT_VEC_READ(r, p)                              MREAD_32((uint8_t *)p + 4, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_INT_VEC_WRITE(v, p)                             MWRITE_32((uint8_t *)p + 4, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_SCRATCH_READ_G(r, g, idx)                       GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 8, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_SCRATCH_WRITE_G(v, g, idx)                      GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 8, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_SCRATCH_READ(r, p)                              MREAD_32((uint8_t *)p + 8, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_SCRATCH_WRITE(v, p)                             MWRITE_32((uint8_t *)p + 8, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_CNT_READ_G(r, g, idx)             GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 12, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_CNT_WRITE_G(v, g, idx)            GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 12, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_CNT_READ(r, p)                    MREAD_16((uint8_t *)p + 12, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_CNT_WRITE(v, p)                   MWRITE_16((uint8_t *)p + 12, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_FACTOR_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 14, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_FACTOR_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS) + 14, v)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_FACTOR_READ(r, p)                 MREAD_16((uint8_t *)p + 14, r)
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_FACTOR_WRITE(v, p)                MWRITE_16((uint8_t *)p + 14, v)
/* <<<RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS */

typedef struct
{
	RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RECYCLE_INTERRUPT_COALESCING_TABLE_DTS;

extern uint32_t RDD_CPU_RECYCLE_INTERRUPT_COALESCING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_INTERRUPT_COALESCING_TABLE_PTR(core_id)	( RDD_CPU_RECYCLE_INTERRUPT_COALESCING_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_INTERRUPT_COALESCING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_INTERRUPT_COALESCING_TABLE */


/* >>>VPORT_TO_LOOKUP_PORT_MAPPING_TABLE */

#define RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_SIZE     32
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_DTS;

extern uint32_t RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_PTR(core_id)	( RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<VPORT_TO_LOOKUP_PORT_MAPPING_TABLE */


/* >>>PBIT_TO_GEM_TABLE */

#define RDD_PBIT_TO_GEM_TABLE_SIZE     8

#define RDD_PBIT_TO_GEM_TABLE_SIZE2    8
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_PBIT_TO_GEM_TABLE_SIZE ][ RDD_PBIT_TO_GEM_TABLE_SIZE2 ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PBIT_TO_GEM_TABLE_DTS;

extern uint32_t RDD_PBIT_TO_GEM_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PBIT_TO_GEM_TABLE_PTR(core_id)	( RDD_PBIT_TO_GEM_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PBIT_TO_GEM_TABLE_ADDRESS_ARR[core_id] ))

/* <<<PBIT_TO_GEM_TABLE */


/* >>>DUAL_STACK_LITE_TABLE */

/* >>>RDD_DUAL_STACK_LITE_ENTRY_DTS */
#define RDD_DUAL_STACK_LITE_ENTRY_SRC_IP_NUMBER	16
#define RDD_DUAL_STACK_LITE_ENTRY_DST_IP_NUMBER	16
#define RDD_DUAL_STACK_LITE_ENTRY_RESERVED_NUMBER	24

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	vesion                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	payload_length_next_header_hop_limit                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	src_ip[RDD_DUAL_STACK_LITE_ENTRY_SRC_IP_NUMBER];
	uint8_t	dst_ip[RDD_DUAL_STACK_LITE_ENTRY_DST_IP_NUMBER];
	uint8_t	reserved[RDD_DUAL_STACK_LITE_ENTRY_RESERVED_NUMBER];
#else
	uint32_t	vesion                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	payload_length_next_header_hop_limit                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	src_ip[RDD_DUAL_STACK_LITE_ENTRY_SRC_IP_NUMBER];
	uint8_t	dst_ip[RDD_DUAL_STACK_LITE_ENTRY_DST_IP_NUMBER];
	uint8_t	reserved[RDD_DUAL_STACK_LITE_ENTRY_RESERVED_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DUAL_STACK_LITE_ENTRY_DTS;

typedef RDD_DUAL_STACK_LITE_ENTRY_DTS * aligned_RDD_DUAL_STACK_LITE_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[16];
    uint64_t dword_val64[8];
    RDD_DUAL_STACK_LITE_ENTRY_DTS fields;
} RDD_DUAL_STACK_LITE_ENTRY_DTS_NEW;
typedef RDD_DUAL_STACK_LITE_ENTRY_DTS_NEW * aligned_RDD_DUAL_STACK_LITE_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_DUAL_STACK_LITE_ENTRY_VESION_READ_G(r, g, idx)                                        GROUP_MREAD_32(g, idx*sizeof(RDD_DUAL_STACK_LITE_ENTRY_DTS), r)
#define RDD_DUAL_STACK_LITE_ENTRY_VESION_WRITE_G(v, g, idx)                                       GROUP_MWRITE_32(g, idx*sizeof(RDD_DUAL_STACK_LITE_ENTRY_DTS), v)
#define RDD_DUAL_STACK_LITE_ENTRY_VESION_READ(r, p)                                               MREAD_32((uint8_t *)p, r)
#define RDD_DUAL_STACK_LITE_ENTRY_VESION_WRITE(v, p)                                              MWRITE_32((uint8_t *)p, v)
#define RDD_DUAL_STACK_LITE_ENTRY_PAYLOAD_LENGTH_NEXT_HEADER_HOP_LIMIT_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DUAL_STACK_LITE_ENTRY_DTS) + 4, r)
#define RDD_DUAL_STACK_LITE_ENTRY_PAYLOAD_LENGTH_NEXT_HEADER_HOP_LIMIT_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DUAL_STACK_LITE_ENTRY_DTS) + 4, v)
#define RDD_DUAL_STACK_LITE_ENTRY_PAYLOAD_LENGTH_NEXT_HEADER_HOP_LIMIT_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_DUAL_STACK_LITE_ENTRY_PAYLOAD_LENGTH_NEXT_HEADER_HOP_LIMIT_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
#define RDD_DUAL_STACK_LITE_ENTRY_SRC_IP_READ_G(r, g, idx, i)                                     GROUP_MREAD_I_8(g, idx*sizeof(RDD_DUAL_STACK_LITE_ENTRY_DTS) + 8, i, r)
#define RDD_DUAL_STACK_LITE_ENTRY_SRC_IP_WRITE_G(v, g, idx, i)                                    GROUP_MWRITE_I_8(g, idx*sizeof(RDD_DUAL_STACK_LITE_ENTRY_DTS) + 8, i, v)
#define RDD_DUAL_STACK_LITE_ENTRY_SRC_IP_READ(r, p, i)                                            MREAD_I_8((uint8_t *)p + 8, i, r)
#define RDD_DUAL_STACK_LITE_ENTRY_SRC_IP_WRITE(v, p, i)                                           MWRITE_I_8((uint8_t *)p + 8, i, v)
#define RDD_DUAL_STACK_LITE_ENTRY_DST_IP_READ_G(r, g, idx, i)                                     GROUP_MREAD_I_8(g, idx*sizeof(RDD_DUAL_STACK_LITE_ENTRY_DTS) + 24, i, r)
#define RDD_DUAL_STACK_LITE_ENTRY_DST_IP_WRITE_G(v, g, idx, i)                                    GROUP_MWRITE_I_8(g, idx*sizeof(RDD_DUAL_STACK_LITE_ENTRY_DTS) + 24, i, v)
#define RDD_DUAL_STACK_LITE_ENTRY_DST_IP_READ(r, p, i)                                            MREAD_I_8((uint8_t *)p + 24, i, r)
#define RDD_DUAL_STACK_LITE_ENTRY_DST_IP_WRITE(v, p, i)                                           MWRITE_I_8((uint8_t *)p + 24, i, v)
/* <<<RDD_DUAL_STACK_LITE_ENTRY_DTS */

typedef struct
{
	RDD_DUAL_STACK_LITE_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DUAL_STACK_LITE_TABLE_DTS;

extern uint32_t RDD_DUAL_STACK_LITE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DUAL_STACK_LITE_TABLE_PTR(core_id)	( RDD_DUAL_STACK_LITE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DUAL_STACK_LITE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DUAL_STACK_LITE_TABLE */


/* >>>GPE_COMMAND_PRIMITIVE_TABLE */

#define RDD_GPE_COMMAND_PRIMITIVE_TABLE_SIZE     32
typedef struct
{
	RDD_BYTES_2_DTS	entry[ RDD_GPE_COMMAND_PRIMITIVE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_GPE_COMMAND_PRIMITIVE_TABLE_DTS;

extern uint32_t RDD_GPE_COMMAND_PRIMITIVE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_GPE_COMMAND_PRIMITIVE_TABLE_PTR(core_id)	( RDD_GPE_COMMAND_PRIMITIVE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_GPE_COMMAND_PRIMITIVE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<GPE_COMMAND_PRIMITIVE_TABLE */


/* >>>INGRESS_FILTER_PROFILE_TABLE */

/* >>>RDD_INGRESS_FILTER_CTRL_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reserved     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	enable_vector	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cpu_bypass   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	action_vector	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	enable_vector	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	action_vector	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cpu_bypass   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_INGRESS_FILTER_CTRL_DTS;

typedef RDD_INGRESS_FILTER_CTRL_DTS * aligned_RDD_INGRESS_FILTER_CTRL_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_INGRESS_FILTER_CTRL_DTS fields;
} RDD_INGRESS_FILTER_CTRL_DTS_NEW;
typedef RDD_INGRESS_FILTER_CTRL_DTS_NEW * aligned_RDD_INGRESS_FILTER_CTRL_DTS_NEW ALIGNMENT8;

#define RDD_INGRESS_FILTER_CTRL_ENABLE_VECTOR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_INGRESS_FILTER_CTRL_DTS), 0, 31, r)
#define RDD_INGRESS_FILTER_CTRL_ENABLE_VECTOR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_INGRESS_FILTER_CTRL_DTS), 0, 31, v)
#define RDD_INGRESS_FILTER_CTRL_ENABLE_VECTOR_READ(r, p)                 FIELD_MREAD_32((uint8_t *)p, 0, 31, r)
#define RDD_INGRESS_FILTER_CTRL_ENABLE_VECTOR_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)p, 0, 31, v)
#define RDD_INGRESS_FILTER_CTRL_CPU_BYPASS_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_INGRESS_FILTER_CTRL_DTS) + 4, 7, 1, r)
#define RDD_INGRESS_FILTER_CTRL_CPU_BYPASS_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_INGRESS_FILTER_CTRL_DTS) + 4, 7, 1, v)
#define RDD_INGRESS_FILTER_CTRL_CPU_BYPASS_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 4, 7, 1, r)
#define RDD_INGRESS_FILTER_CTRL_CPU_BYPASS_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 4, 7, 1, v)
#define RDD_INGRESS_FILTER_CTRL_ACTION_VECTOR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_INGRESS_FILTER_CTRL_DTS) + 4, 0, 31, r)
#define RDD_INGRESS_FILTER_CTRL_ACTION_VECTOR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_INGRESS_FILTER_CTRL_DTS) + 4, 0, 31, v)
#define RDD_INGRESS_FILTER_CTRL_ACTION_VECTOR_READ(r, p)                 FIELD_MREAD_32((uint8_t *)p + 4, 0, 31, r)
#define RDD_INGRESS_FILTER_CTRL_ACTION_VECTOR_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)p + 4, 0, 31, v)
/* <<<RDD_INGRESS_FILTER_CTRL_DTS */


#define RDD_INGRESS_FILTER_PROFILE_TABLE_SIZE     16
typedef struct
{
	RDD_INGRESS_FILTER_CTRL_DTS	entry[ RDD_INGRESS_FILTER_PROFILE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_INGRESS_FILTER_PROFILE_TABLE_DTS;

extern uint32_t RDD_INGRESS_FILTER_PROFILE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_INGRESS_FILTER_PROFILE_TABLE_PTR(core_id)	( RDD_INGRESS_FILTER_PROFILE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_INGRESS_FILTER_PROFILE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<INGRESS_FILTER_PROFILE_TABLE */


/* >>>NATC_COUNTERS_GENERIC_CONTEXT */

#define RDD_NATC_COUNTERS_GENERIC_CONTEXT_SIZE     128
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_NATC_COUNTERS_GENERIC_CONTEXT_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NATC_COUNTERS_GENERIC_CONTEXT_DTS;

extern uint32_t RDD_NATC_COUNTERS_GENERIC_CONTEXT_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NATC_COUNTERS_GENERIC_CONTEXT_PTR(core_id)	( RDD_NATC_COUNTERS_GENERIC_CONTEXT_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NATC_COUNTERS_GENERIC_CONTEXT_ADDRESS_ARR[core_id] ))

/* <<<NATC_COUNTERS_GENERIC_CONTEXT */


/* >>>LAYER2_GRE_TUNNEL_TABLE */

/* >>>RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS */
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_DST_MAC_NUMBER	6
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_SRC_MAC_NUMBER	6

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	src_ip                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dst_ip                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                                             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	identification                                        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	dst_mac[RDD_LAYER2_GRE_TUNNEL_ENTRY_DST_MAC_NUMBER];
	uint8_t	src_mac[RDD_LAYER2_GRE_TUNNEL_ENTRY_SRC_MAC_NUMBER];
	uint32_t	reserved2                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	src_ip                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dst_ip                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	identification                                        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                                             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	dst_mac[RDD_LAYER2_GRE_TUNNEL_ENTRY_DST_MAC_NUMBER];
	uint8_t	src_mac[RDD_LAYER2_GRE_TUNNEL_ENTRY_SRC_MAC_NUMBER];
	uint32_t	reserved2                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS;

typedef RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS * aligned_RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[8];
    uint64_t dword_val64[4];
    RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS fields;
} RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS_NEW;
typedef RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS_NEW * aligned_RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_LAYER2_GRE_TUNNEL_ENTRY_SRC_IP_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS), r)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_SRC_IP_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS), v)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_SRC_IP_READ(r, p)                         MREAD_32((uint8_t *)p, r)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_SRC_IP_WRITE(v, p)                        MWRITE_32((uint8_t *)p, v)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_DST_IP_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS) + 4, r)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_DST_IP_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS) + 4, v)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_DST_IP_READ(r, p)                         MREAD_32((uint8_t *)p + 4, r)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_DST_IP_WRITE(v, p)                        MWRITE_32((uint8_t *)p + 4, v)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_IDENTIFICATION_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS) + 10, r)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_IDENTIFICATION_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS) + 10, v)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_IDENTIFICATION_READ(r, p)                 MREAD_16((uint8_t *)p + 10, r)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_IDENTIFICATION_WRITE(v, p)                MWRITE_16((uint8_t *)p + 10, v)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_DST_MAC_READ_G(r, g, idx, i)              GROUP_MREAD_I_8(g, idx*sizeof(RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS) + 16, i, r)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_DST_MAC_WRITE_G(v, g, idx, i)             GROUP_MWRITE_I_8(g, idx*sizeof(RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS) + 16, i, v)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_DST_MAC_READ(r, p, i)                     MREAD_I_8((uint8_t *)p + 16, i, r)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_DST_MAC_WRITE(v, p, i)                    MWRITE_I_8((uint8_t *)p + 16, i, v)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_SRC_MAC_READ_G(r, g, idx, i)              GROUP_MREAD_I_8(g, idx*sizeof(RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS) + 22, i, r)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_SRC_MAC_WRITE_G(v, g, idx, i)             GROUP_MWRITE_I_8(g, idx*sizeof(RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS) + 22, i, v)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_SRC_MAC_READ(r, p, i)                     MREAD_I_8((uint8_t *)p + 22, i, r)
#define RDD_LAYER2_GRE_TUNNEL_ENTRY_SRC_MAC_WRITE(v, p, i)                    MWRITE_I_8((uint8_t *)p + 22, i, v)
/* <<<RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS */


#define RDD_LAYER2_GRE_TUNNEL_TABLE_SIZE     12
typedef struct
{
	RDD_LAYER2_GRE_TUNNEL_ENTRY_DTS	entry[ RDD_LAYER2_GRE_TUNNEL_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_LAYER2_GRE_TUNNEL_TABLE_DTS;

extern uint32_t RDD_LAYER2_GRE_TUNNEL_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_LAYER2_GRE_TUNNEL_TABLE_PTR(core_id)	( RDD_LAYER2_GRE_TUNNEL_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_LAYER2_GRE_TUNNEL_TABLE_ADDRESS_ARR[core_id] ))

/* <<<LAYER2_GRE_TUNNEL_TABLE */


/* >>>VPORT_CFG_TABLE */

/* >>>RDD_VPORT_CFG_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	loopback_en                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mirroring_en                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sa_lookup_en                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	da_lookup_en                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	egress_isolation_en                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ingress_isolation_en                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bridge_and_vlan_ingress_lookup_method	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_bridge_and_vlan_ctx_ingress_lookup_method enumeration*/
	uint32_t	bridge_and_vlan_egress_lookup_method 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_bridge_and_vlan_ctx_egress_lookup_method enumeration*/
	uint32_t	protocol_filters_dis                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sa_lookup_miss_action                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_action enumeration*/
	uint32_t	da_lookup_miss_action                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_action enumeration*/
	uint32_t	ingress_congestion                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	discard_prty                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ingress_filter_profile               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3                            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ls_fc_cfg                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	egress_isolation_map                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	ls_fc_cfg                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3                            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ingress_filter_profile               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	discard_prty                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ingress_congestion                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	da_lookup_miss_action                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_action enumeration*/
	uint32_t	sa_lookup_miss_action                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_action enumeration*/
	uint32_t	protocol_filters_dis                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bridge_and_vlan_egress_lookup_method 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_bridge_and_vlan_ctx_egress_lookup_method enumeration*/
	uint32_t	bridge_and_vlan_ingress_lookup_method	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_bridge_and_vlan_ctx_ingress_lookup_method enumeration*/
	uint32_t	ingress_isolation_en                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	egress_isolation_en                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	da_lookup_en                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sa_lookup_en                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mirroring_en                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	loopback_en                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	egress_isolation_map                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_VPORT_CFG_ENTRY_DTS;

typedef RDD_VPORT_CFG_ENTRY_DTS * aligned_RDD_VPORT_CFG_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_VPORT_CFG_ENTRY_DTS fields;
} RDD_VPORT_CFG_ENTRY_DTS_NEW;
typedef RDD_VPORT_CFG_ENTRY_DTS_NEW * aligned_RDD_VPORT_CFG_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_VPORT_CFG_ENTRY_LOOPBACK_EN_READ_G(r, g, idx)                                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 7, 1, r)
#define RDD_VPORT_CFG_ENTRY_LOOPBACK_EN_WRITE_G(v, g, idx)                                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 7, 1, v)
#define RDD_VPORT_CFG_ENTRY_LOOPBACK_EN_READ(r, p)                                           FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_VPORT_CFG_ENTRY_LOOPBACK_EN_WRITE(v, p)                                          FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_VPORT_CFG_ENTRY_MIRRORING_EN_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 6, 1, r)
#define RDD_VPORT_CFG_ENTRY_MIRRORING_EN_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 6, 1, v)
#define RDD_VPORT_CFG_ENTRY_MIRRORING_EN_READ(r, p)                                          FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_VPORT_CFG_ENTRY_MIRRORING_EN_WRITE(v, p)                                         FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_VPORT_CFG_ENTRY_SA_LOOKUP_EN_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 5, 1, r)
#define RDD_VPORT_CFG_ENTRY_SA_LOOKUP_EN_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 5, 1, v)
#define RDD_VPORT_CFG_ENTRY_SA_LOOKUP_EN_READ(r, p)                                          FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_VPORT_CFG_ENTRY_SA_LOOKUP_EN_WRITE(v, p)                                         FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_VPORT_CFG_ENTRY_DA_LOOKUP_EN_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 4, 1, r)
#define RDD_VPORT_CFG_ENTRY_DA_LOOKUP_EN_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 4, 1, v)
#define RDD_VPORT_CFG_ENTRY_DA_LOOKUP_EN_READ(r, p)                                          FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_VPORT_CFG_ENTRY_DA_LOOKUP_EN_WRITE(v, p)                                         FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_VPORT_CFG_ENTRY_EGRESS_ISOLATION_EN_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 3, 1, r)
#define RDD_VPORT_CFG_ENTRY_EGRESS_ISOLATION_EN_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 3, 1, v)
#define RDD_VPORT_CFG_ENTRY_EGRESS_ISOLATION_EN_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p, 3, 1, r)
#define RDD_VPORT_CFG_ENTRY_EGRESS_ISOLATION_EN_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p, 3, 1, v)
#define RDD_VPORT_CFG_ENTRY_INGRESS_ISOLATION_EN_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 2, 1, r)
#define RDD_VPORT_CFG_ENTRY_INGRESS_ISOLATION_EN_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 2, 1, v)
#define RDD_VPORT_CFG_ENTRY_INGRESS_ISOLATION_EN_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p, 2, 1, r)
#define RDD_VPORT_CFG_ENTRY_INGRESS_ISOLATION_EN_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p, 2, 1, v)
#define RDD_VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_INGRESS_LOOKUP_METHOD_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 1, 1, r) /*defined by rdd_bridge_and_vlan_ctx_ingress_lookup_method enumeration*/
#define RDD_VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_INGRESS_LOOKUP_METHOD_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 1, 1, v) /*defined by rdd_bridge_and_vlan_ctx_ingress_lookup_method enumeration*/
#define RDD_VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_INGRESS_LOOKUP_METHOD_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 1, 1, r) /*defined by rdd_bridge_and_vlan_ctx_ingress_lookup_method enumeration*/
#define RDD_VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_INGRESS_LOOKUP_METHOD_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 1, 1, v) /*defined by rdd_bridge_and_vlan_ctx_ingress_lookup_method enumeration*/
#define RDD_VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_EGRESS_LOOKUP_METHOD_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 0, 1, r) /*defined by rdd_bridge_and_vlan_ctx_egress_lookup_method enumeration*/
#define RDD_VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_EGRESS_LOOKUP_METHOD_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS), 0, 1, v) /*defined by rdd_bridge_and_vlan_ctx_egress_lookup_method enumeration*/
#define RDD_VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_EGRESS_LOOKUP_METHOD_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p, 0, 1, r) /*defined by rdd_bridge_and_vlan_ctx_egress_lookup_method enumeration*/
#define RDD_VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_EGRESS_LOOKUP_METHOD_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p, 0, 1, v) /*defined by rdd_bridge_and_vlan_ctx_egress_lookup_method enumeration*/
#define RDD_VPORT_CFG_ENTRY_PROTOCOL_FILTERS_DIS_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 1, 4, 4, r)
#define RDD_VPORT_CFG_ENTRY_PROTOCOL_FILTERS_DIS_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 1, 4, 4, v)
#define RDD_VPORT_CFG_ENTRY_PROTOCOL_FILTERS_DIS_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 1, 4, 4, r)
#define RDD_VPORT_CFG_ENTRY_PROTOCOL_FILTERS_DIS_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 1, 4, 4, v)
#define RDD_VPORT_CFG_ENTRY_SA_LOOKUP_MISS_ACTION_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 1, 2, 2, r) /*defined by rdd_action enumeration*/
#define RDD_VPORT_CFG_ENTRY_SA_LOOKUP_MISS_ACTION_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 1, 2, 2, v) /*defined by rdd_action enumeration*/
#define RDD_VPORT_CFG_ENTRY_SA_LOOKUP_MISS_ACTION_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 1, 2, 2, r) /*defined by rdd_action enumeration*/
#define RDD_VPORT_CFG_ENTRY_SA_LOOKUP_MISS_ACTION_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 1, 2, 2, v) /*defined by rdd_action enumeration*/
#define RDD_VPORT_CFG_ENTRY_DA_LOOKUP_MISS_ACTION_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 1, 0, 2, r) /*defined by rdd_action enumeration*/
#define RDD_VPORT_CFG_ENTRY_DA_LOOKUP_MISS_ACTION_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 1, 0, 2, v) /*defined by rdd_action enumeration*/
#define RDD_VPORT_CFG_ENTRY_DA_LOOKUP_MISS_ACTION_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 1, 0, 2, r) /*defined by rdd_action enumeration*/
#define RDD_VPORT_CFG_ENTRY_DA_LOOKUP_MISS_ACTION_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 1, 0, 2, v) /*defined by rdd_action enumeration*/
#define RDD_VPORT_CFG_ENTRY_INGRESS_CONGESTION_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 2, 7, 1, r)
#define RDD_VPORT_CFG_ENTRY_INGRESS_CONGESTION_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 2, 7, 1, v)
#define RDD_VPORT_CFG_ENTRY_INGRESS_CONGESTION_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 2, 7, 1, r)
#define RDD_VPORT_CFG_ENTRY_INGRESS_CONGESTION_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 2, 7, 1, v)
#define RDD_VPORT_CFG_ENTRY_DISCARD_PRTY_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 2, 6, 1, r)
#define RDD_VPORT_CFG_ENTRY_DISCARD_PRTY_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 2, 6, 1, v)
#define RDD_VPORT_CFG_ENTRY_DISCARD_PRTY_READ(r, p)                                          FIELD_MREAD_8((uint8_t *)p + 2, 6, 1, r)
#define RDD_VPORT_CFG_ENTRY_DISCARD_PRTY_WRITE(v, p)                                         FIELD_MWRITE_8((uint8_t *)p + 2, 6, 1, v)
#define RDD_VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 2, 0, 6, r)
#define RDD_VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 2, 0, 6, v)
#define RDD_VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 2, 0, 6, r)
#define RDD_VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 2, 0, 6, v)
#define RDD_VPORT_CFG_ENTRY_LS_FC_CFG_READ_G(r, g, idx)                                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 3, 0, 1, r)
#define RDD_VPORT_CFG_ENTRY_LS_FC_CFG_WRITE_G(v, g, idx)                                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 3, 0, 1, v)
#define RDD_VPORT_CFG_ENTRY_LS_FC_CFG_READ(r, p)                                             FIELD_MREAD_8((uint8_t *)p + 3, 0, 1, r)
#define RDD_VPORT_CFG_ENTRY_LS_FC_CFG_WRITE(v, p)                                            FIELD_MWRITE_8((uint8_t *)p + 3, 0, 1, v)
#define RDD_VPORT_CFG_ENTRY_EGRESS_ISOLATION_MAP_READ_G(r, g, idx)                           GROUP_MREAD_32(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 4, r)
#define RDD_VPORT_CFG_ENTRY_EGRESS_ISOLATION_MAP_WRITE_G(v, g, idx)                          GROUP_MWRITE_32(g, idx*sizeof(RDD_VPORT_CFG_ENTRY_DTS) + 4, v)
#define RDD_VPORT_CFG_ENTRY_EGRESS_ISOLATION_MAP_READ(r, p)                                  MREAD_32((uint8_t *)p + 4, r)
#define RDD_VPORT_CFG_ENTRY_EGRESS_ISOLATION_MAP_WRITE(v, p)                                 MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_VPORT_CFG_ENTRY_DTS */


#define RDD_VPORT_CFG_TABLE_SIZE     40
typedef struct
{
	RDD_VPORT_CFG_ENTRY_DTS	entry[ RDD_VPORT_CFG_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_VPORT_CFG_TABLE_DTS;

extern uint32_t RDD_VPORT_CFG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_VPORT_CFG_TABLE_PTR(core_id)	( RDD_VPORT_CFG_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_VPORT_CFG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<VPORT_CFG_TABLE */


/* >>>TCAM_IC_CFG_TABLE */

/* >>>RDD_TCAM_IC_CFG_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	res_offset           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context_offset       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cmd_table            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	scratch_offset       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	table_id             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_size             	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved             	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	enable               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	classification_result	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	context_offset       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	res_offset           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	scratch_offset       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cmd_table            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	enable               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved             	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_size             	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	table_id             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	classification_result	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCAM_IC_CFG_DTS;

typedef RDD_TCAM_IC_CFG_DTS * aligned_RDD_TCAM_IC_CFG_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_TCAM_IC_CFG_DTS fields;
} RDD_TCAM_IC_CFG_DTS_NEW;
typedef RDD_TCAM_IC_CFG_DTS_NEW * aligned_RDD_TCAM_IC_CFG_DTS_NEW ALIGNMENT8;

#define RDD_TCAM_IC_CFG_RES_OFFSET_READ_G(r, g, idx)                     GROUP_MREAD_16(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS), r)
#define RDD_TCAM_IC_CFG_RES_OFFSET_WRITE_G(v, g, idx)                    GROUP_MWRITE_16(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS), v)
#define RDD_TCAM_IC_CFG_RES_OFFSET_READ(r, p)                            MREAD_16((uint8_t *)p, r)
#define RDD_TCAM_IC_CFG_RES_OFFSET_WRITE(v, p)                           MWRITE_16((uint8_t *)p, v)
#define RDD_TCAM_IC_CFG_RES_OFFSET_L_READ( wv )                          FIELD_GET( wv, 16, 16 )
#define RDD_TCAM_IC_CFG_RES_OFFSET_L_WRITE( v, wv )                      FIELD_SET( v, 16, 16, wv )
#define RDD_TCAM_IC_CFG_CONTEXT_OFFSET_READ_G(r, g, idx)                 GROUP_MREAD_16(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 2, r)
#define RDD_TCAM_IC_CFG_CONTEXT_OFFSET_WRITE_G(v, g, idx)                GROUP_MWRITE_16(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 2, v)
#define RDD_TCAM_IC_CFG_CONTEXT_OFFSET_READ(r, p)                        MREAD_16((uint8_t *)p + 2, r)
#define RDD_TCAM_IC_CFG_CONTEXT_OFFSET_WRITE(v, p)                       MWRITE_16((uint8_t *)p + 2, v)
#define RDD_TCAM_IC_CFG_CONTEXT_OFFSET_L_READ( wv )                      FIELD_GET( wv, 0, 16 )
#define RDD_TCAM_IC_CFG_CONTEXT_OFFSET_L_WRITE( v, wv )                  FIELD_SET( v, 0, 16, wv )
#define RDD_TCAM_IC_CFG_CMD_TABLE_READ_G(r, g, idx)                      GROUP_MREAD_16(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 4, r)
#define RDD_TCAM_IC_CFG_CMD_TABLE_WRITE_G(v, g, idx)                     GROUP_MWRITE_16(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 4, v)
#define RDD_TCAM_IC_CFG_CMD_TABLE_READ(r, p)                             MREAD_16((uint8_t *)p + 4, r)
#define RDD_TCAM_IC_CFG_CMD_TABLE_WRITE(v, p)                            MWRITE_16((uint8_t *)p + 4, v)
#define RDD_TCAM_IC_CFG_CMD_TABLE_L_READ( wv )                           FIELD_GET( wv, 16, 16 )
#define RDD_TCAM_IC_CFG_CMD_TABLE_L_WRITE( v, wv )                       FIELD_SET( v, 16, 16, wv )
#define RDD_TCAM_IC_CFG_SCRATCH_OFFSET_READ_G(r, g, idx)                 GROUP_MREAD_16(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 6, r)
#define RDD_TCAM_IC_CFG_SCRATCH_OFFSET_WRITE_G(v, g, idx)                GROUP_MWRITE_16(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 6, v)
#define RDD_TCAM_IC_CFG_SCRATCH_OFFSET_READ(r, p)                        MREAD_16((uint8_t *)p + 6, r)
#define RDD_TCAM_IC_CFG_SCRATCH_OFFSET_WRITE(v, p)                       MWRITE_16((uint8_t *)p + 6, v)
#define RDD_TCAM_IC_CFG_SCRATCH_OFFSET_L_READ( wv )                      FIELD_GET( wv, 0, 16 )
#define RDD_TCAM_IC_CFG_SCRATCH_OFFSET_L_WRITE( v, wv )                  FIELD_SET( v, 0, 16, wv )
#define RDD_TCAM_IC_CFG_TABLE_ID_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 8, 5, 3, r)
#define RDD_TCAM_IC_CFG_TABLE_ID_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 8, 5, 3, v)
#define RDD_TCAM_IC_CFG_TABLE_ID_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 8, 5, 3, r)
#define RDD_TCAM_IC_CFG_TABLE_ID_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 8, 5, 3, v)
#define RDD_TCAM_IC_CFG_TABLE_ID_L_READ( wv )                            FIELD_GET( wv, 29, 3 )
#define RDD_TCAM_IC_CFG_TABLE_ID_L_WRITE( v, wv )                        FIELD_SET( v, 29, 3, wv )
#define RDD_TCAM_IC_CFG_KEY_SIZE_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 8, 0, 13, r)
#define RDD_TCAM_IC_CFG_KEY_SIZE_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 8, 0, 13, v)
#define RDD_TCAM_IC_CFG_KEY_SIZE_READ(r, p)                              FIELD_MREAD_16((uint8_t *)p + 8, 0, 13, r)
#define RDD_TCAM_IC_CFG_KEY_SIZE_WRITE(v, p)                             FIELD_MWRITE_16((uint8_t *)p + 8, 0, 13, v)
#define RDD_TCAM_IC_CFG_KEY_SIZE_L_READ( wv )                            FIELD_GET( wv, 16, 13 )
#define RDD_TCAM_IC_CFG_KEY_SIZE_L_WRITE( v, wv )                        FIELD_SET( v, 16, 13, wv )
#define RDD_TCAM_IC_CFG_ENABLE_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 11, 0, 1, r)
#define RDD_TCAM_IC_CFG_ENABLE_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 11, 0, 1, v)
#define RDD_TCAM_IC_CFG_ENABLE_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 11, 0, 1, r)
#define RDD_TCAM_IC_CFG_ENABLE_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 11, 0, 1, v)
#define RDD_TCAM_IC_CFG_ENABLE_L_READ( wv )                              FIELD_GET( wv, 0, 1 )
#define RDD_TCAM_IC_CFG_ENABLE_L_WRITE( v, wv )                          FIELD_SET( v, 0, 1, wv )
#define RDD_TCAM_IC_CFG_CLASSIFICATION_RESULT_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 12, r)
#define RDD_TCAM_IC_CFG_CLASSIFICATION_RESULT_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_TCAM_IC_CFG_DTS) + 12, v)
#define RDD_TCAM_IC_CFG_CLASSIFICATION_RESULT_READ(r, p)                 MREAD_32((uint8_t *)p + 12, r)
#define RDD_TCAM_IC_CFG_CLASSIFICATION_RESULT_WRITE(v, p)                MWRITE_32((uint8_t *)p + 12, v)
#define RDD_TCAM_IC_CFG_CLASSIFICATION_RESULT_L_READ( wv )               FIELD_GET( wv, 0, 32 )
#define RDD_TCAM_IC_CFG_CLASSIFICATION_RESULT_L_WRITE( v, wv )           FIELD_SET( v, 0, 32, wv )
/* <<<RDD_TCAM_IC_CFG_DTS */


#define RDD_TCAM_IC_CFG_TABLE_SIZE     8
typedef struct
{
	RDD_TCAM_IC_CFG_DTS	entry[ RDD_TCAM_IC_CFG_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCAM_IC_CFG_TABLE_DTS;

extern uint32_t RDD_TCAM_IC_CFG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCAM_IC_CFG_TABLE_PTR(core_id)	( RDD_TCAM_IC_CFG_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCAM_IC_CFG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TCAM_IC_CFG_TABLE */


/* >>>LOOPBACK_QUEUE_TABLE */

#define RDD_LOOPBACK_QUEUE_TABLE_SIZE     40
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_LOOPBACK_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_LOOPBACK_QUEUE_TABLE_DTS;

extern uint32_t RDD_LOOPBACK_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_LOOPBACK_QUEUE_TABLE_PTR(core_id)	( RDD_LOOPBACK_QUEUE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_LOOPBACK_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<LOOPBACK_QUEUE_TABLE */


/* >>>RX_FLOW_CONTEXT_DDR_ADDR */

/* >>>RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	low       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	high      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	low       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	high      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS;

typedef RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS * aligned_RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS fields;
} RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS_NEW;
typedef RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS_NEW * aligned_RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS_NEW ALIGNMENT8;

#define RDD_DEF_FLOW_CONTEXT_DDR_ADDR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS), r)
#define RDD_DEF_FLOW_CONTEXT_DDR_ADDR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS), v)
#define RDD_DEF_FLOW_CONTEXT_DDR_ADDR_LOW_READ(r, p)                  MREAD_32((uint8_t *)p, r)
#define RDD_DEF_FLOW_CONTEXT_DDR_ADDR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p, v)
#define RDD_DEF_FLOW_CONTEXT_DDR_ADDR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS) + 4, r)
#define RDD_DEF_FLOW_CONTEXT_DDR_ADDR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS) + 4, v)
#define RDD_DEF_FLOW_CONTEXT_DDR_ADDR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_DEF_FLOW_CONTEXT_DDR_ADDR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS */

typedef struct
{
	RDD_DEF_FLOW_CONTEXT_DDR_ADDR_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RX_FLOW_CONTEXT_DDR_ADDR_DTS;

extern uint32_t RDD_RX_FLOW_CONTEXT_DDR_ADDR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RX_FLOW_CONTEXT_DDR_ADDR_PTR(core_id)	( RDD_RX_FLOW_CONTEXT_DDR_ADDR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RX_FLOW_CONTEXT_DDR_ADDR_ADDRESS_ARR[core_id] ))

/* <<<RX_FLOW_CONTEXT_DDR_ADDR */


/* >>>SPDSVC_ANALYZER_PARAMS_TABLE */

/* >>>RDD_SPDSVC_ANALYZER_PARAMS_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	stream    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	stream1   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	stream2   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	stream3   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	stream    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	stream1   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	stream2   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	stream3   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_ANALYZER_PARAMS_DTS;

typedef RDD_SPDSVC_ANALYZER_PARAMS_DTS * aligned_RDD_SPDSVC_ANALYZER_PARAMS_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_SPDSVC_ANALYZER_PARAMS_DTS fields;
} RDD_SPDSVC_ANALYZER_PARAMS_DTS_NEW;
typedef RDD_SPDSVC_ANALYZER_PARAMS_DTS_NEW * aligned_RDD_SPDSVC_ANALYZER_PARAMS_DTS_NEW ALIGNMENT8;

#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_ANALYZER_PARAMS_DTS), r)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_ANALYZER_PARAMS_DTS), v)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM_READ(r, p)                  MREAD_32((uint8_t *)p, r)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM_WRITE(v, p)                 MWRITE_32((uint8_t *)p, v)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM1_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_ANALYZER_PARAMS_DTS) + 4, r)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM1_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_ANALYZER_PARAMS_DTS) + 4, v)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM1_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM1_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM2_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_ANALYZER_PARAMS_DTS) + 8, r)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM2_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_ANALYZER_PARAMS_DTS) + 8, v)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM2_READ(r, p)                 MREAD_32((uint8_t *)p + 8, r)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM2_WRITE(v, p)                MWRITE_32((uint8_t *)p + 8, v)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM3_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_ANALYZER_PARAMS_DTS) + 12, r)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM3_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_ANALYZER_PARAMS_DTS) + 12, v)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM3_READ(r, p)                 MREAD_32((uint8_t *)p + 12, r)
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM3_WRITE(v, p)                MWRITE_32((uint8_t *)p + 12, v)
/* <<<RDD_SPDSVC_ANALYZER_PARAMS_DTS */

typedef struct
{
	RDD_SPDSVC_ANALYZER_PARAMS_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_ANALYZER_PARAMS_TABLE_DTS;

extern uint32_t RDD_SPDSVC_ANALYZER_PARAMS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_ANALYZER_PARAMS_TABLE_PTR(core_id)	( RDD_SPDSVC_ANALYZER_PARAMS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_ANALYZER_PARAMS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_ANALYZER_PARAMS_TABLE */


/* >>>CPU_RECYCLE_SRAM_PD_FIFO */

#define RDD_CPU_RECYCLE_SRAM_PD_FIFO_SIZE     16
typedef struct
{
	RDD_PROCESSING_TX_DESCRIPTOR_DTS	entry[ RDD_CPU_RECYCLE_SRAM_PD_FIFO_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RECYCLE_SRAM_PD_FIFO_DTS;

extern uint32_t RDD_CPU_RECYCLE_SRAM_PD_FIFO_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_SRAM_PD_FIFO_PTR(core_id)	( RDD_CPU_RECYCLE_SRAM_PD_FIFO_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_SRAM_PD_FIFO_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_SRAM_PD_FIFO */


/* >>>BROADCOM_SWITCH_PORT_TO_RX_FLOW_MAPPING_TABLE */

/* >>>RDD_BROADCOM_SWITCH_PORT_MAPPING_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	rx_flow_table_index	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	rx_flow_table_index	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BROADCOM_SWITCH_PORT_MAPPING_DTS;

typedef RDD_BROADCOM_SWITCH_PORT_MAPPING_DTS * aligned_RDD_BROADCOM_SWITCH_PORT_MAPPING_DTS ALIGNMENT8;

#define RDD_BROADCOM_SWITCH_PORT_MAPPING_RX_FLOW_TABLE_INDEX_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_BROADCOM_SWITCH_PORT_MAPPING_DTS), r)
#define RDD_BROADCOM_SWITCH_PORT_MAPPING_RX_FLOW_TABLE_INDEX_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_BROADCOM_SWITCH_PORT_MAPPING_DTS), v)
#define RDD_BROADCOM_SWITCH_PORT_MAPPING_RX_FLOW_TABLE_INDEX_READ(r, p)                 MREAD_16((uint8_t *)p, r)
#define RDD_BROADCOM_SWITCH_PORT_MAPPING_RX_FLOW_TABLE_INDEX_WRITE(v, p)                MWRITE_16((uint8_t *)p, v)
/* <<<RDD_BROADCOM_SWITCH_PORT_MAPPING_DTS */


#define RDD_BROADCOM_SWITCH_PORT_TO_RX_FLOW_MAPPING_TABLE_SIZE     9
typedef struct
{
	RDD_BROADCOM_SWITCH_PORT_MAPPING_DTS	entry[ RDD_BROADCOM_SWITCH_PORT_TO_RX_FLOW_MAPPING_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BROADCOM_SWITCH_PORT_TO_RX_FLOW_MAPPING_TABLE_DTS;

extern uint32_t RDD_BROADCOM_SWITCH_PORT_TO_RX_FLOW_MAPPING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BROADCOM_SWITCH_PORT_TO_RX_FLOW_MAPPING_TABLE_PTR(core_id)	( RDD_BROADCOM_SWITCH_PORT_TO_RX_FLOW_MAPPING_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BROADCOM_SWITCH_PORT_TO_RX_FLOW_MAPPING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BROADCOM_SWITCH_PORT_TO_RX_FLOW_MAPPING_TABLE */


/* >>>FORCE_DSCP */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FORCE_DSCP_DTS;

extern uint32_t RDD_FORCE_DSCP_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_FORCE_DSCP_PTR(core_id)	( RDD_FORCE_DSCP_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_FORCE_DSCP_ADDRESS_ARR[core_id] ))

/* <<<FORCE_DSCP */


/* >>>NULL_BUFFER */
typedef struct
{
	RDD_BYTES_8_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NULL_BUFFER_DTS;

extern uint32_t RDD_NULL_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NULL_BUFFER_PTR(core_id)	( RDD_NULL_BUFFER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NULL_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<NULL_BUFFER */


/* >>>QUEUE_THRESHOLD_VECTOR */

#define RDD_QUEUE_THRESHOLD_VECTOR_SIZE     9
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_QUEUE_THRESHOLD_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_QUEUE_THRESHOLD_VECTOR_DTS;

extern uint32_t RDD_QUEUE_THRESHOLD_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_QUEUE_THRESHOLD_VECTOR_PTR(core_id)	( RDD_QUEUE_THRESHOLD_VECTOR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_QUEUE_THRESHOLD_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<QUEUE_THRESHOLD_VECTOR */


/* >>>ENABLE_VPORT_MASK */
typedef struct
{
	RDD_BYTES_4_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_ENABLE_VPORT_MASK_DTS;

extern uint32_t RDD_ENABLE_VPORT_MASK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_ENABLE_VPORT_MASK_PTR(core_id)	( RDD_ENABLE_VPORT_MASK_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_ENABLE_VPORT_MASK_ADDRESS_ARR[core_id] ))

/* <<<ENABLE_VPORT_MASK */


/* >>>CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR */

/* >>>RDD_DDR_ADDRESS_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	low       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	high      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	low       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	high      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DDR_ADDRESS_DTS;

typedef RDD_DDR_ADDRESS_DTS * aligned_RDD_DDR_ADDRESS_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_DDR_ADDRESS_DTS fields;
} RDD_DDR_ADDRESS_DTS_NEW;
typedef RDD_DDR_ADDRESS_DTS_NEW * aligned_RDD_DDR_ADDRESS_DTS_NEW ALIGNMENT8;

#define RDD_DDR_ADDRESS_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DDR_ADDRESS_DTS), r)
#define RDD_DDR_ADDRESS_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DDR_ADDRESS_DTS), v)
#define RDD_DDR_ADDRESS_LOW_READ(r, p)                  MREAD_32((uint8_t *)p, r)
#define RDD_DDR_ADDRESS_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p, v)
#define RDD_DDR_ADDRESS_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DDR_ADDRESS_DTS) + 4, r)
#define RDD_DDR_ADDRESS_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DDR_ADDRESS_DTS) + 4, v)
#define RDD_DDR_ADDRESS_HIGH_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_DDR_ADDRESS_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_DDR_ADDRESS_DTS */

typedef struct
{
	RDD_DDR_ADDRESS_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_DTS;

extern uint32_t RDD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_PTR(core_id)	( RDD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR */


/* >>>INGRESS_FILTER_L2_REASON_TABLE */

#define RDD_INGRESS_FILTER_L2_REASON_TABLE_SIZE     16
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_INGRESS_FILTER_L2_REASON_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_INGRESS_FILTER_L2_REASON_TABLE_DTS;

extern uint32_t RDD_INGRESS_FILTER_L2_REASON_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_INGRESS_FILTER_L2_REASON_TABLE_PTR(core_id)	( RDD_INGRESS_FILTER_L2_REASON_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_INGRESS_FILTER_L2_REASON_TABLE_ADDRESS_ARR[core_id] ))

/* <<<INGRESS_FILTER_L2_REASON_TABLE */


/* >>>FLOW_BASED_ACTION_PTR_TABLE */

#define RDD_FLOW_BASED_ACTION_PTR_TABLE_SIZE     17
typedef struct
{
	RDD_BYTES_2_DTS	entry[ RDD_FLOW_BASED_ACTION_PTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FLOW_BASED_ACTION_PTR_TABLE_DTS;

extern uint32_t RDD_FLOW_BASED_ACTION_PTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_FLOW_BASED_ACTION_PTR_TABLE_PTR(core_id)	( RDD_FLOW_BASED_ACTION_PTR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_FLOW_BASED_ACTION_PTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<FLOW_BASED_ACTION_PTR_TABLE */


/* >>>RX_MIRRORING_CONFIGURATION */
typedef struct
{
	RDD_MIRRORING_DESCRIPTOR_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RX_MIRRORING_CONFIGURATION_DTS;

extern uint32_t RDD_RX_MIRRORING_CONFIGURATION_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RX_MIRRORING_CONFIGURATION_PTR(core_id)	( RDD_RX_MIRRORING_CONFIGURATION_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RX_MIRRORING_CONFIGURATION_ADDRESS_ARR[core_id] ))

/* <<<RX_MIRRORING_CONFIGURATION */


/* >>>INGRESS_QOS_DONT_DROP_RATIO */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_INGRESS_QOS_DONT_DROP_RATIO_DTS;

extern uint32_t RDD_INGRESS_QOS_DONT_DROP_RATIO_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_INGRESS_QOS_DONT_DROP_RATIO_PTR(core_id)	( RDD_INGRESS_QOS_DONT_DROP_RATIO_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_INGRESS_QOS_DONT_DROP_RATIO_ADDRESS_ARR[core_id] ))

/* <<<INGRESS_QOS_DONT_DROP_RATIO */


/* >>>CPU_TX_RECYCLE_RING_ID */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_RECYCLE_RING_ID_DTS;

extern uint32_t RDD_CPU_TX_RECYCLE_RING_ID_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_RECYCLE_RING_ID_PTR(core_id)	( RDD_CPU_TX_RECYCLE_RING_ID_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_RECYCLE_RING_ID_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_RECYCLE_RING_ID */


/* >>>CPU_RX_INTERRUPT_ID_DDR_ADDR */
typedef struct
{
	RDD_DDR_ADDRESS_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_INTERRUPT_ID_DDR_ADDR_DTS;

extern uint32_t RDD_CPU_RX_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_INTERRUPT_ID_DDR_ADDR_PTR(core_id)	( RDD_CPU_RX_INTERRUPT_ID_DDR_ADDR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_INTERRUPT_ID_DDR_ADDR */


/* >>>CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE */

#define RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE */


/* >>>CPU_REDIRECT_MODE */

/* >>>RDD_CPU_REDIRECT_MODE_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	mode      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint8_t	mode      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_REDIRECT_MODE_ENTRY_DTS;

typedef RDD_CPU_REDIRECT_MODE_ENTRY_DTS * aligned_RDD_CPU_REDIRECT_MODE_ENTRY_DTS ALIGNMENT8;

#define RDD_CPU_REDIRECT_MODE_ENTRY_MODE_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_CPU_REDIRECT_MODE_ENTRY_DTS), r)
#define RDD_CPU_REDIRECT_MODE_ENTRY_MODE_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_CPU_REDIRECT_MODE_ENTRY_DTS), v)
#define RDD_CPU_REDIRECT_MODE_ENTRY_MODE_READ(r, p)                 MREAD_8((uint8_t *)p, r)
#define RDD_CPU_REDIRECT_MODE_ENTRY_MODE_WRITE(v, p)                MWRITE_8((uint8_t *)p, v)
/* <<<RDD_CPU_REDIRECT_MODE_ENTRY_DTS */

typedef struct
{
	RDD_CPU_REDIRECT_MODE_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_REDIRECT_MODE_DTS;

extern uint32_t RDD_CPU_REDIRECT_MODE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_REDIRECT_MODE_PTR(core_id)	( RDD_CPU_REDIRECT_MODE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_REDIRECT_MODE_ADDRESS_ARR[core_id] ))

/* <<<CPU_REDIRECT_MODE */


/* >>>IPTV_CLASSIFICATION_CFG_TABLE */

/* >>>RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	da_prefix_mode_mac	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	da_prefix_mode_ip 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	iptv_en           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved1         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint8_t	reserved1         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	iptv_en           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	da_prefix_mode_ip 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	da_prefix_mode_mac	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS;

typedef RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS * aligned_RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS ALIGNMENT8;

#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS), 7, 1, r)
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS), 7, 1, v)
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS), 6, 1, r)
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS), 6, 1, v)
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS), 5, 1, r)
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS), 5, 1, v)
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
/* <<<RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS */

typedef struct
{
	RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_CLASSIFICATION_CFG_TABLE_DTS;

extern uint32_t RDD_IPTV_CLASSIFICATION_CFG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPTV_CLASSIFICATION_CFG_TABLE_PTR(core_id)	( RDD_IPTV_CLASSIFICATION_CFG_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPTV_CLASSIFICATION_CFG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<IPTV_CLASSIFICATION_CFG_TABLE */


/* >>>INGRESS_FILTER_1588_CFG */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_INGRESS_FILTER_1588_CFG_DTS;

extern uint32_t RDD_INGRESS_FILTER_1588_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_INGRESS_FILTER_1588_CFG_PTR(core_id)	( RDD_INGRESS_FILTER_1588_CFG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_INGRESS_FILTER_1588_CFG_ADDRESS_ARR[core_id] ))

/* <<<INGRESS_FILTER_1588_CFG */


/* >>>VLAN_ACTION_GPE_HANDLER_PTR_TABLE */

#define RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_SIZE     17
typedef struct
{
	RDD_BYTES_2_DTS	entry[ RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_DTS;

extern uint32_t RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_PTR(core_id)	( RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<VLAN_ACTION_GPE_HANDLER_PTR_TABLE */


/* >>>RX_MIRRORING_DIRECT_ENABLE */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RX_MIRRORING_DIRECT_ENABLE_DTS;

extern uint32_t RDD_RX_MIRRORING_DIRECT_ENABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RX_MIRRORING_DIRECT_ENABLE_PTR(core_id)	( RDD_RX_MIRRORING_DIRECT_ENABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RX_MIRRORING_DIRECT_ENABLE_ADDRESS_ARR[core_id] ))

/* <<<RX_MIRRORING_DIRECT_ENABLE */


/* >>>CPU_TX_RING_DESCRIPTOR_TABLE */

/* >>>RDD_CPU_RING_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	size_of_entry    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	number_of_entries	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	interrupt_id     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	drop_counter     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	write_idx        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	base_addr_low    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	read_idx         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	base_addr_high   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	interrupt_id     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	number_of_entries	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	size_of_entry    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	write_idx        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	drop_counter     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	base_addr_low    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	base_addr_high   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	read_idx         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RING_DESCRIPTOR_DTS;

typedef RDD_CPU_RING_DESCRIPTOR_DTS * aligned_RDD_CPU_RING_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_CPU_RING_DESCRIPTOR_DTS fields;
} RDD_CPU_RING_DESCRIPTOR_DTS_NEW;
typedef RDD_CPU_RING_DESCRIPTOR_DTS_NEW * aligned_RDD_CPU_RING_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS), 3, 5, r)
#define RDD_CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS), 3, 5, v)
#define RDD_CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p, 3, 5, r)
#define RDD_CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p, 3, 5, v)
#define RDD_CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS), 0, 11, r)
#define RDD_CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS), 0, 11, v)
#define RDD_CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p, 0, 11, r)
#define RDD_CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p, 0, 11, v)
#define RDD_CPU_RING_DESCRIPTOR_INTERRUPT_ID_READ_G(r, g, idx)               GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 2, r)
#define RDD_CPU_RING_DESCRIPTOR_INTERRUPT_ID_WRITE_G(v, g, idx)              GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 2, v)
#define RDD_CPU_RING_DESCRIPTOR_INTERRUPT_ID_READ(r, p)                      MREAD_16((uint8_t *)p + 2, r)
#define RDD_CPU_RING_DESCRIPTOR_INTERRUPT_ID_WRITE(v, p)                     MWRITE_16((uint8_t *)p + 2, v)
#define RDD_CPU_RING_DESCRIPTOR_DROP_COUNTER_READ_G(r, g, idx)               GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 4, r)
#define RDD_CPU_RING_DESCRIPTOR_DROP_COUNTER_WRITE_G(v, g, idx)              GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 4, v)
#define RDD_CPU_RING_DESCRIPTOR_DROP_COUNTER_READ(r, p)                      MREAD_16((uint8_t *)p + 4, r)
#define RDD_CPU_RING_DESCRIPTOR_DROP_COUNTER_WRITE(v, p)                     MWRITE_16((uint8_t *)p + 4, v)
#define RDD_CPU_RING_DESCRIPTOR_WRITE_IDX_READ_G(r, g, idx)                  GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 6, r)
#define RDD_CPU_RING_DESCRIPTOR_WRITE_IDX_WRITE_G(v, g, idx)                 GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 6, v)
#define RDD_CPU_RING_DESCRIPTOR_WRITE_IDX_READ(r, p)                         MREAD_16((uint8_t *)p + 6, r)
#define RDD_CPU_RING_DESCRIPTOR_WRITE_IDX_WRITE(v, p)                        MWRITE_16((uint8_t *)p + 6, v)
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 8, r)
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 8, v)
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_READ(r, p)                     MREAD_32((uint8_t *)p + 8, r)
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_WRITE(v, p)                    MWRITE_32((uint8_t *)p + 8, v)
#define RDD_CPU_RING_DESCRIPTOR_READ_IDX_READ_G(r, g, idx)                   GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 12, r)
#define RDD_CPU_RING_DESCRIPTOR_READ_IDX_WRITE_G(v, g, idx)                  GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 12, v)
#define RDD_CPU_RING_DESCRIPTOR_READ_IDX_READ(r, p)                          MREAD_16((uint8_t *)p + 12, r)
#define RDD_CPU_RING_DESCRIPTOR_READ_IDX_WRITE(v, p)                         MWRITE_16((uint8_t *)p + 12, v)
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_READ_G(r, g, idx)             GROUP_MREAD_8(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 15, r)
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_WRITE_G(v, g, idx)            GROUP_MWRITE_8(g, idx*sizeof(RDD_CPU_RING_DESCRIPTOR_DTS) + 15, v)
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_READ(r, p)                    MREAD_8((uint8_t *)p + 15, r)
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_WRITE(v, p)                   MWRITE_8((uint8_t *)p + 15, v)
/* <<<RDD_CPU_RING_DESCRIPTOR_DTS */


#define RDD_CPU_TX_RING_DESCRIPTOR_TABLE_SIZE     2
typedef struct
{
	RDD_CPU_RING_DESCRIPTOR_DTS	entry[ RDD_CPU_TX_RING_DESCRIPTOR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_RING_DESCRIPTOR_TABLE_DTS;

extern uint32_t RDD_CPU_TX_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_RING_DESCRIPTOR_TABLE_PTR(core_id)	( RDD_CPU_TX_RING_DESCRIPTOR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_RING_DESCRIPTOR_TABLE */


/* >>>CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE */

#define RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE */


/* >>>RING_CPU_TX_DESCRIPTOR_DATA_TABLE */

/* >>>RDD_RING_CPU_TX_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	is_egress           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sk_buf_ptr_high     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_is_egress           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_sk_buf_ptr_high     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_is_egress           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_sk_buf_ptr_high     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	sk_buf_ptr_low_or_data_1588	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	sk_buf_ptr_low                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of sk_buf_ptr_low_or_data_1588 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	data_1588                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of sk_buf_ptr_low_or_data_1588 union */
			uint32_t	reserved1                     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of sk_buf_ptr_low_or_data_1588 union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	wan_flow_source_port_union	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	fpm_fallback        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sbpm_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lag_index           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ssid                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_dont_drop    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	pkt_buf_ptr_high    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	wan_flow_source_port          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
			uint32_t	reserved1_fpm_fallback        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_sbpm_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_lag_index           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_ssid                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_egress_dont_drop    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_pkt_buf_ptr_high    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_vport                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
			uint32_t	flow_or_port_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
			uint32_t	reserved2_fpm_fallback        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_sbpm_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_lag_index           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_ssid                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_egress_dont_drop    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_pkt_buf_ptr_high    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	pkt_buf_ptr_low_or_fpm_bn0	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	pkt_buf_ptr_low               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved0                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
			uint32_t	fpm_sop                       	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
			uint32_t	fpm_bn0                       	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	sk_buf_ptr_high     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_egress           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_sk_buf_ptr_high     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_egress           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_sk_buf_ptr_high     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_egress           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	sk_buf_ptr_low_or_data_1588	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	sk_buf_ptr_low                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of sk_buf_ptr_low_or_data_1588 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	data_1588                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of sk_buf_ptr_low_or_data_1588 union */
			uint32_t	reserved1                     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of sk_buf_ptr_low_or_data_1588 union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	pkt_buf_ptr_high    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_dont_drop    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ssid                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lag_index           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sbpm_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	fpm_fallback        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	wan_flow_source_port_union	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_pkt_buf_ptr_high    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_egress_dont_drop    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_ssid                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_lag_index           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_sbpm_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_fpm_fallback        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	wan_flow_source_port          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
			uint32_t	reserved1_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_pkt_buf_ptr_high    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_egress_dont_drop    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_ssid                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_lag_index           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_sbpm_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_fpm_fallback        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_vport                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
			uint32_t	flow_or_port_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
			uint32_t	reserved2_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	pkt_buf_ptr_low_or_fpm_bn0	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	pkt_buf_ptr_low               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved0                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
			uint32_t	fpm_sop                       	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
			uint32_t	fpm_bn0                       	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RING_CPU_TX_DESCRIPTOR_DTS;

typedef RDD_RING_CPU_TX_DESCRIPTOR_DTS * aligned_RDD_RING_CPU_TX_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_RING_CPU_TX_DESCRIPTOR_DTS fields;
} RDD_RING_CPU_TX_DESCRIPTOR_DTS_NEW;
typedef RDD_RING_CPU_TX_DESCRIPTOR_DTS_NEW * aligned_RDD_RING_CPU_TX_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_RING_CPU_TX_DESCRIPTOR_IS_EGRESS_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_EGRESS_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_EGRESS_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_EGRESS_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS), 6, 9, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS), 6, 9, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                        FIELD_MREAD_16((uint8_t *)p, 6, 9, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)p, 6, 9, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 0, 8, 14, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 0, 8, 14, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                        FIELD_MREAD_32((uint8_t *)p + 0, 8, 14, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                       FIELD_MWRITE_32((uint8_t *)p + 0, 8, 14, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_READ_G(r, g, idx)               GROUP_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 3, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_WRITE_G(v, g, idx)              GROUP_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 3, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_READ(r, p)                      MREAD_8((uint8_t *)p + 3, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_WRITE(v, p)                     MWRITE_8((uint8_t *)p + 3, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_READ_G(r, g, idx)   GROUP_MREAD_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 4, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_WRITE_G(v, g, idx)  GROUP_MWRITE_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 4, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_READ(r, p)          MREAD_32((uint8_t *)p + 4, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_WRITE(v, p)         MWRITE_32((uint8_t *)p + 4, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 4, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 4, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_READ(r, p)                       MREAD_32((uint8_t *)p + 4, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 4, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_1588_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 4, 14, 18, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_1588_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 4, 14, 18, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_1588_READ(r, p)                            FIELD_MREAD_32((uint8_t *)p + 4, 14, 18, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_1588_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)p + 4, 14, 18, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_COLOR_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 7, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 7, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_COLOR_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 8, 7, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_COLOR_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 8, 7, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 6, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 6, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 8, 6, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 8, 6, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 5, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 5, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FLAG_1588_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 8, 5, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FLAG_1588_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 8, 5, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_LAN_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 4, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 4, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_LAN_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 8, 4, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_LAN_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 8, 4, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_READ_G(r, g, idx)    GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 4, 8, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_WRITE_G(v, g, idx)   GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 4, 8, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_READ(r, p)           FIELD_MREAD_16((uint8_t *)p + 8, 4, 8, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_WRITE(v, p)          FIELD_MWRITE_16((uint8_t *)p + 8, 4, 8, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 4, 8, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 4, 8, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 8, 4, 8, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 8, 4, 8, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_VPORT_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 3, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_VPORT_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 3, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_VPORT_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 8, 3, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_VPORT_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 8, 3, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 4, 7, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 8, 4, 7, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_READ(r, p)                      FIELD_MREAD_16((uint8_t *)p + 8, 4, 7, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)p + 8, 4, 7, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 9, 3, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 9, 3, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 9, 3, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 9, 3, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_SBPM_COPY_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 9, 2, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_SBPM_COPY_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 9, 2, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_SBPM_COPY_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 9, 2, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_SBPM_COPY_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 9, 2, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 9, 1, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 9, 1, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 9, 1, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 9, 1, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_ABS_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 9, 0, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 9, 0, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_ABS_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 9, 0, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_ABS_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 9, 0, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_LAG_INDEX_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 10, 6, 2, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_LAG_INDEX_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 10, 6, 2, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_LAG_INDEX_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 10, 6, 2, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_LAG_INDEX_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 10, 6, 2, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_SSID_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 10, 2, 4, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_SSID_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 10, 2, 4, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_SSID_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 10, 2, 4, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_SSID_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 10, 2, 4, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 10, 1, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 10, 1, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 10, 1, 1, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 10, 1, 1, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_READ_G(r, g, idx)              GROUP_MREAD_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 11, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_8(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 11, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_READ(r, p)                     MREAD_8((uint8_t *)p + 11, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_WRITE(v, p)                    MWRITE_8((uint8_t *)p + 11, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_READ_G(r, g, idx)    GROUP_MREAD_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 12, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_WRITE_G(v, g, idx)   GROUP_MWRITE_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 12, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_READ(r, p)           MREAD_32((uint8_t *)p + 12, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_WRITE(v, p)          MWRITE_32((uint8_t *)p + 12, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 12, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 12, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_READ(r, p)                      MREAD_32((uint8_t *)p + 12, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 12, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_SOP_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_SOP_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_SOP_READ(r, p)                              FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_SOP_WRITE(v, p)                             FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_BN0_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_BN0_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_RING_CPU_TX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_BN0_READ(r, p)                              FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_BN0_WRITE(v, p)                             FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
/* <<<RDD_RING_CPU_TX_DESCRIPTOR_DTS */


#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_SIZE     2
typedef struct
{
	RDD_RING_CPU_TX_DESCRIPTOR_DTS	entry[ RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_DTS;

extern uint32_t RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_PTR(core_id)	( RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_ADDRESS_ARR[core_id] ))

/* <<<RING_CPU_TX_DESCRIPTOR_DATA_TABLE */


/* >>>CPU_RECYCLE_RING_DESCRIPTOR_TABLE */
typedef struct
{
	RDD_CPU_RING_DESCRIPTOR_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_DTS;

extern uint32_t RDD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_PTR(core_id)	( RDD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_RING_DESCRIPTOR_TABLE */


/* >>>CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE */

#define RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_SIZE     2
typedef struct
{
	RDD_DDR_ADDRESS_DTS	entry[ RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_DTS;

extern uint32_t RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_PTR(core_id)	( RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE */


/* >>>CPU_FEED_RING_DESCRIPTOR_TABLE */
typedef struct
{
	RDD_CPU_RING_DESCRIPTOR_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_FEED_RING_DESCRIPTOR_TABLE_DTS;

extern uint32_t RDD_CPU_FEED_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_FEED_RING_DESCRIPTOR_TABLE_PTR(core_id)	( RDD_CPU_FEED_RING_DESCRIPTOR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_FEED_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_FEED_RING_DESCRIPTOR_TABLE */


/* >>>CPU_RECYCLE_INTERRUPT_SCRATCH */

#define RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_SIZE     2
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_DTS;

extern uint32_t RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_PTR(core_id)	( RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_INTERRUPT_SCRATCH */


/* >>>DHD_FPM_THRESHOLDS */

#define RDD_DHD_FPM_THRESHOLDS_SIZE     3
typedef struct
{
	RDD_BYTES_2_DTS	entry[ RDD_DHD_FPM_THRESHOLDS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_FPM_THRESHOLDS_DTS;

extern uint32_t RDD_DHD_FPM_THRESHOLDS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_FPM_THRESHOLDS_PTR(core_id)	( RDD_DHD_FPM_THRESHOLDS_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_FPM_THRESHOLDS_ADDRESS_ARR[core_id] ))

/* <<<DHD_FPM_THRESHOLDS */


/* >>>CPU_TX_SYNC_FIFO_TABLE */

/* >>>RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	write_ptr 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	read_ptr  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fifo      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	read_ptr  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	write_ptr 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fifo      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS;

typedef RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS * aligned_RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS fields;
} RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS_NEW;
typedef RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS_NEW * aligned_RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS), r)
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS), v)
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_READ(r, p)                 MREAD_16((uint8_t *)p, r)
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_WRITE(v, p)                MWRITE_16((uint8_t *)p, v)
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_READ_G(r, g, idx)           GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS) + 2, r)
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_WRITE_G(v, g, idx)          GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS) + 2, v)
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_READ(r, p)                  MREAD_16((uint8_t *)p + 2, r)
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_WRITE(v, p)                 MWRITE_16((uint8_t *)p + 2, v)
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_FIFO_READ_G(r, g, idx)               GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS) + 4, r)
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_FIFO_WRITE_G(v, g, idx)              GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS) + 4, v)
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_FIFO_READ(r, p)                      MREAD_16((uint8_t *)p + 4, r)
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_FIFO_WRITE(v, p)                     MWRITE_16((uint8_t *)p + 4, v)
/* <<<RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS */


#define RDD_CPU_TX_SYNC_FIFO_TABLE_SIZE     2
typedef struct
{
	RDD_CPU_TX_SYNC_FIFO_ENTRY_DTS	entry[ RDD_CPU_TX_SYNC_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_SYNC_FIFO_TABLE_DTS;

extern uint32_t RDD_CPU_TX_SYNC_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_SYNC_FIFO_TABLE_PTR(core_id)	( RDD_CPU_TX_SYNC_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_SYNC_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_SYNC_FIFO_TABLE */


/* >>>MULTICAST_WHITELIST_CFG_TABLE */

/* >>>RDD_MULTICAST_WHITELIST_CFG_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	res_offset      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context_offset  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_offset      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	natc_tbl_idx    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ddr_ctx_tbl_high	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ddr_ctx_tbl_low 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	context_offset  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	res_offset      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ddr_ctx_tbl_high	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	natc_tbl_idx    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_offset      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ddr_ctx_tbl_low 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_MULTICAST_WHITELIST_CFG_DTS;

typedef RDD_MULTICAST_WHITELIST_CFG_DTS * aligned_RDD_MULTICAST_WHITELIST_CFG_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[3];
    uint64_t dword_val64[1];
    RDD_MULTICAST_WHITELIST_CFG_DTS fields;
} RDD_MULTICAST_WHITELIST_CFG_DTS_NEW;
typedef RDD_MULTICAST_WHITELIST_CFG_DTS_NEW * aligned_RDD_MULTICAST_WHITELIST_CFG_DTS_NEW ALIGNMENT8;

#define RDD_MULTICAST_WHITELIST_CFG_RES_OFFSET_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS), r)
#define RDD_MULTICAST_WHITELIST_CFG_RES_OFFSET_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS), v)
#define RDD_MULTICAST_WHITELIST_CFG_RES_OFFSET_READ(r, p)                       MREAD_16((uint8_t *)p, r)
#define RDD_MULTICAST_WHITELIST_CFG_RES_OFFSET_WRITE(v, p)                      MWRITE_16((uint8_t *)p, v)
#define RDD_MULTICAST_WHITELIST_CFG_CONTEXT_OFFSET_READ_G(r, g, idx)            GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS) + 2, r)
#define RDD_MULTICAST_WHITELIST_CFG_CONTEXT_OFFSET_WRITE_G(v, g, idx)           GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS) + 2, v)
#define RDD_MULTICAST_WHITELIST_CFG_CONTEXT_OFFSET_READ(r, p)                   MREAD_16((uint8_t *)p + 2, r)
#define RDD_MULTICAST_WHITELIST_CFG_CONTEXT_OFFSET_WRITE(v, p)                  MWRITE_16((uint8_t *)p + 2, v)
#define RDD_MULTICAST_WHITELIST_CFG_KEY_OFFSET_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS) + 4, r)
#define RDD_MULTICAST_WHITELIST_CFG_KEY_OFFSET_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS) + 4, v)
#define RDD_MULTICAST_WHITELIST_CFG_KEY_OFFSET_READ(r, p)                       MREAD_16((uint8_t *)p + 4, r)
#define RDD_MULTICAST_WHITELIST_CFG_KEY_OFFSET_WRITE(v, p)                      MWRITE_16((uint8_t *)p + 4, v)
#define RDD_MULTICAST_WHITELIST_CFG_NATC_TBL_IDX_READ_G(r, g, idx)              GROUP_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS) + 6, r)
#define RDD_MULTICAST_WHITELIST_CFG_NATC_TBL_IDX_WRITE_G(v, g, idx)             GROUP_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS) + 6, v)
#define RDD_MULTICAST_WHITELIST_CFG_NATC_TBL_IDX_READ(r, p)                     MREAD_8((uint8_t *)p + 6, r)
#define RDD_MULTICAST_WHITELIST_CFG_NATC_TBL_IDX_WRITE(v, p)                    MWRITE_8((uint8_t *)p + 6, v)
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_HIGH_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS) + 7, r)
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS) + 7, v)
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_HIGH_READ(r, p)                 MREAD_8((uint8_t *)p + 7, r)
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_HIGH_WRITE(v, p)                MWRITE_8((uint8_t *)p + 7, v)
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS) + 8, r)
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CFG_DTS) + 8, v)
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_LOW_READ(r, p)                  MREAD_32((uint8_t *)p + 8, r)
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 8, v)
/* <<<RDD_MULTICAST_WHITELIST_CFG_DTS */

typedef struct
{
	RDD_MULTICAST_WHITELIST_CFG_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_MULTICAST_WHITELIST_CFG_TABLE_DTS;

extern uint32_t RDD_MULTICAST_WHITELIST_CFG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_MULTICAST_WHITELIST_CFG_TABLE_PTR(core_id)	( RDD_MULTICAST_WHITELIST_CFG_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_MULTICAST_WHITELIST_CFG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<MULTICAST_WHITELIST_CFG_TABLE */


/* >>>SYSTEM_CONFIGURATION */

/* >>>RDD_SYSTEM_CONFIGURATION_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	ds_drop_precedence_eligibility_vector	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	us_drop_precedence_eligibility_vector	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	full_flow_cache_mode                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l2_flow_cache_mode                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	iptv_lookup_miss_action              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	congestion_ctrl                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_pure_ack_flows                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	us_drop_precedence_eligibility_vector	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ds_drop_precedence_eligibility_vector	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_pure_ack_flows                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	congestion_ctrl                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	iptv_lookup_miss_action              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l2_flow_cache_mode                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	full_flow_cache_mode                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SYSTEM_CONFIGURATION_ENTRY_DTS;

typedef RDD_SYSTEM_CONFIGURATION_ENTRY_DTS * aligned_RDD_SYSTEM_CONFIGURATION_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_SYSTEM_CONFIGURATION_ENTRY_DTS fields;
} RDD_SYSTEM_CONFIGURATION_ENTRY_DTS_NEW;
typedef RDD_SYSTEM_CONFIGURATION_ENTRY_DTS_NEW * aligned_RDD_SYSTEM_CONFIGURATION_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_SYSTEM_CONFIGURATION_ENTRY_DS_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS), r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_DS_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS), v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_DS_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_READ(r, p)                 MREAD_16((uint8_t *)p, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_DS_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_WRITE(v, p)                MWRITE_16((uint8_t *)p, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_US_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 2, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_US_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 2, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_US_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_READ(r, p)                 MREAD_16((uint8_t *)p + 2, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_US_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_WRITE(v, p)                MWRITE_16((uint8_t *)p + 2, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_FULL_FLOW_CACHE_MODE_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 4, 7, 1, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_FULL_FLOW_CACHE_MODE_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 4, 7, 1, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_FULL_FLOW_CACHE_MODE_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 4, 7, 1, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_FULL_FLOW_CACHE_MODE_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 4, 7, 1, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_L2_FLOW_CACHE_MODE_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 4, 6, 1, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_L2_FLOW_CACHE_MODE_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 4, 6, 1, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_L2_FLOW_CACHE_MODE_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 4, 6, 1, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_L2_FLOW_CACHE_MODE_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 4, 6, 1, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_IPTV_LOOKUP_MISS_ACTION_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 4, 5, 1, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_IPTV_LOOKUP_MISS_ACTION_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 4, 5, 1, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_IPTV_LOOKUP_MISS_ACTION_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 4, 5, 1, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_IPTV_LOOKUP_MISS_ACTION_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 4, 5, 1, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_CONGESTION_CTRL_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 4, 4, 1, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_CONGESTION_CTRL_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 4, 4, 1, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_CONGESTION_CTRL_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)p + 4, 4, 1, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_CONGESTION_CTRL_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)p + 4, 4, 1, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_TCP_PURE_ACK_FLOWS_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 4, 0, 1, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_TCP_PURE_ACK_FLOWS_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SYSTEM_CONFIGURATION_ENTRY_DTS) + 4, 0, 1, v)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_TCP_PURE_ACK_FLOWS_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 4, 0, 1, r)
#define RDD_SYSTEM_CONFIGURATION_ENTRY_TCP_PURE_ACK_FLOWS_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 4, 0, 1, v)
/* <<<RDD_SYSTEM_CONFIGURATION_ENTRY_DTS */

typedef struct
{
	RDD_SYSTEM_CONFIGURATION_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SYSTEM_CONFIGURATION_DTS;

extern uint32_t RDD_SYSTEM_CONFIGURATION_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SYSTEM_CONFIGURATION_PTR(core_id)	( RDD_SYSTEM_CONFIGURATION_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SYSTEM_CONFIGURATION_ADDRESS_ARR[core_id] ))

/* <<<SYSTEM_CONFIGURATION */


/* >>>CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE */

/* >>>RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	counter   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	max_size  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	counter   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	max_size  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS;

typedef RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS * aligned_RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS fields;
} RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS_NEW;
typedef RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS_NEW * aligned_RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS), r)
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS), v)
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_READ(r, p)                  MREAD_32((uint8_t *)p, r)
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_WRITE(v, p)                 MWRITE_32((uint8_t *)p, v)
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS) + 4, r)
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS) + 4, v)
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS */

typedef struct
{
	RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE_DTS;

extern uint32_t RDD_CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE_PTR(core_id)	( RDD_CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE */


/* >>>CPU_TX_RING_INDICES_VALUES_TABLE */

/* >>>RDD_CPU_TX_RING_INDICES_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	read_idx  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	write_idx 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	write_idx 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	read_idx  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_RING_INDICES_DTS;

typedef RDD_CPU_TX_RING_INDICES_DTS * aligned_RDD_CPU_TX_RING_INDICES_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_CPU_TX_RING_INDICES_DTS fields;
} RDD_CPU_TX_RING_INDICES_DTS_NEW;
typedef RDD_CPU_TX_RING_INDICES_DTS_NEW * aligned_RDD_CPU_TX_RING_INDICES_DTS_NEW ALIGNMENT8;

#define RDD_CPU_TX_RING_INDICES_READ_IDX_READ_G(r, g, idx)           GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_TX_RING_INDICES_DTS), r)
#define RDD_CPU_TX_RING_INDICES_READ_IDX_WRITE_G(v, g, idx)          GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_RING_INDICES_DTS), v)
#define RDD_CPU_TX_RING_INDICES_READ_IDX_READ(r, p)                  MREAD_16((uint8_t *)p, r)
#define RDD_CPU_TX_RING_INDICES_READ_IDX_WRITE(v, p)                 MWRITE_16((uint8_t *)p, v)
#define RDD_CPU_TX_RING_INDICES_WRITE_IDX_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_TX_RING_INDICES_DTS) + 2, r)
#define RDD_CPU_TX_RING_INDICES_WRITE_IDX_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_RING_INDICES_DTS) + 2, v)
#define RDD_CPU_TX_RING_INDICES_WRITE_IDX_READ(r, p)                 MREAD_16((uint8_t *)p + 2, r)
#define RDD_CPU_TX_RING_INDICES_WRITE_IDX_WRITE(v, p)                MWRITE_16((uint8_t *)p + 2, v)
/* <<<RDD_CPU_TX_RING_INDICES_DTS */


#define RDD_CPU_TX_RING_INDICES_VALUES_TABLE_SIZE     2
typedef struct
{
	RDD_CPU_TX_RING_INDICES_DTS	entry[ RDD_CPU_TX_RING_INDICES_VALUES_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_RING_INDICES_VALUES_TABLE_DTS;

extern uint32_t RDD_CPU_TX_RING_INDICES_VALUES_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_RING_INDICES_VALUES_TABLE_PTR(core_id)	( RDD_CPU_TX_RING_INDICES_VALUES_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_RING_INDICES_VALUES_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_RING_INDICES_VALUES_TABLE */


/* >>>TUNNELS_PARSING_CFG */

/* >>>RDD_TUNNELS_PARSING_CFG_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reserved0       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tunneling_enable	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	res_offset      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	res_offset      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tunneling_enable	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TUNNELS_PARSING_CFG_DTS;

typedef RDD_TUNNELS_PARSING_CFG_DTS * aligned_RDD_TUNNELS_PARSING_CFG_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_TUNNELS_PARSING_CFG_DTS fields;
} RDD_TUNNELS_PARSING_CFG_DTS_NEW;
typedef RDD_TUNNELS_PARSING_CFG_DTS_NEW * aligned_RDD_TUNNELS_PARSING_CFG_DTS_NEW ALIGNMENT8;

#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_TUNNELS_PARSING_CFG_DTS) + 1, r)
#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_TUNNELS_PARSING_CFG_DTS) + 1, v)
#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_READ(r, p)                 MREAD_8((uint8_t *)p + 1, r)
#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_WRITE(v, p)                MWRITE_8((uint8_t *)p + 1, v)
#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_L_READ( wv )               FIELD_GET( wv, 16, 8 )
#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_L_WRITE( v, wv )           FIELD_SET( v, 16, 8, wv )
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_TUNNELS_PARSING_CFG_DTS) + 2, r)
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_TUNNELS_PARSING_CFG_DTS) + 2, v)
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_READ(r, p)                       MREAD_16((uint8_t *)p + 2, r)
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_WRITE(v, p)                      MWRITE_16((uint8_t *)p + 2, v)
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_L_READ( wv )                     FIELD_GET( wv, 0, 16 )
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_L_WRITE( v, wv )                 FIELD_SET( v, 0, 16, wv )
/* <<<RDD_TUNNELS_PARSING_CFG_DTS */

typedef struct
{
	RDD_TUNNELS_PARSING_CFG_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TUNNELS_PARSING_CFG_TABLE_DTS;

extern uint32_t RDD_TUNNELS_PARSING_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TUNNELS_PARSING_CFG_PTR(core_id)	( RDD_TUNNELS_PARSING_CFG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TUNNELS_PARSING_CFG_ADDRESS_ARR[core_id] ))

/* <<<TUNNELS_PARSING_CFG */


/* >>>IPTV_CFG_TABLE */

/* >>>RDD_IPTV_CFG_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	res_offset    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context_offset	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_offset    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hash_tbl_idx  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l2_mcast      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	context_offset	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	res_offset    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l2_mcast      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hash_tbl_idx  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_offset    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_CFG_DTS;

typedef RDD_IPTV_CFG_DTS * aligned_RDD_IPTV_CFG_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_IPTV_CFG_DTS fields;
} RDD_IPTV_CFG_DTS_NEW;
typedef RDD_IPTV_CFG_DTS_NEW * aligned_RDD_IPTV_CFG_DTS_NEW ALIGNMENT8;

#define RDD_IPTV_CFG_RES_OFFSET_READ_G(r, g, idx)              GROUP_MREAD_16(g, idx*sizeof(RDD_IPTV_CFG_DTS), r)
#define RDD_IPTV_CFG_RES_OFFSET_WRITE_G(v, g, idx)             GROUP_MWRITE_16(g, idx*sizeof(RDD_IPTV_CFG_DTS), v)
#define RDD_IPTV_CFG_RES_OFFSET_READ(r, p)                     MREAD_16((uint8_t *)p, r)
#define RDD_IPTV_CFG_RES_OFFSET_WRITE(v, p)                    MWRITE_16((uint8_t *)p, v)
#define RDD_IPTV_CFG_CONTEXT_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_IPTV_CFG_DTS) + 2, r)
#define RDD_IPTV_CFG_CONTEXT_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_IPTV_CFG_DTS) + 2, v)
#define RDD_IPTV_CFG_CONTEXT_OFFSET_READ(r, p)                 MREAD_16((uint8_t *)p + 2, r)
#define RDD_IPTV_CFG_CONTEXT_OFFSET_WRITE(v, p)                MWRITE_16((uint8_t *)p + 2, v)
#define RDD_IPTV_CFG_KEY_OFFSET_READ_G(r, g, idx)              GROUP_MREAD_16(g, idx*sizeof(RDD_IPTV_CFG_DTS) + 4, r)
#define RDD_IPTV_CFG_KEY_OFFSET_WRITE_G(v, g, idx)             GROUP_MWRITE_16(g, idx*sizeof(RDD_IPTV_CFG_DTS) + 4, v)
#define RDD_IPTV_CFG_KEY_OFFSET_READ(r, p)                     MREAD_16((uint8_t *)p + 4, r)
#define RDD_IPTV_CFG_KEY_OFFSET_WRITE(v, p)                    MWRITE_16((uint8_t *)p + 4, v)
#define RDD_IPTV_CFG_HASH_TBL_IDX_READ_G(r, g, idx)            GROUP_MREAD_8(g, idx*sizeof(RDD_IPTV_CFG_DTS) + 6, r)
#define RDD_IPTV_CFG_HASH_TBL_IDX_WRITE_G(v, g, idx)           GROUP_MWRITE_8(g, idx*sizeof(RDD_IPTV_CFG_DTS) + 6, v)
#define RDD_IPTV_CFG_HASH_TBL_IDX_READ(r, p)                   MREAD_8((uint8_t *)p + 6, r)
#define RDD_IPTV_CFG_HASH_TBL_IDX_WRITE(v, p)                  MWRITE_8((uint8_t *)p + 6, v)
#define RDD_IPTV_CFG_L2_MCAST_READ_G(r, g, idx)                GROUP_MREAD_8(g, idx*sizeof(RDD_IPTV_CFG_DTS) + 7, r)
#define RDD_IPTV_CFG_L2_MCAST_WRITE_G(v, g, idx)               GROUP_MWRITE_8(g, idx*sizeof(RDD_IPTV_CFG_DTS) + 7, v)
#define RDD_IPTV_CFG_L2_MCAST_READ(r, p)                       MREAD_8((uint8_t *)p + 7, r)
#define RDD_IPTV_CFG_L2_MCAST_WRITE(v, p)                      MWRITE_8((uint8_t *)p + 7, v)
/* <<<RDD_IPTV_CFG_DTS */

typedef struct
{
	RDD_IPTV_CFG_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_CFG_TABLE_DTS;

extern uint32_t RDD_IPTV_CFG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPTV_CFG_TABLE_PTR(core_id)	( RDD_IPTV_CFG_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPTV_CFG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<IPTV_CFG_TABLE */


/* >>>IPTV_DDR_CTX_TABLE_ADDRESS */

/* >>>RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	low       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	high      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	low       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	high      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS;

typedef RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS * aligned_RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS fields;
} RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS_NEW;
typedef RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS_NEW * aligned_RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS_NEW ALIGNMENT8;

#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS), r)
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS), v)
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_LOW_READ(r, p)                  MREAD_32((uint8_t *)p, r)
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p, v)
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS) + 4, r)
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS) + 4, v)
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_HIGH_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS */

typedef struct
{
	RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_DDR_CTX_TABLE_ADDRESS_TABLE_DTS;

extern uint32_t RDD_IPTV_DDR_CTX_TABLE_ADDRESS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_PTR(core_id)	( RDD_IPTV_DDR_CTX_TABLE_ADDRESS_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPTV_DDR_CTX_TABLE_ADDRESS_ADDRESS_ARR[core_id] ))

/* <<<IPTV_DDR_CTX_TABLE_ADDRESS */


/* >>>NAT_CACHE_CFG */

/* >>>RDD_NAT_CACHE_CFG_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	res_offset        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context_offset    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_offset        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	three_tuple_enable	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	esp_filter_action 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	esp_filter_enable 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	context_offset    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	res_offset        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	esp_filter_enable 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	esp_filter_action 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	three_tuple_enable	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_offset        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NAT_CACHE_CFG_DTS;

typedef RDD_NAT_CACHE_CFG_DTS * aligned_RDD_NAT_CACHE_CFG_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_NAT_CACHE_CFG_DTS fields;
} RDD_NAT_CACHE_CFG_DTS_NEW;
typedef RDD_NAT_CACHE_CFG_DTS_NEW * aligned_RDD_NAT_CACHE_CFG_DTS_NEW ALIGNMENT8;

#define RDD_NAT_CACHE_CFG_RES_OFFSET_READ_G(r, g, idx)                  GROUP_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS), r)
#define RDD_NAT_CACHE_CFG_RES_OFFSET_WRITE_G(v, g, idx)                 GROUP_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS), v)
#define RDD_NAT_CACHE_CFG_RES_OFFSET_READ(r, p)                         MREAD_16((uint8_t *)p, r)
#define RDD_NAT_CACHE_CFG_RES_OFFSET_WRITE(v, p)                        MWRITE_16((uint8_t *)p, v)
#define RDD_NAT_CACHE_CFG_RES_OFFSET_L_READ( wv )                       FIELD_GET( wv, 16, 16 )
#define RDD_NAT_CACHE_CFG_RES_OFFSET_L_WRITE( v, wv )                   FIELD_SET( v, 16, 16, wv )
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_READ_G(r, g, idx)              GROUP_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS) + 2, r)
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_WRITE_G(v, g, idx)             GROUP_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS) + 2, v)
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_READ(r, p)                     MREAD_16((uint8_t *)p + 2, r)
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_WRITE(v, p)                    MWRITE_16((uint8_t *)p + 2, v)
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_L_READ( wv )                   FIELD_GET( wv, 0, 16 )
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_L_WRITE( v, wv )               FIELD_SET( v, 0, 16, wv )
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_READ_G(r, g, idx)                  GROUP_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS) + 4, r)
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_WRITE_G(v, g, idx)                 GROUP_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS) + 4, v)
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_READ(r, p)                         MREAD_16((uint8_t *)p + 4, r)
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_WRITE(v, p)                        MWRITE_16((uint8_t *)p + 4, v)
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_L_READ( wv )                       FIELD_GET( wv, 16, 16 )
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_L_WRITE( v, wv )                   FIELD_SET( v, 16, 16, wv )
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS) + 6, 2, 1, r)
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS) + 6, 2, 1, v)
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 6, 2, 1, r)
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 6, 2, 1, v)
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_L_READ( wv )               FIELD_GET( wv, 10, 1 )
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_L_WRITE( v, wv )           FIELD_SET( v, 10, 1, wv )
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS) + 6, 1, 1, r)
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS) + 6, 1, 1, v)
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 6, 1, 1, r)
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 6, 1, 1, v)
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_L_READ( wv )                FIELD_GET( wv, 9, 1 )
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_L_WRITE( v, wv )            FIELD_SET( v, 9, 1, wv )
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS) + 6, 0, 1, r)
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_CFG_DTS) + 6, 0, 1, v)
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 6, 0, 1, r)
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 6, 0, 1, v)
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_L_READ( wv )                FIELD_GET( wv, 8, 1 )
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_L_WRITE( v, wv )            FIELD_SET( v, 8, 1, wv )
/* <<<RDD_NAT_CACHE_CFG_DTS */

typedef struct
{
	RDD_NAT_CACHE_CFG_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NAT_CACHE_CFG_TABLE_DTS;

extern uint32_t RDD_NAT_CACHE_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NAT_CACHE_CFG_PTR(core_id)	( RDD_NAT_CACHE_CFG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NAT_CACHE_CFG_ADDRESS_ARR[core_id] ))

/* <<<NAT_CACHE_CFG */


/* >>>CPU_RECYCLE_SHADOW_RD_IDX */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RECYCLE_SHADOW_RD_IDX_DTS;

extern uint32_t RDD_CPU_RECYCLE_SHADOW_RD_IDX_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_SHADOW_RD_IDX_PTR(core_id)	( RDD_CPU_RECYCLE_SHADOW_RD_IDX_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_SHADOW_RD_IDX_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_SHADOW_RD_IDX */


/* >>>CPU_RECYCLE_SHADOW_WR_IDX */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RECYCLE_SHADOW_WR_IDX_DTS;

extern uint32_t RDD_CPU_RECYCLE_SHADOW_WR_IDX_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_SHADOW_WR_IDX_PTR(core_id)	( RDD_CPU_RECYCLE_SHADOW_WR_IDX_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_SHADOW_WR_IDX_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_SHADOW_WR_IDX */


/* >>>NAT_CACHE_KEY0_MASK */
typedef struct
{
	RDD_BYTES_4_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NAT_CACHE_KEY0_MASK_DTS;

extern uint32_t RDD_NAT_CACHE_KEY0_MASK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NAT_CACHE_KEY0_MASK_PTR(core_id)	( RDD_NAT_CACHE_KEY0_MASK_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NAT_CACHE_KEY0_MASK_ADDRESS_ARR[core_id] ))

/* <<<NAT_CACHE_KEY0_MASK */


/* >>>NATC_L2_VLAN_KEY_MASK */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NATC_L2_VLAN_KEY_MASK_DTS;

extern uint32_t RDD_NATC_L2_VLAN_KEY_MASK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NATC_L2_VLAN_KEY_MASK_PTR(core_id)	( RDD_NATC_L2_VLAN_KEY_MASK_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NATC_L2_VLAN_KEY_MASK_ADDRESS_ARR[core_id] ))

/* <<<NATC_L2_VLAN_KEY_MASK */


/* >>>INGRESS_FILTER_CFG */

/* >>>RDD_INGRESS_FILTER_CFG_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	res_offset	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	res_offset	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_INGRESS_FILTER_CFG_DTS;

typedef RDD_INGRESS_FILTER_CFG_DTS * aligned_RDD_INGRESS_FILTER_CFG_DTS ALIGNMENT8;

#define RDD_INGRESS_FILTER_CFG_RES_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_INGRESS_FILTER_CFG_DTS), r)
#define RDD_INGRESS_FILTER_CFG_RES_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_INGRESS_FILTER_CFG_DTS), v)
#define RDD_INGRESS_FILTER_CFG_RES_OFFSET_READ(r, p)                 MREAD_16((uint8_t *)p, r)
#define RDD_INGRESS_FILTER_CFG_RES_OFFSET_WRITE(v, p)                MWRITE_16((uint8_t *)p, v)
/* <<<RDD_INGRESS_FILTER_CFG_DTS */

typedef struct
{
	RDD_INGRESS_FILTER_CFG_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_INGRESS_FILTER_CFG_TABLE_DTS;

extern uint32_t RDD_INGRESS_FILTER_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_INGRESS_FILTER_CFG_PTR(core_id)	( RDD_INGRESS_FILTER_CFG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_INGRESS_FILTER_CFG_ADDRESS_ARR[core_id] ))

/* <<<INGRESS_FILTER_CFG */


/* >>>NATC_L2_TOS_MASK */
typedef struct
{
	RDD_BYTE_1_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NATC_L2_TOS_MASK_DTS;

extern uint32_t RDD_NATC_L2_TOS_MASK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NATC_L2_TOS_MASK_PTR(core_id)	( RDD_NATC_L2_TOS_MASK_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NATC_L2_TOS_MASK_ADDRESS_ARR[core_id] ))

/* <<<NATC_L2_TOS_MASK */


/* >>>FC_FLOW_IP_ADDRESSES_TABLE */

/* >>>RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS */
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_NUMBER	32
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED0_NUMBER	4
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED1_NUMBER	4

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	sa_da_addresses[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_NUMBER];
	uint8_t	reserved0[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED0_NUMBER];
	uint32_t	reference_count                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved1[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED1_NUMBER];
	uint32_t	is_ipv6_address                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint8_t	sa_da_addresses[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_NUMBER];
	uint8_t	reserved0[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED0_NUMBER];
	uint32_t	reference_count                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved1[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED1_NUMBER];
	uint32_t	is_ipv6_address                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS;

typedef RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS * aligned_RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[12];
    uint64_t dword_val64[6];
    RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS fields;
} RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS_NEW;
typedef RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS_NEW * aligned_RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS), i, r)
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS), i, v)
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_READ(r, p, i)              MREAD_I_8((uint8_t *)p, i, r)
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p, i, v)
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_REFERENCE_COUNT_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS) + 36, r)
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_REFERENCE_COUNT_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS) + 36, v)
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_REFERENCE_COUNT_READ(r, p)                 MREAD_32((uint8_t *)p + 36, r)
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_REFERENCE_COUNT_WRITE(v, p)                MWRITE_32((uint8_t *)p + 36, v)
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_IS_IPV6_ADDRESS_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS) + 44, r)
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_IS_IPV6_ADDRESS_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS) + 44, v)
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_IS_IPV6_ADDRESS_READ(r, p)                 MREAD_32((uint8_t *)p + 44, r)
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_IS_IPV6_ADDRESS_WRITE(v, p)                MWRITE_32((uint8_t *)p + 44, v)
/* <<<RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS */


#define RDD_FC_FLOW_IP_ADDRESSES_TABLE_SIZE     4
typedef struct
{
	RDD_FC_FLOW_IP_ADDRESSES_ENTRY_DTS	entry[ RDD_FC_FLOW_IP_ADDRESSES_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FC_FLOW_IP_ADDRESSES_TABLE_DTS;

extern uint32_t RDD_FC_FLOW_IP_ADDRESSES_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_FC_FLOW_IP_ADDRESSES_TABLE_PTR(core_id)	( RDD_FC_FLOW_IP_ADDRESSES_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_FC_FLOW_IP_ADDRESSES_TABLE_ADDRESS_ARR[core_id] ))

/* <<<FC_FLOW_IP_ADDRESSES_TABLE */

/* CORE_3 */

/* >>>DS_CPU_RX_METER_TABLE */

/* >>>RDD_CPU_RX_METER_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	current_budget  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	budget_limit    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	allocated_budget	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	budget_residue  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	current_cycle   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	budget_limit    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	current_budget  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	current_cycle   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	budget_residue  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	allocated_budget	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_METER_ENTRY_DTS;

typedef RDD_CPU_RX_METER_ENTRY_DTS * aligned_RDD_CPU_RX_METER_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_CPU_RX_METER_ENTRY_DTS fields;
} RDD_CPU_RX_METER_ENTRY_DTS_NEW;
typedef RDD_CPU_RX_METER_ENTRY_DTS_NEW * aligned_RDD_CPU_RX_METER_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_CPU_RX_METER_ENTRY_CURRENT_BUDGET_READ_G(r, g, idx)            GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_RX_METER_ENTRY_DTS), r)
#define RDD_CPU_RX_METER_ENTRY_CURRENT_BUDGET_WRITE_G(v, g, idx)           GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_RX_METER_ENTRY_DTS), v)
#define RDD_CPU_RX_METER_ENTRY_CURRENT_BUDGET_READ(r, p)                   MREAD_16((uint8_t *)p, r)
#define RDD_CPU_RX_METER_ENTRY_CURRENT_BUDGET_WRITE(v, p)                  MWRITE_16((uint8_t *)p, v)
#define RDD_CPU_RX_METER_ENTRY_BUDGET_LIMIT_READ_G(r, g, idx)              GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_RX_METER_ENTRY_DTS) + 2, r)
#define RDD_CPU_RX_METER_ENTRY_BUDGET_LIMIT_WRITE_G(v, g, idx)             GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_RX_METER_ENTRY_DTS) + 2, v)
#define RDD_CPU_RX_METER_ENTRY_BUDGET_LIMIT_READ(r, p)                     MREAD_16((uint8_t *)p + 2, r)
#define RDD_CPU_RX_METER_ENTRY_BUDGET_LIMIT_WRITE(v, p)                    MWRITE_16((uint8_t *)p + 2, v)
#define RDD_CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_RX_METER_ENTRY_DTS) + 4, r)
#define RDD_CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_RX_METER_ENTRY_DTS) + 4, v)
#define RDD_CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_READ(r, p)                 MREAD_16((uint8_t *)p + 4, r)
#define RDD_CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_WRITE(v, p)                MWRITE_16((uint8_t *)p + 4, v)
#define RDD_CPU_RX_METER_ENTRY_BUDGET_RESIDUE_READ_G(r, g, idx)            GROUP_MREAD_8(g, idx*sizeof(RDD_CPU_RX_METER_ENTRY_DTS) + 6, r)
#define RDD_CPU_RX_METER_ENTRY_BUDGET_RESIDUE_WRITE_G(v, g, idx)           GROUP_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_METER_ENTRY_DTS) + 6, v)
#define RDD_CPU_RX_METER_ENTRY_BUDGET_RESIDUE_READ(r, p)                   MREAD_8((uint8_t *)p + 6, r)
#define RDD_CPU_RX_METER_ENTRY_BUDGET_RESIDUE_WRITE(v, p)                  MWRITE_8((uint8_t *)p + 6, v)
#define RDD_CPU_RX_METER_ENTRY_CURRENT_CYCLE_READ_G(r, g, idx)             GROUP_MREAD_8(g, idx*sizeof(RDD_CPU_RX_METER_ENTRY_DTS) + 7, r)
#define RDD_CPU_RX_METER_ENTRY_CURRENT_CYCLE_WRITE_G(v, g, idx)            GROUP_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_METER_ENTRY_DTS) + 7, v)
#define RDD_CPU_RX_METER_ENTRY_CURRENT_CYCLE_READ(r, p)                    MREAD_8((uint8_t *)p + 7, r)
#define RDD_CPU_RX_METER_ENTRY_CURRENT_CYCLE_WRITE(v, p)                   MWRITE_8((uint8_t *)p + 7, v)
/* <<<RDD_CPU_RX_METER_ENTRY_DTS */


#define RDD_DS_CPU_RX_METER_TABLE_SIZE     16
typedef struct
{
	RDD_CPU_RX_METER_ENTRY_DTS	entry[ RDD_DS_CPU_RX_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_CPU_RX_METER_TABLE_DTS;

extern uint32_t RDD_DS_CPU_RX_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_CPU_RX_METER_TABLE_PTR(core_id)	( RDD_DS_CPU_RX_METER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_CPU_RX_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_CPU_RX_METER_TABLE */


/* >>>CPU_RX_SCRATCHPAD */

#define RDD_CPU_RX_SCRATCHPAD_SIZE     64
typedef struct
{
	RDD_BYTES_8_DTS	entry[ RDD_CPU_RX_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_SCRATCHPAD_DTS;

extern uint32_t RDD_CPU_RX_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_SCRATCHPAD_PTR(core_id)	( RDD_CPU_RX_SCRATCHPAD_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_SCRATCHPAD */


/* >>>US_CPU_RX_METER_TABLE */

#define RDD_US_CPU_RX_METER_TABLE_SIZE     16
typedef struct
{
	RDD_CPU_RX_METER_ENTRY_DTS	entry[ RDD_US_CPU_RX_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_CPU_RX_METER_TABLE_DTS;

extern uint32_t RDD_US_CPU_RX_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_CPU_RX_METER_TABLE_PTR(core_id)	( RDD_US_CPU_RX_METER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_CPU_RX_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_CPU_RX_METER_TABLE */


/* >>>TCPSPDTEST_STREAM_TABLE */

/* >>>RDD_TCPSPDTEST_STREAM_DTS */
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER	32

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	tcpspdtest_engine_conn_info_l2_hdr_len                                                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_l3_hdr_len                                                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_l3_protocol                                                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_tx_hdr_len                                                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_cpu_rx_rdd_queue                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_up_pppoe_hdr_ofs                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_up_peer_rx_scale                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_reserved0                                                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_wan_flow                                                           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_tx_qm_queue                                                        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_up_tx_mss                                                          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_up_tx_max_pd_len                                                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_rx_pkts                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_txed_pkts                                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_freed_pkts                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_ack_seq                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_tx_seq                                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_bad_pkts                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_bad_bytes                                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_bad_bytes_1                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_rx_bytes                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_rx_bytes_1                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_expected_bytes                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_expected_bytes_1                                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_to_send_bytes                                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_to_send_bytes_1                                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_no_credits                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_cwnd                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_cwnd_thr                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_cwnd_budget                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_last_ack_seq                                                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_last_ack_time                                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_dup_ack_cnt                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_dup_ack_seq_done                                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_dup_ack_total_pkts_cnt                                                	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_fast_retrans_cnt                                                      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_timeout_cnt                                                           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_dup_ack_state                                                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_reserved1                                                                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_is_rx_win_stop                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_is_timeout                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_is_active                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_size                                                             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_offset                                                           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_reserved                                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_1                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_2                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_3                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_4                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_5                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_6                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_7                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_8                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_9                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_10                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_11                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_12                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_13                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_14                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_15                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_16                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_17                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_18                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_19                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_20                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_21                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_22                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_23                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_24                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_25                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_26                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_27                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_28                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_29                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_is_drop                                                             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_is_win_full                                                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_num_errs                                                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_wr_ofs                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_rd_ofs                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_seq[RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER];
#else
	uint32_t	tcpspdtest_engine_conn_info_tx_hdr_len                                                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_l3_protocol                                                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_l3_hdr_len                                                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_l2_hdr_len                                                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_reserved0                                                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_up_peer_rx_scale                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_up_pppoe_hdr_ofs                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_cpu_rx_rdd_queue                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_tx_qm_queue                                                        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_wan_flow                                                           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_up_tx_max_pd_len                                                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_conn_info_up_tx_mss                                                          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_rx_pkts                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_txed_pkts                                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_freed_pkts                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_ack_seq                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_tx_seq                                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_bad_pkts                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_bad_bytes                                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_bad_bytes_1                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_rx_bytes                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_rx_bytes_1                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_expected_bytes                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_expected_bytes_1                                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_to_send_bytes                                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_to_send_bytes_1                                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_no_credits                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_cwnd                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_cwnd_thr                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_cwnd_budget                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_last_ack_seq                                                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_last_ack_time                                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_dup_ack_cnt                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_dup_ack_seq_done                                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_fast_retrans_cnt                                                      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_dup_ack_total_pkts_cnt                                                	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_is_active                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_is_timeout                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_is_rx_win_stop                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_reserved1                                                                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_dup_ack_state                                                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_tcb_up_timeout_cnt                                                           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_offset                                                           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_size                                                             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_reserved                                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_1                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_2                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_3                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_4                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_5                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_6                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_7                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_8                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_9                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_10                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_11                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_12                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_13                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_14                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_15                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_16                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_17                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_18                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_19                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_20                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_21                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_22                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_23                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_24                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_25                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_26                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_27                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_28                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_ref_pkt_hdr_hdr_29                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_num_errs                                                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_is_win_full                                                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_is_drop                                                             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_rd_ofs                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_wr_ofs                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_engine_pkt_drop_seq[RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCPSPDTEST_STREAM_DTS;

typedef RDD_TCPSPDTEST_STREAM_DTS * aligned_RDD_TCPSPDTEST_STREAM_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[94];
    uint64_t dword_val64[47];
    RDD_TCPSPDTEST_STREAM_DTS fields;
} RDD_TCPSPDTEST_STREAM_DTS_NEW;
typedef RDD_TCPSPDTEST_STREAM_DTS_NEW * aligned_RDD_TCPSPDTEST_STREAM_DTS_NEW ALIGNMENT8;

#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_READ_G(r, g, idx)                   GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS), r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_WRITE_G(v, g, idx)                  GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS), v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_READ(r, p)                          MREAD_8((uint8_t *)p, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_WRITE(v, p)                         MWRITE_8((uint8_t *)p, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_READ_G(r, g, idx)                   GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 1, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_WRITE_G(v, g, idx)                  GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 1, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_READ(r, p)                          MREAD_8((uint8_t *)p + 1, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_WRITE(v, p)                         MWRITE_8((uint8_t *)p + 1, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_READ_G(r, g, idx)                  GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 2, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_WRITE_G(v, g, idx)                 GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 2, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_READ(r, p)                         MREAD_8((uint8_t *)p + 2, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_WRITE(v, p)                        MWRITE_8((uint8_t *)p + 2, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_READ_G(r, g, idx)                   GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 3, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_WRITE_G(v, g, idx)                  GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 3, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_READ(r, p)                          MREAD_8((uint8_t *)p + 3, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_WRITE(v, p)                         MWRITE_8((uint8_t *)p + 3, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_READ_G(r, g, idx)             GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 4, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WRITE_G(v, g, idx)            GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 4, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_READ(r, p)                    MREAD_8((uint8_t *)p + 4, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WRITE(v, p)                   MWRITE_8((uint8_t *)p + 4, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_READ_G(r, g, idx)             GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 5, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WRITE_G(v, g, idx)            GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 5, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_READ(r, p)                    MREAD_8((uint8_t *)p + 5, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WRITE(v, p)                   MWRITE_8((uint8_t *)p + 5, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_READ_G(r, g, idx)             GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 6, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WRITE_G(v, g, idx)            GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 6, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_READ(r, p)                    MREAD_8((uint8_t *)p + 6, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WRITE(v, p)                   MWRITE_8((uint8_t *)p + 6, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_RESERVED0_READ_G(r, g, idx)                    GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 7, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_RESERVED0_WRITE_G(v, g, idx)                   GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 7, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_RESERVED0_READ(r, p)                           MREAD_8((uint8_t *)p + 7, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_RESERVED0_WRITE(v, p)                          MWRITE_8((uint8_t *)p + 7, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_READ_G(r, g, idx)                     GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 8, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_WRITE_G(v, g, idx)                    GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 8, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_READ(r, p)                            MREAD_16((uint8_t *)p + 8, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_WRITE(v, p)                           MWRITE_16((uint8_t *)p + 8, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_READ_G(r, g, idx)                  GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 10, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_WRITE_G(v, g, idx)                 GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 10, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_READ(r, p)                         MREAD_16((uint8_t *)p + 10, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_WRITE(v, p)                        MWRITE_16((uint8_t *)p + 10, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_READ_G(r, g, idx)                    GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 12, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WRITE_G(v, g, idx)                   GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 12, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_READ(r, p)                           MREAD_16((uint8_t *)p + 12, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WRITE(v, p)                          MWRITE_16((uint8_t *)p + 12, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_READ_G(r, g, idx)             GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 14, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WRITE_G(v, g, idx)            GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 14, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_READ(r, p)                    MREAD_16((uint8_t *)p + 14, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WRITE(v, p)                   MWRITE_16((uint8_t *)p + 14, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_READ_G(r, g, idx)                            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 16, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_WRITE_G(v, g, idx)                           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 16, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_READ(r, p)                                   MREAD_32((uint8_t *)p + 16, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_WRITE(v, p)                                  MWRITE_32((uint8_t *)p + 16, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_READ_G(r, g, idx)                          GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 20, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WRITE_G(v, g, idx)                         GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 20, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_READ(r, p)                                 MREAD_32((uint8_t *)p + 20, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WRITE(v, p)                                MWRITE_32((uint8_t *)p + 20, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_READ_G(r, g, idx)                         GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 24, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WRITE_G(v, g, idx)                        GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 24, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_READ(r, p)                                MREAD_32((uint8_t *)p + 24, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WRITE(v, p)                               MWRITE_32((uint8_t *)p + 24, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_READ_G(r, g, idx)                            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 28, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WRITE_G(v, g, idx)                           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 28, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_READ(r, p)                                   MREAD_32((uint8_t *)p + 28, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WRITE(v, p)                                  MWRITE_32((uint8_t *)p + 28, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_READ_G(r, g, idx)                             GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 32, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_WRITE_G(v, g, idx)                            GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 32, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_READ(r, p)                                    MREAD_32((uint8_t *)p + 32, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_WRITE(v, p)                                   MWRITE_32((uint8_t *)p + 32, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_READ_G(r, g, idx)                           GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 36, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WRITE_G(v, g, idx)                          GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 36, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_READ(r, p)                                  MREAD_32((uint8_t *)p + 36, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WRITE(v, p)                                 MWRITE_32((uint8_t *)p + 36, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_READ_G(r, g, idx)                          GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 40, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WRITE_G(v, g, idx)                         GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 40, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_READ(r, p)                                 MREAD_32((uint8_t *)p + 40, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WRITE(v, p)                                MWRITE_32((uint8_t *)p + 40, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_READ_G(r, g, idx)                        GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 44, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WRITE_G(v, g, idx)                       GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 44, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_READ(r, p)                               MREAD_32((uint8_t *)p + 44, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WRITE(v, p)                              MWRITE_32((uint8_t *)p + 44, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_READ_G(r, g, idx)                           GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 48, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_WRITE_G(v, g, idx)                          GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 48, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_READ(r, p)                                  MREAD_32((uint8_t *)p + 48, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_WRITE(v, p)                                 MWRITE_32((uint8_t *)p + 48, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_READ_G(r, g, idx)                         GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 52, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WRITE_G(v, g, idx)                        GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 52, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_READ(r, p)                                MREAD_32((uint8_t *)p + 52, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WRITE(v, p)                               MWRITE_32((uint8_t *)p + 52, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 56, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 56, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_READ(r, p)                            MREAD_32((uint8_t *)p + 56, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 56, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 60, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 60, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_READ(r, p)                          MREAD_32((uint8_t *)p + 60, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 60, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 64, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 64, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_READ(r, p)                          MREAD_32((uint8_t *)p + 64, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 64, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_READ_G(r, g, idx)                 GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 68, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WRITE_G(v, g, idx)                GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 68, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_READ(r, p)                        MREAD_32((uint8_t *)p + 68, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WRITE(v, p)                       MWRITE_32((uint8_t *)p + 68, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_READ_G(r, g, idx)                         GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 72, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WRITE_G(v, g, idx)                        GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 72, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_READ(r, p)                                MREAD_32((uint8_t *)p + 72, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WRITE(v, p)                               MWRITE_32((uint8_t *)p + 72, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_READ_G(r, g, idx)                            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 76, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_WRITE_G(v, g, idx)                           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 76, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_READ(r, p)                                   MREAD_32((uint8_t *)p + 76, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_WRITE(v, p)                                  MWRITE_32((uint8_t *)p + 76, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_READ_G(r, g, idx)                        GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 80, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WRITE_G(v, g, idx)                       GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 80, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_READ(r, p)                               MREAD_32((uint8_t *)p + 80, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WRITE(v, p)                              MWRITE_32((uint8_t *)p + 80, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 84, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 84, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_READ(r, p)                            MREAD_32((uint8_t *)p + 84, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 84, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_READ_G(r, g, idx)                    GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 88, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WRITE_G(v, g, idx)                   GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 88, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_READ(r, p)                           MREAD_32((uint8_t *)p + 88, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WRITE(v, p)                          MWRITE_32((uint8_t *)p + 88, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 92, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 92, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_READ(r, p)                          MREAD_32((uint8_t *)p + 92, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 92, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 96, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 96, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_READ(r, p)                            MREAD_32((uint8_t *)p + 96, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 96, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 100, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 100, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_READ(r, p)                       MREAD_32((uint8_t *)p + 100, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 100, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 104, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 104, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_READ(r, p)                 MREAD_16((uint8_t *)p + 104, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WRITE(v, p)                MWRITE_16((uint8_t *)p + 104, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 106, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 106, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_READ(r, p)                       MREAD_16((uint8_t *)p + 106, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WRITE(v, p)                      MWRITE_16((uint8_t *)p + 106, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_READ_G(r, g, idx)                     GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 108, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_WRITE_G(v, g, idx)                    GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 108, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_READ(r, p)                            MREAD_16((uint8_t *)p + 108, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_WRITE(v, p)                           MWRITE_16((uint8_t *)p + 108, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_READ_G(r, g, idx)                   GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 110, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WRITE_G(v, g, idx)                  GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 110, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_READ(r, p)                          MREAD_8((uint8_t *)p + 110, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WRITE(v, p)                         MWRITE_8((uint8_t *)p + 110, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 111, 3, 5, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 111, 3, 5, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 111, 3, 5, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 111, 3, 5, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 111, 2, 1, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 111, 2, 1, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 111, 2, 1, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 111, 2, 1, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 111, 1, 1, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 111, 1, 1, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 111, 1, 1, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 111, 1, 1, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 111, 0, 1, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 111, 0, 1, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 111, 0, 1, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 111, 0, 1, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_READ_G(r, g, idx)                       GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 112, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_WRITE_G(v, g, idx)                      GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 112, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_READ(r, p)                              MREAD_16((uint8_t *)p + 112, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_WRITE(v, p)                             MWRITE_16((uint8_t *)p + 112, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_READ_G(r, g, idx)                     GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 114, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_WRITE_G(v, g, idx)                    GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 114, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_READ(r, p)                            MREAD_16((uint8_t *)p + 114, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_WRITE(v, p)                           MWRITE_16((uint8_t *)p + 114, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_RESERVED_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 116, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_RESERVED_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 116, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_RESERVED_READ(r, p)                          MREAD_32((uint8_t *)p + 116, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_RESERVED_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 116, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_READ_G(r, g, idx)                        GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 120, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_WRITE_G(v, g, idx)                       GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 120, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_READ(r, p)                               MREAD_32((uint8_t *)p + 120, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_WRITE(v, p)                              MWRITE_32((uint8_t *)p + 120, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 124, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 124, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_READ(r, p)                             MREAD_32((uint8_t *)p + 124, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 124, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 128, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 128, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_READ(r, p)                             MREAD_32((uint8_t *)p + 128, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 128, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 132, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 132, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_READ(r, p)                             MREAD_32((uint8_t *)p + 132, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 132, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 136, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 136, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_READ(r, p)                             MREAD_32((uint8_t *)p + 136, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 136, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 140, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 140, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_READ(r, p)                             MREAD_32((uint8_t *)p + 140, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 140, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 144, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 144, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_READ(r, p)                             MREAD_32((uint8_t *)p + 144, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 144, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 148, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 148, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_READ(r, p)                             MREAD_32((uint8_t *)p + 148, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 148, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 152, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 152, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_READ(r, p)                             MREAD_32((uint8_t *)p + 152, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 152, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 156, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 156, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_READ(r, p)                             MREAD_32((uint8_t *)p + 156, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 156, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 160, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 160, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_READ(r, p)                            MREAD_32((uint8_t *)p + 160, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 160, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 164, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 164, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_READ(r, p)                            MREAD_32((uint8_t *)p + 164, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 164, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 168, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 168, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_READ(r, p)                            MREAD_32((uint8_t *)p + 168, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 168, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 172, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 172, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_READ(r, p)                            MREAD_32((uint8_t *)p + 172, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 172, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 176, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 176, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_READ(r, p)                            MREAD_32((uint8_t *)p + 176, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 176, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 180, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 180, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_READ(r, p)                            MREAD_32((uint8_t *)p + 180, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 180, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 184, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 184, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_READ(r, p)                            MREAD_32((uint8_t *)p + 184, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 184, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 188, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 188, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_READ(r, p)                            MREAD_32((uint8_t *)p + 188, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 188, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 192, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 192, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_READ(r, p)                            MREAD_32((uint8_t *)p + 192, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 192, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 196, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 196, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_READ(r, p)                            MREAD_32((uint8_t *)p + 196, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 196, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 200, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 200, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_READ(r, p)                            MREAD_32((uint8_t *)p + 200, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 200, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 204, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 204, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_READ(r, p)                            MREAD_32((uint8_t *)p + 204, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 204, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 208, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 208, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_READ(r, p)                            MREAD_32((uint8_t *)p + 208, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 208, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 212, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 212, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_READ(r, p)                            MREAD_32((uint8_t *)p + 212, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 212, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 216, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 216, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_READ(r, p)                            MREAD_32((uint8_t *)p + 216, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 216, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 220, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 220, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_READ(r, p)                            MREAD_32((uint8_t *)p + 220, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 220, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 224, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 224, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_READ(r, p)                            MREAD_32((uint8_t *)p + 224, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 224, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 228, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 228, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_READ(r, p)                            MREAD_32((uint8_t *)p + 228, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 228, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 232, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 232, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_READ(r, p)                            MREAD_32((uint8_t *)p + 232, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 232, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 236, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 236, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_READ(r, p)                            MREAD_32((uint8_t *)p + 236, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 236, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_READ_G(r, g, idx)                       GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 240, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WRITE_G(v, g, idx)                      GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 240, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_READ(r, p)                              MREAD_8((uint8_t *)p + 240, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WRITE(v, p)                             MWRITE_8((uint8_t *)p + 240, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_READ_G(r, g, idx)                   GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 241, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WRITE_G(v, g, idx)                  GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 241, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_READ(r, p)                          MREAD_8((uint8_t *)p + 241, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WRITE(v, p)                         MWRITE_8((uint8_t *)p + 241, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_READ_G(r, g, idx)                      GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 242, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WRITE_G(v, g, idx)                     GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 242, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_READ(r, p)                             MREAD_16((uint8_t *)p + 242, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WRITE(v, p)                            MWRITE_16((uint8_t *)p + 242, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_READ_G(r, g, idx)                        GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 244, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WRITE_G(v, g, idx)                       GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 244, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_READ(r, p)                               MREAD_16((uint8_t *)p + 244, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WRITE(v, p)                              MWRITE_16((uint8_t *)p + 244, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_READ_G(r, g, idx)                        GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 246, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WRITE_G(v, g, idx)                       GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 246, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_READ(r, p)                               MREAD_16((uint8_t *)p + 246, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WRITE(v, p)                              MWRITE_16((uint8_t *)p + 246, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_READ_G(r, g, idx, i)                        GROUP_MREAD_I_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 248, i, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WRITE_G(v, g, idx, i)                       GROUP_MWRITE_I_32(g, idx*sizeof(RDD_TCPSPDTEST_STREAM_DTS) + 248, i, v)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_READ(r, p, i)                               MREAD_I_32((uint8_t *)p + 248, i, r)
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WRITE(v, p, i)                              MWRITE_I_32((uint8_t *)p + 248, i, v)
/* <<<RDD_TCPSPDTEST_STREAM_DTS */


#define RDD_TCPSPDTEST_STREAM_TABLE_SIZE     4
typedef struct
{
	RDD_TCPSPDTEST_STREAM_DTS	entry[ RDD_TCPSPDTEST_STREAM_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCPSPDTEST_STREAM_TABLE_DTS;

extern uint32_t RDD_TCPSPDTEST_STREAM_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCPSPDTEST_STREAM_TABLE_PTR(core_id)	( RDD_TCPSPDTEST_STREAM_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCPSPDTEST_STREAM_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TCPSPDTEST_STREAM_TABLE */


/* >>>CPU_REASON_AND_VPORT_TO_METER_TABLE */

#define RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_SIZE     120
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_DTS;

extern uint32_t RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_PTR(core_id)	( RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_REASON_AND_VPORT_TO_METER_TABLE */


/* >>>CSO_CONTEXT_TABLE */

/* >>>RDD_CSO_CONTEXT_ENTRY_DTS */
#define RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_NUMBER	14

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reserved                                                     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	csum_value                                                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cam_result                                                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	crc_result                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_ret_address                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_pkt_desc_0                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_pkt_desc_1                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_pkt_desc_2                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_pkt_desc_3                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	good_csum_packets                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_cso_support_packets                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_ipv4_hdr_csum_packets                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_tcp_udp_csum_packets                                     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	parser_result[RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_NUMBER];
	uint32_t	saved_buffer_number                                          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_packet_length                                          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved                                                     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cam_result                                                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	csum_value                                                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	crc_result                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_ret_address                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_pkt_desc_0                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_pkt_desc_1                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_pkt_desc_2                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_pkt_desc_3                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	good_csum_packets                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_cso_support_packets                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_ipv4_hdr_csum_packets                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_tcp_udp_csum_packets                                     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	parser_result[RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_NUMBER];
	uint32_t	saved_packet_length                                          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	saved_buffer_number                                          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CSO_CONTEXT_ENTRY_DTS;

typedef RDD_CSO_CONTEXT_ENTRY_DTS * aligned_RDD_CSO_CONTEXT_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[27];
    uint64_t dword_val64[13];
    RDD_CSO_CONTEXT_ENTRY_DTS fields;
} RDD_CSO_CONTEXT_ENTRY_DTS_NEW;
typedef RDD_CSO_CONTEXT_ENTRY_DTS_NEW * aligned_RDD_CSO_CONTEXT_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_CSO_CONTEXT_ENTRY_CSUM_VALUE_READ_G(r, g, idx)                         GROUP_MREAD_16(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 4, r)
#define RDD_CSO_CONTEXT_ENTRY_CSUM_VALUE_WRITE_G(v, g, idx)                        GROUP_MWRITE_16(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 4, v)
#define RDD_CSO_CONTEXT_ENTRY_CSUM_VALUE_READ(r, p)                                MREAD_16((uint8_t *)p + 4, r)
#define RDD_CSO_CONTEXT_ENTRY_CSUM_VALUE_WRITE(v, p)                               MWRITE_16((uint8_t *)p + 4, v)
#define RDD_CSO_CONTEXT_ENTRY_CAM_RESULT_READ_G(r, g, idx)                         GROUP_MREAD_16(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 6, r)
#define RDD_CSO_CONTEXT_ENTRY_CAM_RESULT_WRITE_G(v, g, idx)                        GROUP_MWRITE_16(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 6, v)
#define RDD_CSO_CONTEXT_ENTRY_CAM_RESULT_READ(r, p)                                MREAD_16((uint8_t *)p + 6, r)
#define RDD_CSO_CONTEXT_ENTRY_CAM_RESULT_WRITE(v, p)                               MWRITE_16((uint8_t *)p + 6, v)
#define RDD_CSO_CONTEXT_ENTRY_CRC_RESULT_READ_G(r, g, idx)                         GROUP_MREAD_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 8, r)
#define RDD_CSO_CONTEXT_ENTRY_CRC_RESULT_WRITE_G(v, g, idx)                        GROUP_MWRITE_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 8, v)
#define RDD_CSO_CONTEXT_ENTRY_CRC_RESULT_READ(r, p)                                MREAD_32((uint8_t *)p + 8, r)
#define RDD_CSO_CONTEXT_ENTRY_CRC_RESULT_WRITE(v, p)                               MWRITE_32((uint8_t *)p + 8, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 12, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 12, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_READ(r, p)                         MREAD_32((uint8_t *)p + 12, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_WRITE(v, p)                        MWRITE_32((uint8_t *)p + 12, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 16, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 16, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_READ(r, p)                          MREAD_32((uint8_t *)p + 16, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 16, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 20, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 20, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_READ(r, p)                          MREAD_32((uint8_t *)p + 20, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 20, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 24, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 24, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_READ(r, p)                          MREAD_32((uint8_t *)p + 24, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 24, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 28, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 28, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_READ(r, p)                          MREAD_32((uint8_t *)p + 28, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 28, v)
#define RDD_CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 32, r)
#define RDD_CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 32, v)
#define RDD_CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_READ(r, p)                         MREAD_32((uint8_t *)p + 32, r)
#define RDD_CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_WRITE(v, p)                        MWRITE_32((uint8_t *)p + 32, v)
#define RDD_CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 36, r)
#define RDD_CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 36, v)
#define RDD_CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_READ(r, p)                    MREAD_32((uint8_t *)p + 36, r)
#define RDD_CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 36, v)
#define RDD_CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 40, r)
#define RDD_CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 40, v)
#define RDD_CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_READ(r, p)                 MREAD_32((uint8_t *)p + 40, r)
#define RDD_CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_WRITE(v, p)                MWRITE_32((uint8_t *)p + 40, v)
#define RDD_CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 44, r)
#define RDD_CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 44, v)
#define RDD_CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_READ(r, p)                  MREAD_32((uint8_t *)p + 44, r)
#define RDD_CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 44, v)
#define RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_READ_G(r, g, idx, i)                   GROUP_MREAD_I_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 48, i, r)
#define RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_WRITE_G(v, g, idx, i)                  GROUP_MWRITE_I_32(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 48, i, v)
#define RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_READ(r, p, i)                          MREAD_I_32((uint8_t *)p + 48, i, r)
#define RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_WRITE(v, p, i)                         MWRITE_I_32((uint8_t *)p + 48, i, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 104, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 104, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_READ(r, p)                       MREAD_16((uint8_t *)p + 104, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_WRITE(v, p)                      MWRITE_16((uint8_t *)p + 104, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 106, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_CSO_CONTEXT_ENTRY_DTS) + 106, v)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_READ(r, p)                       MREAD_16((uint8_t *)p + 106, r)
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_WRITE(v, p)                      MWRITE_16((uint8_t *)p + 106, v)
/* <<<RDD_CSO_CONTEXT_ENTRY_DTS */

typedef struct
{
	RDD_CSO_CONTEXT_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CSO_CONTEXT_TABLE_DTS;

extern uint32_t RDD_CSO_CONTEXT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CSO_CONTEXT_TABLE_PTR(core_id)	( RDD_CSO_CONTEXT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CSO_CONTEXT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CSO_CONTEXT_TABLE */


/* >>>CPU_RX_INTERRUPT_SCRATCH */
typedef struct
{
	RDD_BYTES_4_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_INTERRUPT_SCRATCH_DTS;

extern uint32_t RDD_CPU_RX_INTERRUPT_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_INTERRUPT_SCRATCH_PTR(core_id)	( RDD_CPU_RX_INTERRUPT_SCRATCH_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_INTERRUPT_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_INTERRUPT_SCRATCH */


/* >>>CPU_RX_COPY_INT_SCRATCHPAD */

#define RDD_CPU_RX_COPY_INT_SCRATCHPAD_SIZE     4
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_CPU_RX_COPY_INT_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_COPY_INT_SCRATCHPAD_DTS;

extern uint32_t RDD_CPU_RX_COPY_INT_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_COPY_INT_SCRATCHPAD_PTR(core_id)	( RDD_CPU_RX_COPY_INT_SCRATCHPAD_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_COPY_INT_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_COPY_INT_SCRATCHPAD */


/* >>>CPU_RX_TASK_STACK */

#define RDD_CPU_RX_TASK_STACK_SIZE     64
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_CPU_RX_TASK_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_TASK_STACK_DTS;

extern uint32_t RDD_CPU_RX_TASK_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_TASK_STACK_PTR(core_id)	( RDD_CPU_RX_TASK_STACK_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_TASK_STACK_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_TASK_STACK */


/* >>>CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD */

#define RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_SIZE     4
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_DTS;

extern uint32_t RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_PTR(core_id)	( RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD */


/* >>>CPU_FEED_RING_RSV_TABLE */

#define RDD_CPU_FEED_RING_RSV_TABLE_SIZE     16
typedef struct
{
	RDD_BYTES_2_DTS	entry[ RDD_CPU_FEED_RING_RSV_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_FEED_RING_RSV_TABLE_DTS;

extern uint32_t RDD_CPU_FEED_RING_RSV_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_FEED_RING_RSV_TABLE_PTR(core_id)	( RDD_CPU_FEED_RING_RSV_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_FEED_RING_RSV_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_FEED_RING_RSV_TABLE */


/* >>>CPU_RX_COPY_PD_FIFO_TABLE */

#define RDD_CPU_RX_COPY_PD_FIFO_TABLE_SIZE     4
typedef struct
{
	RDD_PROCESSING_TX_DESCRIPTOR_DTS	entry[ RDD_CPU_RX_COPY_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_COPY_PD_FIFO_TABLE_DTS;

extern uint32_t RDD_CPU_RX_COPY_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_COPY_PD_FIFO_TABLE_PTR(core_id)	( RDD_CPU_RX_COPY_PD_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_COPY_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_COPY_PD_FIFO_TABLE */


/* >>>CPU_RING_INTERRUPT_COUNTER_TABLE */

#define RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_SIZE     18
typedef struct
{
	RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_DTS	entry[ RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_DTS;

extern uint32_t RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_PTR(core_id)	( RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RING_INTERRUPT_COUNTER_TABLE */


/* >>>PKTGEN_TX_STREAM_TABLE */

/* >>>RDD_PKTGEN_TX_STREAM_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	wan_flow   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_qm_queue	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	tx_qm_queue	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wan_flow   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_TX_STREAM_ENTRY_DTS;

typedef RDD_PKTGEN_TX_STREAM_ENTRY_DTS * aligned_RDD_PKTGEN_TX_STREAM_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_PKTGEN_TX_STREAM_ENTRY_DTS fields;
} RDD_PKTGEN_TX_STREAM_ENTRY_DTS_NEW;
typedef RDD_PKTGEN_TX_STREAM_ENTRY_DTS_NEW * aligned_RDD_PKTGEN_TX_STREAM_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_PKTGEN_TX_STREAM_ENTRY_WAN_FLOW_READ_G(r, g, idx)             GROUP_MREAD_16(g, idx*sizeof(RDD_PKTGEN_TX_STREAM_ENTRY_DTS), r)
#define RDD_PKTGEN_TX_STREAM_ENTRY_WAN_FLOW_WRITE_G(v, g, idx)            GROUP_MWRITE_16(g, idx*sizeof(RDD_PKTGEN_TX_STREAM_ENTRY_DTS), v)
#define RDD_PKTGEN_TX_STREAM_ENTRY_WAN_FLOW_READ(r, p)                    MREAD_16((uint8_t *)p, r)
#define RDD_PKTGEN_TX_STREAM_ENTRY_WAN_FLOW_WRITE(v, p)                   MWRITE_16((uint8_t *)p, v)
#define RDD_PKTGEN_TX_STREAM_ENTRY_TX_QM_QUEUE_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_PKTGEN_TX_STREAM_ENTRY_DTS) + 2, r)
#define RDD_PKTGEN_TX_STREAM_ENTRY_TX_QM_QUEUE_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_PKTGEN_TX_STREAM_ENTRY_DTS) + 2, v)
#define RDD_PKTGEN_TX_STREAM_ENTRY_TX_QM_QUEUE_READ(r, p)                 MREAD_16((uint8_t *)p + 2, r)
#define RDD_PKTGEN_TX_STREAM_ENTRY_TX_QM_QUEUE_WRITE(v, p)                MWRITE_16((uint8_t *)p + 2, v)
/* <<<RDD_PKTGEN_TX_STREAM_ENTRY_DTS */


#define RDD_PKTGEN_TX_STREAM_TABLE_SIZE     4
typedef struct
{
	RDD_PKTGEN_TX_STREAM_ENTRY_DTS	entry[ RDD_PKTGEN_TX_STREAM_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_TX_STREAM_TABLE_DTS;

extern uint32_t RDD_PKTGEN_TX_STREAM_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_TX_STREAM_TABLE_PTR(core_id)	( RDD_PKTGEN_TX_STREAM_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_TX_STREAM_TABLE_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_TX_STREAM_TABLE */


/* >>>IPV4_HOST_ADDRESS_TABLE */

#define RDD_IPV4_HOST_ADDRESS_TABLE_SIZE     8
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_IPV4_HOST_ADDRESS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPV4_HOST_ADDRESS_TABLE_DTS;

extern uint32_t RDD_IPV4_HOST_ADDRESS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPV4_HOST_ADDRESS_TABLE_PTR(core_id)	( RDD_IPV4_HOST_ADDRESS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPV4_HOST_ADDRESS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<IPV4_HOST_ADDRESS_TABLE */


/* >>>COMMON_REPROCESSING_PD_FIFO_TABLE */

#define RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_SIZE     4
typedef struct
{
	RDD_PROCESSING_TX_DESCRIPTOR_DTS	entry[ RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_DTS;

extern uint32_t RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_PTR(core_id)	( RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<COMMON_REPROCESSING_PD_FIFO_TABLE */


/* >>>DS_CPU_REASON_TO_METER_TABLE */

#define RDD_DS_CPU_REASON_TO_METER_TABLE_SIZE     64
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_DS_CPU_REASON_TO_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DS_CPU_REASON_TO_METER_TABLE_DTS;

extern uint32_t RDD_DS_CPU_REASON_TO_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_CPU_REASON_TO_METER_TABLE_PTR(core_id)	( RDD_DS_CPU_REASON_TO_METER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_CPU_REASON_TO_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_CPU_REASON_TO_METER_TABLE */


/* >>>CPU_RING_DESCRIPTORS_TABLE */

#define RDD_CPU_RING_DESCRIPTORS_TABLE_SIZE     16
typedef struct
{
	RDD_CPU_RING_DESCRIPTOR_DTS	entry[ RDD_CPU_RING_DESCRIPTORS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RING_DESCRIPTORS_TABLE_DTS;

extern uint32_t RDD_CPU_RING_DESCRIPTORS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RING_DESCRIPTORS_TABLE_PTR(core_id)	( RDD_CPU_RING_DESCRIPTORS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RING_DESCRIPTORS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RING_DESCRIPTORS_TABLE */


/* >>>PKTGEN_FPM_UG_MGMT */

/* >>>RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	budget             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_ug_cnt_dummy   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_ug_cnt         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_ug_cnt_reg_addr	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_ug_threshold   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	budget             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_ug_cnt_dummy   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_ug_cnt         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_ug_cnt_reg_addr	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_ug_threshold   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS;

typedef RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS * aligned_RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[5];
    uint64_t dword_val64[2];
    RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS fields;
} RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS_NEW;
typedef RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS_NEW * aligned_RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_READ_G(r, g, idx)                       GROUP_MREAD_32(g, idx*sizeof(RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS), r)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_WRITE_G(v, g, idx)                      GROUP_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS), v)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_READ(r, p)                              MREAD_32((uint8_t *)p, r)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_WRITE(v, p)                             MWRITE_32((uint8_t *)p, v)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS) + 4, r)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS) + 4, v)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_READ(r, p)                    MREAD_32((uint8_t *)p + 4, r)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 4, v)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS) + 8, r)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS) + 8, v)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_READ(r, p)                          MREAD_32((uint8_t *)p + 8, r)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 8, v)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS) + 12, r)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS) + 12, v)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_READ(r, p)                 MREAD_32((uint8_t *)p + 12, r)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_WRITE(v, p)                MWRITE_32((uint8_t *)p + 12, v)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS) + 16, r)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS) + 16, v)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_READ(r, p)                    MREAD_32((uint8_t *)p + 16, r)
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 16, v)
/* <<<RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS */

typedef struct
{
	RDD_PKTGEN_FPM_UG_MGMT_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_FPM_UG_MGMT_DTS;

extern uint32_t RDD_PKTGEN_FPM_UG_MGMT_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_FPM_UG_MGMT_PTR(core_id)	( RDD_PKTGEN_FPM_UG_MGMT_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_FPM_UG_MGMT_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_FPM_UG_MGMT */


/* >>>PKTGEN_CURR_SBPM_HDR_PTR */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_CURR_SBPM_HDR_PTR_DTS;

extern uint32_t RDD_PKTGEN_CURR_SBPM_HDR_PTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_CURR_SBPM_HDR_PTR_PTR(core_id)	( RDD_PKTGEN_CURR_SBPM_HDR_PTR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_CURR_SBPM_HDR_PTR_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_CURR_SBPM_HDR_PTR */


/* >>>PKTGEN_NUM_OF_AVAIL_SBPM_HDRS */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_NUM_OF_AVAIL_SBPM_HDRS_DTS;

extern uint32_t RDD_PKTGEN_NUM_OF_AVAIL_SBPM_HDRS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_NUM_OF_AVAIL_SBPM_HDRS_PTR(core_id)	( RDD_PKTGEN_NUM_OF_AVAIL_SBPM_HDRS_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_NUM_OF_AVAIL_SBPM_HDRS_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_NUM_OF_AVAIL_SBPM_HDRS */


/* >>>US_CPU_REASON_TO_METER_TABLE */

#define RDD_US_CPU_REASON_TO_METER_TABLE_SIZE     64
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_US_CPU_REASON_TO_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_US_CPU_REASON_TO_METER_TABLE_DTS;

extern uint32_t RDD_US_CPU_REASON_TO_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_CPU_REASON_TO_METER_TABLE_PTR(core_id)	( RDD_US_CPU_REASON_TO_METER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_CPU_REASON_TO_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_CPU_REASON_TO_METER_TABLE */


/* >>>IPV6_HOST_ADDRESS_CRC_TABLE */

#define RDD_IPV6_HOST_ADDRESS_CRC_TABLE_SIZE     16
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_IPV6_HOST_ADDRESS_CRC_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPV6_HOST_ADDRESS_CRC_TABLE_DTS;

extern uint32_t RDD_IPV6_HOST_ADDRESS_CRC_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPV6_HOST_ADDRESS_CRC_TABLE_PTR(core_id)	( RDD_IPV6_HOST_ADDRESS_CRC_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPV6_HOST_ADDRESS_CRC_TABLE_ADDRESS_ARR[core_id] ))

/* <<<IPV6_HOST_ADDRESS_CRC_TABLE */


/* >>>SPDSVC_GEN_PARAMS_TABLE */

/* >>>RDD_SPDSVC_GEN_PARAMS_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	processing_tx_pd_0	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	processing_tx_pd_1	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	processing_tx_pd_2	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	processing_tx_pd_3	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	total_copies      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bucket            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	timer_period      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	total_length      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_packets        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_dropped        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tokens            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bucket_size       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	processing_tx_pd_0	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	processing_tx_pd_1	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	processing_tx_pd_2	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	processing_tx_pd_3	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	total_copies      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bucket            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	total_length      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	timer_period      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_packets        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_dropped        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tokens            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bucket_size       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_GEN_PARAMS_DTS;

typedef RDD_SPDSVC_GEN_PARAMS_DTS * aligned_RDD_SPDSVC_GEN_PARAMS_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[15];
    uint64_t dword_val64[7];
    RDD_SPDSVC_GEN_PARAMS_DTS fields;
} RDD_SPDSVC_GEN_PARAMS_DTS_NEW;
typedef RDD_SPDSVC_GEN_PARAMS_DTS_NEW * aligned_RDD_SPDSVC_GEN_PARAMS_DTS_NEW ALIGNMENT8;

#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS), r)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS), v)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 4, r)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 4, v)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 24, r)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 24, v)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_READ(r, p)                 MREAD_32((uint8_t *)p + 24, r)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_WRITE(v, p)                MWRITE_32((uint8_t *)p + 24, v)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 28, r)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 28, v)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_READ(r, p)                 MREAD_32((uint8_t *)p + 28, r)
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_WRITE(v, p)                MWRITE_32((uint8_t *)p + 28, v)
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_COPIES_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 32, r)
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_COPIES_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 32, v)
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_COPIES_READ(r, p)                       MREAD_32((uint8_t *)p + 32, r)
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_COPIES_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 32, v)
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 36, r)
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 36, v)
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_READ(r, p)                             MREAD_32((uint8_t *)p + 36, r)
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 36, v)
#define RDD_SPDSVC_GEN_PARAMS_TIMER_PERIOD_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 40, r)
#define RDD_SPDSVC_GEN_PARAMS_TIMER_PERIOD_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 40, v)
#define RDD_SPDSVC_GEN_PARAMS_TIMER_PERIOD_READ(r, p)                       MREAD_16((uint8_t *)p + 40, r)
#define RDD_SPDSVC_GEN_PARAMS_TIMER_PERIOD_WRITE(v, p)                      MWRITE_16((uint8_t *)p + 40, v)
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_LENGTH_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 42, r)
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_LENGTH_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 42, v)
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_LENGTH_READ(r, p)                       MREAD_16((uint8_t *)p + 42, r)
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_LENGTH_WRITE(v, p)                      MWRITE_16((uint8_t *)p + 42, v)
#define RDD_SPDSVC_GEN_PARAMS_TX_PACKETS_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 44, r)
#define RDD_SPDSVC_GEN_PARAMS_TX_PACKETS_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 44, v)
#define RDD_SPDSVC_GEN_PARAMS_TX_PACKETS_READ(r, p)                         MREAD_32((uint8_t *)p + 44, r)
#define RDD_SPDSVC_GEN_PARAMS_TX_PACKETS_WRITE(v, p)                        MWRITE_32((uint8_t *)p + 44, v)
#define RDD_SPDSVC_GEN_PARAMS_TX_DROPPED_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 48, r)
#define RDD_SPDSVC_GEN_PARAMS_TX_DROPPED_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 48, v)
#define RDD_SPDSVC_GEN_PARAMS_TX_DROPPED_READ(r, p)                         MREAD_32((uint8_t *)p + 48, r)
#define RDD_SPDSVC_GEN_PARAMS_TX_DROPPED_WRITE(v, p)                        MWRITE_32((uint8_t *)p + 48, v)
#define RDD_SPDSVC_GEN_PARAMS_TOKENS_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 52, r)
#define RDD_SPDSVC_GEN_PARAMS_TOKENS_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 52, v)
#define RDD_SPDSVC_GEN_PARAMS_TOKENS_READ(r, p)                             MREAD_32((uint8_t *)p + 52, r)
#define RDD_SPDSVC_GEN_PARAMS_TOKENS_WRITE(v, p)                            MWRITE_32((uint8_t *)p + 52, v)
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_SIZE_READ_G(r, g, idx)                 GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 56, r)
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_SIZE_WRITE_G(v, g, idx)                GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_GEN_PARAMS_DTS) + 56, v)
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_SIZE_READ(r, p)                        MREAD_32((uint8_t *)p + 56, r)
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_SIZE_WRITE(v, p)                       MWRITE_32((uint8_t *)p + 56, v)
/* <<<RDD_SPDSVC_GEN_PARAMS_DTS */

typedef struct
{
	RDD_SPDSVC_GEN_PARAMS_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_GEN_PARAMS_TABLE_DTS;

extern uint32_t RDD_SPDSVC_GEN_PARAMS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_GEN_PARAMS_TABLE_PTR(core_id)	( RDD_SPDSVC_GEN_PARAMS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_GEN_PARAMS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_GEN_PARAMS_TABLE */


/* >>>PKTGEN_SBPM_END_PTR */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_SBPM_END_PTR_DTS;

extern uint32_t RDD_PKTGEN_SBPM_END_PTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_SBPM_END_PTR_PTR(core_id)	( RDD_PKTGEN_SBPM_END_PTR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_SBPM_END_PTR_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_SBPM_END_PTR */


/* >>>TX_ABS_RECYCLE_COUNTERS */

/* >>>RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	total     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	spdsvc    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	total     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	spdsvc    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS;

typedef RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS * aligned_RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS fields;
} RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS_NEW;
typedef RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS_NEW * aligned_RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS), r)
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS), v)
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_READ(r, p)                  MREAD_32((uint8_t *)p, r)
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_WRITE(v, p)                 MWRITE_32((uint8_t *)p, v)
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS) + 4, r)
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS) + 4, v)
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS */

typedef struct
{
	RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TX_ABS_RECYCLE_COUNTERS_DTS;

extern uint32_t RDD_TX_ABS_RECYCLE_COUNTERS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TX_ABS_RECYCLE_COUNTERS_PTR(core_id)	( RDD_TX_ABS_RECYCLE_COUNTERS_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TX_ABS_RECYCLE_COUNTERS_ADDRESS_ARR[core_id] ))

/* <<<TX_ABS_RECYCLE_COUNTERS */


/* >>>PKTGEN_SBPM_HDR_BNS */

/* >>>RDD_PKTGEN_SBPM_HDR_BN_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	first_bn  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	ext_idx   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	ext_idx   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	first_bn  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_SBPM_HDR_BN_DTS;

typedef RDD_PKTGEN_SBPM_HDR_BN_DTS * aligned_RDD_PKTGEN_SBPM_HDR_BN_DTS ALIGNMENT8;

#define RDD_PKTGEN_SBPM_HDR_BN_FIRST_BN_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PKTGEN_SBPM_HDR_BN_DTS), 2, 14, r)
#define RDD_PKTGEN_SBPM_HDR_BN_FIRST_BN_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PKTGEN_SBPM_HDR_BN_DTS), 2, 14, v)
#define RDD_PKTGEN_SBPM_HDR_BN_FIRST_BN_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p, 2, 14, r)
#define RDD_PKTGEN_SBPM_HDR_BN_FIRST_BN_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p, 2, 14, v)
#define RDD_PKTGEN_SBPM_HDR_BN_EXT_IDX_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PKTGEN_SBPM_HDR_BN_DTS) + 1, 0, 2, r)
#define RDD_PKTGEN_SBPM_HDR_BN_EXT_IDX_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PKTGEN_SBPM_HDR_BN_DTS) + 1, 0, 2, v)
#define RDD_PKTGEN_SBPM_HDR_BN_EXT_IDX_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 1, 0, 2, r)
#define RDD_PKTGEN_SBPM_HDR_BN_EXT_IDX_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 1, 0, 2, v)
/* <<<RDD_PKTGEN_SBPM_HDR_BN_DTS */


#define RDD_PKTGEN_SBPM_HDR_BNS_SIZE     28
typedef struct
{
	RDD_PKTGEN_SBPM_HDR_BN_DTS	entry[ RDD_PKTGEN_SBPM_HDR_BNS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_SBPM_HDR_BNS_DTS;

extern uint32_t RDD_PKTGEN_SBPM_HDR_BNS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_SBPM_HDR_BNS_PTR(core_id)	( RDD_PKTGEN_SBPM_HDR_BNS_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_SBPM_HDR_BNS_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_SBPM_HDR_BNS */


/* >>>PKTGEN_BAD_GET_NEXT */
typedef struct
{
	RDD_BYTES_4_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_BAD_GET_NEXT_DTS;

extern uint32_t RDD_PKTGEN_BAD_GET_NEXT_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_BAD_GET_NEXT_PTR(core_id)	( RDD_PKTGEN_BAD_GET_NEXT_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_BAD_GET_NEXT_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_BAD_GET_NEXT */


/* >>>CPU_VPORT_TO_METER_TABLE */

#define RDD_CPU_VPORT_TO_METER_TABLE_SIZE     40
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_CPU_VPORT_TO_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_VPORT_TO_METER_TABLE_DTS;

extern uint32_t RDD_CPU_VPORT_TO_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_VPORT_TO_METER_TABLE_PTR(core_id)	( RDD_CPU_VPORT_TO_METER_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_VPORT_TO_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_VPORT_TO_METER_TABLE */


/* >>>SPDSVC_TCPSPDTEST_COMMON_TABLE */

/* >>>RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	spdsvc_task_owner                       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	cpu_rx_copy_is_tcpspdtest_timeout_wakeup	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	cpu_rx_copy_is_tcpspdtest_timeout_wakeup	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	spdsvc_task_owner                       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_DTS;

typedef RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_DTS * aligned_RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_DTS ALIGNMENT8;

#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_SPDSVC_TASK_OWNER_READ_G(r, g, idx)                                 GROUP_MREAD_8(g, idx*sizeof(RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_DTS), r)
#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_SPDSVC_TASK_OWNER_WRITE_G(v, g, idx)                                GROUP_MWRITE_8(g, idx*sizeof(RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_DTS), v)
#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_SPDSVC_TASK_OWNER_READ(r, p)                                        MREAD_8((uint8_t *)p, r)
#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_SPDSVC_TASK_OWNER_WRITE(v, p)                                       MWRITE_8((uint8_t *)p, v)
#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_CPU_RX_COPY_IS_TCPSPDTEST_TIMEOUT_WAKEUP_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_DTS) + 1, r)
#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_CPU_RX_COPY_IS_TCPSPDTEST_TIMEOUT_WAKEUP_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_DTS) + 1, v)
#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_CPU_RX_COPY_IS_TCPSPDTEST_TIMEOUT_WAKEUP_READ(r, p)                 MREAD_8((uint8_t *)p + 1, r)
#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_CPU_RX_COPY_IS_TCPSPDTEST_TIMEOUT_WAKEUP_WRITE(v, p)                MWRITE_8((uint8_t *)p + 1, v)
/* <<<RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_DTS */

typedef struct
{
	RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_TCPSPDTEST_COMMON_TABLE_DTS;

extern uint32_t RDD_SPDSVC_TCPSPDTEST_COMMON_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_TCPSPDTEST_COMMON_TABLE_PTR(core_id)	( RDD_SPDSVC_TCPSPDTEST_COMMON_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_TCPSPDTEST_COMMON_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_TCPSPDTEST_COMMON_TABLE */


/* >>>CPU_RX_COPY_DISPATCHER_CREDIT_TABLE */

#define RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_COPY_DISPATCHER_CREDIT_TABLE */


/* >>>PKTGEN_MAX_UT_PKTS */
typedef struct
{
	RDD_BYTES_4_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_MAX_UT_PKTS_DTS;

extern uint32_t RDD_PKTGEN_MAX_UT_PKTS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_MAX_UT_PKTS_PTR(core_id)	( RDD_PKTGEN_MAX_UT_PKTS_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_MAX_UT_PKTS_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_MAX_UT_PKTS */


/* >>>CPU_FEED_RING_INTERRUPT_THRESHOLD */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_FEED_RING_INTERRUPT_THRESHOLD_DTS;

extern uint32_t RDD_CPU_FEED_RING_INTERRUPT_THRESHOLD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_FEED_RING_INTERRUPT_THRESHOLD_PTR(core_id)	( RDD_CPU_FEED_RING_INTERRUPT_THRESHOLD_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_FEED_RING_INTERRUPT_THRESHOLD_ADDRESS_ARR[core_id] ))

/* <<<CPU_FEED_RING_INTERRUPT_THRESHOLD */


/* >>>PKTGEN_UT_TRIGGER */
typedef struct
{
	RDD_BYTES_4_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_UT_TRIGGER_DTS;

extern uint32_t RDD_PKTGEN_UT_TRIGGER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_UT_TRIGGER_PTR(core_id)	( RDD_PKTGEN_UT_TRIGGER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_UT_TRIGGER_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_UT_TRIGGER */


/* >>>CPU_FEED_RING_INTERRUPT_COUNTER */
typedef struct
{
	RDD_BYTES_2_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_FEED_RING_INTERRUPT_COUNTER_DTS;

extern uint32_t RDD_CPU_FEED_RING_INTERRUPT_COUNTER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_FEED_RING_INTERRUPT_COUNTER_PTR(core_id)	( RDD_CPU_FEED_RING_INTERRUPT_COUNTER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_FEED_RING_INTERRUPT_COUNTER_ADDRESS_ARR[core_id] ))

/* <<<CPU_FEED_RING_INTERRUPT_COUNTER */


/* >>>SPDSVC_GEN_DISPATCHER_CREDIT_TABLE */

#define RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_GEN_DISPATCHER_CREDIT_TABLE */


/* >>>COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE */

#define RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE */


/* >>>TCPSPDTEST_ENGINE_GLOBAL_TABLE */

/* >>>RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	num_streams               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                 	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	stream_vector             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_bucket_tokens          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_bucket_full_tokens     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_bucket_tokens_fill_rate	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_next_stream_id         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved0                 	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	num_streams               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	stream_vector             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_bucket_tokens          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_bucket_full_tokens     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_next_stream_id         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_bucket_tokens_fill_rate	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS;

typedef RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS * aligned_RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[5];
    uint64_t dword_val64[2];
    RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS fields;
} RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS_NEW;
typedef RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS_NEW * aligned_RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS_NEW ALIGNMENT8;

#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_READ_G(r, g, idx)                         GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS), r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_WRITE_G(v, g, idx)                        GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS), v)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_READ(r, p)                                MREAD_8((uint8_t *)p, r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_WRITE(v, p)                               MWRITE_8((uint8_t *)p, v)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_READ_G(r, g, idx)                       GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS) + 4, r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_WRITE_G(v, g, idx)                      GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS) + 4, v)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_READ(r, p)                              MREAD_32((uint8_t *)p + 4, r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_WRITE(v, p)                             MWRITE_32((uint8_t *)p + 4, v)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_READ_G(r, g, idx)                    GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS) + 8, r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_WRITE_G(v, g, idx)                   GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS) + 8, v)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_READ(r, p)                           MREAD_32((uint8_t *)p + 8, r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_WRITE(v, p)                          MWRITE_32((uint8_t *)p + 8, v)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS) + 12, r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS) + 12, v)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_READ(r, p)                      MREAD_32((uint8_t *)p + 12, r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 12, v)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS) + 16, r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS) + 16, v)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_READ(r, p)                 MREAD_16((uint8_t *)p + 16, r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_WRITE(v, p)                MWRITE_16((uint8_t *)p + 16, v)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_READ_G(r, g, idx)                   GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS) + 18, r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_WRITE_G(v, g, idx)                  GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS) + 18, v)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_READ(r, p)                          MREAD_8((uint8_t *)p + 18, r)
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_WRITE(v, p)                         MWRITE_8((uint8_t *)p + 18, v)
/* <<<RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS */

typedef struct
{
	RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCPSPDTEST_ENGINE_GLOBAL_TABLE_DTS;

extern uint32_t RDD_TCPSPDTEST_ENGINE_GLOBAL_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCPSPDTEST_ENGINE_GLOBAL_TABLE_PTR(core_id)	( RDD_TCPSPDTEST_ENGINE_GLOBAL_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCPSPDTEST_ENGINE_GLOBAL_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TCPSPDTEST_ENGINE_GLOBAL_TABLE */


/* >>>CPU_RX_COPY_LOCAL_SCRATCH */
typedef struct
{
	RDD_BYTES_8_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_COPY_LOCAL_SCRATCH_DTS;

extern uint32_t RDD_CPU_RX_COPY_LOCAL_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_COPY_LOCAL_SCRATCH_PTR(core_id)	( RDD_CPU_RX_COPY_LOCAL_SCRATCH_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_COPY_LOCAL_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_COPY_LOCAL_SCRATCH */


/* >>>CPU_RX_COPY_UPDATE_FIFO_TABLE */

#define RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	RDD_UPDATE_FIFO_ENTRY_DTS	entry[ RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_DTS;

extern uint32_t RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_PTR(core_id)	( RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_COPY_UPDATE_FIFO_TABLE */


/* >>>COMMON_REPROCESSING_UPDATE_FIFO_TABLE */

#define RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	RDD_UPDATE_FIFO_ENTRY_DTS	entry[ RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_DTS;

extern uint32_t RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_PTR(core_id)	( RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<COMMON_REPROCESSING_UPDATE_FIFO_TABLE */


/* >>>BCM_SPDSVC_STREAM_RX_TS_TABLE */

/* >>>RDD_SPDSVC_RX_TS_STAT_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	ts_first    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_last     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved    	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_first_set	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	ts_first    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_last     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_first_set	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved    	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_RX_TS_STAT_DTS;

typedef RDD_SPDSVC_RX_TS_STAT_DTS * aligned_RDD_SPDSVC_RX_TS_STAT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[3];
    uint64_t dword_val64[1];
    RDD_SPDSVC_RX_TS_STAT_DTS fields;
} RDD_SPDSVC_RX_TS_STAT_DTS_NEW;
typedef RDD_SPDSVC_RX_TS_STAT_DTS_NEW * aligned_RDD_SPDSVC_RX_TS_STAT_DTS_NEW ALIGNMENT8;

#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_RX_TS_STAT_DTS), r)
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_RX_TS_STAT_DTS), v)
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_READ(r, p)                     MREAD_32((uint8_t *)p, r)
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_WRITE(v, p)                    MWRITE_32((uint8_t *)p, v)
#define RDD_SPDSVC_RX_TS_STAT_TS_LAST_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_RX_TS_STAT_DTS) + 4, r)
#define RDD_SPDSVC_RX_TS_STAT_TS_LAST_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_RX_TS_STAT_DTS) + 4, v)
#define RDD_SPDSVC_RX_TS_STAT_TS_LAST_READ(r, p)                      MREAD_32((uint8_t *)p + 4, r)
#define RDD_SPDSVC_RX_TS_STAT_TS_LAST_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 4, v)
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_SET_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SPDSVC_RX_TS_STAT_DTS) + 11, 0, 1, r)
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_SET_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SPDSVC_RX_TS_STAT_DTS) + 11, 0, 1, v)
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_SET_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 11, 0, 1, r)
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_SET_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 11, 0, 1, v)
/* <<<RDD_SPDSVC_RX_TS_STAT_DTS */

typedef struct
{
	RDD_SPDSVC_RX_TS_STAT_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BCM_SPDSVC_STREAM_RX_TS_TABLE_DTS;

extern uint32_t RDD_BCM_SPDSVC_STREAM_RX_TS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BCM_SPDSVC_STREAM_RX_TS_TABLE_PTR(core_id)	( RDD_BCM_SPDSVC_STREAM_RX_TS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BCM_SPDSVC_STREAM_RX_TS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BCM_SPDSVC_STREAM_RX_TS_TABLE */


/* >>>PD_FIFO_TABLE */

#define RDD_PD_FIFO_TABLE_SIZE     2
typedef struct
{
	RDD_PROCESSING_TX_DESCRIPTOR_DTS	entry[ RDD_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PD_FIFO_TABLE_DTS;

extern uint32_t RDD_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PD_FIFO_TABLE_PTR(core_id)	( RDD_PD_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<PD_FIFO_TABLE */


/* >>>CPU_REASON_TO_TC */

#define RDD_CPU_REASON_TO_TC_SIZE     64
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_CPU_REASON_TO_TC_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_REASON_TO_TC_DTS;

extern uint32_t RDD_CPU_REASON_TO_TC_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_REASON_TO_TC_PTR(core_id)	( RDD_CPU_REASON_TO_TC_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_REASON_TO_TC_ADDRESS_ARR[core_id] ))

/* <<<CPU_REASON_TO_TC */


/* >>>TC_TO_CPU_RXQ */

#define RDD_TC_TO_CPU_RXQ_SIZE     64
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_TC_TO_CPU_RXQ_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TC_TO_CPU_RXQ_DTS;

extern uint32_t RDD_TC_TO_CPU_RXQ_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TC_TO_CPU_RXQ_PTR(core_id)	( RDD_TC_TO_CPU_RXQ_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TC_TO_CPU_RXQ_ADDRESS_ARR[core_id] ))

/* <<<TC_TO_CPU_RXQ */


/* >>>EXC_TC_TO_CPU_RXQ */

#define RDD_EXC_TC_TO_CPU_RXQ_SIZE     64
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_EXC_TC_TO_CPU_RXQ_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_EXC_TC_TO_CPU_RXQ_DTS;

extern uint32_t RDD_EXC_TC_TO_CPU_RXQ_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_EXC_TC_TO_CPU_RXQ_PTR(core_id)	( RDD_EXC_TC_TO_CPU_RXQ_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_EXC_TC_TO_CPU_RXQ_ADDRESS_ARR[core_id] ))

/* <<<EXC_TC_TO_CPU_RXQ */


/* >>>UDPSPDTEST_STREAM_TX_STAT_TABLE */

/* >>>RDD_UDPSPDTEST_STREAM_TX_STAT_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	tx_packets_0    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_packets_1    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_drops_no_spbm	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	tx_packets_0    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_packets_1    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_drops_no_spbm	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_UDPSPDTEST_STREAM_TX_STAT_DTS;

typedef RDD_UDPSPDTEST_STREAM_TX_STAT_DTS * aligned_RDD_UDPSPDTEST_STREAM_TX_STAT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[3];
    uint64_t dword_val64[1];
    RDD_UDPSPDTEST_STREAM_TX_STAT_DTS fields;
} RDD_UDPSPDTEST_STREAM_TX_STAT_DTS_NEW;
typedef RDD_UDPSPDTEST_STREAM_TX_STAT_DTS_NEW * aligned_RDD_UDPSPDTEST_STREAM_TX_STAT_DTS_NEW ALIGNMENT8;

#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_0_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_TX_STAT_DTS), r)
#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_0_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_TX_STAT_DTS), v)
#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_0_READ(r, p)                     MREAD_32((uint8_t *)p, r)
#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_0_WRITE(v, p)                    MWRITE_32((uint8_t *)p, v)
#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_1_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_TX_STAT_DTS) + 4, r)
#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_1_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_TX_STAT_DTS) + 4, v)
#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_1_READ(r, p)                     MREAD_32((uint8_t *)p + 4, r)
#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_1_WRITE(v, p)                    MWRITE_32((uint8_t *)p + 4, v)
#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_DROPS_NO_SPBM_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_TX_STAT_DTS) + 8, r)
#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_DROPS_NO_SPBM_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_TX_STAT_DTS) + 8, v)
#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_DROPS_NO_SPBM_READ(r, p)                 MREAD_32((uint8_t *)p + 8, r)
#define RDD_UDPSPDTEST_STREAM_TX_STAT_TX_DROPS_NO_SPBM_WRITE(v, p)                MWRITE_32((uint8_t *)p + 8, v)
/* <<<RDD_UDPSPDTEST_STREAM_TX_STAT_DTS */

typedef struct
{
	RDD_UDPSPDTEST_STREAM_TX_STAT_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_UDPSPDTEST_STREAM_TX_STAT_TABLE_DTS;

extern uint32_t RDD_UDPSPDTEST_STREAM_TX_STAT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_UDPSPDTEST_STREAM_TX_STAT_TABLE_PTR(core_id)	( RDD_UDPSPDTEST_STREAM_TX_STAT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_UDPSPDTEST_STREAM_TX_STAT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<UDPSPDTEST_STREAM_TX_STAT_TABLE */


/* >>>UDPSPDTEST_STREAM_RX_STAT_TABLE */

/* >>>RDD_UDPSPDTEST_STREAM_RX_STAT_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	rx_bytes_0    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_bytes_1    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_packets_0  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_packets_1  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_first      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_last_0     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_last_1     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_first_set  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved      	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_proto_cntr	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	rx_bytes_0    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_bytes_1    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_packets_0  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_packets_1  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_first      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_last_0     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_last_1     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_proto_cntr	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved      	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ts_first_set  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_UDPSPDTEST_STREAM_RX_STAT_DTS;

typedef RDD_UDPSPDTEST_STREAM_RX_STAT_DTS * aligned_RDD_UDPSPDTEST_STREAM_RX_STAT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[8];
    uint64_t dword_val64[4];
    RDD_UDPSPDTEST_STREAM_RX_STAT_DTS fields;
} RDD_UDPSPDTEST_STREAM_RX_STAT_DTS_NEW;
typedef RDD_UDPSPDTEST_STREAM_RX_STAT_DTS_NEW * aligned_RDD_UDPSPDTEST_STREAM_RX_STAT_DTS_NEW ALIGNMENT8;

#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_0_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS), r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_0_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS), v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_0_READ(r, p)                     MREAD_32((uint8_t *)p, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_0_WRITE(v, p)                    MWRITE_32((uint8_t *)p, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_1_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 4, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_1_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 4, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_1_READ(r, p)                     MREAD_32((uint8_t *)p + 4, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_1_WRITE(v, p)                    MWRITE_32((uint8_t *)p + 4, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_0_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 8, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_0_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 8, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_0_READ(r, p)                   MREAD_32((uint8_t *)p + 8, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_0_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 8, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_1_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 12, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_1_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 12, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_1_READ(r, p)                   MREAD_32((uint8_t *)p + 12, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_1_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 12, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 16, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 16, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_READ(r, p)                       MREAD_32((uint8_t *)p + 16, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 16, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_LAST_0_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 20, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_LAST_0_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 20, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_LAST_0_READ(r, p)                      MREAD_32((uint8_t *)p + 20, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_LAST_0_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 20, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_LAST_1_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 24, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_LAST_1_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 24, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_LAST_1_READ(r, p)                      MREAD_32((uint8_t *)p + 24, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_LAST_1_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 24, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_SET_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 28, 7, 1, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_SET_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 28, 7, 1, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_SET_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 28, 7, 1, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_SET_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 28, 7, 1, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_BAD_PROTO_CNTR_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 30, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_BAD_PROTO_CNTR_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_UDPSPDTEST_STREAM_RX_STAT_DTS) + 30, v)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_BAD_PROTO_CNTR_READ(r, p)                 MREAD_16((uint8_t *)p + 30, r)
#define RDD_UDPSPDTEST_STREAM_RX_STAT_BAD_PROTO_CNTR_WRITE(v, p)                MWRITE_16((uint8_t *)p + 30, v)
/* <<<RDD_UDPSPDTEST_STREAM_RX_STAT_DTS */

typedef struct
{
	RDD_UDPSPDTEST_STREAM_RX_STAT_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_UDPSPDTEST_STREAM_RX_STAT_TABLE_DTS;

extern uint32_t RDD_UDPSPDTEST_STREAM_RX_STAT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_UDPSPDTEST_STREAM_RX_STAT_TABLE_PTR(core_id)	( RDD_UDPSPDTEST_STREAM_RX_STAT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_UDPSPDTEST_STREAM_RX_STAT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<UDPSPDTEST_STREAM_RX_STAT_TABLE */


/* >>>CPU_INTERRUPT_COALESCING_TABLE */
typedef struct
{
	RDD_CPU_INTERRUPT_COALESCING_ENTRY_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_INTERRUPT_COALESCING_TABLE_DTS;

extern uint32_t RDD_CPU_INTERRUPT_COALESCING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_INTERRUPT_COALESCING_TABLE_PTR(core_id)	( RDD_CPU_INTERRUPT_COALESCING_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_INTERRUPT_COALESCING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_INTERRUPT_COALESCING_TABLE */


/* >>>PKTGEN_SESSION_DATA */

/* >>>RDD_PKTGEN_TX_PARAMS_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	bbmsg_sbpm_mcast_inc_req_0	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bbmsg_sbpm_mcast_inc_req_1	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ref_pd_0                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ref_pd_1                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ref_pd_2                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ref_pd_3                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	bbmsg_sbpm_mcast_inc_req_0	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bbmsg_sbpm_mcast_inc_req_1	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ref_pd_0                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ref_pd_1                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ref_pd_2                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ref_pd_3                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_TX_PARAMS_DTS;

typedef RDD_PKTGEN_TX_PARAMS_DTS * aligned_RDD_PKTGEN_TX_PARAMS_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[6];
    uint64_t dword_val64[3];
    RDD_PKTGEN_TX_PARAMS_DTS fields;
} RDD_PKTGEN_TX_PARAMS_DTS_NEW;
typedef RDD_PKTGEN_TX_PARAMS_DTS_NEW * aligned_RDD_PKTGEN_TX_PARAMS_DTS_NEW ALIGNMENT8;

#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS), r)
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS), v)
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS) + 4, r)
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS) + 4, v)
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_0_READ_G(r, g, idx)                            GROUP_MREAD_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS) + 8, r)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_0_WRITE_G(v, g, idx)                           GROUP_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS) + 8, v)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_0_READ(r, p)                                   MREAD_32((uint8_t *)p + 8, r)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_0_WRITE(v, p)                                  MWRITE_32((uint8_t *)p + 8, v)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_1_READ_G(r, g, idx)                            GROUP_MREAD_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS) + 12, r)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_1_WRITE_G(v, g, idx)                           GROUP_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS) + 12, v)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_1_READ(r, p)                                   MREAD_32((uint8_t *)p + 12, r)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_1_WRITE(v, p)                                  MWRITE_32((uint8_t *)p + 12, v)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_2_READ_G(r, g, idx)                            GROUP_MREAD_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS) + 16, r)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_2_WRITE_G(v, g, idx)                           GROUP_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS) + 16, v)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_2_READ(r, p)                                   MREAD_32((uint8_t *)p + 16, r)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_2_WRITE(v, p)                                  MWRITE_32((uint8_t *)p + 16, v)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_3_READ_G(r, g, idx)                            GROUP_MREAD_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS) + 20, r)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_3_WRITE_G(v, g, idx)                           GROUP_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_TX_PARAMS_DTS) + 20, v)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_3_READ(r, p)                                   MREAD_32((uint8_t *)p + 20, r)
#define RDD_PKTGEN_TX_PARAMS_REF_PD_3_WRITE(v, p)                                  MWRITE_32((uint8_t *)p + 20, v)
/* <<<RDD_PKTGEN_TX_PARAMS_DTS */

typedef struct
{
	RDD_PKTGEN_TX_PARAMS_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_SESSION_DATA_DTS;

extern uint32_t RDD_PKTGEN_SESSION_DATA_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_SESSION_DATA_PTR(core_id)	( RDD_PKTGEN_SESSION_DATA_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_SESSION_DATA_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_SESSION_DATA */


/* >>>VPORT_TO_CPU_OBJ */

#define RDD_VPORT_TO_CPU_OBJ_SIZE     40
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_VPORT_TO_CPU_OBJ_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_VPORT_TO_CPU_OBJ_DTS;

extern uint32_t RDD_VPORT_TO_CPU_OBJ_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_VPORT_TO_CPU_OBJ_PTR(core_id)	( RDD_VPORT_TO_CPU_OBJ_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_VPORT_TO_CPU_OBJ_ADDRESS_ARR[core_id] ))

/* <<<VPORT_TO_CPU_OBJ */


/* >>>CPU_RX_LOCAL_SCRATCH */

#define RDD_CPU_RX_LOCAL_SCRATCH_SIZE     2
typedef struct
{
	RDD_BYTES_8_DTS	entry[ RDD_CPU_RX_LOCAL_SCRATCH_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_LOCAL_SCRATCH_DTS;

extern uint32_t RDD_CPU_RX_LOCAL_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_LOCAL_SCRATCH_PTR(core_id)	( RDD_CPU_RX_LOCAL_SCRATCH_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_LOCAL_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_LOCAL_SCRATCH */


/* >>>PKTGEN_SBPM_EXTS */

/* >>>RDD_PKTGEN_SBPM_EXT_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reserved0 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	num_of_bns	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bn1       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	bn1       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	num_of_bns	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_SBPM_EXT_DTS;

typedef RDD_PKTGEN_SBPM_EXT_DTS * aligned_RDD_PKTGEN_SBPM_EXT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_PKTGEN_SBPM_EXT_DTS fields;
} RDD_PKTGEN_SBPM_EXT_DTS_NEW;
typedef RDD_PKTGEN_SBPM_EXT_DTS_NEW * aligned_RDD_PKTGEN_SBPM_EXT_DTS_NEW ALIGNMENT8;

#define RDD_PKTGEN_SBPM_EXT_NUM_OF_BNS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PKTGEN_SBPM_EXT_DTS) + 0, 14, 4, r)
#define RDD_PKTGEN_SBPM_EXT_NUM_OF_BNS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PKTGEN_SBPM_EXT_DTS) + 0, 14, 4, v)
#define RDD_PKTGEN_SBPM_EXT_NUM_OF_BNS_READ(r, p)                 FIELD_MREAD_32((uint8_t *)p + 0, 14, 4, r)
#define RDD_PKTGEN_SBPM_EXT_NUM_OF_BNS_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)p + 0, 14, 4, v)
#define RDD_PKTGEN_SBPM_EXT_BN1_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PKTGEN_SBPM_EXT_DTS) + 2, 0, 14, r)
#define RDD_PKTGEN_SBPM_EXT_BN1_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PKTGEN_SBPM_EXT_DTS) + 2, 0, 14, v)
#define RDD_PKTGEN_SBPM_EXT_BN1_READ(r, p)                        FIELD_MREAD_16((uint8_t *)p + 2, 0, 14, r)
#define RDD_PKTGEN_SBPM_EXT_BN1_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)p + 2, 0, 14, v)
/* <<<RDD_PKTGEN_SBPM_EXT_DTS */


#define RDD_PKTGEN_SBPM_EXTS_SIZE     4
typedef struct
{
	RDD_PKTGEN_SBPM_EXT_DTS	entry[ RDD_PKTGEN_SBPM_EXTS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_SBPM_EXTS_DTS;

extern uint32_t RDD_PKTGEN_SBPM_EXTS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_SBPM_EXTS_PTR(core_id)	( RDD_PKTGEN_SBPM_EXTS_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_SBPM_EXTS_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_SBPM_EXTS */


/* >>>PKTGEN_BBMSG_REPLY_SCRATCH */

#define RDD_PKTGEN_BBMSG_REPLY_SCRATCH_SIZE     2
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_PKTGEN_BBMSG_REPLY_SCRATCH_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PKTGEN_BBMSG_REPLY_SCRATCH_DTS;

extern uint32_t RDD_PKTGEN_BBMSG_REPLY_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_BBMSG_REPLY_SCRATCH_PTR(core_id)	( RDD_PKTGEN_BBMSG_REPLY_SCRATCH_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_BBMSG_REPLY_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_BBMSG_REPLY_SCRATCH */

/* CORE_4 */

/* >>>DHD_FLOW_RING_CACHE_CTX_TABLE */

/* >>>RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	flow_ring_base_low 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_base_high	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	shadow_wr_idx      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	size               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ssid               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flags              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rd_idx             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wr_idx             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	flow_ring_base_low 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	shadow_wr_idx      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_base_high	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flags              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ssid               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	size               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wr_idx             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rd_idx             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS;

typedef RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS * aligned_RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS fields;
} RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS_NEW;
typedef RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS_NEW * aligned_RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS), r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS), v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_READ(r, p)                  MREAD_32((uint8_t *)p, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 4, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 4, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_READ(r, p)                 MREAD_8((uint8_t *)p + 4, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_WRITE(v, p)                MWRITE_8((uint8_t *)p + 4, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_L_READ( wv )               FIELD_GET( wv, 24, 8 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_L_WRITE( v, wv )           FIELD_SET( v, 24, 8, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 6, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 6, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_READ(r, p)                       MREAD_16((uint8_t *)p + 6, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_WRITE(v, p)                      MWRITE_16((uint8_t *)p + 6, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_L_READ( wv )                     FIELD_GET( wv, 0, 16 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_L_WRITE( v, wv )                 FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_READ_G(r, g, idx)                         GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 8, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_WRITE_G(v, g, idx)                        GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 8, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_READ(r, p)                                MREAD_16((uint8_t *)p + 8, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_WRITE(v, p)                               MWRITE_16((uint8_t *)p + 8, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_L_READ( wv )                              FIELD_GET( wv, 16, 16 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_L_WRITE( v, wv )                          FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_READ_G(r, g, idx)                         GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 10, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_WRITE_G(v, g, idx)                        GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 10, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_READ(r, p)                                MREAD_8((uint8_t *)p + 10, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_WRITE(v, p)                               MWRITE_8((uint8_t *)p + 10, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_L_READ( wv )                              FIELD_GET( wv, 8, 8 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_L_WRITE( v, wv )                          FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_READ_G(r, g, idx)                        GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 11, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_WRITE_G(v, g, idx)                       GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 11, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_READ(r, p)                               MREAD_8((uint8_t *)p + 11, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_WRITE(v, p)                              MWRITE_8((uint8_t *)p + 11, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_L_READ( wv )                             FIELD_GET( wv, 0, 8 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_L_WRITE( v, wv )                         FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_READ_G(r, g, idx)                       GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 12, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_WRITE_G(v, g, idx)                      GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 12, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_READ(r, p)                              MREAD_16((uint8_t *)p + 12, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_WRITE(v, p)                             MWRITE_16((uint8_t *)p + 12, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_L_READ( wv )                            FIELD_GET( wv, 16, 16 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_L_WRITE( v, wv )                        FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_READ_G(r, g, idx)                       GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 14, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_WRITE_G(v, g, idx)                      GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS) + 14, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_READ(r, p)                              MREAD_16((uint8_t *)p + 14, r)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_WRITE(v, p)                             MWRITE_16((uint8_t *)p + 14, v)
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_L_READ( wv )                            FIELD_GET( wv, 0, 16 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_L_WRITE( v, wv )                        FIELD_SET( v, 0, 16, wv )
/* <<<RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS */


#define RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_SIZE     48
typedef struct
{
	RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_DTS	entry[ RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_DTS;

extern uint32_t RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_PTR(core_id)	( RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_FLOW_RING_CACHE_CTX_TABLE */


/* >>>DHD_BACKUP_INDEX_CACHE */

/* >>>RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS */
#define RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_NUMBER	16

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	indexes[RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_NUMBER];
#else
	uint16_t	indexes[RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS;

typedef RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS * aligned_RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[8];
    uint64_t dword_val64[4];
    RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS fields;
} RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS_NEW;
typedef RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS_NEW * aligned_RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS_NEW ALIGNMENT8;

#define RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_READ_G(r, g, idx, i)       GROUP_MREAD_I_16(g, idx*sizeof(RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS), i, r)
#define RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_16(g, idx*sizeof(RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS), i, v)
#define RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_READ(r, p, i)              MREAD_I_16((uint8_t *)p, i, r)
#define RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_WRITE(v, p, i)             MWRITE_I_16((uint8_t *)p, i, v)
/* <<<RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS */


#define RDD_DHD_BACKUP_INDEX_CACHE_SIZE     3
typedef struct
{
	RDD_DHD_BACKUP_IDX_CACHE_TABLE_DTS	entry[ RDD_DHD_BACKUP_INDEX_CACHE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_BACKUP_INDEX_CACHE_DTS;

extern uint32_t RDD_DHD_BACKUP_INDEX_CACHE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_BACKUP_INDEX_CACHE_PTR(core_id)	( RDD_DHD_BACKUP_INDEX_CACHE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_BACKUP_INDEX_CACHE_ADDRESS_ARR[core_id] ))

/* <<<DHD_BACKUP_INDEX_CACHE */


/* >>>WLAN_MCAST_SSID_STATS_TABLE */

/* >>>RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	packets   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bytes     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	packets   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bytes     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS;

typedef RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS * aligned_RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS fields;
} RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS_NEW;
typedef RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS_NEW * aligned_RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_WLAN_MCAST_SSID_STATS_ENTRY_PACKETS_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS), r)
#define RDD_WLAN_MCAST_SSID_STATS_ENTRY_PACKETS_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS), v)
#define RDD_WLAN_MCAST_SSID_STATS_ENTRY_PACKETS_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_WLAN_MCAST_SSID_STATS_ENTRY_PACKETS_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
#define RDD_WLAN_MCAST_SSID_STATS_ENTRY_BYTES_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS) + 4, r)
#define RDD_WLAN_MCAST_SSID_STATS_ENTRY_BYTES_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS) + 4, v)
#define RDD_WLAN_MCAST_SSID_STATS_ENTRY_BYTES_READ(r, p)                   MREAD_32((uint8_t *)p + 4, r)
#define RDD_WLAN_MCAST_SSID_STATS_ENTRY_BYTES_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS */


#define RDD_WLAN_MCAST_SSID_STATS_TABLE_SIZE     48
typedef struct
{
	RDD_WLAN_MCAST_SSID_STATS_ENTRY_DTS	entry[ RDD_WLAN_MCAST_SSID_STATS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_SSID_STATS_TABLE_DTS;

extern uint32_t RDD_WLAN_MCAST_SSID_STATS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WLAN_MCAST_SSID_STATS_TABLE_PTR(core_id)	( RDD_WLAN_MCAST_SSID_STATS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WLAN_MCAST_SSID_STATS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<WLAN_MCAST_SSID_STATS_TABLE */


/* >>>DHD_FPM_POOL_NUMBER_MAPPING_TABLE */

#define RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_SIZE     16
typedef struct
{
	RDD_FPM_POOL_NUMBER_DTS	entry[ RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_DTS;

extern uint32_t RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_PTR(core_id)	( RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_FPM_POOL_NUMBER_MAPPING_TABLE */


/* >>>DHD_HW_CFG */

/* >>>RDD_DHD_HW_CONFIGURATION_DTS */
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_NUMBER	3

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	aggr_timer_period                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                                                        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ddr_sop_offset                                                   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fpm_pool                                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                                                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	fpm_thresholds[RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_NUMBER];
	uint32_t	reserved2                                                        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	aggr_timer_period                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                                                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fpm_pool                                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ddr_sop_offset                                                   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                                                        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	fpm_thresholds[RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_NUMBER];
	uint32_t	reserved2                                                        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_HW_CONFIGURATION_DTS;

typedef RDD_DHD_HW_CONFIGURATION_DTS * aligned_RDD_DHD_HW_CONFIGURATION_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_DHD_HW_CONFIGURATION_DTS fields;
} RDD_DHD_HW_CONFIGURATION_DTS_NEW;
typedef RDD_DHD_HW_CONFIGURATION_DTS_NEW * aligned_RDD_DHD_HW_CONFIGURATION_DTS_NEW ALIGNMENT8;

#define RDD_DHD_HW_CONFIGURATION_AGGR_TIMER_PERIOD_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_HW_CONFIGURATION_DTS), r)
#define RDD_DHD_HW_CONFIGURATION_AGGR_TIMER_PERIOD_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_HW_CONFIGURATION_DTS), v)
#define RDD_DHD_HW_CONFIGURATION_AGGR_TIMER_PERIOD_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_DHD_HW_CONFIGURATION_AGGR_TIMER_PERIOD_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
#define RDD_DHD_HW_CONFIGURATION_DDR_SOP_OFFSET_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_HW_CONFIGURATION_DTS) + 4, 0, 11, r)
#define RDD_DHD_HW_CONFIGURATION_DDR_SOP_OFFSET_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_HW_CONFIGURATION_DTS) + 4, 0, 11, v)
#define RDD_DHD_HW_CONFIGURATION_DDR_SOP_OFFSET_READ(r, p)                    FIELD_MREAD_16((uint8_t *)p + 4, 0, 11, r)
#define RDD_DHD_HW_CONFIGURATION_DDR_SOP_OFFSET_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)p + 4, 0, 11, v)
#define RDD_DHD_HW_CONFIGURATION_RX_POST_FPM_POOL_READ_G(r, g, idx)           GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_HW_CONFIGURATION_DTS) + 6, r)
#define RDD_DHD_HW_CONFIGURATION_RX_POST_FPM_POOL_WRITE_G(v, g, idx)          GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_HW_CONFIGURATION_DTS) + 6, v)
#define RDD_DHD_HW_CONFIGURATION_RX_POST_FPM_POOL_READ(r, p)                  MREAD_8((uint8_t *)p + 6, r)
#define RDD_DHD_HW_CONFIGURATION_RX_POST_FPM_POOL_WRITE(v, p)                 MWRITE_8((uint8_t *)p + 6, v)
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_READ_G(r, g, idx, i)          GROUP_MREAD_I_16(g, idx*sizeof(RDD_DHD_HW_CONFIGURATION_DTS) + 8, i, r)
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_WRITE_G(v, g, idx, i)         GROUP_MWRITE_I_16(g, idx*sizeof(RDD_DHD_HW_CONFIGURATION_DTS) + 8, i, v)
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_READ(r, p, i)                 MREAD_I_16((uint8_t *)p + 8, i, r)
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_WRITE(v, p, i)                MWRITE_I_16((uint8_t *)p + 8, i, v)
/* <<<RDD_DHD_HW_CONFIGURATION_DTS */

typedef struct
{
	RDD_DHD_HW_CONFIGURATION_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_HW_CFG_DTS;

extern uint32_t RDD_DHD_HW_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_HW_CFG_PTR(core_id)	( RDD_DHD_HW_CFG_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_HW_CFG_ADDRESS_ARR[core_id] ))

/* <<<DHD_HW_CFG */


/* >>>DHD_L2_HEADER */

#define RDD_DHD_L2_HEADER_SIZE     72
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_DHD_L2_HEADER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_L2_HEADER_DTS;

extern uint32_t RDD_DHD_L2_HEADER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_L2_HEADER_PTR(core_id)	( RDD_DHD_L2_HEADER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_L2_HEADER_ADDRESS_ARR[core_id] ))

/* <<<DHD_L2_HEADER */


/* >>>DHD_TX_POST_FLOW_RING_BUFFER */

/* >>>RDD_DHD_TX_POST_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	msg_type             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	common_hdr_flags     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	epoch                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	request_id           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_0         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_1         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_2         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_3         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flags                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	seg_cnt              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	metadata_buf_addr_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	metadata_buf_addr_hi 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_low    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_hi     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	meta_buf_len         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_len             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	epoch                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	common_hdr_flags     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	msg_type             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	request_id           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_0         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_1         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_2         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	seg_cnt              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flags                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_3         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	metadata_buf_addr_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	metadata_buf_addr_hi 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_low    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_hi     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_len             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	meta_buf_len         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_POST_DESCRIPTOR_DTS;

typedef RDD_DHD_TX_POST_DESCRIPTOR_DTS * aligned_RDD_DHD_TX_POST_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[12];
    uint64_t dword_val64[6];
    RDD_DHD_TX_POST_DESCRIPTOR_DTS fields;
} RDD_DHD_TX_POST_DESCRIPTOR_DTS_NEW;
typedef RDD_DHD_TX_POST_DESCRIPTOR_DTS_NEW * aligned_RDD_DHD_TX_POST_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_READ_G(r, g, idx)                       GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS), r)
#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_WRITE_G(v, g, idx)                      GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS), v)
#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_READ(r, p)                              MREAD_8((uint8_t *)p, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_WRITE(v, p)                             MWRITE_8((uint8_t *)p, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_L_READ( wv )                            FIELD_GET( wv, 24, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_L_WRITE( v, wv )                        FIELD_SET( v, 24, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_READ_G(r, g, idx)                          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 1, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_WRITE_G(v, g, idx)                         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 1, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_READ(r, p)                                 MREAD_8((uint8_t *)p + 1, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_WRITE(v, p)                                MWRITE_8((uint8_t *)p + 1, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_L_READ( wv )                               FIELD_GET( wv, 16, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_L_WRITE( v, wv )                           FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_READ_G(r, g, idx)               GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 2, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE_G(v, g, idx)              GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 2, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_READ(r, p)                      MREAD_8((uint8_t *)p + 2, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE(v, p)                     MWRITE_8((uint8_t *)p + 2, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_L_READ( wv )                    FIELD_GET( wv, 8, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_L_WRITE( v, wv )                FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_READ_G(r, g, idx)                          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 3, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_WRITE_G(v, g, idx)                         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 3, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_READ(r, p)                                 MREAD_8((uint8_t *)p + 3, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_WRITE(v, p)                                MWRITE_8((uint8_t *)p + 3, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_L_READ( wv )                               FIELD_GET( wv, 0, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_L_WRITE( v, wv )                           FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 4, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 4, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_READ(r, p)                            MREAD_32((uint8_t *)p + 4, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 4, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_L_READ( wv )                          FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_L_WRITE( v, wv )                      FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 8, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 8, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_READ(r, p)                          MREAD_32((uint8_t *)p + 8, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 8, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_L_READ( wv )                        FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_L_WRITE( v, wv )                    FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 12, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 12, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_READ(r, p)                          MREAD_32((uint8_t *)p + 12, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 12, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_L_READ( wv )                        FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_L_WRITE( v, wv )                    FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 16, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 16, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_READ(r, p)                          MREAD_32((uint8_t *)p + 16, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 16, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_L_READ( wv )                        FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_L_WRITE( v, wv )                    FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_READ_G(r, g, idx)                   GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 20, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_WRITE_G(v, g, idx)                  GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 20, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_READ(r, p)                          MREAD_16((uint8_t *)p + 20, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_WRITE(v, p)                         MWRITE_16((uint8_t *)p + 20, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_L_READ( wv )                        FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_L_WRITE( v, wv )                    FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_READ_G(r, g, idx)                          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 22, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_WRITE_G(v, g, idx)                         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 22, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_READ(r, p)                                 MREAD_8((uint8_t *)p + 22, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_WRITE(v, p)                                MWRITE_8((uint8_t *)p + 22, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_L_READ( wv )                               FIELD_GET( wv, 8, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_L_WRITE( v, wv )                           FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_READ_G(r, g, idx)                        GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 23, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_WRITE_G(v, g, idx)                       GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 23, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_READ(r, p)                               MREAD_8((uint8_t *)p + 23, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_WRITE(v, p)                              MWRITE_8((uint8_t *)p + 23, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_L_READ( wv )                             FIELD_GET( wv, 0, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_L_WRITE( v, wv )                         FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 24, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 24, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_READ(r, p)                 MREAD_32((uint8_t *)p + 24, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WRITE(v, p)                MWRITE_32((uint8_t *)p + 24, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_L_READ( wv )               FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_L_WRITE( v, wv )           FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 28, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 28, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_READ(r, p)                  MREAD_32((uint8_t *)p + 28, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 28, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 32, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 32, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_READ(r, p)                     MREAD_32((uint8_t *)p + 32, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WRITE(v, p)                    MWRITE_32((uint8_t *)p + 32, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_L_READ( wv )                   FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_L_WRITE( v, wv )               FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 36, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 36, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_READ(r, p)                      MREAD_32((uint8_t *)p + 36, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 36, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_L_READ( wv )                    FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_L_WRITE( v, wv )                FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_READ_G(r, g, idx)                   GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 40, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_WRITE_G(v, g, idx)                  GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 40, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_READ(r, p)                          MREAD_16((uint8_t *)p + 40, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_WRITE(v, p)                         MWRITE_16((uint8_t *)p + 40, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_L_READ( wv )                        FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_L_WRITE( v, wv )                    FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_READ_G(r, g, idx)                       GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 42, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_WRITE_G(v, g, idx)                      GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_DTS) + 42, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_READ(r, p)                              MREAD_16((uint8_t *)p + 42, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_WRITE(v, p)                             MWRITE_16((uint8_t *)p + 42, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_L_READ( wv )                            FIELD_GET( wv, 0, 16 )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_L_WRITE( v, wv )                        FIELD_SET( v, 0, 16, wv )
/* <<<RDD_DHD_TX_POST_DESCRIPTOR_DTS */


#define RDD_DHD_TX_POST_FLOW_RING_BUFFER_SIZE     3
typedef struct
{
	RDD_DHD_TX_POST_DESCRIPTOR_DTS	entry[ RDD_DHD_TX_POST_FLOW_RING_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_POST_FLOW_RING_BUFFER_DTS;

extern uint32_t RDD_DHD_TX_POST_FLOW_RING_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_POST_FLOW_RING_BUFFER_PTR(core_id)	( RDD_DHD_TX_POST_FLOW_RING_BUFFER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_POST_FLOW_RING_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_POST_FLOW_RING_BUFFER */


/* >>>SPDSVC_WLAN_TXPOST_PARAMS_TABLE */

/* >>>RDD_SPDSVC_WLAN_TXPOST_PARAMS_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	spdsvc_free_idx	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	spdsvc_free_idx	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_WLAN_TXPOST_PARAMS_DTS;

typedef RDD_SPDSVC_WLAN_TXPOST_PARAMS_DTS * aligned_RDD_SPDSVC_WLAN_TXPOST_PARAMS_DTS ALIGNMENT8;

#define RDD_SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_SPDSVC_WLAN_TXPOST_PARAMS_DTS), r)
#define RDD_SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_SPDSVC_WLAN_TXPOST_PARAMS_DTS), v)
#define RDD_SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_READ(r, p)                 MREAD_16((uint8_t *)p, r)
#define RDD_SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_WRITE(v, p)                MWRITE_16((uint8_t *)p, v)
/* <<<RDD_SPDSVC_WLAN_TXPOST_PARAMS_DTS */

typedef struct
{
	RDD_SPDSVC_WLAN_TXPOST_PARAMS_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_WLAN_TXPOST_PARAMS_TABLE_DTS;

extern uint32_t RDD_SPDSVC_WLAN_TXPOST_PARAMS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_WLAN_TXPOST_PARAMS_TABLE_PTR(core_id)	( RDD_SPDSVC_WLAN_TXPOST_PARAMS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_WLAN_TXPOST_PARAMS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_WLAN_TXPOST_PARAMS_TABLE */


/* >>>DHD_MCAST_DISPATCHER_CREDIT_TABLE */

#define RDD_DHD_MCAST_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DHD_MCAST_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_MCAST_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_DHD_MCAST_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_MCAST_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_DHD_MCAST_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_MCAST_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_MCAST_DISPATCHER_CREDIT_TABLE */


/* >>>WLAN_MCAST_COPY_SCRATCHPAD */

#define RDD_WLAN_MCAST_COPY_SCRATCHPAD_SIZE     64
typedef struct
{
	RDD_BYTES_8_DTS	entry[ RDD_WLAN_MCAST_COPY_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_COPY_SCRATCHPAD_DTS;

extern uint32_t RDD_WLAN_MCAST_COPY_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WLAN_MCAST_COPY_SCRATCHPAD_PTR(core_id)	( RDD_WLAN_MCAST_COPY_SCRATCHPAD_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WLAN_MCAST_COPY_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<WLAN_MCAST_COPY_SCRATCHPAD */


/* >>>WLAN_MCAST_DHD_STATION_TABLE */

/* >>>RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	mac_address_high	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mac_address_mid 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mac_address_low 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	radio_index     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	valid           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flowring_index  	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	mac_address_mid 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mac_address_high	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flowring_index  	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	valid           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	radio_index     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mac_address_low 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS;

typedef RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS * aligned_RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS fields;
} RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS_NEW;
typedef RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS_NEW * aligned_RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_HIGH_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS), r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS), v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_HIGH_READ(r, p)                 MREAD_16((uint8_t *)p, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_HIGH_WRITE(v, p)                MWRITE_16((uint8_t *)p, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_MID_READ_G(r, g, idx)           GROUP_MREAD_16(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 2, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_MID_WRITE_G(v, g, idx)          GROUP_MWRITE_16(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 2, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_MID_READ(r, p)                  MREAD_16((uint8_t *)p + 2, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_MID_WRITE(v, p)                 MWRITE_16((uint8_t *)p + 2, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_LOW_READ_G(r, g, idx)           GROUP_MREAD_16(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 4, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_16(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 4, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_LOW_READ(r, p)                  MREAD_16((uint8_t *)p + 4, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_MAC_ADDRESS_LOW_WRITE(v, p)                 MWRITE_16((uint8_t *)p + 4, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_RADIO_INDEX_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 6, 6, 2, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_RADIO_INDEX_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 6, 6, 2, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_RADIO_INDEX_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 6, 6, 2, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_RADIO_INDEX_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 6, 6, 2, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_VALID_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 6, 5, 1, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_VALID_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 6, 5, 1, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_VALID_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 6, 5, 1, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_VALID_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 6, 5, 1, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_TX_PRIORITY_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 6, 2, 3, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_TX_PRIORITY_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 6, 2, 3, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_TX_PRIORITY_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 6, 2, 3, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_TX_PRIORITY_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 6, 2, 3, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_FLOWRING_INDEX_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 6, 0, 10, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_FLOWRING_INDEX_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS) + 6, 0, 10, v)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_FLOWRING_INDEX_READ(r, p)                   FIELD_MREAD_16((uint8_t *)p + 6, 0, 10, r)
#define RDD_WLAN_MCAST_DHD_STATION_ENTRY_FLOWRING_INDEX_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)p + 6, 0, 10, v)
/* <<<RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS */


#define RDD_WLAN_MCAST_DHD_STATION_TABLE_SIZE     64
typedef struct
{
	RDD_WLAN_MCAST_DHD_STATION_ENTRY_DTS	entry[ RDD_WLAN_MCAST_DHD_STATION_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_DHD_STATION_TABLE_DTS;

extern uint32_t RDD_WLAN_MCAST_DHD_STATION_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WLAN_MCAST_DHD_STATION_TABLE_PTR(core_id)	( RDD_WLAN_MCAST_DHD_STATION_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WLAN_MCAST_DHD_STATION_TABLE_ADDRESS_ARR[core_id] ))

/* <<<WLAN_MCAST_DHD_STATION_TABLE */


/* >>>DHD_POST_COMMON_RADIO_DATA */

/* >>>RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS */
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_NUMBER	4
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_NUMBER	4
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_NUMBER	4
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER	5
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_NUMBER	16
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED5_NUMBER	1
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED6_NUMBER	6

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_mgmt_fr_base_ptr_low                                                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_mgmt_fr_base_ptr_low                                                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_mgmt_fr_base_ptr_low                                                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_mgmt_fr_base_ptr_high                                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_mgmt_fr_base_ptr_high                                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_mgmt_fr_base_ptr_high                                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_fr_wr_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_fr_wr_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_fr_wr_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_fr_wr_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_fr_wr_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_fr_wr_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_fr_rd_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_fr_rd_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_fr_rd_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_fr_rd_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_fr_rd_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_fr_rd_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	backup_index_fifo_base_low                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_backup_index_fifo_base_low                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_backup_index_fifo_base_low                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	backup_index_fifo_base_high                                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_backup_index_fifo_base_high                                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_backup_index_fifo_base_high                                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	dhd_doorbell_low                                                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_dhd_doorbell_low                                                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_dhd_doorbell_low                                                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 9 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	dhd_doorbell_high                                                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_dhd_doorbell_high                                                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_dhd_doorbell_high                                                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 10 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_wr_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tx_post_rd_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_wr_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tx_post_rd_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_wr_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tx_post_rd_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 11 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	cam_rslt                                                                                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_cam_rslt                                                                                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_cam_rslt                                                                                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	add_llcsnap_header                                                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	aggregation_bypass_cpu_tx                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	aggregation_bypass_non_udp_tcp                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow_ring_format                                                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	idma_active                                                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1                                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	aggregation_bypass_tcp_pktlen                                                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cache_ctx_next_write_idx                                                                                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	backup_cache_idx                                                                                            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_add_llcsnap_header                                                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_aggregation_bypass_cpu_tx                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_aggregation_bypass_non_udp_tcp                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flow_ring_format                                                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_idma_active                                                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved1                                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_aggregation_bypass_tcp_pktlen                                                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cache_ctx_next_write_idx                                                                                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_backup_cache_idx                                                                                            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_add_llcsnap_header                                                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_aggregation_bypass_cpu_tx                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_aggregation_bypass_non_udp_tcp                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flow_ring_format                                                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_idma_active                                                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved1                                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_aggregation_bypass_tcp_pktlen                                                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cache_ctx_next_write_idx                                                                                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_backup_cache_idx                                                                                            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 13 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	per_ac_aggregation_thresholds[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_per_ac_aggregation_thresholds[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_per_ac_aggregation_thresholds[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_NUMBER];
		};
	};
	/* Union WORD 14 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	per_ac_aggregation_timeouts[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_per_ac_aggregation_timeouts[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_per_ac_aggregation_timeouts[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_NUMBER];
		};
	};
	/* Union WORD 15 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	per_ac_aggregation_timeout_cntrs[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_per_ac_aggregation_timeout_cntrs[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_per_ac_aggregation_timeout_cntrs[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_NUMBER];
		};
	};
	/* Union WORD 16 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	scratchpad[RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_scratchpad[RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_scratchpad[RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
		};
	};
	/* Union WORD 17 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 18 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 19 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 20 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 21 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	backup_rd_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	backup_wr_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_backup_rd_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_backup_wr_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_backup_rd_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_backup_wr_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 22 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	packet_valid                                                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_abs_addr                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_data_len                                                                                             	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_prio                                                                                                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2                                                                                                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_l4_protocol                                                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	rsv_address_high                                                                                            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_packet_valid                                                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_abs_addr                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_data_len                                                                                             	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_prio                                                                                                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved2                                                                                                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_l4_protocol                                                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3                                                                                                             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rsv_address_high union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_packet_valid                                                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_abs_addr                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_data_len                                                                                             	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_prio                                                                                                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved2                                                                                                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_l4_protocol                                                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_data_ptr_high                                                                                                  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rsv_address_high union */
		};
	};
	/* Union WORD 23 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	fpm_address_low                                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	packet_fpm_pool                                                                                                       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	packet_packet_sop                                                                                                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	reserved4                                                                                                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	packet_bn0                                                                                                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	packet_data_ptr_low                                                                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
	};
	/* Union WORD 24 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	doorbell_value_address                                                                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_doorbell_value_address                                                                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_doorbell_value_address                                                                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 25 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	request_id                                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_request_id                                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_request_id                                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 26 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	aggr_timer_scratchpad                                                                                       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_msg_done                                                                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	coalescing_max_count                                                                                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_aggr_timer_scratchpad                                                                                       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cpu_msg_done                                                                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_coalescing_max_count                                                                                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_aggr_timer_scratchpad                                                                                       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cpu_msg_done                                                                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_coalescing_max_count                                                                                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 27 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	doorbell_counters[RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_doorbell_counters[RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_doorbell_counters[RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_NUMBER];
		};
	};
	/* Union WORD 28 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 29 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 30 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 31 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	cur_frg_id                                                                                                  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	coalescing_timeout                                                                                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	coalescing_timeout_cntr                                                                                     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint8_t	reserved5[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED5_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_cur_frg_id                                                                                                  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_coalescing_timeout                                                                                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_coalescing_timeout_cntr                                                                                     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint8_t	reserved1_reserved5[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED5_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_cur_frg_id                                                                                                  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_coalescing_timeout                                                                                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_coalescing_timeout_cntr                                                                                     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint8_t	reserved2_reserved5[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED5_NUMBER];
		};
	};
	/* Union WORD 32 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_mirroring_en                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dst_vport                                                                                                   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dst_queue                                                                                                   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint8_t	reserved6[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED6_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_mirroring_en                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_dst_vport                                                                                                   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_dst_queue                                                                                                   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint8_t	reserved1_reserved6[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED6_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_mirroring_en                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_dst_vport                                                                                                   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_dst_queue                                                                                                   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint8_t	reserved2_reserved6[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED6_NUMBER];
		};
	};
	/* Union WORD 33 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_mgmt_fr_base_ptr_low                                                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_mgmt_fr_base_ptr_low                                                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_mgmt_fr_base_ptr_low                                                                                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_mgmt_fr_base_ptr_high                                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_mgmt_fr_base_ptr_high                                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_mgmt_fr_base_ptr_high                                                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_fr_wr_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_fr_wr_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_fr_wr_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_fr_wr_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_fr_wr_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_fr_wr_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_fr_rd_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_fr_rd_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_fr_rd_idx_base_ptr_low                                                                              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_fr_rd_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_fr_rd_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_fr_rd_idx_base_ptr_high                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	backup_index_fifo_base_low                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_backup_index_fifo_base_low                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_backup_index_fifo_base_low                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	backup_index_fifo_base_high                                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_backup_index_fifo_base_high                                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_backup_index_fifo_base_high                                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	dhd_doorbell_low                                                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_dhd_doorbell_low                                                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_dhd_doorbell_low                                                                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 9 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	dhd_doorbell_high                                                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_dhd_doorbell_high                                                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_dhd_doorbell_high                                                                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 10 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tx_post_rd_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tx_post_wr_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tx_post_rd_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tx_post_wr_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tx_post_rd_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tx_post_wr_idx                                                                                              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 11 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	cam_rslt                                                                                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_cam_rslt                                                                                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_cam_rslt                                                                                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	backup_cache_idx                                                                                            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cache_ctx_next_write_idx                                                                                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	aggregation_bypass_tcp_pktlen                                                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1                                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	idma_active                                                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow_ring_format                                                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	aggregation_bypass_non_udp_tcp                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	aggregation_bypass_cpu_tx                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	add_llcsnap_header                                                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_backup_cache_idx                                                                                            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cache_ctx_next_write_idx                                                                                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_aggregation_bypass_tcp_pktlen                                                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved1                                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_idma_active                                                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flow_ring_format                                                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_aggregation_bypass_non_udp_tcp                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_aggregation_bypass_cpu_tx                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_add_llcsnap_header                                                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_backup_cache_idx                                                                                            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cache_ctx_next_write_idx                                                                                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_aggregation_bypass_tcp_pktlen                                                                               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved1                                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_idma_active                                                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flow_ring_format                                                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_aggregation_bypass_non_udp_tcp                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_aggregation_bypass_cpu_tx                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_add_llcsnap_header                                                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 13 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	per_ac_aggregation_thresholds[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_per_ac_aggregation_thresholds[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_per_ac_aggregation_thresholds[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_NUMBER];
		};
	};
	/* Union WORD 14 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	per_ac_aggregation_timeouts[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_per_ac_aggregation_timeouts[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_per_ac_aggregation_timeouts[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_NUMBER];
		};
	};
	/* Union WORD 15 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	per_ac_aggregation_timeout_cntrs[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_per_ac_aggregation_timeout_cntrs[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_per_ac_aggregation_timeout_cntrs[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_NUMBER];
		};
	};
	/* Union WORD 16 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	scratchpad[RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_scratchpad[RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_scratchpad[RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
		};
	};
	/* Union WORD 17 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 18 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 19 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 20 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 21 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	backup_wr_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	backup_rd_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_backup_wr_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_backup_rd_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_backup_wr_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_backup_rd_idx                                                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 22 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	rsv_address_high                                                                                            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	packet_l4_protocol                                                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2                                                                                                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_prio                                                                                                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_data_len                                                                                             	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_abs_addr                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_valid                                                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved3                                                                                                             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rsv_address_high union */
			uint32_t	reserved1_packet_l4_protocol                                                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved2                                                                                                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_prio                                                                                                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_data_len                                                                                             	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_abs_addr                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_valid                                                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	packet_data_ptr_high                                                                                                  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rsv_address_high union */
			uint32_t	reserved2_packet_l4_protocol                                                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved2                                                                                                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_prio                                                                                                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_data_len                                                                                             	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_abs_addr                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_valid                                                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 23 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	fpm_address_low                                                                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	packet_fpm_pool                                                                                                       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	packet_packet_sop                                                                                                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	reserved4                                                                                                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	packet_bn0                                                                                                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	packet_data_ptr_low                                                                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
	};
	/* Union WORD 24 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	doorbell_value_address                                                                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_doorbell_value_address                                                                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_doorbell_value_address                                                                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 25 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	request_id                                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_request_id                                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_request_id                                                                                                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 26 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	coalescing_max_count                                                                                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_msg_done                                                                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	aggr_timer_scratchpad                                                                                       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_coalescing_max_count                                                                                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cpu_msg_done                                                                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_aggr_timer_scratchpad                                                                                       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_coalescing_max_count                                                                                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cpu_msg_done                                                                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_aggr_timer_scratchpad                                                                                       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 27 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	doorbell_counters[RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_doorbell_counters[RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_doorbell_counters[RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_NUMBER];
		};
	};
	/* Union WORD 28 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 29 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 30 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 31 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	reserved5[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED5_NUMBER];
			uint32_t	coalescing_timeout_cntr                                                                                     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	coalescing_timeout                                                                                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cur_frg_id                                                                                                  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_reserved5[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED5_NUMBER];
			uint32_t	reserved1_coalescing_timeout_cntr                                                                                     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_coalescing_timeout                                                                                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cur_frg_id                                                                                                  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_reserved5[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED5_NUMBER];
			uint32_t	reserved2_coalescing_timeout_cntr                                                                                     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_coalescing_timeout                                                                                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cur_frg_id                                                                                                  	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 32 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	reserved6[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED6_NUMBER];
			uint32_t	dst_queue                                                                                                   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dst_vport                                                                                                   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tx_mirroring_en                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_reserved6[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED6_NUMBER];
			uint32_t	reserved1_dst_queue                                                                                                   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_dst_vport                                                                                                   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tx_mirroring_en                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_reserved6[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED6_NUMBER];
			uint32_t	reserved2_dst_queue                                                                                                   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_dst_vport                                                                                                   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tx_mirroring_en                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 33 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS;

typedef RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS * aligned_RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[34];
    uint64_t dword_val64[17];
    RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS fields;
} RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS_NEW;
typedef RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS_NEW * aligned_RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS), r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS), v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_READ(r, p)                     MREAD_32((uint8_t *)p, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_WRITE(v, p)                    MWRITE_32((uint8_t *)p, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 4, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 4, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_READ(r, p)                    MREAD_32((uint8_t *)p + 4, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 4, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 8, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 8, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_READ(r, p)                   MREAD_32((uint8_t *)p + 8, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 8, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 12, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 12, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_READ(r, p)                  MREAD_32((uint8_t *)p + 12, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 12, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 16, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 16, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_READ(r, p)                   MREAD_32((uint8_t *)p + 16, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 16, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 20, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 20, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_READ(r, p)                  MREAD_32((uint8_t *)p + 20, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 20, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 24, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 24, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_READ(r, p)                       MREAD_32((uint8_t *)p + 24, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 24, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 28, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 28, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_READ(r, p)                      MREAD_32((uint8_t *)p + 28, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 28, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_READ_G(r, g, idx)                          GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 32, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WRITE_G(v, g, idx)                         GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 32, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_READ(r, p)                                 MREAD_32((uint8_t *)p + 32, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WRITE(v, p)                                MWRITE_32((uint8_t *)p + 32, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_READ_G(r, g, idx)                         GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 36, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WRITE_G(v, g, idx)                        GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 36, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_READ(r, p)                                MREAD_32((uint8_t *)p + 36, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WRITE(v, p)                               MWRITE_32((uint8_t *)p + 36, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_READ_G(r, g, idx)                            GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 40, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_WRITE_G(v, g, idx)                           GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 40, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_READ(r, p)                                   MREAD_16((uint8_t *)p + 40, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_WRITE(v, p)                                  MWRITE_16((uint8_t *)p + 40, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_READ_G(r, g, idx)                            GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 42, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_WRITE_G(v, g, idx)                           GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 42, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_READ(r, p)                                   MREAD_16((uint8_t *)p + 42, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_WRITE(v, p)                                  MWRITE_16((uint8_t *)p + 42, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_READ_G(r, g, idx)                                  GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 44, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_WRITE_G(v, g, idx)                                 GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 44, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_READ(r, p)                                         MREAD_32((uint8_t *)p + 44, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_WRITE(v, p)                                        MWRITE_32((uint8_t *)p + 44, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 48, 7, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 48, 7, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 48, 7, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 48, 7, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 48, 6, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 48, 6, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 48, 6, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 48, 6, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 48, 5, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 48, 5, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 48, 5, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 48, 5, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 48, 2, 3, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 48, 2, 3, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 48, 2, 3, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 48, 2, 3, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 48, 1, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 48, 1, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)p + 48, 1, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)p + 48, 1, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_READ_G(r, g, idx)             GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 49, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_WRITE_G(v, g, idx)            GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 49, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_READ(r, p)                    MREAD_8((uint8_t *)p + 49, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_WRITE(v, p)                   MWRITE_8((uint8_t *)p + 49, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_READ_G(r, g, idx)                  GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 50, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_WRITE_G(v, g, idx)                 GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 50, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_READ(r, p)                         MREAD_8((uint8_t *)p + 50, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_WRITE(v, p)                        MWRITE_8((uint8_t *)p + 50, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_READ_G(r, g, idx)                          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 51, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_WRITE_G(v, g, idx)                         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 51, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_READ(r, p)                                 MREAD_8((uint8_t *)p + 51, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_WRITE(v, p)                                MWRITE_8((uint8_t *)p + 51, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_READ_G(r, g, idx, i)          GROUP_MREAD_I_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 52, i, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_WRITE_G(v, g, idx, i)         GROUP_MWRITE_I_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 52, i, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_READ(r, p, i)                 MREAD_I_8((uint8_t *)p + 52, i, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_WRITE(v, p, i)                MWRITE_I_8((uint8_t *)p + 52, i, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_READ_G(r, g, idx, i)            GROUP_MREAD_I_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 56, i, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_WRITE_G(v, g, idx, i)           GROUP_MWRITE_I_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 56, i, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_READ(r, p, i)                   MREAD_I_8((uint8_t *)p + 56, i, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_WRITE(v, p, i)                  MWRITE_I_8((uint8_t *)p + 56, i, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 60, i, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 60, i, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_READ(r, p, i)              MREAD_I_8((uint8_t *)p + 60, i, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p + 60, i, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_READ_G(r, g, idx, i)                             GROUP_MREAD_I_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 64, i, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_WRITE_G(v, g, idx, i)                            GROUP_MWRITE_I_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 64, i, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_READ(r, p, i)                                    MREAD_I_32((uint8_t *)p + 64, i, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_WRITE(v, p, i)                                   MWRITE_I_32((uint8_t *)p + 64, i, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_READ_G(r, g, idx)                             GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 84, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_WRITE_G(v, g, idx)                            GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 84, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_READ(r, p)                                    MREAD_16((uint8_t *)p + 84, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_WRITE(v, p)                                   MWRITE_16((uint8_t *)p + 84, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_READ_G(r, g, idx)                             GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 86, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_WRITE_G(v, g, idx)                            GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 86, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_READ(r, p)                                    MREAD_16((uint8_t *)p + 86, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_WRITE(v, p)                                   MWRITE_16((uint8_t *)p + 86, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 88, 7, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 88, 7, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)p + 88, 7, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)p + 88, 7, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 88, 6, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 88, 6, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 88, 6, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 88, 6, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 88, 0, 14, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 88, 0, 14, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_READ(r, p)                                  FIELD_MREAD_16((uint8_t *)p + 88, 0, 14, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_WRITE(v, p)                                 FIELD_MWRITE_16((uint8_t *)p + 88, 0, 14, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 90, 5, 3, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 90, 5, 3, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)p + 90, 5, 3, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)p + 90, 5, 3, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 90, 0, 2, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 90, 0, 2, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 90, 0, 2, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 90, 0, 2, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_READ_G(r, g, idx)                          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 91, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_WRITE_G(v, g, idx)                         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 91, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_READ(r, p)                                 MREAD_8((uint8_t *)p + 91, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_WRITE(v, p)                                MWRITE_8((uint8_t *)p + 91, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_HIGH_READ_G(r, g, idx)                      GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 91, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_HIGH_WRITE_G(v, g, idx)                     GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 91, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_HIGH_READ(r, p)                             MREAD_8((uint8_t *)p + 91, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_HIGH_WRITE(v, p)                            MWRITE_8((uint8_t *)p + 91, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_READ_G(r, g, idx)                           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 92, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_WRITE_G(v, g, idx)                          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 92, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_READ(r, p)                                  MREAD_32((uint8_t *)p + 92, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_WRITE(v, p)                                 MWRITE_32((uint8_t *)p + 92, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_FPM_POOL_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 92, 6, 2, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_FPM_POOL_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 92, 6, 2, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_FPM_POOL_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 92, 6, 2, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_FPM_POOL_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 92, 6, 2, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PACKET_SOP_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 92, 3, 11, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PACKET_SOP_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 92, 3, 11, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PACKET_SOP_READ(r, p)                                FIELD_MREAD_16((uint8_t *)p + 92, 3, 11, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PACKET_SOP_WRITE(v, p)                               FIELD_MWRITE_16((uint8_t *)p + 92, 3, 11, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_BN0_READ_G(r, g, idx)                                GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 94, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_BN0_WRITE_G(v, g, idx)                               GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 94, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_BN0_READ(r, p)                                       MREAD_16((uint8_t *)p + 94, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_BN0_WRITE(v, p)                                      MWRITE_16((uint8_t *)p + 94, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_LOW_READ_G(r, g, idx)                       GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 92, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_LOW_WRITE_G(v, g, idx)                      GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 92, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_LOW_READ(r, p)                              MREAD_32((uint8_t *)p + 92, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_LOW_WRITE(v, p)                             MWRITE_32((uint8_t *)p + 92, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_READ_G(r, g, idx)                    GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 96, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_WRITE_G(v, g, idx)                   GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 96, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_READ(r, p)                           MREAD_32((uint8_t *)p + 96, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_WRITE(v, p)                          MWRITE_32((uint8_t *)p + 96, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_READ_G(r, g, idx)                                GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 100, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_WRITE_G(v, g, idx)                               GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 100, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_READ(r, p)                                       MREAD_32((uint8_t *)p + 100, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_WRITE(v, p)                                      MWRITE_32((uint8_t *)p + 100, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_READ_G(r, g, idx)                     GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 104, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_WRITE_G(v, g, idx)                    GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 104, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_READ(r, p)                            MREAD_16((uint8_t *)p + 104, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_WRITE(v, p)                           MWRITE_16((uint8_t *)p + 104, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_READ_G(r, g, idx)                              GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 106, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_WRITE_G(v, g, idx)                             GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 106, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_READ(r, p)                                     MREAD_8((uint8_t *)p + 106, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_WRITE(v, p)                                    MWRITE_8((uint8_t *)p + 106, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_READ_G(r, g, idx)                      GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 107, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_WRITE_G(v, g, idx)                     GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 107, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_READ(r, p)                             MREAD_8((uint8_t *)p + 107, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_WRITE(v, p)                            MWRITE_8((uint8_t *)p + 107, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_READ_G(r, g, idx, i)                      GROUP_MREAD_I_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 108, i, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_WRITE_G(v, g, idx, i)                     GROUP_MWRITE_I_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 108, i, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_READ(r, p, i)                             MREAD_I_8((uint8_t *)p + 108, i, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_WRITE(v, p, i)                            MWRITE_I_8((uint8_t *)p + 108, i, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_READ_G(r, g, idx)                                GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 124, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_WRITE_G(v, g, idx)                               GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 124, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_READ(r, p)                                       MREAD_8((uint8_t *)p + 124, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_WRITE(v, p)                                      MWRITE_8((uint8_t *)p + 124, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_READ_G(r, g, idx)                        GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 125, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_WRITE_G(v, g, idx)                       GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 125, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_READ(r, p)                               MREAD_8((uint8_t *)p + 125, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_WRITE(v, p)                              MWRITE_8((uint8_t *)p + 125, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_READ_G(r, g, idx)                   GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 126, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_WRITE_G(v, g, idx)                  GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 126, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_READ(r, p)                          MREAD_8((uint8_t *)p + 126, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_WRITE(v, p)                         MWRITE_8((uint8_t *)p + 126, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 128, 7, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 128, 7, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 128, 7, 1, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 128, 7, 1, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 128, 1, 6, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 128, 1, 6, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_READ(r, p)                                        FIELD_MREAD_8((uint8_t *)p + 128, 1, 6, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_WRITE(v, p)                                       FIELD_MWRITE_8((uint8_t *)p + 128, 1, 6, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 128, 0, 9, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS) + 128, 0, 9, v)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_READ(r, p)                                        FIELD_MREAD_16((uint8_t *)p + 128, 0, 9, r)
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_WRITE(v, p)                                       FIELD_MWRITE_16((uint8_t *)p + 128, 0, 9, v)
/* <<<RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS */


#define RDD_DHD_POST_COMMON_RADIO_DATA_SIZE     3
typedef struct
{
	RDD_DHD_POST_COMMON_RADIO_ENTRY_DTS	entry[ RDD_DHD_POST_COMMON_RADIO_DATA_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_POST_COMMON_RADIO_DATA_DTS;

extern uint32_t RDD_DHD_POST_COMMON_RADIO_DATA_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_POST_COMMON_RADIO_DATA_PTR(core_id)	( RDD_DHD_POST_COMMON_RADIO_DATA_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_POST_COMMON_RADIO_DATA_ADDRESS_ARR[core_id] ))

/* <<<DHD_POST_COMMON_RADIO_DATA */


/* >>>DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR */
typedef struct
{
	RDD_DDR_ADDRESS_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_DTS;

extern uint32_t RDD_DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_PTR(core_id)	( RDD_DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[core_id] ))

/* <<<DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR */


/* >>>WLAN_MCAST_DHD_STATION_CTX_TABLE */

/* >>>RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	reserved0 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	ssid      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint8_t	ssid      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved0 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_DTS;

typedef RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_DTS * aligned_RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_DTS ALIGNMENT8;

#define RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_SSID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_DTS), 0, 4, r)
#define RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_SSID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_DTS), 0, 4, v)
#define RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_SSID_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 0, 4, r)
#define RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_SSID_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 0, 4, v)
/* <<<RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_DTS */


#define RDD_WLAN_MCAST_DHD_STATION_CTX_TABLE_SIZE     64
typedef struct
{
	RDD_WLAN_MCAST_DHD_STATION_CTX_ENTRY_DTS	entry[ RDD_WLAN_MCAST_DHD_STATION_CTX_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_DHD_STATION_CTX_TABLE_DTS;

extern uint32_t RDD_WLAN_MCAST_DHD_STATION_CTX_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WLAN_MCAST_DHD_STATION_CTX_TABLE_PTR(core_id)	( RDD_WLAN_MCAST_DHD_STATION_CTX_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WLAN_MCAST_DHD_STATION_CTX_TABLE_ADDRESS_ARR[core_id] ))

/* <<<WLAN_MCAST_DHD_STATION_CTX_TABLE */


/* >>>DHD_BACKUP_INFO_CACHE_TABLE */

/* >>>RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	backup_first_index	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	backup_last_index 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	backup_num_entries	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	phy_size          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	backup_last_index 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	backup_first_index	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	phy_size          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	backup_num_entries	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS;

typedef RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS * aligned_RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS fields;
} RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS_NEW;
typedef RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS_NEW * aligned_RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS), r)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS), v)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_READ(r, p)                 MREAD_16((uint8_t *)p, r)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_WRITE(v, p)                MWRITE_16((uint8_t *)p, v)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_L_READ( wv )               FIELD_GET( wv, 16, 16 )
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_L_WRITE( v, wv )           FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_READ_G(r, g, idx)           GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS) + 2, r)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_WRITE_G(v, g, idx)          GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS) + 2, v)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_READ(r, p)                  MREAD_16((uint8_t *)p + 2, r)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_WRITE(v, p)                 MWRITE_16((uint8_t *)p + 2, v)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_L_READ( wv )                FIELD_GET( wv, 0, 16 )
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_L_WRITE( v, wv )            FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS) + 4, r)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS) + 4, v)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_READ(r, p)                 MREAD_16((uint8_t *)p + 4, r)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_WRITE(v, p)                MWRITE_16((uint8_t *)p + 4, v)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_L_READ( wv )               FIELD_GET( wv, 16, 16 )
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_L_WRITE( v, wv )           FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_PHY_SIZE_READ_G(r, g, idx)                    GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS) + 6, r)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_PHY_SIZE_WRITE_G(v, g, idx)                   GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS) + 6, v)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_PHY_SIZE_READ(r, p)                           MREAD_16((uint8_t *)p + 6, r)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_PHY_SIZE_WRITE(v, p)                          MWRITE_16((uint8_t *)p + 6, v)
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_PHY_SIZE_L_READ( wv )                         FIELD_GET( wv, 0, 16 )
#define RDD_DHD_BACKUP_INFO_CACHE_ENTRY_PHY_SIZE_L_WRITE( v, wv )                     FIELD_SET( v, 0, 16, wv )
/* <<<RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS */


#define RDD_DHD_BACKUP_INFO_CACHE_TABLE_SIZE     48
typedef struct
{
	RDD_DHD_BACKUP_INFO_CACHE_ENTRY_DTS	entry[ RDD_DHD_BACKUP_INFO_CACHE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_BACKUP_INFO_CACHE_TABLE_DTS;

extern uint32_t RDD_DHD_BACKUP_INFO_CACHE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_BACKUP_INFO_CACHE_TABLE_PTR(core_id)	( RDD_DHD_BACKUP_INFO_CACHE_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_BACKUP_INFO_CACHE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_BACKUP_INFO_CACHE_TABLE */


/* >>>WLAN_MCAST_SSID_MAC_ADDRESS_TABLE */

/* >>>RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	mac_address_high	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mac_address_low 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reference_count 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	mac_address_high	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reference_count 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mac_address_low 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS;

typedef RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS * aligned_RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS fields;
} RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS_NEW;
typedef RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS_NEW * aligned_RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_MAC_ADDRESS_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS), r)
#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_MAC_ADDRESS_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS), v)
#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_MAC_ADDRESS_HIGH_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_MAC_ADDRESS_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_MAC_ADDRESS_LOW_READ_G(r, g, idx)           GROUP_MREAD_16(g, idx*sizeof(RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS) + 4, r)
#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_MAC_ADDRESS_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_16(g, idx*sizeof(RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS) + 4, v)
#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_MAC_ADDRESS_LOW_READ(r, p)                  MREAD_16((uint8_t *)p + 4, r)
#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_MAC_ADDRESS_LOW_WRITE(v, p)                 MWRITE_16((uint8_t *)p + 4, v)
#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_REFERENCE_COUNT_READ_G(r, g, idx)           GROUP_MREAD_8(g, idx*sizeof(RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS) + 6, r)
#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_REFERENCE_COUNT_WRITE_G(v, g, idx)          GROUP_MWRITE_8(g, idx*sizeof(RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS) + 6, v)
#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_REFERENCE_COUNT_READ(r, p)                  MREAD_8((uint8_t *)p + 6, r)
#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_REFERENCE_COUNT_WRITE(v, p)                 MWRITE_8((uint8_t *)p + 6, v)
/* <<<RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS */


#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_TABLE_SIZE     48
typedef struct
{
	RDD_WLAN_MCAST_SSID_MAC_ADDRESS_ENTRY_DTS	entry[ RDD_WLAN_MCAST_SSID_MAC_ADDRESS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_SSID_MAC_ADDRESS_TABLE_DTS;

extern uint32_t RDD_WLAN_MCAST_SSID_MAC_ADDRESS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WLAN_MCAST_SSID_MAC_ADDRESS_TABLE_PTR(core_id)	( RDD_WLAN_MCAST_SSID_MAC_ADDRESS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WLAN_MCAST_SSID_MAC_ADDRESS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<WLAN_MCAST_SSID_MAC_ADDRESS_TABLE */


/* >>>WLAN_MCAST_DFT_LIST_SIZE */

#define RDD_WLAN_MCAST_DFT_LIST_SIZE_SIZE     64
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_WLAN_MCAST_DFT_LIST_SIZE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_DFT_LIST_SIZE_DTS;

extern uint32_t RDD_WLAN_MCAST_DFT_LIST_SIZE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WLAN_MCAST_DFT_LIST_SIZE_PTR(core_id)	( RDD_WLAN_MCAST_DFT_LIST_SIZE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WLAN_MCAST_DFT_LIST_SIZE_ADDRESS_ARR[core_id] ))

/* <<<WLAN_MCAST_DFT_LIST_SIZE */


/* >>>WLAN_MCAST_DFT_LIST_ENTRY_SCRATCH */

#define RDD_WLAN_MCAST_DFT_LIST_ENTRY_SCRATCH_SIZE     64
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_WLAN_MCAST_DFT_LIST_ENTRY_SCRATCH_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_DFT_LIST_ENTRY_SCRATCH_DTS;

extern uint32_t RDD_WLAN_MCAST_DFT_LIST_ENTRY_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WLAN_MCAST_DFT_LIST_ENTRY_SCRATCH_PTR(core_id)	( RDD_WLAN_MCAST_DFT_LIST_ENTRY_SCRATCH_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WLAN_MCAST_DFT_LIST_ENTRY_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<WLAN_MCAST_DFT_LIST_ENTRY_SCRATCH */


/* >>>DHD_BACKUP_BASE_ADDR */
typedef struct
{
	RDD_BYTES_8_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_BACKUP_BASE_ADDR_DTS;

extern uint32_t RDD_DHD_BACKUP_BASE_ADDR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_BACKUP_BASE_ADDR_PTR(core_id)	( RDD_DHD_BACKUP_BASE_ADDR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_BACKUP_BASE_ADDR_ADDRESS_ARR[core_id] ))

/* <<<DHD_BACKUP_BASE_ADDR */


/* >>>WLAN_MCAST_DFT_ADDR */

/* >>>RDD_PHYS_ADDR_64_PTR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	low       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	high      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	low       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	high      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PHYS_ADDR_64_PTR_DTS;

typedef RDD_PHYS_ADDR_64_PTR_DTS * aligned_RDD_PHYS_ADDR_64_PTR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_PHYS_ADDR_64_PTR_DTS fields;
} RDD_PHYS_ADDR_64_PTR_DTS_NEW;
typedef RDD_PHYS_ADDR_64_PTR_DTS_NEW * aligned_RDD_PHYS_ADDR_64_PTR_DTS_NEW ALIGNMENT8;

#define RDD_PHYS_ADDR_64_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_PHYS_ADDR_64_PTR_DTS), r)
#define RDD_PHYS_ADDR_64_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_PHYS_ADDR_64_PTR_DTS), v)
#define RDD_PHYS_ADDR_64_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)p, r)
#define RDD_PHYS_ADDR_64_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p, v)
#define RDD_PHYS_ADDR_64_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_PHYS_ADDR_64_PTR_DTS) + 4, r)
#define RDD_PHYS_ADDR_64_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_PHYS_ADDR_64_PTR_DTS) + 4, v)
#define RDD_PHYS_ADDR_64_PTR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_PHYS_ADDR_64_PTR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_PHYS_ADDR_64_PTR_DTS */

typedef struct
{
	RDD_PHYS_ADDR_64_PTR_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_DFT_ADDR_DTS;

extern uint32_t RDD_WLAN_MCAST_DFT_ADDR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WLAN_MCAST_DFT_ADDR_PTR(core_id)	( RDD_WLAN_MCAST_DFT_ADDR_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WLAN_MCAST_DFT_ADDR_ADDRESS_ARR[core_id] ))

/* <<<WLAN_MCAST_DFT_ADDR */


/* >>>DHD_TX_POST_PD_FIFO_TABLE */

#define RDD_DHD_TX_POST_PD_FIFO_TABLE_SIZE     12
typedef struct
{
	RDD_PROCESSING_TX_DESCRIPTOR_DTS	entry[ RDD_DHD_TX_POST_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_POST_PD_FIFO_TABLE_DTS;

extern uint32_t RDD_DHD_TX_POST_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_POST_PD_FIFO_TABLE_PTR(core_id)	( RDD_DHD_TX_POST_PD_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_POST_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_POST_PD_FIFO_TABLE */


/* >>>WLAN_MCAST_SCRATCHPAD */

#define RDD_WLAN_MCAST_SCRATCHPAD_SIZE     5
typedef struct
{
	RDD_BYTES_8_DTS	entry[ RDD_WLAN_MCAST_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_WLAN_MCAST_SCRATCHPAD_DTS;

extern uint32_t RDD_WLAN_MCAST_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WLAN_MCAST_SCRATCHPAD_PTR(core_id)	( RDD_WLAN_MCAST_SCRATCHPAD_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WLAN_MCAST_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<WLAN_MCAST_SCRATCHPAD */


/* >>>DHD_MIRRORING_DISPATCHER_CREDIT_TABLE */
typedef struct
{
	RDD_BYTES_4_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_MIRRORING_DISPATCHER_CREDIT_TABLE */


/* >>>DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE */

#define RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_SIZE     3
typedef struct
{
	RDD_CPU_RING_DESCRIPTOR_DTS	entry[ RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_DTS;

extern uint32_t RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_PTR(core_id)	( RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE */


/* >>>DHD_FLOW_RING_CACHE_LKP_TABLE */

/* >>>RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	invalid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	reserved    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	flow_ring_id	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	flow_ring_id	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	reserved    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	invalid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_DTS;

typedef RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_DTS * aligned_RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_DTS ALIGNMENT8;

#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_DTS), 7, 1, r)
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_DTS), 7, 1, v)
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_L_READ( wv )                    FIELD_GET( wv, 15, 1 )
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_L_WRITE( v, wv )                FIELD_SET( v, 15, 1, wv )
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_DTS), 0, 10, r)
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_DTS), 0, 10, v)
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p, 0, 10, r)
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p, 0, 10, v)
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_L_READ( wv )               FIELD_GET( wv, 0, 10 )
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_L_WRITE( v, wv )           FIELD_SET( v, 0, 10, wv )
/* <<<RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_DTS */


#define RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_SIZE     48
typedef struct
{
	RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_DTS	entry[ RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_DTS;

extern uint32_t RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_PTR(core_id)	( RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_FLOW_RING_CACHE_LKP_TABLE */


/* >>>DHD_TX_POST_UPDATE_FIFO_TABLE */

#define RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	RDD_UPDATE_FIFO_ENTRY_DTS	entry[ RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_DTS;

extern uint32_t RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_PTR(core_id)	( RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_POST_UPDATE_FIFO_TABLE */


/* >>>DHD_MCAST_UPDATE_FIFO_TABLE */

#define RDD_DHD_MCAST_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	RDD_UPDATE_FIFO_ENTRY_DTS	entry[ RDD_DHD_MCAST_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_MCAST_UPDATE_FIFO_TABLE_DTS;

extern uint32_t RDD_DHD_MCAST_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_MCAST_UPDATE_FIFO_TABLE_PTR(core_id)	( RDD_DHD_MCAST_UPDATE_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_MCAST_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_MCAST_UPDATE_FIFO_TABLE */


/* >>>DHD_MCAST_PD_FIFO_TABLE */

#define RDD_DHD_MCAST_PD_FIFO_TABLE_SIZE     2
typedef struct
{
	RDD_PROCESSING_TX_DESCRIPTOR_DTS	entry[ RDD_DHD_MCAST_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_MCAST_PD_FIFO_TABLE_DTS;

extern uint32_t RDD_DHD_MCAST_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_MCAST_PD_FIFO_TABLE_PTR(core_id)	( RDD_DHD_MCAST_PD_FIFO_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_MCAST_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_MCAST_PD_FIFO_TABLE */


/* >>>DHD_DOORBELL_TX_POST_VALUE */

/* >>>RDD_DHD_DOORBELL_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	doorbell_value	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	value                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	dma_type               	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
			uint32_t	frg_id                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
			uint32_t	reg_index_num          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
			uint32_t	index_val              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	doorbell_value	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	value                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	dma_type               	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
			uint32_t	frg_id                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
			uint32_t	reg_index_num          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
			uint32_t	index_val              	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_DOORBELL_DTS;

typedef RDD_DHD_DOORBELL_DTS * aligned_RDD_DHD_DOORBELL_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_DHD_DOORBELL_DTS fields;
} RDD_DHD_DOORBELL_DTS_NEW;
typedef RDD_DHD_DOORBELL_DTS_NEW * aligned_RDD_DHD_DOORBELL_DTS_NEW ALIGNMENT8;

#define RDD_DHD_DOORBELL_DOORBELL_VALUE_READ_G(r, g, idx)         GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_DOORBELL_DTS), r)
#define RDD_DHD_DOORBELL_DOORBELL_VALUE_WRITE_G(v, g, idx)        GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_DOORBELL_DTS), v)
#define RDD_DHD_DOORBELL_DOORBELL_VALUE_READ(r, p)                MREAD_32((uint8_t *)p, r)
#define RDD_DHD_DOORBELL_DOORBELL_VALUE_WRITE(v, p)               MWRITE_32((uint8_t *)p, v)
#define RDD_DHD_DOORBELL_DOORBELL_VALUE_L_READ( wv )              FIELD_GET( wv, 0, 32 )
#define RDD_DHD_DOORBELL_DOORBELL_VALUE_L_WRITE( v, wv )          FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_DOORBELL_VALUE_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_DOORBELL_DTS), r)
#define RDD_DHD_DOORBELL_VALUE_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_DOORBELL_DTS), v)
#define RDD_DHD_DOORBELL_VALUE_READ(r, p)                         MREAD_32((uint8_t *)p, r)
#define RDD_DHD_DOORBELL_VALUE_WRITE(v, p)                        MWRITE_32((uint8_t *)p, v)
#define RDD_DHD_DOORBELL_VALUE_L_READ( wv )                       FIELD_GET( wv, 0, 32 )
#define RDD_DHD_DOORBELL_VALUE_L_WRITE( v, wv )                   FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_DOORBELL_DMA_TYPE_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_DOORBELL_DTS), 4, 4, r)
#define RDD_DHD_DOORBELL_DMA_TYPE_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_DOORBELL_DTS), 4, 4, v)
#define RDD_DHD_DOORBELL_DMA_TYPE_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 4, 4, r)
#define RDD_DHD_DOORBELL_DMA_TYPE_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 4, 4, v)
#define RDD_DHD_DOORBELL_DMA_TYPE_L_READ( wv )                    FIELD_GET( wv, 28, 4 )
#define RDD_DHD_DOORBELL_DMA_TYPE_L_WRITE( v, wv )                FIELD_SET( v, 28, 4, wv )
#define RDD_DHD_DOORBELL_FRG_ID_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_DOORBELL_DTS), 0, 4, r)
#define RDD_DHD_DOORBELL_FRG_ID_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_DOORBELL_DTS), 0, 4, v)
#define RDD_DHD_DOORBELL_FRG_ID_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 0, 4, r)
#define RDD_DHD_DOORBELL_FRG_ID_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 0, 4, v)
#define RDD_DHD_DOORBELL_FRG_ID_L_READ( wv )                      FIELD_GET( wv, 24, 4 )
#define RDD_DHD_DOORBELL_FRG_ID_L_WRITE( v, wv )                  FIELD_SET( v, 24, 4, wv )
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_DOORBELL_DTS) + 1, r)
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_DOORBELL_DTS) + 1, v)
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_READ(r, p)                 MREAD_8((uint8_t *)p + 1, r)
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_WRITE(v, p)                MWRITE_8((uint8_t *)p + 1, v)
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_L_READ( wv )               FIELD_GET( wv, 16, 8 )
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_L_WRITE( v, wv )           FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_DOORBELL_INDEX_VAL_READ_G(r, g, idx)              GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_DOORBELL_DTS) + 2, r)
#define RDD_DHD_DOORBELL_INDEX_VAL_WRITE_G(v, g, idx)             GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_DOORBELL_DTS) + 2, v)
#define RDD_DHD_DOORBELL_INDEX_VAL_READ(r, p)                     MREAD_16((uint8_t *)p + 2, r)
#define RDD_DHD_DOORBELL_INDEX_VAL_WRITE(v, p)                    MWRITE_16((uint8_t *)p + 2, v)
#define RDD_DHD_DOORBELL_INDEX_VAL_L_READ( wv )                   FIELD_GET( wv, 0, 16 )
#define RDD_DHD_DOORBELL_INDEX_VAL_L_WRITE( v, wv )               FIELD_SET( v, 0, 16, wv )
/* <<<RDD_DHD_DOORBELL_DTS */


#define RDD_DHD_DOORBELL_TX_POST_VALUE_SIZE     16
typedef struct
{
	RDD_DHD_DOORBELL_DTS	entry[ RDD_DHD_DOORBELL_TX_POST_VALUE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_DOORBELL_TX_POST_VALUE_DTS;

extern uint32_t RDD_DHD_DOORBELL_TX_POST_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_DOORBELL_TX_POST_VALUE_PTR(core_id)	( RDD_DHD_DOORBELL_TX_POST_VALUE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_DOORBELL_TX_POST_VALUE_ADDRESS_ARR[core_id] ))

/* <<<DHD_DOORBELL_TX_POST_VALUE */

/* CORE_5 */

/* >>>DHD_RX_COMPLETE_FLOW_RING_BUFFER */

/* >>>RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	msg_type            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	common_hdr_flags    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	epoch               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	request_id          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	compl_msg_hdr_status	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_id        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	meta_buf_len        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_len            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_offset         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flags               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_status_0         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_status_1         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dma_done_mark       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	epoch               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	common_hdr_flags    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	msg_type            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	request_id          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_id        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	compl_msg_hdr_status	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_len            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	meta_buf_len        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flags               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_offset         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_status_0         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_status_1         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dma_done_mark       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS;

typedef RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS * aligned_RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[8];
    uint64_t dword_val64[4];
    RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS fields;
} RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS_NEW;
typedef RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS_NEW * aligned_RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_READ_G(r, g, idx)                      GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS), r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_WRITE_G(v, g, idx)                     GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS), v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_READ(r, p)                             MREAD_8((uint8_t *)p, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_WRITE(v, p)                            MWRITE_8((uint8_t *)p, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_L_READ( wv )                           FIELD_GET( wv, 24, 8 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_L_WRITE( v, wv )                       FIELD_SET( v, 24, 8, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_READ_G(r, g, idx)                         GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 1, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_WRITE_G(v, g, idx)                        GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 1, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_READ(r, p)                                MREAD_8((uint8_t *)p + 1, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_WRITE(v, p)                               MWRITE_8((uint8_t *)p + 1, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_L_READ( wv )                              FIELD_GET( wv, 16, 8 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_L_WRITE( v, wv )                          FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_READ_G(r, g, idx)              GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 2, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE_G(v, g, idx)             GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 2, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_READ(r, p)                     MREAD_8((uint8_t *)p + 2, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE(v, p)                    MWRITE_8((uint8_t *)p + 2, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_L_READ( wv )                   FIELD_GET( wv, 8, 8 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_L_WRITE( v, wv )               FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_READ_G(r, g, idx)                         GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 3, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_WRITE_G(v, g, idx)                        GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 3, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_READ(r, p)                                MREAD_8((uint8_t *)p + 3, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_WRITE(v, p)                               MWRITE_8((uint8_t *)p + 3, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_L_READ( wv )                              FIELD_GET( wv, 0, 8 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_L_WRITE( v, wv )                          FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_READ_G(r, g, idx)                    GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 4, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_WRITE_G(v, g, idx)                   GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 4, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_READ(r, p)                           MREAD_32((uint8_t *)p + 4, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_WRITE(v, p)                          MWRITE_32((uint8_t *)p + 4, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_L_READ( wv )                         FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_L_WRITE( v, wv )                     FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 8, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 8, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_READ(r, p)                 MREAD_16((uint8_t *)p + 8, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_WRITE(v, p)                MWRITE_16((uint8_t *)p + 8, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_L_READ( wv )               FIELD_GET( wv, 16, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_L_WRITE( v, wv )           FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_READ_G(r, g, idx)                  GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 10, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WRITE_G(v, g, idx)                 GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 10, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_READ(r, p)                         MREAD_16((uint8_t *)p + 10, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WRITE(v, p)                        MWRITE_16((uint8_t *)p + 10, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_L_READ( wv )                       FIELD_GET( wv, 0, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_L_WRITE( v, wv )                   FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_READ_G(r, g, idx)                  GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 12, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_WRITE_G(v, g, idx)                 GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 12, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_READ(r, p)                         MREAD_16((uint8_t *)p + 12, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_WRITE(v, p)                        MWRITE_16((uint8_t *)p + 12, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_L_READ( wv )                       FIELD_GET( wv, 16, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_L_WRITE( v, wv )                   FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_READ_G(r, g, idx)                      GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 14, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_WRITE_G(v, g, idx)                     GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 14, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_READ(r, p)                             MREAD_16((uint8_t *)p + 14, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_WRITE(v, p)                            MWRITE_16((uint8_t *)p + 14, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_L_READ( wv )                           FIELD_GET( wv, 0, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_L_WRITE( v, wv )                       FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_READ_G(r, g, idx)                   GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 16, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_WRITE_G(v, g, idx)                  GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 16, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_READ(r, p)                          MREAD_16((uint8_t *)p + 16, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_WRITE(v, p)                         MWRITE_16((uint8_t *)p + 16, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_L_READ( wv )                        FIELD_GET( wv, 16, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_L_WRITE( v, wv )                    FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_READ_G(r, g, idx)                         GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 18, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_WRITE_G(v, g, idx)                        GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 18, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_READ(r, p)                                MREAD_16((uint8_t *)p + 18, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_WRITE(v, p)                               MWRITE_16((uint8_t *)p + 18, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_L_READ( wv )                              FIELD_GET( wv, 0, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_L_WRITE( v, wv )                          FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 20, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 20, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_READ(r, p)                          MREAD_32((uint8_t *)p + 20, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 20, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_L_READ( wv )                        FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_L_WRITE( v, wv )                    FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 24, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 24, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_READ(r, p)                          MREAD_32((uint8_t *)p + 24, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 24, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_L_READ( wv )                        FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_L_WRITE( v, wv )                    FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_READ_G(r, g, idx)                 GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 28, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WRITE_G(v, g, idx)                GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS) + 28, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_READ(r, p)                        MREAD_32((uint8_t *)p + 28, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WRITE(v, p)                       MWRITE_32((uint8_t *)p + 28, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_L_READ( wv )                      FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_L_WRITE( v, wv )                  FIELD_SET( v, 0, 32, wv )
/* <<<RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS */


#define RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_SIZE     3
typedef struct
{
	RDD_DHD_RX_COMPLETE_DESCRIPTOR_DTS	entry[ RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_DTS;

extern uint32_t RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_PTR(core_id)	( RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_COMPLETE_FLOW_RING_BUFFER */


/* >>>DHD_RX_POST_FLOW_RING_BUFFER */

/* >>>RDD_DHD_RX_POST_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	msg_type             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	common_hdr_flags     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	epoch                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	request_id           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	meta_buf_len         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_len             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	metadata_buf_addr_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	metadata_buf_addr_hi 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_low    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_hi     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	epoch                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	common_hdr_flags     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	msg_type             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	request_id           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_len             	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	meta_buf_len         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	metadata_buf_addr_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	metadata_buf_addr_hi 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_low    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_hi     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RX_POST_DESCRIPTOR_DTS;

typedef RDD_DHD_RX_POST_DESCRIPTOR_DTS * aligned_RDD_DHD_RX_POST_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[8];
    uint64_t dword_val64[4];
    RDD_DHD_RX_POST_DESCRIPTOR_DTS fields;
} RDD_DHD_RX_POST_DESCRIPTOR_DTS_NEW;
typedef RDD_DHD_RX_POST_DESCRIPTOR_DTS_NEW * aligned_RDD_DHD_RX_POST_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_READ_G(r, g, idx)                       GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS), r)
#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_WRITE_G(v, g, idx)                      GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS), v)
#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_READ(r, p)                              MREAD_8((uint8_t *)p, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_WRITE(v, p)                             MWRITE_8((uint8_t *)p, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_L_READ( wv )                            FIELD_GET( wv, 24, 8 )
#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_L_WRITE( v, wv )                        FIELD_SET( v, 24, 8, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_READ_G(r, g, idx)                          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 1, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_WRITE_G(v, g, idx)                         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 1, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_READ(r, p)                                 MREAD_8((uint8_t *)p + 1, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_WRITE(v, p)                                MWRITE_8((uint8_t *)p + 1, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_L_READ( wv )                               FIELD_GET( wv, 16, 8 )
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_L_WRITE( v, wv )                           FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_READ_G(r, g, idx)               GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 2, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE_G(v, g, idx)              GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 2, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_READ(r, p)                      MREAD_8((uint8_t *)p + 2, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE(v, p)                     MWRITE_8((uint8_t *)p + 2, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_L_READ( wv )                    FIELD_GET( wv, 8, 8 )
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_L_WRITE( v, wv )                FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_READ_G(r, g, idx)                          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 3, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_WRITE_G(v, g, idx)                         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 3, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_READ(r, p)                                 MREAD_8((uint8_t *)p + 3, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_WRITE(v, p)                                MWRITE_8((uint8_t *)p + 3, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_L_READ( wv )                               FIELD_GET( wv, 0, 8 )
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_L_WRITE( v, wv )                           FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 4, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 4, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_READ(r, p)                            MREAD_32((uint8_t *)p + 4, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 4, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_L_READ( wv )                          FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_L_WRITE( v, wv )                      FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_READ_G(r, g, idx)                   GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 8, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_WRITE_G(v, g, idx)                  GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 8, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_READ(r, p)                          MREAD_16((uint8_t *)p + 8, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_WRITE(v, p)                         MWRITE_16((uint8_t *)p + 8, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_L_READ( wv )                        FIELD_GET( wv, 16, 16 )
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_L_WRITE( v, wv )                    FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_READ_G(r, g, idx)                       GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 10, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_WRITE_G(v, g, idx)                      GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 10, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_READ(r, p)                              MREAD_16((uint8_t *)p + 10, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_WRITE(v, p)                             MWRITE_16((uint8_t *)p + 10, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_L_READ( wv )                            FIELD_GET( wv, 0, 16 )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_L_WRITE( v, wv )                        FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 16, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 16, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_READ(r, p)                 MREAD_32((uint8_t *)p + 16, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WRITE(v, p)                MWRITE_32((uint8_t *)p + 16, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_L_READ( wv )               FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_L_WRITE( v, wv )           FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 20, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 20, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_READ(r, p)                  MREAD_32((uint8_t *)p + 20, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 20, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 24, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 24, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_READ(r, p)                     MREAD_32((uint8_t *)p + 24, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WRITE(v, p)                    MWRITE_32((uint8_t *)p + 24, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_L_READ( wv )                   FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_L_WRITE( v, wv )               FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 28, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_DTS) + 28, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_READ(r, p)                      MREAD_32((uint8_t *)p + 28, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 28, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_L_READ( wv )                    FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_L_WRITE( v, wv )                FIELD_SET( v, 0, 32, wv )
/* <<<RDD_DHD_RX_POST_DESCRIPTOR_DTS */


#define RDD_DHD_RX_POST_FLOW_RING_BUFFER_SIZE     3
typedef struct
{
	RDD_DHD_RX_POST_DESCRIPTOR_DTS	entry[ RDD_DHD_RX_POST_FLOW_RING_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RX_POST_FLOW_RING_BUFFER_DTS;

extern uint32_t RDD_DHD_RX_POST_FLOW_RING_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_POST_FLOW_RING_BUFFER_PTR(core_id)	( RDD_DHD_RX_POST_FLOW_RING_BUFFER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_POST_FLOW_RING_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_POST_FLOW_RING_BUFFER */


/* >>>DHD_TX_COMPLETE_FLOW_RING_BUFFER */

/* >>>RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	msg_type        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	common_hdr_flags	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	epoch           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	request_id      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	status          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_id    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dma_done_mark   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	epoch           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	common_hdr_flags	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	msg_type        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	request_id      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_id    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	status          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dma_done_mark   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS;

typedef RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS * aligned_RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS fields;
} RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS_NEW;
typedef RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS_NEW * aligned_RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_READ_G(r, g, idx)                  GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS), r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_WRITE_G(v, g, idx)                 GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS), v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_READ(r, p)                         MREAD_8((uint8_t *)p, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_WRITE(v, p)                        MWRITE_8((uint8_t *)p, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_L_READ( wv )                       FIELD_GET( wv, 24, 8 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_L_WRITE( v, wv )                   FIELD_SET( v, 24, 8, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_READ_G(r, g, idx)                     GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 1, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_WRITE_G(v, g, idx)                    GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 1, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_READ(r, p)                            MREAD_8((uint8_t *)p + 1, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_WRITE(v, p)                           MWRITE_8((uint8_t *)p + 1, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_L_READ( wv )                          FIELD_GET( wv, 16, 8 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_L_WRITE( v, wv )                      FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 2, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 2, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_READ(r, p)                 MREAD_8((uint8_t *)p + 2, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE(v, p)                MWRITE_8((uint8_t *)p + 2, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_L_READ( wv )               FIELD_GET( wv, 8, 8 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_L_WRITE( v, wv )           FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_READ_G(r, g, idx)                     GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 3, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_WRITE_G(v, g, idx)                    GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 3, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_READ(r, p)                            MREAD_8((uint8_t *)p + 3, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_WRITE(v, p)                           MWRITE_8((uint8_t *)p + 3, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_L_READ( wv )                          FIELD_GET( wv, 0, 8 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_L_WRITE( v, wv )                      FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 4, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 4, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_READ(r, p)                       MREAD_32((uint8_t *)p + 4, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 4, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_L_READ( wv )                     FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_L_WRITE( v, wv )                 FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_READ_G(r, g, idx)                    GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 8, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_WRITE_G(v, g, idx)                   GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 8, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_READ(r, p)                           MREAD_16((uint8_t *)p + 8, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_WRITE(v, p)                          MWRITE_16((uint8_t *)p + 8, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_L_READ( wv )                         FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_L_WRITE( v, wv )                     FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_READ_G(r, g, idx)              GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 10, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WRITE_G(v, g, idx)             GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 10, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_READ(r, p)                     MREAD_16((uint8_t *)p + 10, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WRITE(v, p)                    MWRITE_16((uint8_t *)p + 10, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_L_READ( wv )                   FIELD_GET( wv, 0, 16 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_L_WRITE( v, wv )               FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 12, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS) + 12, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_READ(r, p)                    MREAD_32((uint8_t *)p + 12, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 12, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_L_READ( wv )                  FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_L_WRITE( v, wv )              FIELD_SET( v, 0, 32, wv )
/* <<<RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS */


#define RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_SIZE     3
typedef struct
{
	RDD_DHD_TX_COMPLETE_DESCRIPTOR_DTS	entry[ RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_DTS;

extern uint32_t RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_PTR(core_id)	( RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_COMPLETE_FLOW_RING_BUFFER */


/* >>>DHD_RX_COMPLETE_0_DISPATCHER_CREDIT_TABLE */

#define RDD_DHD_RX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DHD_RX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_DHD_RX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_DHD_RX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_COMPLETE_0_DISPATCHER_CREDIT_TABLE */


/* >>>DHD_RX_COMPLETE_1_DISPATCHER_CREDIT_TABLE */

#define RDD_DHD_RX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DHD_RX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_DHD_RX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_DHD_RX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_COMPLETE_1_DISPATCHER_CREDIT_TABLE */


/* >>>DHD_RX_POST_RING_SIZE */

/* >>>RDD_DHD_RING_SIZE_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	value     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	value     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RING_SIZE_DTS;

typedef RDD_DHD_RING_SIZE_DTS * aligned_RDD_DHD_RING_SIZE_DTS ALIGNMENT8;

#define RDD_DHD_RING_SIZE_VALUE_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_RING_SIZE_DTS), r)
#define RDD_DHD_RING_SIZE_VALUE_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_RING_SIZE_DTS), v)
#define RDD_DHD_RING_SIZE_VALUE_READ(r, p)                 MREAD_16((uint8_t *)p, r)
#define RDD_DHD_RING_SIZE_VALUE_WRITE(v, p)                MWRITE_16((uint8_t *)p, v)
/* <<<RDD_DHD_RING_SIZE_DTS */

typedef struct
{
	RDD_DHD_RING_SIZE_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RX_POST_RING_SIZE_DTS;

extern uint32_t RDD_DHD_RX_POST_RING_SIZE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_POST_RING_SIZE_PTR(core_id)	( RDD_DHD_RX_POST_RING_SIZE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_POST_RING_SIZE_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_POST_RING_SIZE */


/* >>>DHD_RX_COMPLETE_RING_SIZE */
typedef struct
{
	RDD_DHD_RING_SIZE_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RX_COMPLETE_RING_SIZE_DTS;

extern uint32_t RDD_DHD_RX_COMPLETE_RING_SIZE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_COMPLETE_RING_SIZE_PTR(core_id)	( RDD_DHD_RX_COMPLETE_RING_SIZE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_COMPLETE_RING_SIZE_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_COMPLETE_RING_SIZE */


/* >>>DHD_COMPLETE_COMMON_RADIO_DATA */

/* >>>RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS */
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED1_NUMBER	5
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER	3
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED2_NUMBER	4

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	rx_complete_fr_base_ptr_low                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_fr_base_ptr_high                                        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_fr_rd_idx_ptr_low                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_fr_rd_idx_ptr_high                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_fr_wr_idx_ptr_low                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_fr_wr_idx_ptr_high                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_base_ptr_low                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_base_ptr_high                                        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_rd_idx_ptr_low                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_rd_idx_ptr_high                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_wr_idx_ptr_low                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_wr_idx_ptr_high                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_base_ptr_low                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_base_ptr_high                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_rd_idx_ptr_low                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_rd_idx_ptr_high                                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_wr_idx_ptr_low                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_wr_idx_ptr_high                                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dhd_doorbell_low                                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dhd_doorbell_high                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_rd_idx                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_wr_idx                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_rd_idx                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_wr_idx                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_wr_idx                                                      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_format                                                    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	idma_active                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved1[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED1_NUMBER];
	uint32_t	scratchpad[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
	uint8_t	reserved2[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED2_NUMBER];
#else
	uint32_t	rx_complete_fr_base_ptr_low                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_fr_base_ptr_high                                        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_fr_rd_idx_ptr_low                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_fr_rd_idx_ptr_high                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_fr_wr_idx_ptr_low                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_fr_wr_idx_ptr_high                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_base_ptr_low                                         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_base_ptr_high                                        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_rd_idx_ptr_low                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_rd_idx_ptr_high                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_wr_idx_ptr_low                                       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_fr_wr_idx_ptr_high                                      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_base_ptr_low                                             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_base_ptr_high                                            	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_rd_idx_ptr_low                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_rd_idx_ptr_high                                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_wr_idx_ptr_low                                           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_fr_wr_idx_ptr_high                                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dhd_doorbell_low                                                    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dhd_doorbell_high                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_wr_idx                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_complete_rd_idx                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_wr_idx                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_complete_rd_idx                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved1[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED1_NUMBER];
	uint32_t	reserved                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	idma_active                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_format                                                    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_post_wr_idx                                                      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	scratchpad[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
	uint8_t	reserved2[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED2_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS;

typedef RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS * aligned_RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[28];
    uint64_t dword_val64[14];
    RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS fields;
} RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS_NEW;
typedef RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS_NEW * aligned_RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS), r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS), v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_READ(r, p)                    MREAD_32((uint8_t *)p, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_WRITE(v, p)                   MWRITE_32((uint8_t *)p, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 4, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 4, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_READ(r, p)                   MREAD_32((uint8_t *)p + 4, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 4, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 8, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 8, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)p + 8, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 8, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 12, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 12, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)p + 12, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)p + 12, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 16, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 16, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)p + 16, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 16, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 20, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 20, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)p + 20, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)p + 20, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 24, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 24, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_READ(r, p)                    MREAD_32((uint8_t *)p + 24, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 24, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 28, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 28, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_READ(r, p)                   MREAD_32((uint8_t *)p + 28, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 28, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 32, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 32, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)p + 32, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 32, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 36, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 36, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)p + 36, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)p + 36, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 40, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 40, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)p + 40, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 40, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 44, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 44, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)p + 44, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)p + 44, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_READ_G(r, g, idx)                 GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 48, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_WRITE_G(v, g, idx)                GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 48, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_READ(r, p)                        MREAD_32((uint8_t *)p + 48, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_WRITE(v, p)                       MWRITE_32((uint8_t *)p + 48, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 52, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 52, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_READ(r, p)                       MREAD_32((uint8_t *)p + 52, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 52, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 56, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 56, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_READ(r, p)                      MREAD_32((uint8_t *)p + 56, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 56, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 60, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 60, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_READ(r, p)                     MREAD_32((uint8_t *)p + 60, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_WRITE(v, p)                    MWRITE_32((uint8_t *)p + 60, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 64, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 64, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_READ(r, p)                      MREAD_32((uint8_t *)p + 64, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 64, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 68, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 68, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_READ(r, p)                     MREAD_32((uint8_t *)p + 68, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_WRITE(v, p)                    MWRITE_32((uint8_t *)p + 68, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_READ_G(r, g, idx)                        GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 72, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WRITE_G(v, g, idx)                       GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 72, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_READ(r, p)                               MREAD_32((uint8_t *)p + 72, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WRITE(v, p)                              MWRITE_32((uint8_t *)p + 72, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_READ_G(r, g, idx)                       GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 76, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WRITE_G(v, g, idx)                      GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 76, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_READ(r, p)                              MREAD_32((uint8_t *)p + 76, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WRITE(v, p)                             MWRITE_32((uint8_t *)p + 76, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_READ_G(r, g, idx)                      GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 80, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_WRITE_G(v, g, idx)                     GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 80, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_READ(r, p)                             MREAD_16((uint8_t *)p + 80, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_WRITE(v, p)                            MWRITE_16((uint8_t *)p + 80, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_READ_G(r, g, idx)                      GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 82, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_WRITE_G(v, g, idx)                     GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 82, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_READ(r, p)                             MREAD_16((uint8_t *)p + 82, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_WRITE(v, p)                            MWRITE_16((uint8_t *)p + 82, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_READ_G(r, g, idx)                      GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 84, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_WRITE_G(v, g, idx)                     GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 84, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_READ(r, p)                             MREAD_16((uint8_t *)p + 84, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_WRITE(v, p)                            MWRITE_16((uint8_t *)p + 84, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_READ_G(r, g, idx)                      GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 86, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_WRITE_G(v, g, idx)                     GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 86, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_READ(r, p)                             MREAD_16((uint8_t *)p + 86, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_WRITE(v, p)                            MWRITE_16((uint8_t *)p + 86, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_READ_G(r, g, idx)                          GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 88, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_WRITE_G(v, g, idx)                         GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 88, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_READ(r, p)                                 MREAD_16((uint8_t *)p + 88, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_WRITE(v, p)                                MWRITE_16((uint8_t *)p + 88, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 90, 5, 3, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 90, 5, 3, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 90, 5, 3, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 90, 5, 3, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 90, 4, 1, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 90, 4, 1, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 90, 4, 1, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 90, 4, 1, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_READ_G(r, g, idx, i)                           GROUP_MREAD_I_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 96, i, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_WRITE_G(v, g, idx, i)                          GROUP_MWRITE_I_32(g, idx*sizeof(RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS) + 96, i, v)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_READ(r, p, i)                                  MREAD_I_32((uint8_t *)p + 96, i, r)
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_WRITE(v, p, i)                                 MWRITE_I_32((uint8_t *)p + 96, i, v)
/* <<<RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS */


#define RDD_DHD_COMPLETE_COMMON_RADIO_DATA_SIZE     3
typedef struct
{
	RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DTS	entry[ RDD_DHD_COMPLETE_COMMON_RADIO_DATA_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_COMPLETE_COMMON_RADIO_DATA_DTS;

extern uint32_t RDD_DHD_COMPLETE_COMMON_RADIO_DATA_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_COMPLETE_COMMON_RADIO_DATA_PTR(core_id)	( RDD_DHD_COMPLETE_COMMON_RADIO_DATA_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_COMPLETE_COMMON_RADIO_DATA_ADDRESS_ARR[core_id] ))

/* <<<DHD_COMPLETE_COMMON_RADIO_DATA */


/* >>>DHD_RX_COMPLETE_2_DISPATCHER_CREDIT_TABLE */

#define RDD_DHD_RX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DHD_RX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_DHD_RX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_DHD_RX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_COMPLETE_2_DISPATCHER_CREDIT_TABLE */


/* >>>DHD_TX_COMPLETE_RING_SIZE */
typedef struct
{
	RDD_DHD_RING_SIZE_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_COMPLETE_RING_SIZE_DTS;

extern uint32_t RDD_DHD_TX_COMPLETE_RING_SIZE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_COMPLETE_RING_SIZE_PTR(core_id)	( RDD_DHD_TX_COMPLETE_RING_SIZE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_COMPLETE_RING_SIZE_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_COMPLETE_RING_SIZE */


/* >>>DHD_TX_COMPLETE_0_DISPATCHER_CREDIT_TABLE */

#define RDD_DHD_TX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DHD_TX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_DHD_TX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_DHD_TX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_COMPLETE_0_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_COMPLETE_0_DISPATCHER_CREDIT_TABLE */


/* >>>DHD_TX_COMPLETE_1_DISPATCHER_CREDIT_TABLE */

#define RDD_DHD_TX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DHD_TX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_DHD_TX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_DHD_TX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_COMPLETE_1_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_COMPLETE_1_DISPATCHER_CREDIT_TABLE */


/* >>>DHD_TX_COMPLETE_2_DISPATCHER_CREDIT_TABLE */

#define RDD_DHD_TX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	RDD_BYTES_4_DTS	entry[ RDD_DHD_TX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_DTS;

extern uint32_t RDD_DHD_TX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( RDD_DHD_TX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_COMPLETE_2_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_COMPLETE_2_DISPATCHER_CREDIT_TABLE */


/* >>>DHD_DOORBELL_TX_COMPLETE_VALUE */

#define RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_SIZE     3
typedef struct
{
	RDD_DHD_DOORBELL_DTS	entry[ RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_DTS;

extern uint32_t RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_PTR(core_id)	( RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_ADDRESS_ARR[core_id] ))

/* <<<DHD_DOORBELL_TX_COMPLETE_VALUE */


/* >>>DHD_DOORBELL_RX_COMPLETE_VALUE */

#define RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_SIZE     3
typedef struct
{
	RDD_DHD_DOORBELL_DTS	entry[ RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_DTS;

extern uint32_t RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_PTR(core_id)	( RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_ADDRESS_ARR[core_id] ))

/* <<<DHD_DOORBELL_RX_COMPLETE_VALUE */


/* >>>DHD_DOORBELL_RX_POST_VALUE */

#define RDD_DHD_DOORBELL_RX_POST_VALUE_SIZE     3
typedef struct
{
	RDD_DHD_DOORBELL_DTS	entry[ RDD_DHD_DOORBELL_RX_POST_VALUE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_DOORBELL_RX_POST_VALUE_DTS;

extern uint32_t RDD_DHD_DOORBELL_RX_POST_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_DOORBELL_RX_POST_VALUE_PTR(core_id)	( RDD_DHD_DOORBELL_RX_POST_VALUE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_DOORBELL_RX_POST_VALUE_ADDRESS_ARR[core_id] ))

/* <<<DHD_DOORBELL_RX_POST_VALUE */


/* >>>SPDSVC_WLAN_GEN_PARAMS_TABLE */

/* >>>RDD_SPDSVC_WLAN_GEN_PARAMS_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	complete_tracked	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_copies       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	spdsvc_free_idx 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	complete_tracked	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_copies       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	spdsvc_free_idx 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_WLAN_GEN_PARAMS_DTS;

typedef RDD_SPDSVC_WLAN_GEN_PARAMS_DTS * aligned_RDD_SPDSVC_WLAN_GEN_PARAMS_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_SPDSVC_WLAN_GEN_PARAMS_DTS fields;
} RDD_SPDSVC_WLAN_GEN_PARAMS_DTS_NEW;
typedef RDD_SPDSVC_WLAN_GEN_PARAMS_DTS_NEW * aligned_RDD_SPDSVC_WLAN_GEN_PARAMS_DTS_NEW ALIGNMENT8;

#define RDD_SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_WLAN_GEN_PARAMS_DTS), r)
#define RDD_SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_WLAN_GEN_PARAMS_DTS), v)
#define RDD_SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
#define RDD_SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_READ_G(r, g, idx)                 GROUP_MREAD_32(g, idx*sizeof(RDD_SPDSVC_WLAN_GEN_PARAMS_DTS) + 4, r)
#define RDD_SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_WRITE_G(v, g, idx)                GROUP_MWRITE_32(g, idx*sizeof(RDD_SPDSVC_WLAN_GEN_PARAMS_DTS) + 4, v)
#define RDD_SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_READ(r, p)                        MREAD_32((uint8_t *)p + 4, r)
#define RDD_SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_WRITE(v, p)                       MWRITE_32((uint8_t *)p + 4, v)
#define RDD_SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_READ_G(r, g, idx)           GROUP_MREAD_16(g, idx*sizeof(RDD_SPDSVC_WLAN_GEN_PARAMS_DTS) + 8, r)
#define RDD_SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_WRITE_G(v, g, idx)          GROUP_MWRITE_16(g, idx*sizeof(RDD_SPDSVC_WLAN_GEN_PARAMS_DTS) + 8, v)
#define RDD_SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_READ(r, p)                  MREAD_16((uint8_t *)p + 8, r)
#define RDD_SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_WRITE(v, p)                 MWRITE_16((uint8_t *)p + 8, v)
/* <<<RDD_SPDSVC_WLAN_GEN_PARAMS_DTS */

typedef struct
{
	RDD_SPDSVC_WLAN_GEN_PARAMS_DTS	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SPDSVC_WLAN_GEN_PARAMS_TABLE_DTS;

extern uint32_t RDD_SPDSVC_WLAN_GEN_PARAMS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_WLAN_GEN_PARAMS_TABLE_PTR(core_id)	( RDD_SPDSVC_WLAN_GEN_PARAMS_TABLE_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_WLAN_GEN_PARAMS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_WLAN_GEN_PARAMS_TABLE */


/* >>>DHD_FPM_REPLY */

#define RDD_DHD_FPM_REPLY_SIZE     24
typedef struct
{
	RDD_BYTE_1_DTS	entry[ RDD_DHD_FPM_REPLY_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_FPM_REPLY_DTS;

extern uint32_t RDD_DHD_FPM_REPLY_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_FPM_REPLY_PTR(core_id)	( RDD_DHD_FPM_REPLY_DTS * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_FPM_REPLY_ADDRESS_ARR[core_id] ))

/* <<<DHD_FPM_REPLY */


#ifdef BCM63158

/* >>>RDD_IMAGE_0_DS_TM_TIMER_INDEX */
typedef enum
{
	IMAGE_0_DS_TM_TIMER_INDEX_FIRST                      = 0,
	IMAGE_0_DS_TM_TIMER_INDEX_FLUSH                      = 0,
	IMAGE_0_DS_TM_TIMER_INDEX_BUDGET_ALLOCATOR           = 2,
	IMAGE_0_DS_TM_TIMER_INDEX_REPORTING                  = 3,
	IMAGE_0_DS_TM_TIMER_INDEX_SERVICE_QUEUES_BUDGET_ALLOCATOR = 4,
	IMAGE_0_DS_TM_TIMER_INDEX_LAST                       = 4
} rdd_ds_tm_timer_index;
/* <<<RDD_IMAGE_0_DS_TM_TIMER_INDEX */


/* >>>RDD_IMAGE_1_CPU_IF_1_TIMER_INDEX */
typedef enum
{
	IMAGE_1_CPU_IF_1_TIMER_INDEX_FIRST                    = 0,
	IMAGE_1_CPU_IF_1_TIMER_INDEX_INTERRUPT_COALESCING     = 0,
	IMAGE_1_CPU_IF_1_TIMER_INDEX_CPU_RX_METER_BUDGET_ALLOCATOR = 1,
	IMAGE_1_CPU_IF_1_TIMER_INDEX_SPDSVC                   = 2,
	IMAGE_1_CPU_IF_1_TIMER_INDEX_LAST                     = 2
} rdd_cpu_if_1_timer_index;
/* <<<RDD_IMAGE_1_CPU_IF_1_TIMER_INDEX */


/* >>>RDD_IMAGE_2_CPU_IF_2_TIMER_INDEX */
typedef enum
{
	IMAGE_2_CPU_IF_2_TIMER_INDEX_FIRST           = 1,
	IMAGE_2_CPU_IF_2_TIMER_INDEX_INTERRUPT_COALESCING = 1,
	IMAGE_2_CPU_IF_2_TIMER_INDEX_LAST            = 1
} rdd_cpu_if_2_timer_index;
/* <<<RDD_IMAGE_2_CPU_IF_2_TIMER_INDEX */


/* >>>RDD_IMAGE_3_US_TM_TIMER_INDEX */
typedef enum
{
	IMAGE_3_US_TM_TIMER_INDEX_FIRST           = 0,
	IMAGE_3_US_TM_TIMER_INDEX_FLUSH           = 0,
	IMAGE_3_US_TM_TIMER_INDEX_BUDGET_ALLOCATOR = 1,
	IMAGE_3_US_TM_TIMER_INDEX_OVL_BUDGET_ALLOCATOR = 2,
	IMAGE_3_US_TM_TIMER_INDEX_LAST            = 2
} rdd_us_tm_timer_index;
/* <<<RDD_IMAGE_3_US_TM_TIMER_INDEX */


/* >>>RDD_IMAGE_4_IMAGE_4_TIMER_INDEX */
typedef enum
{
	IMAGE_4_IMAGE_4_TIMER_INDEX_FIRST = 0,
	IMAGE_4_IMAGE_4_TIMER_INDEX_DHD_AGGR = 0,
	IMAGE_4_IMAGE_4_TIMER_INDEX_LAST = 0
} rdd_image_4_timer_index;
/* <<<RDD_IMAGE_4_IMAGE_4_TIMER_INDEX */


/* >>>RDD_IMAGE_5_PROCESSING_TIMER_INDEX */
typedef enum
{
	IMAGE_5_PROCESSING_TIMER_INDEX_FIRST = 0,
	IMAGE_5_PROCESSING_TIMER_INDEX_RESERVED = 0,
	IMAGE_5_PROCESSING_TIMER_INDEX_LAST = 0
} rdd_processing_timer_index;
/* <<<RDD_IMAGE_5_PROCESSING_TIMER_INDEX */


/* >>>RDD_TM_UPDATE_VECTOR */
typedef enum
{
	TM_UPDATE_VECTOR_FIRST              = 0,
	TM_UPDATE_VECTOR_BS_DWRR_Q          = 0,
	TM_UPDATE_VECTOR_CS_DWRR_Q          = 1,
	TM_UPDATE_VECTOR_CS_DWRR_BS         = 2,
	TM_UPDATE_VECTOR_CS_DWRR_CS         = 3,
	TM_UPDATE_VECTOR_BS_Q_BRL           = 4,
	TM_UPDATE_VECTOR_CS_BS_Q_BRL        = 5,
	TM_UPDATE_VECTOR_CS_Q_CRL_SIR       = 6,
	TM_UPDATE_VECTOR_CS_Q_CRL_PIR       = 7,
	TM_UPDATE_VECTOR_BS_BRL_Q           = 8,
	TM_UPDATE_VECTOR_CS_BS_CRL_SIR_Q    = 9,
	TM_UPDATE_VECTOR_CS_BS_CRL_PIR_Q    = 10,
	TM_UPDATE_VECTOR_CS_BRL             = 11,
	TM_UPDATE_VECTOR_OVL_RL             = 12,
	TM_UPDATE_VECTOR_LAST               = 12
} rdd_tm_update_vector;
/* <<<RDD_TM_UPDATE_VECTOR */


/* >>>RDD_CNPL_GROUP */
typedef enum
{
	CNPL_GROUP_FIRST                   = 0,
	CNPL_GROUP_RX_FLOW                 = 0,
	CNPL_GROUP_RX_FLOW_DROP            = 1,
	CNPL_GROUP_TX_FLOW                 = 2,
	CNPL_GROUP_IPTV_TCAM_DEF           = 3,
	CNPL_GROUP_TWO_BYTE_CNTR           = 4,
	CNPL_GROUP_FOUR_BYTE_CNTR          = 5,
	CNPL_GROUP_TX_QUEUE                = 6,
	CNPL_GROUP_DHD_CTR_CNTRS           = 7,
	CNPL_GROUP_CPU_RX_METER_DROP       = 8,
	CNPL_GROUP_POLICER_GREEN_COLOR     = 9,
	CNPL_GROUP_POLICER_YELLOW_COLOR    = 10,
	CNPL_GROUP_POLICER_RED_COLOR       = 11,
	CNPL_GROUP_PATHSTAT                = 12,
	CNPL_GROUP_DHD_CNTRS               = 13,
	CNPL_GROUP_LAST                    = 13
} rdd_cnpl_group;
/* <<<RDD_CNPL_GROUP */


/* >>>RDD_CNTR_GROUP */
typedef enum
{
	CNTR_GROUP_FIRST                = 0,
	CNTR_GROUP_RX_FLOW              = 0,
	CNTR_GROUP_TX_FLOW              = 1,
	CNTR_GROUP_TCAM_DEF             = 2,
	CNTR_GROUP_VARIOUS              = 3,
	CNTR_GROUP_GENERAL              = 4,
	CNTR_GROUP_TX_QUEUE             = 5,
	CNTR_GROUP_DHD_CTR              = 6,
	CNTR_GROUP_CPU_RX_METER_DROP    = 7,
	CNTR_GROUP_POLICER              = 8,
	CNTR_GROUP_PATHSTAT             = 9,
	CNTR_GROUP_DHD_CNTRS            = 10,
	CNTR_GROUP_FLOW_CTRL            = 11,
	CNTR_GROUP_IPTV_NATC            = 12,
	CNTR_GROUP_GROUPS_NUMBER        = 13,
	CNTR_GROUP_LAST                 = 13
} rdd_cntr_group;
/* <<<RDD_CNTR_GROUP */


/* >>>RDD_CNTR */
typedef enum
{
	CNTR_FIRST        = 32768,
	CNTR_VALID_BIT    = 32768,
	CNTR_LAST         = 32768
} rdd_cntr;
/* <<<RDD_CNTR */


/* >>>RDD_COUNTER */
typedef enum
{
	COUNTER_FIRST                                   = 0,
	COUNTER_TM_PD_NOT_VALID_ID                      = 0,
	COUNTER_TM_ACTION_NOT_VALID_ID                  = 1,
	COUNTER_EPON_TM_PD_NOT_VALID_ID                 = 2,
	COUNTER_PROCESSING_ACTION_NOT_VALID_ID          = 4,
	COUNTER_CPU_RECYCLE_RING_CONGESTION             = 5,
	COUNTER_CPU_RX_FEED_RING_CONGESTION             = 6,
	COUNTER_CPU_RX_PSRAM_DROP                       = 7,
	COUNTER_IPTV_HASH_LKP_MISS_DROP                 = 8,
	COUNTER_IPTV_SRC_IP_VID_LKP_MISS_DROP           = 9,
	COUNTER_IPTV_INVALID_CTX_ENTRY_DROP             = 10,
	COUNTER_IPTV_FPM_ALLOC_NACK_DROP                = 11,
	COUNTER_IPTV_FIRST_REPL_DISP_ALLOC_NACK_DROP    = 12,
	COUNTER_IPTV_EXCEPTION_DROP                     = 13,
	COUNTER_IPTV_OTHER_REPL_DISP_ALLOC_NACK_DROP    = 14,
	COUNTER_CPU_TX_COPY_NO_FPM                      = 15,
	COUNTER_CPU_TX_COPY_NO_SBPM                     = 16,
	COUNTER_CPU_RX_TC_TO_RXQ_MAP_DROP               = 17,
	COUNTER_CPU_RX_VPORT_TO_CPU_OBJ_MAP_DROP        = 18,
	COUNTER_ETHERNET_FLOW_DROP_ACTION               = 19,
	COUNTER_SBPM_ALLOC_EXCEPTION_DROP               = 20,
	COUNTER_DROP_CONNECTION_ACTION_DROP_ID          = 21,
	COUNTER_DROP_RESOURCE_CONGESTION_INGRESS        = 22,
	COUNTER_DROP_RESOURCE_CONGESTION_EGRESS         = 23,
	COUNTER_INGRESS_FILTER_DROP_FIRST_DS            = 24,
	COUNTER_INGRESS_FILTER_DROP_FIRST_US            = 48,
	COUNTER_INGRESS_FILTER_DROP_LAST                = 71,
	COUNTER_CPU_RX_METER_DROP                       = 72,
	COUNTER_INGRESS_ISOLATION_DROP                  = 73,
	COUNTER_EGRESS_ISOLATION_DROP                   = 74,
	COUNTER_DA_LKP_MISS_DROP                        = 75,
	COUNTER_SA_LKP_MISS_DROP                        = 76,
	COUNTER_BRIDGE_FW_ELIGABILITY_DROP              = 77,
	COUNTER_DA_LKP_MATCH_DROP                       = 78,
	COUNTER_SA_LKP_MATCH_DROP                       = 79,
	COUNTER_CPU_TX_DISABLED_QUEUE_DROP              = 80,
	COUNTER_DISABLED_TX_FLOW_DROP                   = 81,
	COUNTER_CPU_FEED_RING_DISP_CONGESTION           = 82,
	COUNTER_SBPM_LIB_DISP_CONG                      = 83,
	COUNTER_BRIDGE_FLOODING                         = 84,
	COUNTER_DIS_PROTO_DS_IPV4                       = 85,
	COUNTER_DIS_PROTO_DS_IPV6                       = 86,
	COUNTER_DIS_PROTO_DS_PPPOE                      = 87,
	COUNTER_DIS_PROTO_DS_NON_IP                     = 88,
	COUNTER_DIS_PROTO_US_IPV4                       = 89,
	COUNTER_DIS_PROTO_US_IPV6                       = 90,
	COUNTER_DIS_PROTO_US_PPPOE                      = 91,
	COUNTER_DIS_PROTO_US_NON_IP                     = 92,
	COUNTER_DS_MIRROR_NO_SBPM_DROP                  = 93,
	COUNTER_DS_MIRROR_NO_TOKEN_DROP                 = 94,
	COUNTER_US_MIRROR_NO_SBPM_DROP                  = 95,
	COUNTER_US_MIRROR_NO_TOKEN_DROP                 = 96,
	COUNTER_TX_MIRROR_DROP                          = 97,
	COUNTER_INGRESS_CONGESTION_LAN                  = 98,
	COUNTER_SQ_PD_NOT_VALID                         = 99,
	COUNTER_SQ_ACTION_NOT_VALID                     = 100,
	COUNTER_LAST                                    = 100
} rdd_counter;
/* <<<RDD_COUNTER */


/* >>>RDD_GENERAL_COUNTER */
typedef enum
{
	GENERAL_COUNTER_FIRST                     = 0,
	GENERAL_COUNTER_DHD_TX_POST_PKTS_0        = 0,
	GENERAL_COUNTER_DHD_TX_POST_PKTS_1        = 1,
	GENERAL_COUNTER_DHD_TX_POST_PKTS_2        = 2,
	GENERAL_COUNTER_DHD_TX_COMPLETE_PKTS_0    = 3,
	GENERAL_COUNTER_DHD_TX_COMPLETE_PKTS_1    = 4,
	GENERAL_COUNTER_DHD_TX_COMPLETE_PKTS_2    = 5,
	GENERAL_COUNTER_DHD_RX_COMPLETE_PKTS_0    = 6,
	GENERAL_COUNTER_DHD_RX_COMPLETE_PKTS_1    = 7,
	GENERAL_COUNTER_DHD_RX_COMPLETE_PKTS_2    = 8,
	GENERAL_COUNTER_RX_IPTV_VALID_PKT         = 9,
	GENERAL_COUNTER_RX_IPTV_VALID_BYTES       = 10,
	GENERAL_COUNTER_IPTV_TOTAL_DROP_PKT       = 11,
	GENERAL_COUNTER_IPTV_TOTAL_DROP_BYTES     = 12,
	GENERAL_COUNTER_DHD_SPDSVC_TX_DROPS_0     = 13,
	GENERAL_COUNTER_DHD_SPDSVC_TX_DROPS_1     = 14,
	GENERAL_COUNTER_DHD_SPDSVC_TX_DROPS_2     = 15,
	GENERAL_COUNTER_LAST                      = 15
} rdd_general_counter;
/* <<<RDD_GENERAL_COUNTER */


/* >>>RDD_FLOW_DEST */
typedef enum
{
	FLOW_DEST_FIRST      = 0,
	FLOW_DEST_ETH_ID     = 0,
	FLOW_DEST_IPTV_ID    = 1,
	FLOW_DEST_LAST       = 1
} rdd_flow_dest;
/* <<<RDD_FLOW_DEST */


/* >>>RDD_QM_QUEUE */
typedef enum
{
	QM_QUEUE_FIRST                         = 8,
	QM_QUEUE_DYNAMIC_EPON                  = 8,
	QM_QUEUE_SERVICE_Q_MAX_QUANTITY        = 32,
	QM_QUEUE_SERVICE_Q_DEFAULT_QUANTITY    = 32,
	QM_QUEUE_US_DEFAULT_QUANTITY           = 48,
	QM_QUEUE_DS_DEFAULT_QUANTITY           = 48,
	QM_QUEUE_MAX_DYNAMIC_QUANTITY          = 136,
	QM_QUEUE_CPU_RX                        = 145,
	QM_QUEUE_CPU_RX_COPY_EXCLUSIVE         = 146,
	QM_QUEUE_CPU_RX_COPY_NORMAL            = 147,
	QM_QUEUE_DHD_CPU_TX_POST_0             = 148,
	QM_QUEUE_DHD_TX_POST_0                 = 149,
	QM_QUEUE_DHD_CPU_TX_POST_1             = 150,
	QM_QUEUE_DHD_TX_POST_1                 = 151,
	QM_QUEUE_DHD_CPU_TX_POST_2             = 152,
	QM_QUEUE_DHD_TX_POST_2                 = 153,
	QM_QUEUE_DHD_MCAST                     = 154,
	QM_QUEUE_TX_ABS_RECYCLE                = 155,
	QM_QUEUE_PKTGEN_REPROCESSING           = 156,
	QM_QUEUE_DROP_PACKET                   = 159,
	QM_QUEUE_LAST                          = 159
} rdd_qm_queue;
/* <<<RDD_QM_QUEUE */


/* >>>RDD_RDD_WAN_FLOW */
typedef enum
{
	RDD_WAN_FLOW_FIRST          = 0,
	RDD_WAN_FLOW_PON_START      = 0,
	RDD_WAN_FLOW_DSL_TOTAL      = 16,
	RDD_WAN_FLOW_AE10_END       = 56,
	RDD_WAN_FLOW_AE10_START     = 56,
	RDD_WAN_FLOW_AE2P5_START    = 58,
	RDD_WAN_FLOW_AE2P5_END      = 58,
	RDD_WAN_FLOW_PON_END        = 239,
	RDD_WAN_FLOW_PLOAM          = 239,
	RDD_WAN_FLOW_DSL_START      = 240,
	RDD_WAN_FLOW_DSL_END        = 255,
	RDD_WAN_FLOW_LAST           = 255
} rdd_rdd_wan_flow;
/* <<<RDD_RDD_WAN_FLOW */


/* >>>RDD_RDD_US_CHANNEL_OFFSET */
typedef enum
{
	RDD_US_CHANNEL_OFFSET_FIRST        = 0,
	RDD_US_CHANNEL_OFFSET_TCONT        = 0,
	RDD_US_CHANNEL_OFFSET_TCONT_END    = 31,
	RDD_US_CHANNEL_OFFSET_DSL          = 32,
	RDD_US_CHANNEL_OFFSET_DSL_END      = 47,
	RDD_US_CHANNEL_OFFSET_AE10_END     = 48,
	RDD_US_CHANNEL_OFFSET_AE10         = 48,
	RDD_US_CHANNEL_OFFSET_AE2P5        = 49,
	RDD_US_CHANNEL_OFFSET_AE2P5_END    = 49,
	RDD_US_CHANNEL_OFFSET_LAST         = 49
} rdd_rdd_us_channel_offset;
/* <<<RDD_RDD_US_CHANNEL_OFFSET */


/* >>>RDD_GLOBAL_CFG_REG */
typedef enum
{
	GLOBAL_CFG_REG_FIRST        = 0,
	GLOBAL_CFG_REG_IS_6858A0    = 0,
	GLOBAL_CFG_REG_LAST         = 0
} rdd_global_cfg_reg;
/* <<<RDD_GLOBAL_CFG_REG */


/* >>>RDD_HASH_TABLE */
typedef enum
{
	HASH_TABLE_FIRST   = 1,
	HASH_TABLE_IPTV    = 1,
	HASH_TABLE_LAST    = 1
} rdd_hash_table;
/* <<<RDD_HASH_TABLE */


/* >>>RDD_DISP_REOR_VIQ */
typedef enum
{
	DISP_REOR_VIQ_FIRST                  = 0,
	DISP_REOR_VIQ_BBH_LAN_RX0_NORMAL     = 0,
	DISP_REOR_VIQ_BBH_LAN_RX1_NORMAL     = 1,
	DISP_REOR_VIQ_BBH_LAN_RX2_NORMAL     = 2,
	DISP_REOR_VIQ_BBH_PON_RX_NORMAL      = 3,
	DISP_REOR_VIQ_BBH_AE10_RX_NORMAL     = 4,
	DISP_REOR_VIQ_BBH_AE2P5_RX_NORMAL    = 5,
	DISP_REOR_VIQ_BBH_DSL_RX_NORMAL      = 6,
	DISP_REOR_VIQ_BBH_PON_RX_EXCL        = 7,
	DISP_REOR_VIQ_BBH_AE10_RX_EXCL       = 8,
	DISP_REOR_VIQ_BBH_AE2P5_RX_EXCL      = 9,
	DISP_REOR_VIQ_CPU_TX_EGRESS          = 10,
	DISP_REOR_VIQ_CPU_TX_FORWARD         = 11,
	DISP_REOR_VIQ_US_TM_FLUSH            = 12,
	DISP_REOR_VIQ_DS_TM_FLUSH            = 13,
	DISP_REOR_VIQ_TX_MIRRORING           = 14,
	DISP_REOR_VIQ_CPU_RX_COPY            = 15,
	DISP_REOR_VIQ_WAN_TX_DDR_READ        = 16,
	DISP_REOR_VIQ_WAN_TX_PSRAM_WRITE     = 17,
	DISP_REOR_VIQ_DHD_RX_COMPLETE_0      = 18,
	DISP_REOR_VIQ_DHD_RX_COMPLETE_1      = 19,
	DISP_REOR_VIQ_DHD_RX_COMPLETE_2      = 20,
	DISP_REOR_VIQ_DHD_MCAST              = 21,
	DISP_REOR_VIQ_DHD_MIRRORING          = 22,
	DISP_REOR_VIQ_DHD_TX_COMPLETE_0      = 23,
	DISP_REOR_VIQ_DHD_TX_COMPLETE_1      = 24,
	DISP_REOR_VIQ_DHD_TX_COMPLETE_2      = 25,
	DISP_REOR_VIQ_SPDSVC                 = 26,
	DISP_REOR_VIQ_SERVICE_QUEUES         = 27,
	DISP_REOR_VIQ_COMMON_REPROCESSING    = 28,
	DISP_REOR_VIQ_EPON_TM                = 29,
	DISP_REOR_VIQ_LAST                   = 29
} rdd_disp_reor_viq;
/* <<<RDD_DISP_REOR_VIQ */


/* >>>RDD_NATC */
typedef enum
{
	NATC_FIRST                     = 3,
	NATC_LOOKUP_DEPTH_SIZE_LOG2    = 3,
	NATC_LOOKUP_DEPTH_SIZE         = 8,
	NATC_MAX_TABLES_NUM            = 8,
	NATC_TABLE_KEY_SIZE            = 16,
	NATC_TABLE_RES_SIZE            = 64,
	NATC_MAX_ENTRY_LEN             = 128,
	NATC_LAST                      = 128
} rdd_natc;
/* <<<RDD_NATC */


/* >>>RDD_CLASSIFICATION_RESULT_INDEX */
typedef enum
{
	CLASSIFICATION_RESULT_INDEX_FIRST              = 0,
	CLASSIFICATION_RESULT_INDEX_INGRESS_FILTERS    = 0,
	CLASSIFICATION_RESULT_INDEX_TUNNELS_PARSING    = 1,
	CLASSIFICATION_RESULT_INDEX_IPTV               = 1,
	CLASSIFICATION_RESULT_INDEX_TCAM_IC_FLOW       = 1,
	CLASSIFICATION_RESULT_INDEX_NAT_CACHE          = 2,
	CLASSIFICATION_RESULT_INDEX_TCAM_IC_ACL        = 2,
	CLASSIFICATION_RESULT_INDEX_TCAM_IC_QOS        = 3,
	CLASSIFICATION_RESULT_INDEX_TCAM_IC_IP_FLOW    = 3,
	CLASSIFICATION_RESULT_INDEX_BRIDGE             = 4,
	CLASSIFICATION_RESULT_INDEX_POST_LOOKUP        = 5,
	CLASSIFICATION_RESULT_INDEX_LAST               = 5
} rdd_classification_result_index;
/* <<<RDD_CLASSIFICATION_RESULT_INDEX */


/* >>>RDD_ACTION_ID */
typedef enum
{
	ACTION_ID_FIRST        = 0,
	ACTION_ID_TRAP         = 0,
	ACTION_ID_TTL          = 2,
	ACTION_ID_SPDSVC       = 3,
	ACTION_ID_DSCP         = 4,
	ACTION_ID_NAT_DS       = 5,
	ACTION_ID_GRE          = 6,
	ACTION_ID_OPBITS_DS    = 7,
	ACTION_ID_IPBITS_DS    = 8,
	ACTION_ID_DS_LITE      = 9,
	ACTION_ID_PPPOE        = 10,
	ACTION_ID_NAT_US       = 11,
	ACTION_ID_OPBITS_US    = 12,
	ACTION_ID_IPBITS_US    = 13,
	ACTION_ID_TOTAL_NUM    = 17,
	ACTION_ID_LAST         = 17
} rdd_action_id;
/* <<<RDD_ACTION_ID */


/* >>>RDD_IMAGE_0_DS_TM */
typedef enum
{
	IMAGE_0_DS_TM_FIRST                                    = 1,
	IMAGE_0_DS_TM_BUDGET_ALLOCATION_THREAD_NUMBER          = 1,
	IMAGE_0_DS_TM_UPDATE_FIFO_THREAD_NUMBER                = 2,
	IMAGE_0_DS_TM_TX_TASK_THREAD_NUMBER                    = 3,
	IMAGE_0_DS_TM_FLUSH_THREAD_NUMBER                      = 4,
	IMAGE_0_DS_TM_REPORTING_THREAD_NUMBER                  = 5,
	IMAGE_0_DS_TM_SERVICE_QUEUES_BUDGET_ALLOCATOR_THREAD_NUMBER = 6,
	IMAGE_0_DS_TM_SERVICE_QUEUES_UPDATE_FIFO_THREAD_NUMBER = 7,
	IMAGE_0_DS_TM_SERVICE_QUEUES_TX_THREAD_NUMBER          = 8,
	IMAGE_0_DS_TM_LAST                                     = 8
} rdd_ds_tm;
/* <<<RDD_IMAGE_0_DS_TM */


/* >>>RDD_IMAGE_1_IMAGE_1 */
typedef enum
{
	IMAGE_1_IMAGE_1_FIRST                                  = 1,
	IMAGE_1_IMAGE_1_CPU_RX_METER_BUDGET_ALLOCATOR_THREAD_NUMBER = 1,
	IMAGE_1_IMAGE_1_INTERRUPT_COALESCING_THREAD_NUMBER     = 2,
	IMAGE_1_IMAGE_1_CPU_RX_THREAD_NUMBER                   = 3,
	IMAGE_1_IMAGE_1_COMMON_REPROCESSING_THREAD_NUMBER      = 4,
	IMAGE_1_IMAGE_1_CPU_RECYCLE_THREAD_NUMBER              = 5,
	IMAGE_1_IMAGE_1_CPU_RX_COPY_THREAD_NUMBER              = 6,
	IMAGE_1_IMAGE_1_SPDSVC_GEN_THREAD_NUMBER               = 7,
	IMAGE_1_IMAGE_1_PROCESSING0_THREAD_NUMBER              = 8,
	IMAGE_1_IMAGE_1_PROCESSING1_THREAD_NUMBER              = 9,
	IMAGE_1_IMAGE_1_PROCESSING2_THREAD_NUMBER              = 10,
	IMAGE_1_IMAGE_1_PROCESSING3_THREAD_NUMBER              = 11,
	IMAGE_1_IMAGE_1_PROCESSING4_THREAD_NUMBER              = 12,
	IMAGE_1_IMAGE_1_PROCESSING5_THREAD_NUMBER              = 13,
	IMAGE_1_IMAGE_1_PROCESSING6_THREAD_NUMBER              = 14,
	IMAGE_1_IMAGE_1_PROCESSING7_THREAD_NUMBER              = 15,
	IMAGE_1_IMAGE_1_LAST                                   = 15
} rdd_image_1;
/* <<<RDD_IMAGE_1_IMAGE_1 */


/* >>>RDD_IMAGE_2_IMAGE_2 */
typedef enum
{
	IMAGE_2_IMAGE_2_FIRST                         = 0,
	IMAGE_2_IMAGE_2_INTERRUPT_COALESCING_THREAD_NUMBER = 0,
	IMAGE_2_IMAGE_2_CPU_RECYCLE_THREAD_NUMBER     = 1,
	IMAGE_2_IMAGE_2_CPU_TX_0_THREAD_NUMBER        = 6,
	IMAGE_2_IMAGE_2_CPU_TX_1_THREAD_NUMBER        = 7,
	IMAGE_2_IMAGE_2_PROCESSING0_THREAD_NUMBER     = 8,
	IMAGE_2_IMAGE_2_PROCESSING1_THREAD_NUMBER     = 9,
	IMAGE_2_IMAGE_2_PROCESSING2_THREAD_NUMBER     = 10,
	IMAGE_2_IMAGE_2_PROCESSING3_THREAD_NUMBER     = 11,
	IMAGE_2_IMAGE_2_PROCESSING4_THREAD_NUMBER     = 12,
	IMAGE_2_IMAGE_2_PROCESSING5_THREAD_NUMBER     = 13,
	IMAGE_2_IMAGE_2_PROCESSING6_THREAD_NUMBER     = 14,
	IMAGE_2_IMAGE_2_PROCESSING7_THREAD_NUMBER     = 15,
	IMAGE_2_IMAGE_2_LAST                          = 15
} rdd_image_2;
/* <<<RDD_IMAGE_2_IMAGE_2 */


/* >>>RDD_IMAGE_3_US_TM */
typedef enum
{
	IMAGE_3_US_TM_FIRST                          = 0,
	IMAGE_3_US_TM_WAN_DIRECT_THREAD_NUMBER       = 0,
	IMAGE_3_US_TM_BUDGET_ALLOCATION_THREAD_NUMBER = 1,
	IMAGE_3_US_TM_OVL_BUDGET_ALLOCATION_THREAD_NUMBER = 2,
	IMAGE_3_US_TM_UPDATE_FIFO_THREAD_NUMBER      = 3,
	IMAGE_3_US_TM_FLUSH_THREAD_NUMBER            = 4,
	IMAGE_3_US_TM_EPON_UPDATE_FIFO_THREAD_NUMBER = 5,
	IMAGE_3_US_TM_WAN_AE2P5_THREAD_NUMBER        = 7,
	IMAGE_3_US_TM_WAN_AE10_THREAD_NUMBER         = 8,
	IMAGE_3_US_TM_WAN_DSL_THREAD_NUMBER          = 9,
	IMAGE_3_US_TM_WAN_PON_THREAD_NUMBER          = 10,
	IMAGE_3_US_TM_WAN_EPON_THREAD_NUMBER         = 11,
	IMAGE_3_US_TM_WAN_TX_DDR_READ_THREAD_NUMBER  = 14,
	IMAGE_3_US_TM_WAN_TX_PSRAM_WRITE_THREAD_NUMBER = 15,
	IMAGE_3_US_TM_LAST                           = 15
} rdd_us_tm;
/* <<<RDD_IMAGE_3_US_TM */


/* >>>RDD_IMAGE_4_IMAGE_4 */
typedef enum
{
	IMAGE_4_IMAGE_4_FIRST                            = 0,
	IMAGE_4_IMAGE_4_DHD_TIMER_THREAD_NUMBER          = 0,
	IMAGE_4_IMAGE_4_DHD_TX_POST_0_THREAD_NUMBER      = 1,
	IMAGE_4_IMAGE_4_DHD_TX_POST_1_THREAD_NUMBER      = 2,
	IMAGE_4_IMAGE_4_DHD_TX_POST_2_THREAD_NUMBER      = 3,
	IMAGE_4_IMAGE_4_DHD_TX_POST_UPDATE_FIFO_THREAD_NUMBER = 4,
	IMAGE_4_IMAGE_4_DHD_MCAST_THREAD_NUMBER          = 5,
	IMAGE_4_IMAGE_4_0_THREAD_NUMBER                  = 8,
	IMAGE_4_IMAGE_4_1_THREAD_NUMBER                  = 9,
	IMAGE_4_IMAGE_4_2_THREAD_NUMBER                  = 10,
	IMAGE_4_IMAGE_4_3_THREAD_NUMBER                  = 11,
	IMAGE_4_IMAGE_4_4_THREAD_NUMBER                  = 12,
	IMAGE_4_IMAGE_4_5_THREAD_NUMBER                  = 13,
	IMAGE_4_IMAGE_4_6_THREAD_NUMBER                  = 14,
	IMAGE_4_IMAGE_4_7_THREAD_NUMBER                  = 15,
	IMAGE_4_IMAGE_4_LAST                             = 15
} rdd_image_4;
/* <<<RDD_IMAGE_4_IMAGE_4 */


/* >>>RDD_IMAGE_5_PROCESSING */
typedef enum
{
	IMAGE_5_PROCESSING_FIRST                      = 0,
	IMAGE_5_PROCESSING_DHD_RX_COMPLETE_0_THREAD_NUMBER = 0,
	IMAGE_5_PROCESSING_DHD_RX_COMPLETE_1_THREAD_NUMBER = 1,
	IMAGE_5_PROCESSING_DHD_RX_COMPLETE_2_THREAD_NUMBER = 2,
	IMAGE_5_PROCESSING_DHD_TX_COMPLETE_0_THREAD_NUMBER = 3,
	IMAGE_5_PROCESSING_DHD_TX_COMPLETE_1_THREAD_NUMBER = 4,
	IMAGE_5_PROCESSING_DHD_TX_COMPLETE_2_THREAD_NUMBER = 5,
	IMAGE_5_PROCESSING_0_THREAD_NUMBER            = 8,
	IMAGE_5_PROCESSING_1_THREAD_NUMBER            = 9,
	IMAGE_5_PROCESSING_2_THREAD_NUMBER            = 10,
	IMAGE_5_PROCESSING_3_THREAD_NUMBER            = 11,
	IMAGE_5_PROCESSING_4_THREAD_NUMBER            = 12,
	IMAGE_5_PROCESSING_5_THREAD_NUMBER            = 13,
	IMAGE_5_PROCESSING_6_THREAD_NUMBER            = 14,
	IMAGE_5_PROCESSING_7_THREAD_NUMBER            = 15,
	IMAGE_5_PROCESSING_LAST                       = 15
} rdd_processing;
/* <<<RDD_IMAGE_5_PROCESSING */


/* >>>RDD_CPU_IF_RDD */
typedef enum
{
	CPU_IF_RDD_FIRST      = 0,
	CPU_IF_RDD_DATA       = 0,
	CPU_IF_RDD_RECYCLE    = 1,
	CPU_IF_RDD_FEED       = 2,
	CPU_IF_RDD_CPU_TX     = 3,
	CPU_IF_RDD_LAST       = 3
} rdd_cpu_if_rdd;
/* <<<RDD_CPU_IF_RDD */


/* >>>RDD_BRIDGE_ID_LOOKUP_METHOD */
typedef enum
{
	BRIDGE_ID_LOOKUP_METHOD_FIRST         = 0,
	BRIDGE_ID_LOOKUP_METHOD_VPORT_ONLY    = 0,
	BRIDGE_ID_LOOKUP_METHOD_VPORT_VID     = 1,
	BRIDGE_ID_LOOKUP_METHOD_LAST          = 1
} rdd_bridge_id_lookup_method;
/* <<<RDD_BRIDGE_ID_LOOKUP_METHOD */


/* >>>RDD_BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD */
typedef enum
{
	BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD_FIRST         = 0,
	BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD_VPORT_ONLY    = 0,
	BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD_VPORT_VID     = 1,
	BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD_LAST          = 1
} rdd_bridge_and_vlan_ctx_lookup_method;
/* <<<RDD_BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD */


/* >>>RDD_IP_PROTO_IDX */
typedef enum
{
	IP_PROTO_IDX_FIRST    = 0,
	IP_PROTO_IDX_UNDEF    = 0,
	IP_PROTO_IDX_OTHER    = 1,
	IP_PROTO_IDX_IPV6     = 2,
	IP_PROTO_IDX_GRE      = 3,
	IP_PROTO_IDX_IPIP     = 4,
	IP_PROTO_IDX_ESP      = 5,
	IP_PROTO_IDX_TCP      = 6,
	IP_PROTO_IDX_UDP      = 7,
	IP_PROTO_IDX_LAST     = 7
} rdd_ip_proto_idx;
/* <<<RDD_IP_PROTO_IDX */


/* >>>RDD_PROJ_DEFS */
typedef enum
{
	PROJ_DEFS_FIRST                                = 4,
	PROJ_DEFS_NUMBER_OF_NATC_TABLES                = 4,
	PROJ_DEFS_NUMBER_OF_TCPSPDTEST_STREAMS         = 4,
	PROJ_DEFS_NUMBER_OF_CPU_RX_METERS              = 16,
	PROJ_DEFS_NUMBER_OF_VPORTS                     = 31,
	PROJ_DEFS_RDD_VPORT_ANY                        = 31,
	PROJ_DEFS_RDD_VPORT_LAST                       = 40,
	PROJ_DEFS_DEF_SIZE_OF_C_STACK                  = 64,
	PROJ_DEFS_NUMBER_OF_VPORTS_MULT_3              = 120,
	PROJ_DEFS_NUMBER_OF_VLANS                      = 256,
	PROJ_DEFS_NUMBER_OF_SHARED_IC_VLAN_COUNTERS    = 1024,
	PROJ_DEFS_NUMBER_OF_IC_COUNTERS                = 1024,
	PROJ_DEFS_LAST                                 = 1024
} rdd_proj_defs;
/* <<<RDD_PROJ_DEFS */


/* >>>RDD_NATC_TBL_IDX */
typedef enum
{
	NATC_TBL_IDX_FIRST              = 0,
	NATC_TBL_IDX_DS                 = 0,
	NATC_TBL_IDX_US                 = 1,
	NATC_TBL_IDX_COUNTERS           = 2,
	NATC_TBL_IDX_MCAST_WHITELIST    = 3,
	NATC_TBL_IDX_LAST               = 3
} rdd_natc_tbl_idx;
/* <<<RDD_NATC_TBL_IDX */


/* >>>RDD_NATC_SUB_TBL_IDX */
typedef enum
{
	NATC_SUB_TBL_IDX_FIRST          = 0,
	NATC_SUB_TBL_IDX_L3             = 0,
	NATC_SUB_TBL_IDX_VLAN_ACTION    = 1,
	NATC_SUB_TBL_IDX_L2             = 2,
	NATC_SUB_TBL_IDX_LAST           = 2
} rdd_natc_sub_tbl_idx;
/* <<<RDD_NATC_SUB_TBL_IDX */


/* >>>RDD_DHD_CTR_GROUP */
typedef enum
{
	DHD_CTR_GROUP_FIRST                      = 0,
	DHD_CTR_GROUP_SPINLOCK_DHD_0             = 0,
	DHD_CTR_GROUP_SPINLOCK_DHD_1             = 1,
	DHD_CTR_GROUP_SPINLOCK_DHD_2             = 2,
	DHD_CTR_GROUP_WRITE_PTR_DHD_0            = 3,
	DHD_CTR_GROUP_WRITE_PTR_DHD_1            = 4,
	DHD_CTR_GROUP_WRITE_PTR_DHD_2            = 5,
	DHD_CTR_GROUP_DHD_TX_FPM_USED_0          = 6,
	DHD_CTR_GROUP_DHD_TX_FPM_USED_1          = 7,
	DHD_CTR_GROUP_DHD_TX_FPM_USED_2          = 8,
	DHD_CTR_GROUP_DHD_TX_FPM_USED_TOTAL      = 9,
	DHD_CTR_GROUP_SPINLOCK_DEBUG_PRINT       = 10,
	DHD_CTR_GROUP_WRITE_PTR_0_DEBUG_PRINT    = 11,
	DHD_CTR_GROUP_WRITE_PTR_1_DEBUG_PRINT    = 12,
	DHD_CTR_GROUP_LAST                       = 12
} rdd_dhd_ctr_group;
/* <<<RDD_DHD_CTR_GROUP */


/* >>>RDD_DHD_CNTR */
typedef enum
{
	DHD_CNTR_FIRST                    = 0,
	DHD_CNTR_DHD_RX_DROP_0            = 0,
	DHD_CNTR_DHD_RX_DROP_1            = 1,
	DHD_CNTR_DHD_RX_DROP_2            = 2,
	DHD_CNTR_DHD_TX_FPM_DROP_0        = 3,
	DHD_CNTR_DHD_TX_FPM_DROP_1        = 4,
	DHD_CNTR_DHD_TX_FPM_DROP_2        = 5,
	DHD_CNTR_DHD_MCAST_SBPM_DROP_0    = 6,
	DHD_CNTR_DHD_MCAST_SBPM_DROP_1    = 7,
	DHD_CNTR_DHD_MCAST_SBPM_DROP_2    = 8,
	DHD_CNTR_DHD_TX_DROP_0_SSID_0     = 9,
	DHD_CNTR_DHD_TX_DROP_1_SSID_0     = 25,
	DHD_CNTR_DHD_TX_DROP_2_SSID_0     = 41,
	DHD_CNTR_DHD_TX_FR_FULL_0_AC_0    = 57,
	DHD_CNTR_DHD_TX_FR_FULL_1_AC_0    = 62,
	DHD_CNTR_DHD_TX_FR_FULL_2_AC_0    = 67,
	DHD_CNTR_DHD_DROP_LAST_CNTR       = 71,
	DHD_CNTR_LAST                     = 71
} rdd_dhd_cntr;
/* <<<RDD_DHD_CNTR */


/* >>>RDD_ACTION */
typedef enum
{
	ACTION_FIRST        = 0,
	ACTION_FORWARD      = 0,
	ACTION_TRAP         = 1,
	ACTION_DROP         = 2,
	ACTION_MULTICAST    = 3,
	ACTION_LAST         = 3
} rdd_action;
/* <<<RDD_ACTION */


/* >>>RDD_ENET_HEADER */
typedef enum
{
	ENET_HEADER_FIRST                = 0,
	ENET_HEADER_DA_OFFSET            = 0,
	ENET_HEADER_SA_OFFSET            = 6,
	ENET_HEADER_ETHERTYPE_OFFSET     = 12,
	ENET_HEADER_CTRL_OPCDE_OFFSET    = 14,
	ENET_HEADER_SIZE                 = 16,
	ENET_HEADER_LAST                 = 16
} rdd_enet_header;
/* <<<RDD_ENET_HEADER */


/* >>>RDD_PFC_FRAME */
typedef enum
{
	PFC_FRAME_FIRST                         = 0,
	PFC_FRAME_CLASS_ENABLE_VECTOR_OFFSET    = 0,
	PFC_FRAME_TIME_0_OFFSET                 = 2,
	PFC_FRAME_SIZE                          = 18,
	PFC_FRAME_LAST                          = 18
} rdd_pfc_frame;
/* <<<RDD_PFC_FRAME */


/* >>>RDD_IP_PROTO */
typedef enum
{
	IP_PROTO_FIRST       = 1,
	IP_PROTO_ICMP        = 1,
	IP_PROTO_IPIP        = 4,
	IP_PROTO_TCP         = 6,
	IP_PROTO_UDP         = 17,
	IP_PROTO_IPV6        = 41,
	IP_PROTO_GRE         = 47,
	IP_PROTO_UDP_LITE    = 136,
	IP_PROTO_LAST        = 136
} rdd_ip_proto;
/* <<<RDD_IP_PROTO */


/* >>>RDD_IP_FLAGS */
typedef enum
{
	IP_FLAGS_FIRST                     = 1,
	IP_FLAGS_DO_NOT_FRAGMENT_OFFSET    = 1,
	IP_FLAGS_MORE_FRAGMENTS_OFFSET     = 2,
	IP_FLAGS_LAST                      = 2
} rdd_ip_flags;
/* <<<RDD_IP_FLAGS */


/* >>>RDD_LAYER3_IPV6_HEADER */
typedef enum
{
	LAYER3_IPV6_HEADER_FIRST            = 8,
	LAYER3_IPV6_HEADER_SRC_IP_OFFSET    = 8,
	LAYER3_IPV6_HEADER_DST_IP_OFFSET    = 24,
	LAYER3_IPV6_HEADER_LAST             = 24
} rdd_layer3_ipv6_header;
/* <<<RDD_LAYER3_IPV6_HEADER */


/* >>>RDD_LAYER3_HEADER */
typedef enum
{
	LAYER3_HEADER_FIRST                    = 0,
	LAYER3_HEADER_TRAFIC_CLASS_OFFSET      = 0,
	LAYER3_HEADER_TOS_OFFSET               = 1,
	LAYER3_HEADER_TOTAL_LENGTH_OFFSET      = 2,
	LAYER3_HEADER_PAYLOAD_LENGTH_OFFSET    = 4,
	LAYER3_HEADER_FLAGS_OFFSET             = 6,
	LAYER3_HEADER_HOP_LIMIT_OFFSET         = 7,
	LAYER3_HEADER_TTL_OFFSET               = 8,
	LAYER3_HEADER_PROTOCOL_OFFSET          = 9,
	LAYER3_HEADER_IP_CHECKSUM_OFFSET       = 10,
	LAYER3_HEADER_SRC_IP_OFFSET            = 12,
	LAYER3_HEADER_DST_IP_OFFSET            = 16,
	LAYER3_HEADER_LAST                     = 16
} rdd_layer3_header;
/* <<<RDD_LAYER3_HEADER */


/* >>>RDD_LAYER3_PSEUDO_HEADER */
typedef enum
{
	LAYER3_PSEUDO_HEADER_FIRST                = 0,
	LAYER3_PSEUDO_HEADER_SRC_IP_OFFSET        = 0,
	LAYER3_PSEUDO_HEADER_DST_IP_OFFSET        = 4,
	LAYER3_PSEUDO_HEADER_PROTOCOL_OFFSET      = 8,
	LAYER3_PSEUDO_HEADER_LENGTH_OFFSET        = 10,
	LAYER3_PSEUDO_HEADER_HDR_LENGTH           = 12,
	LAYER3_PSEUDO_HEADER_PROTOCOL_F_WIDTH     = 16,
	LAYER3_PSEUDO_HEADER_PROTOCOL_F_OFFSET    = 16,
	LAYER3_PSEUDO_HEADER_LAST                 = 16
} rdd_layer3_pseudo_header;
/* <<<RDD_LAYER3_PSEUDO_HEADER */


/* >>>RDD_LAYER3_IPV6_PSEUDO_HEADER */
typedef enum
{
	LAYER3_IPV6_PSEUDO_HEADER_FIRST              = 0,
	LAYER3_IPV6_PSEUDO_HEADER_SRC_IP_OFFSET      = 0,
	LAYER3_IPV6_PSEUDO_HEADER_DST_IP_OFFSET      = 16,
	LAYER3_IPV6_PSEUDO_HEADER_LENGTH_OFFSET      = 32,
	LAYER3_IPV6_PSEUDO_HEADER_PROTOCOL_OFFSET    = 36,
	LAYER3_IPV6_PSEUDO_HEADER_HDR_LENGTH         = 40,
	LAYER3_IPV6_PSEUDO_HEADER_LAST               = 40
} rdd_layer3_ipv6_pseudo_header;
/* <<<RDD_LAYER3_IPV6_PSEUDO_HEADER */


/* >>>RDD_LAYER4_HEADER */
typedef enum
{
	LAYER4_HEADER_FIRST                                = 0,
	LAYER4_HEADER_SRC_PORT_OFFSET                      = 0,
	LAYER4_HEADER_ESP_SPI_OFFSET                       = 0,
	LAYER4_HEADER_DST_PORT_OFFSET                      = 2,
	LAYER4_HEADER_UDP_LITE_CHECKSUM_COVERAGE_OFFSET    = 4,
	LAYER4_HEADER_TCP_LENGTH_F_WIDTH                   = 4,
	LAYER4_HEADER_UDP_CHECKSUM_OFFSET                  = 6,
	LAYER4_HEADER_GRE_CALL_ID_OFFSET                   = 6,
	LAYER4_HEADER_UDP_HDR_LENGTH                       = 8,
	LAYER4_HEADER_TCP_LENGTH_OFFSET                    = 12,
	LAYER4_HEADER_TCP_FLAGS_OFFSET                     = 13,
	LAYER4_HEADER_TCP_CHECKSUM_OFFSET                  = 16,
	LAYER4_HEADER_TCP_HDR_MIN_LENGTH                   = 20,
	LAYER4_HEADER_TCP_LENGTH_F_OFFSET                  = 28,
	LAYER4_HEADER_LAST                                 = 28
} rdd_layer4_header;
/* <<<RDD_LAYER4_HEADER */


/* >>>RDD_PARSER_L2_PROTOCOL */
typedef enum
{
	PARSER_L2_PROTOCOL_FIRST             = 1,
	PARSER_L2_PROTOCOL_PPPOE_D           = 1,
	PARSER_L2_PROTOCOL_PPPOE_S           = 2,
	PARSER_L2_PROTOCOL_USER_DEFINED_0    = 8,
	PARSER_L2_PROTOCOL_USER_DEFINED_1    = 9,
	PARSER_L2_PROTOCOL_USER_DEFINED_2    = 10,
	PARSER_L2_PROTOCOL_USER_DEFINED_3    = 11,
	PARSER_L2_PROTOCOL_ARP               = 12,
	PARSER_L2_PROTOCOL__1588             = 13,
	PARSER_L2_PROTOCOL__802_1X           = 14,
	PARSER_L2_PROTOCOL_MASK              = 15,
	PARSER_L2_PROTOCOL__802_1AG_CFM      = 15,
	PARSER_L2_PROTOCOL_LAST              = 15
} rdd_parser_l2_protocol;
/* <<<RDD_PARSER_L2_PROTOCOL */


/* >>>RDD_PARSER_L3_PROTOCOL */
typedef enum
{
	PARSER_L3_PROTOCOL_FIRST    = 0,
	PARSER_L3_PROTOCOL_OTHER    = 0,
	PARSER_L3_PROTOCOL_IPV4     = 1,
	PARSER_L3_PROTOCOL_IPV6     = 2,
	PARSER_L3_PROTOCOL_MASK     = 3,
	PARSER_L3_PROTOCOL_LAST     = 3
} rdd_parser_l3_protocol;
/* <<<RDD_PARSER_L3_PROTOCOL */


/* >>>RDD_PARSER_L4_PROTOCOL */
typedef enum
{
	PARSER_L4_PROTOCOL_FIRST             = 0,
	PARSER_L4_PROTOCOL_OTHER             = 0,
	PARSER_L4_PROTOCOL_TCP               = 1,
	PARSER_L4_PROTOCOL_UDP               = 2,
	PARSER_L4_PROTOCOL_IGMP              = 3,
	PARSER_L4_PROTOCOL_ICMP              = 4,
	PARSER_L4_PROTOCOL_ICMPV6            = 5,
	PARSER_L4_PROTOCOL_ESP               = 6,
	PARSER_L4_PROTOCOL_GRE               = 7,
	PARSER_L4_PROTOCOL_USER_DEFINED_0    = 8,
	PARSER_L4_PROTOCOL_USER_DEFINED_1    = 9,
	PARSER_L4_PROTOCOL_USER_DEFINED_2    = 10,
	PARSER_L4_PROTOCOL_USER_DEFINED_3    = 11,
	PARSER_L4_PROTOCOL_RESERVED          = 12,
	PARSER_L4_PROTOCOL_IPV6              = 13,
	PARSER_L4_PROTOCOL_AH                = 14,
	PARSER_L4_PROTOCOL_NOT_PARSED        = 15,
	PARSER_L4_PROTOCOL_MASK              = 15,
	PARSER_L4_PROTOCOL_LAST              = 15
} rdd_parser_l4_protocol;
/* <<<RDD_PARSER_L4_PROTOCOL */


/* >>>RDD_ACTION_ECN */
typedef enum
{
	ACTION_ECN_FIRST               = 0,
	ACTION_ECN_REMARKING_OFFSET    = 0,
	ACTION_ECN_REMARKING_WIDTH     = 2,
	ACTION_ECN_LAST                = 2
} rdd_action_ecn;
/* <<<RDD_ACTION_ECN */


/* >>>RDD_ACTION_DSCP */
typedef enum
{
	ACTION_DSCP_FIRST                             = 2,
	ACTION_DSCP_REMARKING_OFFSET                  = 2,
	ACTION_DSCP_REMARKING_TRAFFIC_CLASS_OFFSET    = 4,
	ACTION_DSCP_REMARKING_WIDTH                   = 6,
	ACTION_DSCP_REMARKING_TRAFFIC_CLASS_WIDTH     = 8,
	ACTION_DSCP_LAST                              = 8
} rdd_action_dscp;
/* <<<RDD_ACTION_DSCP */


/* >>>RDD_ACTION_OUTER */
typedef enum
{
	ACTION_OUTER_FIRST                         = 14,
	ACTION_OUTER_PBITS_REMARKING_VID_OFFSET    = 14,
	ACTION_OUTER_LAST                          = 14
} rdd_action_outer;
/* <<<RDD_ACTION_OUTER */


/* >>>RDD_ACTION_INNER */
typedef enum
{
	ACTION_INNER_FIRST                         = 18,
	ACTION_INNER_PBITS_REMARKING_VID_OFFSET    = 18,
	ACTION_INNER_LAST                          = 18
} rdd_action_inner;
/* <<<RDD_ACTION_INNER */


/* >>>RDD_ACTION_PBITS */
typedef enum
{
	ACTION_PBITS_FIRST                        = 2,
	ACTION_PBITS_REMARKING_DSCP_F_OFFSET      = 2,
	ACTION_PBITS_REMARKING_PACKET_F_WIDTH     = 3,
	ACTION_PBITS_REMARKING_DSCP_F_WIDTH       = 6,
	ACTION_PBITS_REMARKING_PACKET_F_OFFSET    = 13,
	ACTION_PBITS_LAST                         = 13
} rdd_action_pbits;
/* <<<RDD_ACTION_PBITS */


/* >>>RDD_ACTION_DS_LITE */
typedef enum
{
	ACTION_DS_LITE_FIRST   = 40,
	ACTION_DS_LITE_SIZE    = 40,
	ACTION_DS_LITE_LAST    = 40
} rdd_action_ds_lite;
/* <<<RDD_ACTION_DS_LITE */


/* >>>RDD_DS_ACTION_ID */
typedef enum
{
	DS_ACTION_ID_FIRST        = 0,
	DS_ACTION_ID_TRAP         = 0,
	DS_ACTION_ID_TTL          = 2,
	DS_ACTION_ID_DSCP         = 4,
	DS_ACTION_ID_NAT          = 5,
	DS_ACTION_ID_GRE          = 6,
	DS_ACTION_ID_OPBITS       = 7,
	DS_ACTION_ID_IPBITS       = 8,
	DS_ACTION_ID_DS_LITE      = 9,
	DS_ACTION_ID_PPPOE        = 10,
	DS_ACTION_ID_TOTAL_NUM    = 17,
	DS_ACTION_ID_LAST         = 17
} rdd_ds_action_id;
/* <<<RDD_DS_ACTION_ID */


/* >>>RDD_US_ACTION_ID */
typedef enum
{
	US_ACTION_ID_FIRST        = 0,
	US_ACTION_ID_TRAP         = 0,
	US_ACTION_ID_TTL          = 2,
	US_ACTION_ID_DSCP         = 4,
	US_ACTION_ID_NAT          = 5,
	US_ACTION_ID_GRE          = 6,
	US_ACTION_ID_OPBITS       = 7,
	US_ACTION_ID_IPBITS       = 8,
	US_ACTION_ID_DS_LITE      = 9,
	US_ACTION_ID_PPPOE        = 10,
	US_ACTION_ID_TOTAL_NUM    = 17,
	US_ACTION_ID_LAST         = 17
} rdd_us_action_id;
/* <<<RDD_US_ACTION_ID */


/* >>>RDD_RDD_VPORT */
typedef enum
{
	RDD_VPORT_FIRST    = 0,
	RDD_VPORT_ID_0     = 0,
	RDD_VPORT_ID_1     = 1,
	RDD_VPORT_ID_2     = 2,
	RDD_VPORT_ID_3     = 3,
	RDD_VPORT_ID_4     = 4,
	RDD_VPORT_ID_5     = 5,
	RDD_VPORT_ID_6     = 6,
	RDD_VPORT_ID_7     = 7,
	RDD_VPORT_ID_8     = 8,
	RDD_VPORT_ID_9     = 9,
	RDD_VPORT_ID_10    = 10,
	RDD_VPORT_ID_11    = 11,
	RDD_VPORT_ID_12    = 12,
	RDD_VPORT_ID_13    = 13,
	RDD_VPORT_ID_14    = 14,
	RDD_VPORT_ID_15    = 15,
	RDD_VPORT_ID_16    = 16,
	RDD_VPORT_ID_17    = 17,
	RDD_VPORT_ID_18    = 18,
	RDD_VPORT_ID_19    = 19,
	RDD_VPORT_ID_20    = 20,
	RDD_VPORT_ID_21    = 21,
	RDD_VPORT_ID_22    = 22,
	RDD_VPORT_ID_23    = 23,
	RDD_VPORT_ID_24    = 24,
	RDD_VPORT_ID_25    = 25,
	RDD_VPORT_ID_26    = 26,
	RDD_VPORT_ID_27    = 27,
	RDD_VPORT_ID_28    = 28,
	RDD_VPORT_ID_29    = 29,
	RDD_VPORT_ID_30    = 30,
	RDD_VPORT_ID_31    = 31,
	RDD_VPORT_ID_32    = 32,
	RDD_VPORT_ID_33    = 33,
	RDD_VPORT_ID_34    = 34,
	RDD_VPORT_ID_35    = 35,
	RDD_VPORT_ID_36    = 36,
	RDD_VPORT_ID_37    = 37,
	RDD_VPORT_ID_38    = 38,
	RDD_VPORT_ID_39    = 39,
	RDD_VPORT_LAST     = 39
} rdd_rdd_vport;
/* <<<RDD_RDD_VPORT */


/* >>>RDD_DSCP_TO */
typedef enum
{
	DSCP_TO_FIRST                 = 6,
	DSCP_TO_PBITS_SHIFT_OFFSET    = 6,
	DSCP_TO_LAST                  = 6
} rdd_dscp_to;
/* <<<RDD_DSCP_TO */


/* >>>RDD_RESOLUTION_CONTEXT */
typedef enum
{
	RESOLUTION_CONTEXT_FIRST                          = 0,
	RESOLUTION_CONTEXT_VIRTUAL_SRC_PORT_OFFSET        = 0,
	RESOLUTION_CONTEXT_GPE_DMA_OFFSET_WIDTH           = 1,
	RESOLUTION_CONTEXT_GPE_HEADER_LENGTH_WIDTH        = 1,
	RESOLUTION_CONTEXT_GPE_HEADER_IH_PTR_WIDTH        = 2,
	RESOLUTION_CONTEXT_GPE_COMMAND_LIST_PTR_WIDTH     = 2,
	RESOLUTION_CONTEXT_GPE_PACKET_DRR_PTR_WIDTH       = 4,
	RESOLUTION_CONTEXT_GPE_HEADER_LENGTH_OFFSET       = 6,
	RESOLUTION_CONTEXT_GPE_DMA_OFFSET_OFFSET          = 7,
	RESOLUTION_CONTEXT_GPE_COMMAND_LIST_PTR_OFFSET    = 8,
	RESOLUTION_CONTEXT_GPE_HEADER_IH_PTR_OFFSET       = 10,
	RESOLUTION_CONTEXT_GPE_PACKET_DRR_PTR_OFFSET      = 12,
	RESOLUTION_CONTEXT_LAST                           = 12
} rdd_resolution_context;
/* <<<RDD_RESOLUTION_CONTEXT */


/* >>>RDD_FFI */
typedef enum
{
	FFI_FIRST           = 3,
	FFI_8_LOG2_SIZE     = 3,
	FFI_16_LOG2_SIZE    = 4,
	FFI_32_LOG2_SIZE    = 5,
	FFI_8_SIZE          = 8,
	FFI_16_SIZE         = 16,
	FFI_32_SIZE         = 32,
	FFI_LAST            = 32
} rdd_ffi;
/* <<<RDD_FFI */


/* >>>RDD_CPU_RX_REASON */
typedef enum
{
	CPU_RX_REASON_FIRST                 = 0,
	CPU_RX_REASON_OAM                   = 0,
	CPU_RX_REASON_PLOAM                 = 0,
	CPU_RX_REASON_OMCI                  = 1,
	CPU_RX_REASON_MPCP                  = 1,
	CPU_RX_REASON_FLOW                  = 2,
	CPU_RX_REASON_MULTICAST             = 3,
	CPU_RX_REASON_BROADCAST             = 4,
	CPU_RX_REASON_IGMP                  = 5,
	CPU_RX_REASON_ICMPV6                = 6,
	CPU_RX_REASON_MAC_TRAP_0            = 7,
	CPU_RX_REASON_MAC_TRAP_1            = 8,
	CPU_RX_REASON_MAC_TRAP_2            = 9,
	CPU_RX_REASON_MAC_TRAP_3            = 10,
	CPU_RX_REASON_DHCP                  = 11,
	CPU_RX_REASON_NON_TCP_UDP           = 12,
	CPU_RX_REASON_LOCAL_IP              = 13,
	CPU_RX_REASON_IP_HEADER_ERROR       = 14,
	CPU_RX_REASON_SA_MOVE               = 15,
	CPU_RX_REASON_UNKNOWN_SA            = 16,
	CPU_RX_REASON_UNKNOWN_DA            = 17,
	CPU_RX_REASON_IP_FRAGMENT           = 18,
	CPU_RX_REASON_MAC_SPOOFING          = 19,
	CPU_RX_REASON_DIRECT_FLOW           = 20,
	CPU_RX_REASON_MCAST_MISS            = 21,
	CPU_RX_REASON_IPSEC                 = 22,
	CPU_RX_REASON_RESERVED_0            = 23,
	CPU_RX_REASON_RESERVED_1            = 24,
	CPU_RX_REASON_RESERVED_2            = 25,
	CPU_RX_REASON_L2CP                  = 26,
	CPU_RX_REASON_CPU_MIRRORING         = 27,
	CPU_RX_REASON_ETYPE_UDEF_0          = 28,
	CPU_RX_REASON_ETYPE_UDEF_1          = 29,
	CPU_RX_REASON_ETYPE_UDEF_2          = 30,
	CPU_RX_REASON_ETYPE_UDEF_3          = 31,
	CPU_RX_REASON_ETYPE_PPPOE_D         = 32,
	CPU_RX_REASON_ETYPE_PPPOE_S         = 33,
	CPU_RX_REASON_ETYPE_ARP             = 34,
	CPU_RX_REASON__1588                 = 35,
	CPU_RX_REASON_ETYPE_802_1X          = 36,
	CPU_RX_REASON_ETYPE_802_1AG_CFM     = 37,
	CPU_RX_REASON_PCI_IP_FLOW_MISS_1    = 38,
	CPU_RX_REASON_PCI_IP_FLOW_MISS_2    = 39,
	CPU_RX_REASON_PCI_IP_FLOW_MISS_3    = 40,
	CPU_RX_REASON_IP_FLOW_MISS          = 41,
	CPU_RX_REASON_TCP_FLAGS             = 42,
	CPU_RX_REASON_TTL_EXPIRED           = 43,
	CPU_RX_REASON_MTU_EXCEEDED          = 44,
	CPU_RX_REASON_L4_ICMP               = 45,
	CPU_RX_REASON_L4_ESP                = 46,
	CPU_RX_REASON_L4_GRE                = 47,
	CPU_RX_REASON_L4_AH                 = 48,
	CPU_RX_REASON_PARSER_ERROR          = 49,
	CPU_RX_REASON_L4_IPV6               = 50,
	CPU_RX_REASON_L4_UDEF_0             = 51,
	CPU_RX_REASON_L4_UDEF_1             = 52,
	CPU_RX_REASON_L4_UDEF_2             = 53,
	CPU_RX_REASON_L4_UDEF_3             = 54,
	CPU_RX_REASON_CPU_REDIRECT          = 55,
	CPU_RX_REASON_UDEF_0                = 56,
	CPU_RX_REASON_UDEF_1                = 57,
	CPU_RX_REASON_UDEF_2                = 58,
	CPU_RX_REASON_UDEF_3                = 59,
	CPU_RX_REASON_UDEF_4                = 60,
	CPU_RX_REASON_UDEF_5                = 61,
	CPU_RX_REASON_UDEF_6                = 62,
	CPU_RX_REASON_UDEF_7                = 63,
	CPU_RX_REASON_LAST                  = 63
} rdd_cpu_rx_reason;
/* <<<RDD_CPU_RX_REASON */


/* >>>RDD_CPU_RX_METER */
typedef enum
{
	CPU_RX_METER_FIRST      = 0,
	CPU_RX_METER_ID_0       = 0,
	CPU_RX_METER_ID_1       = 1,
	CPU_RX_METER_ID_2       = 2,
	CPU_RX_METER_ID_3       = 3,
	CPU_RX_METER_ID_4       = 4,
	CPU_RX_METER_ID_5       = 5,
	CPU_RX_METER_ID_6       = 6,
	CPU_RX_METER_ID_7       = 7,
	CPU_RX_METER_ID_8       = 8,
	CPU_RX_METER_ID_9       = 9,
	CPU_RX_METER_ID_10      = 10,
	CPU_RX_METER_ID_11      = 11,
	CPU_RX_METER_ID_12      = 12,
	CPU_RX_METER_ID_13      = 13,
	CPU_RX_METER_ID_14      = 14,
	CPU_RX_METER_ID_15      = 15,
	CPU_RX_METER_DISABLE    = 255,
	CPU_RX_METER_LAST       = 255
} rdd_cpu_rx_meter;
/* <<<RDD_CPU_RX_METER */


/* >>>RDD_CPU_REDIRECT_TYPE */
typedef enum
{
	CPU_REDIRECT_TYPE_FIRST   = 0,
	CPU_REDIRECT_TYPE_NONE    = 0,
	CPU_REDIRECT_TYPE_ALL     = 1,
	CPU_REDIRECT_TYPE_FLOW    = 2,
	CPU_REDIRECT_TYPE_LAST    = 2
} rdd_cpu_redirect_type;
/* <<<RDD_CPU_REDIRECT_TYPE */


/* >>>RDD_CPU_RX_TC */
typedef enum
{
	CPU_RX_TC_FIRST   = 0,
	CPU_RX_TC_ID_0    = 0,
	CPU_RX_TC_ID_1    = 1,
	CPU_RX_TC_ID_2    = 2,
	CPU_RX_TC_ID_3    = 3,
	CPU_RX_TC_ID_4    = 4,
	CPU_RX_TC_ID_5    = 5,
	CPU_RX_TC_ID_6    = 6,
	CPU_RX_TC_ID_7    = 7,
	CPU_RX_TC_LAST    = 7
} rdd_cpu_rx_tc;
/* <<<RDD_CPU_RX_TC */


/* >>>RDD_CPU_RX_TYPE */
typedef enum
{
	CPU_RX_TYPE_FIRST            = 0,
	CPU_RX_TYPE_FWD              = 0,
	CPU_RX_TYPE_EXCEPTION        = 1,
	CPU_RX_TYPE_SPEED_SERVICE    = 2,
	CPU_RX_TYPE_WAN_LOOPBACK     = 3,
	CPU_RX_TYPE_LAST             = 3
} rdd_cpu_rx_type;
/* <<<RDD_CPU_RX_TYPE */


/* >>>RDD_SPDTEST */
typedef enum
{
	SPDTEST_FIRST          = 0,
	SPDTEST_NONE           = 0,
	SPDTEST_BRCM_SPDSVC    = 1,
	SPDTEST_UDP_BASIC      = 2,
	SPDTEST_UDP_IPERF3     = 3,
	SPDTEST_TCP            = 4,
	SPDTEST_LAST           = 4
} rdd_spdtest;
/* <<<RDD_SPDTEST */


/* >>>RDD_PKTGEN_TX */
typedef enum
{
	PKTGEN_TX_FIRST               = 4,
	PKTGEN_TX_NUM_OF_DATA_PKTS    = 4,
	PKTGEN_TX_NUM_OF_SBPM_HDRS    = 28,
	PKTGEN_TX_LAST                = 28
} rdd_pktgen_tx;
/* <<<RDD_PKTGEN_TX */


/* >>>RDD_TCPSPDTEST */
typedef enum
{
	TCPSPDTEST_FIRST                             = 0,
	TCPSPDTEST_DUP_ACK_STATE_NONE                = 0,
	TCPSPDTEST_DUP_ACK_STATE_WAIT_THR            = 1,
	TCPSPDTEST_UP_CWND_FACTOR_START              = 2,
	TCPSPDTEST_DUP_ACK_STATE_WAIT_EFS            = 2,
	TCPSPDTEST_DUP_ACK_STATE_WAIT_PARTIAL_ACK    = 3,
	TCPSPDTEST_DUP_ACK_STATE_PARTIAL_ACK         = 4,
	TCPSPDTEST_UP_CWND_FACTOR_MAX                = 10,
	TCPSPDTEST_NUM_OF_ERR_COR_BUFS               = 32,
	TCPSPDTEST_ERR_COR_BUF_IDX_MASK              = 127,
	TCPSPDTEST_LAST                              = 127
} rdd_tcpspdtest;
/* <<<RDD_TCPSPDTEST */


/* >>>RDD_DEBUG_PRINT_TABLE */
typedef enum
{
	DEBUG_PRINT_TABLE_FIRST   = 16384,
	DEBUG_PRINT_TABLE_SIZE    = 16384,
	DEBUG_PRINT_TABLE_LAST    = 16384
} rdd_debug_print_table;
/* <<<RDD_DEBUG_PRINT_TABLE */


/* >>>RDD_CTX_SIZE */
typedef enum
{
	CTX_SIZE_FIRST       = 0,
	CTX_SIZE_8           = 0,
	CTX_SIZE_16          = 1,
	CTX_SIZE_24          = 2,
	CTX_SIZE_32          = 3,
	CTX_SIZE_40          = 4,
	CTX_SIZE_48          = 5,
	CTX_SIZE_56          = 6,
	CTX_SIZE_64          = 7,
	CTX_SIZE_72          = 8,
	CTX_SIZE_80          = 9,
	CTX_SIZE_88          = 10,
	CTX_SIZE_96          = 11,
	CTX_SIZE_104         = 12,
	CTX_SIZE_112         = 13,
	CTX_SIZE_120         = 14,
	CTX_SIZE_128         = 15,
	CTX_SIZE_NOT_USED    = 16,
	CTX_SIZE_LAST        = 16
} rdd_ctx_size;
/* <<<RDD_CTX_SIZE */


/* >>>RDD_TCAM_IC_CMD_TYPE */
typedef enum
{
	TCAM_IC_CMD_TYPE_FIRST                   = 0,
	TCAM_IC_CMD_TYPE_PARSER_1                = 0,
	TCAM_IC_CMD_TYPE_PARSER_2                = 1,
	TCAM_IC_CMD_TYPE_PARSER_4                = 2,
	TCAM_IC_CMD_TYPE_PARSER_6                = 3,
	TCAM_IC_CMD_TYPE_PARSER_8                = 4,
	TCAM_IC_CMD_TYPE_PARSER_8_NOT_ALIGNED    = 5,
	TCAM_IC_CMD_TYPE_PACKET                  = 6,
	TCAM_IC_CMD_TYPE_L3                      = 7,
	TCAM_IC_CMD_TYPE_L4                      = 8,
	TCAM_IC_CMD_TYPE_INGRESS_PORT            = 9,
	TCAM_IC_CMD_TYPE_GEM_FLOW                = 10,
	TCAM_IC_CMD_TYPE_SOURCE_IP               = 11,
	TCAM_IC_CMD_TYPE_DESTINATION_IP          = 12,
	TCAM_IC_CMD_TYPE_NETWORK_LAYER           = 13,
	TCAM_IC_CMD_TYPE_LAST                    = 13
} rdd_tcam_ic_cmd_type;
/* <<<RDD_TCAM_IC_CMD_TYPE */


/* >>>RDD_TCAM_IC_MODULE */
typedef enum
{
	TCAM_IC_MODULE_FIRST              = 0,
	TCAM_IC_MODULE_FLOW_DS            = 0,
	TCAM_IC_MODULE_FLOW_US            = 1,
	TCAM_IC_MODULE_QOS_DS             = 2,
	TCAM_IC_MODULE_QOS_US             = 3,
	TCAM_IC_MODULE_IP_FLOW_DS         = 4,
	TCAM_IC_MODULE_ACL_DS             = 4,
	TCAM_IC_MODULE_IP_FLOW_US         = 5,
	TCAM_IC_MODULE_ACL_US             = 5,
	TCAM_IC_MODULE_IP_FLOW_MISS_DS    = 6,
	TCAM_IC_MODULE_IP_FLOW_MISS_US    = 7,
	TCAM_IC_MODULE_LAST               = 7
} rdd_tcam_ic_module;
/* <<<RDD_TCAM_IC_MODULE */


/* >>>RDD_TCAM_IC_MODULE_REF_CNT */
typedef enum
{
	TCAM_IC_MODULE_REF_CNT_FIRST                  = 0,
	TCAM_IC_MODULE_REF_CNT_FLOW                   = 0,
	TCAM_IC_MODULE_REF_CNT_QOS                    = 1,
	TCAM_IC_MODULE_REF_CNT_GENERIC_FILTER_ALL     = 2,
	TCAM_IC_MODULE_REF_CNT_GENERIC_FILTER_MISS    = 3,
	TCAM_IC_MODULE_REF_CNT_LAST                   = 3
} rdd_tcam_ic_module_ref_cnt;
/* <<<RDD_TCAM_IC_MODULE_REF_CNT */


/* >>>RDD_INGRESS_FILTER */
typedef enum
{
	INGRESS_FILTER_FIRST                = 0,
	INGRESS_FILTER_DHCP                 = 0,
	INGRESS_FILTER_ETYPE_PPPOE_D        = 1,
	INGRESS_FILTER_ETYPE_PPPOE_S        = 2,
	INGRESS_FILTER_IGMP                 = 3,
	INGRESS_FILTER_MLD                  = 4,
	INGRESS_FILTER_ICMPV6               = 5,
	INGRESS_FILTER_HDR_ERR              = 6,
	INGRESS_FILTER_IP_FRAGMENT          = 7,
	INGRESS_FILTER_ETYPE_UDEF_0         = 8,
	INGRESS_FILTER_ETYPE_UDEF_1         = 9,
	INGRESS_FILTER_ETYPE_UDEF_2         = 10,
	INGRESS_FILTER_ETYPE_UDEF_3         = 11,
	INGRESS_FILTER_ETYPE_ARP            = 12,
	INGRESS_FILTER_ETYPE_PTP_1588       = 13,
	INGRESS_FILTER_ETYPE_802_1X         = 14,
	INGRESS_FILTER_ETYPE_802_1AG_CFM    = 15,
	INGRESS_FILTER_MAC_SPOOFING         = 16,
	INGRESS_FILTER_IP_MCAST_CONTROL     = 17,
	INGRESS_FILTER_MCAST_IPV4           = 18,
	INGRESS_FILTER_MCAST_IPV6           = 19,
	INGRESS_FILTER_MCAST_L2             = 20,
	INGRESS_FILTER_MCAST                = 21,
	INGRESS_FILTER_BCAST                = 22,
	INGRESS_FILTER_L4_PTP_1588          = 23,
	INGRESS_FILTER_L2CP                 = 24,
	INGRESS_FILTER_LAST                 = 24
} rdd_ingress_filter;
/* <<<RDD_INGRESS_FILTER */


/* >>>RDD_MULTICAST_GROUP_MODE */
typedef enum
{
	MULTICAST_GROUP_MODE_FIRST       = 0,
	MULTICAST_GROUP_MODE_IANA        = 0,
	MULTICAST_GROUP_MODE_ASM_ONLY    = 1,
	MULTICAST_GROUP_MODE_SSM_ONLY    = 2,
	MULTICAST_GROUP_MODE_LAST        = 2
} rdd_multicast_group_mode;
/* <<<RDD_MULTICAST_GROUP_MODE */


/* >>>RDD_BBMSG_TYPE */
typedef enum
{
	BBMSG_TYPE_FIRST                                              = 0,
	BBMSG_TYPE_RUNNER_BBH_RX_FLOW_CONTROL                         = 0,
	BBMSG_TYPE_QM_PD_FIFO_CREDIT_FREE                             = 0,
	BBMSG_TYPE_BBH_TX_PACKET_DESCRIPTOR                           = 1,
	BBMSG_TYPE_RUNNER_SBPM_BUFFER_ALLOC                           = 1,
	BBMSG_TYPE_QM_UPDATE_FIFO_CREDIT_FREE                         = 1,
	BBMSG_TYPE_FPM_BUFFER_ALLOC                                   = 1,
	BBMSG_TYPE_FPM_BUFFER_MCAST_INCREMENT                         = 2,
	BBMSG_TYPE_RUNNER_SBPM_MCAST_INC_REQUEST                      = 2,
	BBMSG_TYPE_BBH_TX_NACK                                        = 2,
	BBMSG_TYPE_BBH_TX_ACK                                         = 3,
	BBMSG_TYPE_FPM_BUFFER_FREE                                    = 3,
	BBMSG_TYPE_BBH_SBPM_BUFFER_FREE                               = 3,
	BBMSG_TYPE_BBH_GHOST_DBR                                      = 4,
	BBMSG_TYPE_RUNNER_SBPM_CONNECT                                = 4,
	BBMSG_TYPE_RUNNER_SBPM_GET_NEXT                               = 5,
	BBMSG_TYPE_BBH_TX_REPORT_ACK                                  = 5,
	BBMSG_TYPE_BBH_SBPM_BUFFER_FREE_WITHOUT_CONTEXT               = 6,
	BBMSG_TYPE_RUNNER_SBPM_BUFFER_FREE_WITHOUT_CONTEXT            = 6,
	BBMSG_TYPE_BBH_TX_REPORT_NACK                                 = 7,
	BBMSG_TYPE_RUNNER_SBPM_INGRESS_TO_EGRESS                      = 7,
	BBMSG_TYPE_RUNNER_REORDER_PD_WRITE                            = 8,
	BBMSG_TYPE_RUNNER_DISPATCHER_PD_ACK                           = 9,
	BBMSG_TYPE_RUNNER_DISPATCHER_PD_WRITE                         = 10,
	BBMSG_TYPE_RUNNER_REORDER_TOKEN_REQUEST                       = 11,
	BBMSG_TYPE_RUNNER_REORDER_BUFFER_CONNECT                      = 12,
	BBMSG_TYPE_RUNNER_DISPATCHER_WAKEUP_PENDING                   = 13,
	BBMSG_TYPE_RUNNER_REORDER_CONNECT_REQUEST_BUFFER_CONNECTED    = 14,
	BBMSG_TYPE_RUNNER_REORDER_BUFFER_MULTICAST_CONNECT_REQUEST    = 15,
	BBMSG_TYPE_BBH_RX_DISPATCHER_PD_WRITE                         = 24,
	BBMSG_TYPE_LAST                                               = 24
} rdd_bbmsg_type;
/* <<<RDD_BBMSG_TYPE */


/* >>>RDD_ERR_RX_PD */
typedef enum
{
	ERR_RX_PD_FIRST                 = 1,
	ERR_RX_PD_NO_SBPM               = 1,
	ERR_RX_PD_PACKET_TOO_SHORT      = 2,
	ERR_RX_PD_PACKET_TOO_LONG       = 3,
	ERR_RX_PD_CRC                   = 4,
	ERR_RX_PD_ENCRYPT               = 5,
	ERR_RX_PD_NO_SDMA_CHUNK         = 6,
	ERR_RX_PD_SOP_AFTER_SOP         = 7,
	ERR_RX_PD_THIRD_FLOW_ARRIVAL    = 8,
	ERR_RX_PD_LAST                  = 8
} rdd_err_rx_pd;
/* <<<RDD_ERR_RX_PD */


/* >>>RDD_SBPM_OPCODE */
typedef enum
{
	SBPM_OPCODE_FIRST                   = 0,
	SBPM_OPCODE_MULTI_GET_NEXT          = 0,
	SBPM_OPCODE_BN_ALLOC                = 1,
	SBPM_OPCODE_MCST_INC                = 2,
	SBPM_OPCODE_BN_FREE_WITH_CONTEXT    = 3,
	SBPM_OPCODE_BN_CONNECT              = 4,
	SBPM_OPCODE_GET_NEXT                = 5,
	SBPM_OPCODE_BN_FREE_WO_CONTEXT      = 6,
	SBPM_OPCODE_INGRESS_TO_EGRESS       = 7,
	SBPM_OPCODE_LAST                    = 7
} rdd_sbpm_opcode;
/* <<<RDD_SBPM_OPCODE */


/* >>>RDD_RDD_LAN */
typedef enum
{
	RDD_LAN_FIRST           = 1,
	RDD_LAN_BRIDGE_PORT0    = 1,
	RDD_LAN_BRIDGE_PORT1    = 2,
	RDD_LAN_BRIDGE_PORT2    = 3,
	RDD_LAN_BRIDGE_PORT3    = 4,
	RDD_LAN_BRIDGE_PORT4    = 5,
	RDD_LAN_BRIDGE_PORT5    = 6,
	RDD_LAN_LAST            = 6
} rdd_rdd_lan;
/* <<<RDD_RDD_LAN */


/* >>>RDD_MAC_TYPE */
typedef enum
{
	MAC_TYPE_FIRST    = 0,
	MAC_TYPE_EMAC     = 0,
	MAC_TYPE_GPON     = 1,
	MAC_TYPE_XGPON    = 2,
	MAC_TYPE_EPON     = 3,
	MAC_TYPE_XEPON    = 4,
	MAC_TYPE_DSL      = 5,
	MAC_TYPE_AE10G    = 6,
	MAC_TYPE_AE2P5    = 7,
	MAC_TYPE_LAST     = 7
} rdd_mac_type;
/* <<<RDD_MAC_TYPE */


/* >>>RDD_SBPM */
typedef enum
{
	SBPM_FIRST                    = 16383,
	SBPM_INVALID_BUFFER_NUMBER    = 16383,
	SBPM_LAST                     = 16383
} rdd_sbpm;
/* <<<RDD_SBPM */


/* >>>RDD_FPM_POOL_ID */
typedef enum
{
	FPM_POOL_ID_FIRST            = 0,
	FPM_POOL_ID_EIGHT_BUFFERS    = 0,
	FPM_POOL_ID_FOUR_BUFFERS     = 1,
	FPM_POOL_ID_TWO_BUFFERS      = 2,
	FPM_POOL_ID_ONE_BUFFER       = 3,
	FPM_POOL_ID_LAST             = 3
} rdd_fpm_pool_id;
/* <<<RDD_FPM_POOL_ID */


/* >>>RDD_RNR */
typedef enum
{
	RNR_FIRST       = 0,
	RNR_CORE0_ID    = 0,
	RNR_CORE1_ID    = 1,
	RNR_CORE2_ID    = 2,
	RNR_CORE3_ID    = 3,
	RNR_CORE4_ID    = 4,
	RNR_CORE5_ID    = 5,
	RNR_LAST        = 5
} rdd_rnr;
/* <<<RDD_RNR */


/* >>>RDD_BB_ID */
typedef enum
{
	BB_ID_FIRST                 = 0,
	BB_ID_RNR0                  = 0,
	BB_ID_RNR1                  = 1,
	BB_ID_RNR2                  = 2,
	BB_ID_RNR3                  = 3,
	BB_ID_RNR4                  = 4,
	BB_ID_RNR5                  = 5,
	BB_ID_CNPL                  = 17,
	BB_ID_DISPATCHER_REORDER    = 18,
	BB_ID_DMA0                  = 19,
	BB_ID_SDMA0                 = 21,
	BB_ID_SDMA1                 = 22,
	BB_ID_FPM                   = 23,
	BB_ID_HASH                  = 24,
	BB_ID_NATC                  = 25,
	BB_ID_QM_CP_SDMA            = 26,
	BB_ID_QM_RNR_GRID           = 27,
	BB_ID_QM_BBHTX              = 28,
	BB_ID_QM_TOP                = 29,
	BB_ID_QM_CP_MACHINE         = 30,
	BB_ID_RX_BBH_0              = 31,
	BB_ID_TX_LAN                = 32,
	BB_ID_RX_BBH_1              = 33,
	BB_ID_RX_BBH_2              = 35,
	BB_ID_ACB                   = 47,
	BB_ID_SBPM                  = 48,
	BB_ID_TCAM_0                = 49,
	BB_ID_RX_PON                = 50,
	BB_ID_TX_PON                = 51,
	BB_ID_TX_PON_STAT           = 52,
	BB_ID_RX_DSL                = 53,
	BB_ID_TX_DSL                = 54,
	BB_ID_TX_DSL_STAT           = 55,
	BB_ID_RX_10G                = 56,
	BB_ID_TX_10G                = 57,
	BB_ID_RX_2P5                = 58,
	BB_ID_TX_2P5                = 59,
	BB_ID_LAST                  = 59
} rdd_bb_id;
/* <<<RDD_BB_ID */


/* >>>RDD_GPE_COMMAND_LIST */
typedef enum
{
	GPE_COMMAND_LIST_FIRST         = 0,
	GPE_COMMAND_LIST_TERMINATOR    = 0,
	GPE_COMMAND_LIST_LAST          = 0
} rdd_gpe_command_list;
/* <<<RDD_GPE_COMMAND_LIST */


/* >>>RDD_VLAN_ACTION_GPE_OPCODE */
typedef enum
{
	VLAN_ACTION_GPE_OPCODE_FIRST              = 0,
	VLAN_ACTION_GPE_OPCODE_DROP               = 0,
	VLAN_ACTION_GPE_OPCODE_DSCP               = 1,
	VLAN_ACTION_GPE_OPCODE_MAC_HDR_COPY       = 2,
	VLAN_ACTION_GPE_OPCODE_REPLACE_16         = 3,
	VLAN_ACTION_GPE_OPCODE_REPLACE_32         = 4,
	VLAN_ACTION_GPE_OPCODE_REPLACE_BITS_16    = 5,
	VLAN_ACTION_GPE_OPCODE_COPY_BITS_16       = 6,
	VLAN_ACTION_GPE_OPCODE_SKIP_IF            = 7,
	VLAN_ACTION_GPE_OPCODE_LAST               = 7
} rdd_vlan_action_gpe_opcode;
/* <<<RDD_VLAN_ACTION_GPE_OPCODE */


/* >>>RDD_VLAN_ACTION_TPID_VALUE */
typedef enum
{
	VLAN_ACTION_TPID_VALUE_FIRST         = 0,
	VLAN_ACTION_TPID_VALUE_UNASSIGNED    = 0,
	VLAN_ACTION_TPID_VALUE_LAST          = 0
} rdd_vlan_action_tpid_value;
/* <<<RDD_VLAN_ACTION_TPID_VALUE */


/* >>>RDD_VLAN_ACTION_CL_OFFSET */
typedef enum
{
	VLAN_ACTION_CL_OFFSET_FIRST          = 0,
	VLAN_ACTION_CL_OFFSET_UNTAGGED       = 0,
	VLAN_ACTION_CL_OFFSET_1TAG           = 1,
	VLAN_ACTION_CL_OFFSET_2TAGS          = 2,
	VLAN_ACTION_CL_OFFSET_PTAG           = 3,
	VLAN_ACTION_CL_OFFSET_TRANSPARENT    = 255,
	VLAN_ACTION_CL_OFFSET_LAST           = 255
} rdd_vlan_action_cl_offset;
/* <<<RDD_VLAN_ACTION_CL_OFFSET */


/* >>>RDD_FR_FORMAT */
typedef enum
{
	FR_FORMAT_FIRST        = 0,
	FR_FORMAT_WI_WI64      = 0,
	FR_FORMAT_WI_CWI32     = 1,
	FR_FORMAT_WI_CWI64     = 2,
	FR_FORMAT_WI_ACWI32    = 3,
	FR_FORMAT_WI_ACWI64    = 4,
	FR_FORMAT_LAST         = 4
} rdd_fr_format;
/* <<<RDD_FR_FORMAT */


/* >>>RDD_BACKUP_INDEX */
typedef enum
{
	BACKUP_INDEX_FIRST        = 21760,
	BACKUP_INDEX_FIFO_SIZE    = 21760,
	BACKUP_INDEX_LAST         = 21760
} rdd_backup_index;
/* <<<RDD_BACKUP_INDEX */


/* >>>RDD_DMA_TYPE */
typedef enum
{
	DMA_TYPE_FIRST         = 1,
	DMA_TYPE_IDMA          = 1,
	DMA_TYPE_HWA_RXPOST    = 5,
	DMA_TYPE_HWA_TXCPL     = 6,
	DMA_TYPE_HWA_RXCPL     = 7,
	DMA_TYPE_LAST          = 7
} rdd_dma_type;
/* <<<RDD_DMA_TYPE */


/* >>>RDD_DHD */
typedef enum
{
	DHD_FIRST         = 3,
	DHD_MAX_RADIOS    = 3,
	DHD_LAST          = 3
} rdd_dhd;
/* <<<RDD_DHD */

#endif


/* Hardware defines */

/* >>>RDD_MCAST_RESOLUTION */
#define MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_F_OFFSET                                             0
#define MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_F_WIDTH                                              32
#define MCAST_RESOLUTION_MCAST_RESOLUTION_OFFSET                                                  0
#define MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_OFFSET                                               0
#define MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_WORD_OFFSET                                          0
#define MCAST_RESOLUTION_IPTV_REPL_0_SOP_F_OFFSET                                                 24
#define MCAST_RESOLUTION_IPTV_REPL_0_SOP_F_WIDTH                                                  8
#define MCAST_RESOLUTION_IPTV_REPL_0_SOP_OFFSET                                                   4
#define MCAST_RESOLUTION_IPTV_REPL_0_SOP_WORD_OFFSET                                              1
#define MCAST_RESOLUTION_IPTV_REPL_0_SOP_F_OFFSET_MOD16                                           8
#define MCAST_RESOLUTION_POOL_NUM_F_OFFSET                                                        22
#define MCAST_RESOLUTION_POOL_NUM_F_WIDTH                                                         2
#define MCAST_RESOLUTION_POOL_NUM_OFFSET                                                          5
#define MCAST_RESOLUTION_POOL_NUM_WORD_OFFSET                                                     1
#define MCAST_RESOLUTION_POOL_NUM_F_OFFSET_MOD8                                                   6
#define MCAST_RESOLUTION_POOL_NUM_F_OFFSET_MOD16                                                  6
#define MCAST_RESOLUTION_REPLICATIONS_F_OFFSET                                                    16
#define MCAST_RESOLUTION_REPLICATIONS_F_WIDTH                                                     6
#define MCAST_RESOLUTION_REPLICATIONS_OFFSET                                                      5
#define MCAST_RESOLUTION_REPLICATIONS_WORD_OFFSET                                                 1
#define MCAST_RESOLUTION_REPLICATIONS_F_OFFSET_MOD8                                               0
#define MCAST_RESOLUTION_REPLICATIONS_F_OFFSET_MOD16                                              0
#define MCAST_RESOLUTION_INGRESS_VPORT_F_OFFSET                                                   8
#define MCAST_RESOLUTION_INGRESS_VPORT_F_WIDTH                                                    8
#define MCAST_RESOLUTION_INGRESS_VPORT_OFFSET                                                     6
#define MCAST_RESOLUTION_INGRESS_VPORT_WORD_OFFSET                                                1
#define MCAST_RESOLUTION_INGRESS_VPORT_F_OFFSET_MOD16                                             8
#define MCAST_RESOLUTION_TC_F_OFFSET                                                              0
#define MCAST_RESOLUTION_TC_F_WIDTH                                                               3
#define MCAST_RESOLUTION_TC_OFFSET                                                                7
#define MCAST_RESOLUTION_TC_WORD_OFFSET                                                           1
#define MCAST_RESOLUTION_TC_F_OFFSET_MOD8                                                         0
#define MCAST_RESOLUTION_TC_F_OFFSET_MOD16                                                        0

/* >>>RDD_MCAST_RESOLUTION_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	egress_ports_vector	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	iptv_repl_0_sop    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pool_num           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	replications       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ingress_vport      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tc                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	egress_ports_vector	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tc                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ingress_vport      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	replications       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pool_num           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	iptv_repl_0_sop    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_MCAST_RESOLUTION_DTS;

typedef RDD_MCAST_RESOLUTION_DTS * aligned_RDD_MCAST_RESOLUTION_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_MCAST_RESOLUTION_DTS fields;
} RDD_MCAST_RESOLUTION_DTS_NEW;
typedef RDD_MCAST_RESOLUTION_DTS_NEW * aligned_RDD_MCAST_RESOLUTION_DTS_NEW ALIGNMENT8;

#define RDD_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS), r)
#define RDD_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS), v)
#define RDD_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
#define RDD_MCAST_RESOLUTION_IPTV_REPL_0_SOP_READ_G(r, g, idx)              GROUP_MREAD_8(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS) + 4, r)
#define RDD_MCAST_RESOLUTION_IPTV_REPL_0_SOP_WRITE_G(v, g, idx)             GROUP_MWRITE_8(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS) + 4, v)
#define RDD_MCAST_RESOLUTION_IPTV_REPL_0_SOP_READ(r, p)                     MREAD_8((uint8_t *)p + 4, r)
#define RDD_MCAST_RESOLUTION_IPTV_REPL_0_SOP_WRITE(v, p)                    MWRITE_8((uint8_t *)p + 4, v)
#define RDD_MCAST_RESOLUTION_POOL_NUM_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS) + 5, 6, 2, r)
#define RDD_MCAST_RESOLUTION_POOL_NUM_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS) + 5, 6, 2, v)
#define RDD_MCAST_RESOLUTION_POOL_NUM_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 5, 6, 2, r)
#define RDD_MCAST_RESOLUTION_POOL_NUM_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 5, 6, 2, v)
#define RDD_MCAST_RESOLUTION_REPLICATIONS_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS) + 5, 0, 6, r)
#define RDD_MCAST_RESOLUTION_REPLICATIONS_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS) + 5, 0, 6, v)
#define RDD_MCAST_RESOLUTION_REPLICATIONS_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 5, 0, 6, r)
#define RDD_MCAST_RESOLUTION_REPLICATIONS_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 5, 0, 6, v)
#define RDD_MCAST_RESOLUTION_INGRESS_VPORT_READ_G(r, g, idx)                GROUP_MREAD_8(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS) + 6, r)
#define RDD_MCAST_RESOLUTION_INGRESS_VPORT_WRITE_G(v, g, idx)               GROUP_MWRITE_8(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS) + 6, v)
#define RDD_MCAST_RESOLUTION_INGRESS_VPORT_READ(r, p)                       MREAD_8((uint8_t *)p + 6, r)
#define RDD_MCAST_RESOLUTION_INGRESS_VPORT_WRITE(v, p)                      MWRITE_8((uint8_t *)p + 6, v)
#define RDD_MCAST_RESOLUTION_TC_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS) + 7, 0, 3, r)
#define RDD_MCAST_RESOLUTION_TC_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MCAST_RESOLUTION_DTS) + 7, 0, 3, v)
#define RDD_MCAST_RESOLUTION_TC_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 7, 0, 3, r)
#define RDD_MCAST_RESOLUTION_TC_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 7, 0, 3, v)
/* <<<RDD_MCAST_RESOLUTION_DTS */

/* <<<RDD_MCAST_RESOLUTION */


/* >>>RDD_PACKET_BUFFER_SCRATCH_ENTRY */
#define PACKET_BUFFER_SCRATCH_ENTRY_PACKET_BUFFER_SCRATCH_ENTRY_OFFSET                                       0
#define PACKET_BUFFER_SCRATCH_ENTRY_NATC_CFG_OFFSET                                                          0
#define PACKET_BUFFER_SCRATCH_ENTRY_NATC_CFG_WORD_OFFSET                                                     0
#define PACKET_BUFFER_SCRATCH_ENTRY_NATC_CFG_F_OFFSET_MOD16                                                  0

/* >>>RDD_PACKET_BUFFER_SCRATCH_ENTRY_DTS */
#define RDD_PACKET_BUFFER_SCRATCH_ENTRY_NATC_CFG_NUMBER	8
#define RDD_PACKET_BUFFER_SCRATCH_ENTRY_RESERVED_NUMBER	128

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	natc_cfg[RDD_PACKET_BUFFER_SCRATCH_ENTRY_NATC_CFG_NUMBER];
	uint8_t	reserved[RDD_PACKET_BUFFER_SCRATCH_ENTRY_RESERVED_NUMBER];
#else
	uint8_t	natc_cfg[RDD_PACKET_BUFFER_SCRATCH_ENTRY_NATC_CFG_NUMBER];
	uint8_t	reserved[RDD_PACKET_BUFFER_SCRATCH_ENTRY_RESERVED_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PACKET_BUFFER_SCRATCH_ENTRY_DTS;

typedef RDD_PACKET_BUFFER_SCRATCH_ENTRY_DTS * aligned_RDD_PACKET_BUFFER_SCRATCH_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[34];
    uint64_t dword_val64[17];
    RDD_PACKET_BUFFER_SCRATCH_ENTRY_DTS fields;
} RDD_PACKET_BUFFER_SCRATCH_ENTRY_DTS_NEW;
typedef RDD_PACKET_BUFFER_SCRATCH_ENTRY_DTS_NEW * aligned_RDD_PACKET_BUFFER_SCRATCH_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_PACKET_BUFFER_SCRATCH_ENTRY_NATC_CFG_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_SCRATCH_ENTRY_DTS), i, r)
#define RDD_PACKET_BUFFER_SCRATCH_ENTRY_NATC_CFG_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_SCRATCH_ENTRY_DTS), i, v)
#define RDD_PACKET_BUFFER_SCRATCH_ENTRY_NATC_CFG_READ(r, p, i)              MREAD_I_8((uint8_t *)p, i, r)
#define RDD_PACKET_BUFFER_SCRATCH_ENTRY_NATC_CFG_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p, i, v)
/* <<<RDD_PACKET_BUFFER_SCRATCH_ENTRY_DTS */

/* <<<RDD_PACKET_BUFFER_SCRATCH_ENTRY */


/* >>>RDD_FLOW_BASED_RESOLUTION */
#define FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_F_OFFSET                                                   31
#define FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_F_WIDTH                                                    1
#define FLOW_BASED_RESOLUTION_FLOW_BASED_RESOLUTION_OFFSET                                             0
#define FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_OFFSET                                                     0
#define FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_WORD_OFFSET                                                0
#define FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_F_OFFSET_MOD8                                              7
#define FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_F_OFFSET_MOD16                                             15
#define FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_F_OFFSET                                                   28
#define FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_F_WIDTH                                                    3
#define FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_OFFSET                                                     0
#define FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_WORD_OFFSET                                                0
#define FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_F_OFFSET_MOD8                                              4
#define FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_F_OFFSET_MOD16                                             12
#define FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_F_OFFSET                                             16
#define FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_F_WIDTH                                              12
#define FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_OFFSET                                               0
#define FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_WORD_OFFSET                                          0
#define FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_F_OFFSET_MOD16                                       0
#define FLOW_BASED_RESOLUTION_POLICER_DEI_F_OFFSET                                                     8
#define FLOW_BASED_RESOLUTION_POLICER_DEI_F_WIDTH                                                      1
#define FLOW_BASED_RESOLUTION_POLICER_DEI_OFFSET                                                       2
#define FLOW_BASED_RESOLUTION_POLICER_DEI_WORD_OFFSET                                                  0
#define FLOW_BASED_RESOLUTION_POLICER_DEI_F_OFFSET_MOD8                                                0
#define FLOW_BASED_RESOLUTION_POLICER_DEI_F_OFFSET_MOD16                                               8
#define FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_F_OFFSET                                          24
#define FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_F_WIDTH                                           8
#define FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_OFFSET                                            4
#define FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_WORD_OFFSET                                       1
#define FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_F_OFFSET_MOD16                                    8

/* >>>RDD_FLOW_BASED_RESOLUTION_DTS */
#define RDD_FLOW_BASED_RESOLUTION_RESERVED_4_NUMBER	3

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	egress_is_cpu                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_cpu_tc                                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_cpu_reserved                                       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1                                                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	policer_dei                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2                                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_egress_is_cpu                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_egress_cpu_tc                                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_egress_cpu_reserved                                       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved1                                                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_policer_dei                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved2                                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_egress_is_cpu                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_egress_cpu_tc                                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_egress_cpu_reserved                                       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved1                                                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_policer_dei                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved2                                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	rule2bridge_resolution                                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint8_t	reserved_4[RDD_FLOW_BASED_RESOLUTION_RESERVED_4_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint32_t	egress_port_resolved                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	reserved3                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	bridge_egress_vport                                                 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint8_t	reserved1_reserved_4[RDD_FLOW_BASED_RESOLUTION_RESERVED_4_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint32_t	ds_resolution                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	tc_to_queue                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	pbit_to_queue                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	vlan_action                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	forw_mode                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	tc                                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint8_t	reserved2_reserved_4[RDD_FLOW_BASED_RESOLUTION_RESERVED_4_NUMBER];
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved2                                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	policer_dei                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1                                                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_cpu_reserved                                       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_cpu_tc                                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_is_cpu                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved2                                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_policer_dei                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved1                                                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_egress_cpu_reserved                                       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_egress_cpu_tc                                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_egress_is_cpu                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved2                                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_policer_dei                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved1                                                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_egress_cpu_reserved                                       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_egress_cpu_tc                                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_egress_is_cpu                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	reserved_4[RDD_FLOW_BASED_RESOLUTION_RESERVED_4_NUMBER];
			uint32_t	rule2bridge_resolution                                    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_reserved_4[RDD_FLOW_BASED_RESOLUTION_RESERVED_4_NUMBER];
			uint32_t	egress_port_resolved                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	reserved3                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	bridge_egress_vport                                                 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_reserved_4[RDD_FLOW_BASED_RESOLUTION_RESERVED_4_NUMBER];
			uint32_t	ds_resolution                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	tc_to_queue                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	pbit_to_queue                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	vlan_action                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	forw_mode                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
			uint32_t	tc                                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rule2bridge_resolution union */
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FLOW_BASED_RESOLUTION_DTS;

typedef RDD_FLOW_BASED_RESOLUTION_DTS * aligned_RDD_FLOW_BASED_RESOLUTION_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_FLOW_BASED_RESOLUTION_DTS fields;
} RDD_FLOW_BASED_RESOLUTION_DTS_NEW;
typedef RDD_FLOW_BASED_RESOLUTION_DTS_NEW * aligned_RDD_FLOW_BASED_RESOLUTION_DTS_NEW ALIGNMENT8;

#define RDD_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS), 7, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS), 7, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS), 4, 3, r)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS), 4, 3, v)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 4, 3, r)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 4, 3, v)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS), 0, 12, r)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS), 0, 12, v)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_READ(r, p)                  FIELD_MREAD_16((uint8_t *)p, 0, 12, r)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)p, 0, 12, v)
#define RDD_FLOW_BASED_RESOLUTION_POLICER_DEI_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 2, 0, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_POLICER_DEI_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 2, 0, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_POLICER_DEI_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 2, 0, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_POLICER_DEI_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 2, 0, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_READ_G(r, g, idx)        GROUP_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, r)
#define RDD_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_WRITE_G(v, g, idx)       GROUP_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, v)
#define RDD_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_READ(r, p)               MREAD_8((uint8_t *)p + 4, r)
#define RDD_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_WRITE(v, p)              MWRITE_8((uint8_t *)p + 4, v)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_PORT_RESOLVED_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 7, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_PORT_RESOLVED_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 7, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_PORT_RESOLVED_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 4, 7, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_EGRESS_PORT_RESOLVED_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 4, 7, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_BRIDGE_EGRESS_VPORT_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 0, 6, r)
#define RDD_FLOW_BASED_RESOLUTION_BRIDGE_EGRESS_VPORT_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 0, 6, v)
#define RDD_FLOW_BASED_RESOLUTION_BRIDGE_EGRESS_VPORT_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 4, 0, 6, r)
#define RDD_FLOW_BASED_RESOLUTION_BRIDGE_EGRESS_VPORT_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 4, 0, 6, v)
#define RDD_FLOW_BASED_RESOLUTION_DS_RESOLUTION_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 7, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_DS_RESOLUTION_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 7, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_DS_RESOLUTION_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 4, 7, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_DS_RESOLUTION_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 4, 7, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_TC_TO_QUEUE_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 6, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_TC_TO_QUEUE_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 6, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_TC_TO_QUEUE_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 4, 6, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_TC_TO_QUEUE_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 4, 6, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_PBIT_TO_QUEUE_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 5, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_PBIT_TO_QUEUE_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 5, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_PBIT_TO_QUEUE_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 4, 5, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_PBIT_TO_QUEUE_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 4, 5, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_VLAN_ACTION_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 4, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_VLAN_ACTION_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 4, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_VLAN_ACTION_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 4, 4, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_VLAN_ACTION_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 4, 4, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_FORW_MODE_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 3, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_FORW_MODE_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 3, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_FORW_MODE_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 4, 3, 1, r)
#define RDD_FLOW_BASED_RESOLUTION_FORW_MODE_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 4, 3, 1, v)
#define RDD_FLOW_BASED_RESOLUTION_TC_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 0, 3, r)
#define RDD_FLOW_BASED_RESOLUTION_TC_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FLOW_BASED_RESOLUTION_DTS) + 4, 0, 3, v)
#define RDD_FLOW_BASED_RESOLUTION_TC_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p + 4, 0, 3, r)
#define RDD_FLOW_BASED_RESOLUTION_TC_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p + 4, 0, 3, v)
/* <<<RDD_FLOW_BASED_RESOLUTION_DTS */

/* <<<RDD_FLOW_BASED_RESOLUTION */


/* >>>RDD_COMMON_RESOLUTION */
#define COMMON_RESOLUTION_IS_LAN_F_OFFSET                                                          24
#define COMMON_RESOLUTION_IS_LAN_F_WIDTH                                                           1
#define COMMON_RESOLUTION_IS_LAN_OFFSET                                                            0
#define COMMON_RESOLUTION_IS_LAN_WORD_OFFSET                                                       0
#define COMMON_RESOLUTION_IS_LAN_F_OFFSET_MOD8                                                     0
#define COMMON_RESOLUTION_IS_LAN_F_OFFSET_MOD16                                                    8
#define COMMON_RESOLUTION_RX_FLOW_F_OFFSET                                                         16
#define COMMON_RESOLUTION_RX_FLOW_F_WIDTH                                                          8
#define COMMON_RESOLUTION_RX_FLOW_OFFSET                                                           1
#define COMMON_RESOLUTION_RX_FLOW_WORD_OFFSET                                                      0
#define COMMON_RESOLUTION_RX_FLOW_F_OFFSET_MOD16                                                   0
#define COMMON_RESOLUTION_RX_MIRRORING_FLAG_F_OFFSET                                               8
#define COMMON_RESOLUTION_RX_MIRRORING_FLAG_F_WIDTH                                                1
#define COMMON_RESOLUTION_RX_MIRRORING_FLAG_OFFSET                                                 2
#define COMMON_RESOLUTION_RX_MIRRORING_FLAG_WORD_OFFSET                                            0
#define COMMON_RESOLUTION_RX_MIRRORING_FLAG_F_OFFSET_MOD8                                          0
#define COMMON_RESOLUTION_RX_MIRRORING_FLAG_F_OFFSET_MOD16                                         8
#define COMMON_RESOLUTION_G9991_BUFFER_F_OFFSET                                                    16
#define COMMON_RESOLUTION_G9991_BUFFER_F_WIDTH                                                     16
#define COMMON_RESOLUTION_G9991_BUFFER_OFFSET                                                      4
#define COMMON_RESOLUTION_G9991_BUFFER_WORD_OFFSET                                                 1
#define COMMON_RESOLUTION_TX_FLOW_F_OFFSET                                                         0
#define COMMON_RESOLUTION_TX_FLOW_F_WIDTH                                                          16
#define COMMON_RESOLUTION_TX_FLOW_OFFSET                                                           6
#define COMMON_RESOLUTION_TX_FLOW_WORD_OFFSET                                                      1

/* >>>RDD_COMMON_RESOLUTION_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reserved_0       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_flow          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_1       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_mirroring_flag	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_2       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	g9991_buffer     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_flow          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved_2       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_mirroring_flag	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_1       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_flow          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_lan           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_0       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_flow          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	g9991_buffer     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_COMMON_RESOLUTION_DTS;

typedef RDD_COMMON_RESOLUTION_DTS * aligned_RDD_COMMON_RESOLUTION_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_COMMON_RESOLUTION_DTS fields;
} RDD_COMMON_RESOLUTION_DTS_NEW;
typedef RDD_COMMON_RESOLUTION_DTS_NEW * aligned_RDD_COMMON_RESOLUTION_DTS_NEW ALIGNMENT8;

#define RDD_COMMON_RESOLUTION_IS_LAN_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMMON_RESOLUTION_DTS), 0, 1, r)
#define RDD_COMMON_RESOLUTION_IS_LAN_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMMON_RESOLUTION_DTS), 0, 1, v)
#define RDD_COMMON_RESOLUTION_IS_LAN_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p, 0, 1, r)
#define RDD_COMMON_RESOLUTION_IS_LAN_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p, 0, 1, v)
#define RDD_COMMON_RESOLUTION_RX_FLOW_READ_G(r, g, idx)                    GROUP_MREAD_8(g, idx*sizeof(RDD_COMMON_RESOLUTION_DTS) + 1, r)
#define RDD_COMMON_RESOLUTION_RX_FLOW_WRITE_G(v, g, idx)                   GROUP_MWRITE_8(g, idx*sizeof(RDD_COMMON_RESOLUTION_DTS) + 1, v)
#define RDD_COMMON_RESOLUTION_RX_FLOW_READ(r, p)                           MREAD_8((uint8_t *)p + 1, r)
#define RDD_COMMON_RESOLUTION_RX_FLOW_WRITE(v, p)                          MWRITE_8((uint8_t *)p + 1, v)
#define RDD_COMMON_RESOLUTION_RX_MIRRORING_FLAG_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMMON_RESOLUTION_DTS) + 2, 0, 1, r)
#define RDD_COMMON_RESOLUTION_RX_MIRRORING_FLAG_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMMON_RESOLUTION_DTS) + 2, 0, 1, v)
#define RDD_COMMON_RESOLUTION_RX_MIRRORING_FLAG_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 2, 0, 1, r)
#define RDD_COMMON_RESOLUTION_RX_MIRRORING_FLAG_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 2, 0, 1, v)
#define RDD_COMMON_RESOLUTION_G9991_BUFFER_READ_G(r, g, idx)               GROUP_MREAD_16(g, idx*sizeof(RDD_COMMON_RESOLUTION_DTS) + 4, r)
#define RDD_COMMON_RESOLUTION_G9991_BUFFER_WRITE_G(v, g, idx)              GROUP_MWRITE_16(g, idx*sizeof(RDD_COMMON_RESOLUTION_DTS) + 4, v)
#define RDD_COMMON_RESOLUTION_G9991_BUFFER_READ(r, p)                      MREAD_16((uint8_t *)p + 4, r)
#define RDD_COMMON_RESOLUTION_G9991_BUFFER_WRITE(v, p)                     MWRITE_16((uint8_t *)p + 4, v)
#define RDD_COMMON_RESOLUTION_TX_FLOW_READ_G(r, g, idx)                    GROUP_MREAD_16(g, idx*sizeof(RDD_COMMON_RESOLUTION_DTS) + 6, r)
#define RDD_COMMON_RESOLUTION_TX_FLOW_WRITE_G(v, g, idx)                   GROUP_MWRITE_16(g, idx*sizeof(RDD_COMMON_RESOLUTION_DTS) + 6, v)
#define RDD_COMMON_RESOLUTION_TX_FLOW_READ(r, p)                           MREAD_16((uint8_t *)p + 6, r)
#define RDD_COMMON_RESOLUTION_TX_FLOW_WRITE(v, p)                          MWRITE_16((uint8_t *)p + 6, v)
/* <<<RDD_COMMON_RESOLUTION_DTS */

/* <<<RDD_COMMON_RESOLUTION */


/* >>>RDD_PACKET_BUFFER_RESOLUTION_ENTRY */
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_0_F_OFFSET                                    25
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_0_F_WIDTH                                     7
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_OFFSET                                                 0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_0_OFFSET                                      0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_0_WORD_OFFSET                                 0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_0_F_OFFSET_MOD8                               1
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_0_F_OFFSET_MOD16                              9
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_IS_LAN_F_OFFSET                                        24
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_IS_LAN_F_WIDTH                                         1
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_IS_LAN_OFFSET                                          0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_IS_LAN_WORD_OFFSET                                     0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_IS_LAN_F_OFFSET_MOD8                                   0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_IS_LAN_F_OFFSET_MOD16                                  8
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_FLOW_F_OFFSET                                       16
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_FLOW_F_WIDTH                                        8
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_FLOW_OFFSET                                         1
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_FLOW_WORD_OFFSET                                    0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_FLOW_F_OFFSET_MOD16                                 0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_1_F_OFFSET                                    9
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_1_F_WIDTH                                     7
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_1_OFFSET                                      2
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_1_WORD_OFFSET                                 0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_1_F_OFFSET_MOD8                               1
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_1_F_OFFSET_MOD16                              9
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_MIRRORING_FLAG_F_OFFSET                             8
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_MIRRORING_FLAG_F_WIDTH                              1
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_MIRRORING_FLAG_OFFSET                               2
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_MIRRORING_FLAG_WORD_OFFSET                          0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_MIRRORING_FLAG_F_OFFSET_MOD8                        0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_MIRRORING_FLAG_F_OFFSET_MOD16                       8
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_2_F_OFFSET                                    0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_2_F_WIDTH                                     8
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_2_OFFSET                                      3
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_2_WORD_OFFSET                                 0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_2_F_OFFSET_MOD16                              0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_G9991_BUFFER_F_OFFSET                                  16
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_G9991_BUFFER_F_WIDTH                                   16
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_G9991_BUFFER_OFFSET                                    4
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_G9991_BUFFER_WORD_OFFSET                               1
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_TX_FLOW_F_OFFSET                                       0
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_TX_FLOW_F_WIDTH                                        16
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_TX_FLOW_OFFSET                                         6
#define PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_TX_FLOW_WORD_OFFSET                                    1
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_F_OFFSET            0
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_F_WIDTH             32
#define PACKET_BUFFER_RESOLUTION_ENTRY_MCAST_RESOLUTION_OFFSET                                                  8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_OFFSET              8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_WORD_OFFSET         2
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_IPTV_REPL_0_SOP_F_OFFSET                24
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_IPTV_REPL_0_SOP_F_WIDTH                 8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_IPTV_REPL_0_SOP_OFFSET                  12
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_IPTV_REPL_0_SOP_WORD_OFFSET             3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_IPTV_REPL_0_SOP_F_OFFSET_MOD16          8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_POOL_NUM_F_OFFSET                       22
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_POOL_NUM_F_WIDTH                        2
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_POOL_NUM_OFFSET                         13
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_POOL_NUM_WORD_OFFSET                    3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_POOL_NUM_F_OFFSET_MOD8                  6
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_POOL_NUM_F_OFFSET_MOD16                 6
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_REPLICATIONS_F_OFFSET                   16
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_REPLICATIONS_F_WIDTH                    6
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_REPLICATIONS_OFFSET                     13
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_REPLICATIONS_WORD_OFFSET                3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_REPLICATIONS_F_OFFSET_MOD8              0
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_REPLICATIONS_F_OFFSET_MOD16             0
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_INGRESS_VPORT_F_OFFSET                  8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_INGRESS_VPORT_F_WIDTH                   8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_INGRESS_VPORT_OFFSET                    14
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_INGRESS_VPORT_WORD_OFFSET               3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_INGRESS_VPORT_F_OFFSET_MOD16            8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_RESERVED1_F_OFFSET                      3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_RESERVED1_F_WIDTH                       5
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_RESERVED1_OFFSET                        15
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_RESERVED1_WORD_OFFSET                   3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_RESERVED1_F_OFFSET_MOD8                 3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_RESERVED1_F_OFFSET_MOD16                3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_TC_F_OFFSET                             0
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_TC_F_WIDTH                              3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_TC_OFFSET                               15
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_TC_WORD_OFFSET                          3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_TC_F_OFFSET_MOD8                        0
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_TC_F_OFFSET_MOD16                       0
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_F_OFFSET             31
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_F_WIDTH              1
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_BASED_RESOLUTION_OFFSET                                             8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_OFFSET               8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_WORD_OFFSET          2
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_F_OFFSET_MOD8        7
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_F_OFFSET_MOD16       15
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_F_OFFSET             28
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_F_WIDTH              3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_OFFSET               8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_WORD_OFFSET          2
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_F_OFFSET_MOD8        4
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_F_OFFSET_MOD16       12
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_F_OFFSET       16
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_F_WIDTH        12
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_OFFSET         8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_WORD_OFFSET    2
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_F_OFFSET_MOD16 0
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED1_F_OFFSET                 9
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED1_F_WIDTH                  7
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED1_OFFSET                   10
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED1_WORD_OFFSET              2
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED1_F_OFFSET_MOD8            1
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED1_F_OFFSET_MOD16           9
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_POLICER_DEI_F_OFFSET               8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_POLICER_DEI_F_WIDTH                1
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_POLICER_DEI_OFFSET                 10
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_POLICER_DEI_WORD_OFFSET            2
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_POLICER_DEI_F_OFFSET_MOD8          0
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_POLICER_DEI_F_OFFSET_MOD16         8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED2_F_OFFSET                 0
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED2_F_WIDTH                  8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED2_OFFSET                   11
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED2_WORD_OFFSET              2
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED2_F_OFFSET_MOD16           0
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_F_OFFSET    24
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_F_WIDTH     8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_OFFSET      12
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_WORD_OFFSET 3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_F_OFFSET_MOD16 8
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED_4_OFFSET                  13
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED_4_WORD_OFFSET             3
#define PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED_4_F_OFFSET_MOD16          0

/* >>>RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS */
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED_4_NUMBER	3

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	RDD_COMMON_RESOLUTION_DTS COMMON_RESOLUTION;
	union flow_resolution{
		RDD_MCAST_RESOLUTION_DTS MCAST_RESOLUTION;
		RDD_FLOW_BASED_RESOLUTION_DTS FLOW_BASED_RESOLUTION;
	} flow_resolution;
#else
	union flow_resolution{
		RDD_MCAST_RESOLUTION_DTS MCAST_RESOLUTION;
		RDD_FLOW_BASED_RESOLUTION_DTS FLOW_BASED_RESOLUTION;
	} flow_resolution;
	RDD_COMMON_RESOLUTION_DTS COMMON_RESOLUTION;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS;

typedef RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS * aligned_RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS fields;
} RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS_NEW;
typedef RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS_NEW * aligned_RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_0_READ_G(r, g, idx)                                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS), 1, 7, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_0_WRITE_G(v, g, idx)                                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS), 1, 7, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_0_READ(r, p)                                              FIELD_MREAD_8((uint8_t *)p, 1, 7, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_0_WRITE(v, p)                                             FIELD_MWRITE_8((uint8_t *)p, 1, 7, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_IS_LAN_READ_G(r, g, idx)                                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS), 0, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_IS_LAN_WRITE_G(v, g, idx)                                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS), 0, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_IS_LAN_READ(r, p)                                                  FIELD_MREAD_8((uint8_t *)p, 0, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_IS_LAN_WRITE(v, p)                                                 FIELD_MWRITE_8((uint8_t *)p, 0, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_FLOW_READ_G(r, g, idx)                                          GROUP_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_FLOW_WRITE_G(v, g, idx)                                         GROUP_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_FLOW_READ(r, p)                                                 MREAD_8((uint8_t *)p + 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_FLOW_WRITE(v, p)                                                MWRITE_8((uint8_t *)p + 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_1_READ_G(r, g, idx)                                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 2, 1, 7, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_1_WRITE_G(v, g, idx)                                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 2, 1, 7, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_1_READ(r, p)                                              FIELD_MREAD_8((uint8_t *)p + 2, 1, 7, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_1_WRITE(v, p)                                             FIELD_MWRITE_8((uint8_t *)p + 2, 1, 7, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_MIRRORING_FLAG_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 2, 0, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_MIRRORING_FLAG_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 2, 0, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_MIRRORING_FLAG_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)p + 2, 0, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RX_MIRRORING_FLAG_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)p + 2, 0, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_2_READ_G(r, g, idx)                                       GROUP_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 3, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_2_WRITE_G(v, g, idx)                                      GROUP_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 3, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_2_READ(r, p)                                              MREAD_8((uint8_t *)p + 3, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_RESERVED_2_WRITE(v, p)                                             MWRITE_8((uint8_t *)p + 3, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_G9991_BUFFER_READ_G(r, g, idx)                                     GROUP_MREAD_16(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_G9991_BUFFER_WRITE_G(v, g, idx)                                    GROUP_MWRITE_16(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_G9991_BUFFER_READ(r, p)                                            MREAD_16((uint8_t *)p + 4, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_G9991_BUFFER_WRITE(v, p)                                           MWRITE_16((uint8_t *)p + 4, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_TX_FLOW_READ_G(r, g, idx)                                          GROUP_MREAD_16(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 6, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_TX_FLOW_WRITE_G(v, g, idx)                                         GROUP_MWRITE_16(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 6, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_TX_FLOW_READ(r, p)                                                 MREAD_16((uint8_t *)p + 6, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_COMMON_RESOLUTION_TX_FLOW_WRITE(v, p)                                                MWRITE_16((uint8_t *)p + 6, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 8, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 8, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_READ(r, p)                      MREAD_32((uint8_t *)p + 8, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 8, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_IPTV_REPL_0_SOP_READ_G(r, g, idx)                   GROUP_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 12, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_IPTV_REPL_0_SOP_WRITE_G(v, g, idx)                  GROUP_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 12, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_IPTV_REPL_0_SOP_READ(r, p)                          MREAD_8((uint8_t *)p + 12, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_IPTV_REPL_0_SOP_WRITE(v, p)                         MWRITE_8((uint8_t *)p + 12, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_POOL_NUM_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 13, 6, 2, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_POOL_NUM_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 13, 6, 2, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_POOL_NUM_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 13, 6, 2, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_POOL_NUM_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 13, 6, 2, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_REPLICATIONS_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 13, 0, 6, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_REPLICATIONS_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 13, 0, 6, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_REPLICATIONS_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 13, 0, 6, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_REPLICATIONS_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 13, 0, 6, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_INGRESS_VPORT_READ_G(r, g, idx)                     GROUP_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 14, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_INGRESS_VPORT_WRITE_G(v, g, idx)                    GROUP_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 14, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_INGRESS_VPORT_READ(r, p)                            MREAD_8((uint8_t *)p + 14, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_INGRESS_VPORT_WRITE(v, p)                           MWRITE_8((uint8_t *)p + 14, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_RESERVED1_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 15, 3, 5, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_RESERVED1_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 15, 3, 5, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_RESERVED1_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 15, 3, 5, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_RESERVED1_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 15, 3, 5, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_TC_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 15, 0, 3, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_TC_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 15, 0, 3, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_TC_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)p + 15, 0, 3, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_MCAST_RESOLUTION_TC_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)p + 15, 0, 3, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 8, 7, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 8, 7, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 8, 7, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_IS_CPU_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 8, 7, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 8, 4, 3, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 8, 4, 3, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 8, 4, 3, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_TC_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 8, 4, 3, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 8, 0, 12, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 8, 0, 12, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 8, 0, 12, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_EGRESS_CPU_RESERVED_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 8, 0, 12, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED1_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 10, 1, 7, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED1_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 10, 1, 7, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED1_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p + 10, 1, 7, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED1_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p + 10, 1, 7, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_POLICER_DEI_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 10, 0, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_POLICER_DEI_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 10, 0, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_POLICER_DEI_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 10, 0, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_POLICER_DEI_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 10, 0, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED2_READ_G(r, g, idx)                    GROUP_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 11, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED2_WRITE_G(v, g, idx)                   GROUP_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 11, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED2_READ(r, p)                           MREAD_8((uint8_t *)p + 11, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED2_WRITE(v, p)                          MWRITE_8((uint8_t *)p + 11, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_READ_G(r, g, idx)       GROUP_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 12, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_WRITE_G(v, g, idx)      GROUP_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 12, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_READ(r, p)              MREAD_8((uint8_t *)p + 12, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RULE2BRIDGE_RESOLUTION_WRITE(v, p)             MWRITE_8((uint8_t *)p + 12, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_EGRESS_PORT_RESOLVED_READ_G(r, g, idx)                                               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 7, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_EGRESS_PORT_RESOLVED_WRITE_G(v, g, idx)                                              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 7, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_EGRESS_PORT_RESOLVED_READ(r, p)                                                      FIELD_MREAD_8((uint8_t *)p + 4, 7, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_EGRESS_PORT_RESOLVED_WRITE(v, p)                                                     FIELD_MWRITE_8((uint8_t *)p + 4, 7, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_BRIDGE_EGRESS_VPORT_READ_G(r, g, idx)                                                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 0, 6, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_BRIDGE_EGRESS_VPORT_WRITE_G(v, g, idx)                                               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 0, 6, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_BRIDGE_EGRESS_VPORT_READ(r, p)                                                       FIELD_MREAD_8((uint8_t *)p + 4, 0, 6, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_BRIDGE_EGRESS_VPORT_WRITE(v, p)                                                      FIELD_MWRITE_8((uint8_t *)p + 4, 0, 6, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DS_RESOLUTION_READ_G(r, g, idx)                                                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 7, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DS_RESOLUTION_WRITE_G(v, g, idx)                                                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 7, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DS_RESOLUTION_READ(r, p)                                                             FIELD_MREAD_8((uint8_t *)p + 4, 7, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DS_RESOLUTION_WRITE(v, p)                                                            FIELD_MWRITE_8((uint8_t *)p + 4, 7, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_TC_TO_QUEUE_READ_G(r, g, idx)                                                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 6, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_TC_TO_QUEUE_WRITE_G(v, g, idx)                                                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 6, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_TC_TO_QUEUE_READ(r, p)                                                               FIELD_MREAD_8((uint8_t *)p + 4, 6, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_TC_TO_QUEUE_WRITE(v, p)                                                              FIELD_MWRITE_8((uint8_t *)p + 4, 6, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_PBIT_TO_QUEUE_READ_G(r, g, idx)                                                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 5, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_PBIT_TO_QUEUE_WRITE_G(v, g, idx)                                                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 5, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_PBIT_TO_QUEUE_READ(r, p)                                                             FIELD_MREAD_8((uint8_t *)p + 4, 5, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_PBIT_TO_QUEUE_WRITE(v, p)                                                            FIELD_MWRITE_8((uint8_t *)p + 4, 5, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_VLAN_ACTION_READ_G(r, g, idx)                                                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 4, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_VLAN_ACTION_WRITE_G(v, g, idx)                                                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 4, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_VLAN_ACTION_READ(r, p)                                                               FIELD_MREAD_8((uint8_t *)p + 4, 4, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_VLAN_ACTION_WRITE(v, p)                                                              FIELD_MWRITE_8((uint8_t *)p + 4, 4, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FORW_MODE_READ_G(r, g, idx)                                                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 3, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FORW_MODE_WRITE_G(v, g, idx)                                                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 3, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FORW_MODE_READ(r, p)                                                                 FIELD_MREAD_8((uint8_t *)p + 4, 3, 1, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FORW_MODE_WRITE(v, p)                                                                FIELD_MWRITE_8((uint8_t *)p + 4, 3, 1, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_TC_READ_G(r, g, idx)                                                                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 0, 3, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_TC_WRITE_G(v, g, idx)                                                                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 4, 0, 3, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_TC_READ(r, p)                                                                        FIELD_MREAD_8((uint8_t *)p + 4, 0, 3, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_TC_WRITE(v, p)                                                                       FIELD_MWRITE_8((uint8_t *)p + 4, 0, 3, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED_4_READ_G(r, g, idx, i)                GROUP_MREAD_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 13, i, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED_4_WRITE_G(v, g, idx, i)               GROUP_MWRITE_I_8(g, idx*sizeof(RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS) + 13, i, v)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED_4_READ(r, p, i)                       MREAD_I_8((uint8_t *)p + 13, i, r)
#define RDD_PACKET_BUFFER_RESOLUTION_ENTRY_FLOW_RESOLUTION_FLOW_BASED_RESOLUTION_RESERVED_4_WRITE(v, p, i)                      MWRITE_I_8((uint8_t *)p + 13, i, v)
/* <<<RDD_PACKET_BUFFER_RESOLUTION_ENTRY_DTS */

/* <<<RDD_PACKET_BUFFER_RESOLUTION_ENTRY */


/* >>>RDD_FLOW_BASED_CONTEXT */
#define FLOW_BASED_CONTEXT_FLOW_BASED_CONTEXT_OFFSET                                                0
#define FLOW_BASED_CONTEXT_FLOW_CACHE_OFFSET                                                        0
#define FLOW_BASED_CONTEXT_FLOW_CACHE_WORD_OFFSET                                                   0
#define FLOW_BASED_CONTEXT_FLOW_CACHE_F_OFFSET_MOD16                                                0
#define FLOW_BASED_CONTEXT_TCAM_IP_FLOW_RESULT_OFFSET                                               112
#define FLOW_BASED_CONTEXT_TCAM_IP_FLOW_RESULT_WORD_OFFSET                                          28
#define FLOW_BASED_CONTEXT_TCAM_IP_FLOW_RESULT_F_OFFSET_MOD16                                       8

/* >>>RDD_FLOW_BASED_CONTEXT_DTS */
#define RDD_FLOW_BASED_CONTEXT_FLOW_CACHE_NUMBER	64
#define RDD_FLOW_BASED_CONTEXT_RESERVED_NUMBER	48
#define RDD_FLOW_BASED_CONTEXT_TCAM_IP_FLOW_RESULT_NUMBER	16

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	flow_cache[RDD_FLOW_BASED_CONTEXT_FLOW_CACHE_NUMBER];
	uint8_t	reserved[RDD_FLOW_BASED_CONTEXT_RESERVED_NUMBER];
	uint8_t	tcam_ip_flow_result[RDD_FLOW_BASED_CONTEXT_TCAM_IP_FLOW_RESULT_NUMBER];
#else
	uint8_t	flow_cache[RDD_FLOW_BASED_CONTEXT_FLOW_CACHE_NUMBER];
	uint8_t	reserved[RDD_FLOW_BASED_CONTEXT_RESERVED_NUMBER];
	uint8_t	tcam_ip_flow_result[RDD_FLOW_BASED_CONTEXT_TCAM_IP_FLOW_RESULT_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FLOW_BASED_CONTEXT_DTS;

typedef RDD_FLOW_BASED_CONTEXT_DTS * aligned_RDD_FLOW_BASED_CONTEXT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[32];
    uint64_t dword_val64[16];
    RDD_FLOW_BASED_CONTEXT_DTS fields;
} RDD_FLOW_BASED_CONTEXT_DTS_NEW;
typedef RDD_FLOW_BASED_CONTEXT_DTS_NEW * aligned_RDD_FLOW_BASED_CONTEXT_DTS_NEW ALIGNMENT8;

#define RDD_FLOW_BASED_CONTEXT_FLOW_CACHE_READ_G(r, g, idx, i)                GROUP_MREAD_I_8(g, idx*sizeof(RDD_FLOW_BASED_CONTEXT_DTS), i, r)
#define RDD_FLOW_BASED_CONTEXT_FLOW_CACHE_WRITE_G(v, g, idx, i)               GROUP_MWRITE_I_8(g, idx*sizeof(RDD_FLOW_BASED_CONTEXT_DTS), i, v)
#define RDD_FLOW_BASED_CONTEXT_FLOW_CACHE_READ(r, p, i)                       MREAD_I_8((uint8_t *)p, i, r)
#define RDD_FLOW_BASED_CONTEXT_FLOW_CACHE_WRITE(v, p, i)                      MWRITE_I_8((uint8_t *)p, i, v)
#define RDD_FLOW_BASED_CONTEXT_TCAM_IP_FLOW_RESULT_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_FLOW_BASED_CONTEXT_DTS) + 112, i, r)
#define RDD_FLOW_BASED_CONTEXT_TCAM_IP_FLOW_RESULT_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_FLOW_BASED_CONTEXT_DTS) + 112, i, v)
#define RDD_FLOW_BASED_CONTEXT_TCAM_IP_FLOW_RESULT_READ(r, p, i)              MREAD_I_8((uint8_t *)p + 112, i, r)
#define RDD_FLOW_BASED_CONTEXT_TCAM_IP_FLOW_RESULT_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p + 112, i, v)
/* <<<RDD_FLOW_BASED_CONTEXT_DTS */

/* <<<RDD_FLOW_BASED_CONTEXT */


/* >>>RDD_RULE_BASED_CONTEXT */
#define RULE_BASED_CONTEXT_RULE_BASED_CONTEXT_OFFSET                                                0
#define RULE_BASED_CONTEXT_TCAM_RESULT_OFFSET                                                       0
#define RULE_BASED_CONTEXT_TCAM_RESULT_WORD_OFFSET                                                  0
#define RULE_BASED_CONTEXT_TCAM_RESULT_F_OFFSET_MOD16                                               0
#define RULE_BASED_CONTEXT_NATC_KEY_OFFSET                                                          16
#define RULE_BASED_CONTEXT_NATC_KEY_WORD_OFFSET                                                     4
#define RULE_BASED_CONTEXT_NATC_KEY_F_OFFSET_MOD16                                                  8
#define RULE_BASED_CONTEXT_NATC_KEY_DATA_OFFSET                                                     24
#define RULE_BASED_CONTEXT_NATC_KEY_DATA_WORD_OFFSET                                                6
#define RULE_BASED_CONTEXT_NATC_KEY_DATA_F_OFFSET_MOD16                                             8
#define RULE_BASED_CONTEXT_NATC_CONTEXT_OFFSET                                                      40
#define RULE_BASED_CONTEXT_NATC_CONTEXT_WORD_OFFSET                                                 10
#define RULE_BASED_CONTEXT_NATC_CONTEXT_F_OFFSET_MOD16                                              8
#define RULE_BASED_CONTEXT_TCAM_QOS_RESULT_OFFSET                                                   104
#define RULE_BASED_CONTEXT_TCAM_QOS_RESULT_WORD_OFFSET                                              26
#define RULE_BASED_CONTEXT_TCAM_QOS_RESULT_F_OFFSET_MOD16                                           8

/* >>>RDD_RULE_BASED_CONTEXT_DTS */
#define RDD_RULE_BASED_CONTEXT_TCAM_RESULT_NUMBER	16
#define RDD_RULE_BASED_CONTEXT_NATC_KEY_NUMBER	8
#define RDD_RULE_BASED_CONTEXT_NATC_KEY_DATA_NUMBER	16
#define RDD_RULE_BASED_CONTEXT_NATC_CONTEXT_NUMBER	64
#define RDD_RULE_BASED_CONTEXT_TCAM_QOS_RESULT_NUMBER	8
#define RDD_RULE_BASED_CONTEXT_RESERVED_NUMBER	16

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	tcam_result[RDD_RULE_BASED_CONTEXT_TCAM_RESULT_NUMBER];
	uint8_t	natc_key[RDD_RULE_BASED_CONTEXT_NATC_KEY_NUMBER];
	uint8_t	natc_key_data[RDD_RULE_BASED_CONTEXT_NATC_KEY_DATA_NUMBER];
	uint8_t	natc_context[RDD_RULE_BASED_CONTEXT_NATC_CONTEXT_NUMBER];
	uint8_t	tcam_qos_result[RDD_RULE_BASED_CONTEXT_TCAM_QOS_RESULT_NUMBER];
	uint8_t	reserved[RDD_RULE_BASED_CONTEXT_RESERVED_NUMBER];
#else
	uint8_t	tcam_result[RDD_RULE_BASED_CONTEXT_TCAM_RESULT_NUMBER];
	uint8_t	natc_key[RDD_RULE_BASED_CONTEXT_NATC_KEY_NUMBER];
	uint8_t	natc_key_data[RDD_RULE_BASED_CONTEXT_NATC_KEY_DATA_NUMBER];
	uint8_t	natc_context[RDD_RULE_BASED_CONTEXT_NATC_CONTEXT_NUMBER];
	uint8_t	tcam_qos_result[RDD_RULE_BASED_CONTEXT_TCAM_QOS_RESULT_NUMBER];
	uint8_t	reserved[RDD_RULE_BASED_CONTEXT_RESERVED_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RULE_BASED_CONTEXT_DTS;

typedef RDD_RULE_BASED_CONTEXT_DTS * aligned_RDD_RULE_BASED_CONTEXT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[32];
    uint64_t dword_val64[16];
    RDD_RULE_BASED_CONTEXT_DTS fields;
} RDD_RULE_BASED_CONTEXT_DTS_NEW;
typedef RDD_RULE_BASED_CONTEXT_DTS_NEW * aligned_RDD_RULE_BASED_CONTEXT_DTS_NEW ALIGNMENT8;

#define RDD_RULE_BASED_CONTEXT_TCAM_RESULT_READ_G(r, g, idx, i)           GROUP_MREAD_I_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_DTS), i, r)
#define RDD_RULE_BASED_CONTEXT_TCAM_RESULT_WRITE_G(v, g, idx, i)          GROUP_MWRITE_I_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_DTS), i, v)
#define RDD_RULE_BASED_CONTEXT_TCAM_RESULT_READ(r, p, i)                  MREAD_I_8((uint8_t *)p, i, r)
#define RDD_RULE_BASED_CONTEXT_TCAM_RESULT_WRITE(v, p, i)                 MWRITE_I_8((uint8_t *)p, i, v)
#define RDD_RULE_BASED_CONTEXT_NATC_KEY_READ_G(r, g, idx, i)              GROUP_MREAD_I_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_DTS) + 16, i, r)
#define RDD_RULE_BASED_CONTEXT_NATC_KEY_WRITE_G(v, g, idx, i)             GROUP_MWRITE_I_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_DTS) + 16, i, v)
#define RDD_RULE_BASED_CONTEXT_NATC_KEY_READ(r, p, i)                     MREAD_I_8((uint8_t *)p + 16, i, r)
#define RDD_RULE_BASED_CONTEXT_NATC_KEY_WRITE(v, p, i)                    MWRITE_I_8((uint8_t *)p + 16, i, v)
#define RDD_RULE_BASED_CONTEXT_NATC_KEY_DATA_READ_G(r, g, idx, i)         GROUP_MREAD_I_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_DTS) + 24, i, r)
#define RDD_RULE_BASED_CONTEXT_NATC_KEY_DATA_WRITE_G(v, g, idx, i)        GROUP_MWRITE_I_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_DTS) + 24, i, v)
#define RDD_RULE_BASED_CONTEXT_NATC_KEY_DATA_READ(r, p, i)                MREAD_I_8((uint8_t *)p + 24, i, r)
#define RDD_RULE_BASED_CONTEXT_NATC_KEY_DATA_WRITE(v, p, i)               MWRITE_I_8((uint8_t *)p + 24, i, v)
#define RDD_RULE_BASED_CONTEXT_NATC_CONTEXT_READ_G(r, g, idx, i)          GROUP_MREAD_I_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_DTS) + 40, i, r)
#define RDD_RULE_BASED_CONTEXT_NATC_CONTEXT_WRITE_G(v, g, idx, i)         GROUP_MWRITE_I_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_DTS) + 40, i, v)
#define RDD_RULE_BASED_CONTEXT_NATC_CONTEXT_READ(r, p, i)                 MREAD_I_8((uint8_t *)p + 40, i, r)
#define RDD_RULE_BASED_CONTEXT_NATC_CONTEXT_WRITE(v, p, i)                MWRITE_I_8((uint8_t *)p + 40, i, v)
#define RDD_RULE_BASED_CONTEXT_TCAM_QOS_RESULT_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_DTS) + 104, i, r)
#define RDD_RULE_BASED_CONTEXT_TCAM_QOS_RESULT_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_DTS) + 104, i, v)
#define RDD_RULE_BASED_CONTEXT_TCAM_QOS_RESULT_READ(r, p, i)              MREAD_I_8((uint8_t *)p + 104, i, r)
#define RDD_RULE_BASED_CONTEXT_TCAM_QOS_RESULT_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p + 104, i, v)
/* <<<RDD_RULE_BASED_CONTEXT_DTS */

/* <<<RDD_RULE_BASED_CONTEXT */


/* >>>RDD_RULE_BASED_NATC_CONTEXT */
#define RULE_BASED_NATC_CONTEXT_NATC_CONTROL_F_OFFSET                                                    0
#define RULE_BASED_NATC_CONTEXT_NATC_CONTROL_F_WIDTH                                                     32
#define RULE_BASED_NATC_CONTEXT_RULE_BASED_NATC_CONTEXT_OFFSET                                           0
#define RULE_BASED_NATC_CONTEXT_NATC_CONTROL_OFFSET                                                      0
#define RULE_BASED_NATC_CONTEXT_NATC_CONTROL_WORD_OFFSET                                                 0
#define RULE_BASED_NATC_CONTEXT_CMD_LIST_OFFSET                                                          12
#define RULE_BASED_NATC_CONTEXT_CMD_LIST_WORD_OFFSET                                                     3
#define RULE_BASED_NATC_CONTEXT_CMD_LIST_F_OFFSET_MOD16                                                  8

/* >>>RDD_RULE_BASED_NATC_CONTEXT_DTS */
#define RDD_RULE_BASED_NATC_CONTEXT_RESERVED0_NUMBER	8
#define RDD_RULE_BASED_NATC_CONTEXT_CMD_LIST_NUMBER	52
#define RDD_RULE_BASED_NATC_CONTEXT_RESERVED1_NUMBER	64

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	natc_control                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved0[RDD_RULE_BASED_NATC_CONTEXT_RESERVED0_NUMBER];
	uint8_t	cmd_list[RDD_RULE_BASED_NATC_CONTEXT_CMD_LIST_NUMBER];
	uint8_t	reserved1[RDD_RULE_BASED_NATC_CONTEXT_RESERVED1_NUMBER];
#else
	uint32_t	natc_control                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved0[RDD_RULE_BASED_NATC_CONTEXT_RESERVED0_NUMBER];
	uint8_t	cmd_list[RDD_RULE_BASED_NATC_CONTEXT_CMD_LIST_NUMBER];
	uint8_t	reserved1[RDD_RULE_BASED_NATC_CONTEXT_RESERVED1_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RULE_BASED_NATC_CONTEXT_DTS;

typedef RDD_RULE_BASED_NATC_CONTEXT_DTS * aligned_RDD_RULE_BASED_NATC_CONTEXT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[32];
    uint64_t dword_val64[16];
    RDD_RULE_BASED_NATC_CONTEXT_DTS fields;
} RDD_RULE_BASED_NATC_CONTEXT_DTS_NEW;
typedef RDD_RULE_BASED_NATC_CONTEXT_DTS_NEW * aligned_RDD_RULE_BASED_NATC_CONTEXT_DTS_NEW ALIGNMENT8;

#define RDD_RULE_BASED_NATC_CONTEXT_NATC_CONTROL_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_DTS), r)
#define RDD_RULE_BASED_NATC_CONTEXT_NATC_CONTROL_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_DTS), v)
#define RDD_RULE_BASED_NATC_CONTEXT_NATC_CONTROL_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_RULE_BASED_NATC_CONTEXT_NATC_CONTROL_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
#define RDD_RULE_BASED_NATC_CONTEXT_CMD_LIST_READ_G(r, g, idx, i)           GROUP_MREAD_I_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_DTS) + 12, i, r)
#define RDD_RULE_BASED_NATC_CONTEXT_CMD_LIST_WRITE_G(v, g, idx, i)          GROUP_MWRITE_I_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_DTS) + 12, i, v)
#define RDD_RULE_BASED_NATC_CONTEXT_CMD_LIST_READ(r, p, i)                  MREAD_I_8((uint8_t *)p + 12, i, r)
#define RDD_RULE_BASED_NATC_CONTEXT_CMD_LIST_WRITE(v, p, i)                 MWRITE_I_8((uint8_t *)p + 12, i, v)
/* <<<RDD_RULE_BASED_NATC_CONTEXT_DTS */

/* <<<RDD_RULE_BASED_NATC_CONTEXT */


/* >>>RDD_IPTV_CONTEXT */
#define IPTV_CONTEXT_IPTV_CONTEXT_OFFSET                                                      0
#define IPTV_CONTEXT_IPTV_CONTEXT_WORD_OFFSET                                                 0

/* >>>RDD_IPTV_CONTEXT_DTS */
#define RDD_IPTV_CONTEXT_IPTV_CONTEXT_NUMBER	32

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	iptv_context[RDD_IPTV_CONTEXT_IPTV_CONTEXT_NUMBER];
#else
	uint32_t	iptv_context[RDD_IPTV_CONTEXT_IPTV_CONTEXT_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_CONTEXT_DTS;

typedef RDD_IPTV_CONTEXT_DTS * aligned_RDD_IPTV_CONTEXT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[32];
    uint64_t dword_val64[16];
    RDD_IPTV_CONTEXT_DTS fields;
} RDD_IPTV_CONTEXT_DTS_NEW;
typedef RDD_IPTV_CONTEXT_DTS_NEW * aligned_RDD_IPTV_CONTEXT_DTS_NEW ALIGNMENT8;

#define RDD_IPTV_CONTEXT_IPTV_CONTEXT_READ_G(r, g, idx, i)          GROUP_MREAD_I_32(g, idx*sizeof(RDD_IPTV_CONTEXT_DTS), i, r)
#define RDD_IPTV_CONTEXT_IPTV_CONTEXT_WRITE_G(v, g, idx, i)         GROUP_MWRITE_I_32(g, idx*sizeof(RDD_IPTV_CONTEXT_DTS), i, v)
#define RDD_IPTV_CONTEXT_IPTV_CONTEXT_READ(r, p, i)                 MREAD_I_32((uint8_t *)p, i, r)
#define RDD_IPTV_CONTEXT_IPTV_CONTEXT_WRITE(v, p, i)                MWRITE_I_32((uint8_t *)p, i, v)
#define RDD_IPTV_CONTEXT_NATC_COMMAND_READ_G(r, g, idx, i)          GROUP_MREAD_I_8(g, idx*sizeof(RDD_IPTV_CONTEXT_DTS), i, r)
#define RDD_IPTV_CONTEXT_NATC_COMMAND_WRITE_G(v, g, idx, i)         GROUP_MWRITE_I_8(g, idx*sizeof(RDD_IPTV_CONTEXT_DTS), i, v)
#define RDD_IPTV_CONTEXT_NATC_COMMAND_READ(r, p, i)                 MREAD_I_8((uint8_t *)p, i, r)
#define RDD_IPTV_CONTEXT_NATC_COMMAND_WRITE(v, p, i)                MWRITE_I_8((uint8_t *)p, i, v)
#define RDD_IPTV_CONTEXT_VLAN_ACTION_CTX_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_IPTV_CONTEXT_DTS) + 64, i, r)
#define RDD_IPTV_CONTEXT_VLAN_ACTION_CTX_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_IPTV_CONTEXT_DTS) + 64, i, v)
#define RDD_IPTV_CONTEXT_VLAN_ACTION_CTX_READ(r, p, i)              MREAD_I_8((uint8_t *)p + 64, i, r)
#define RDD_IPTV_CONTEXT_VLAN_ACTION_CTX_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p + 64, i, v)
#define RDD_IPTV_CONTEXT_IPTV_CTX_READ_G(r, g, idx, i)              GROUP_MREAD_I_8(g, idx*sizeof(RDD_IPTV_CONTEXT_DTS), i, r)
#define RDD_IPTV_CONTEXT_IPTV_CTX_WRITE_G(v, g, idx, i)             GROUP_MWRITE_I_8(g, idx*sizeof(RDD_IPTV_CONTEXT_DTS), i, v)
#define RDD_IPTV_CONTEXT_IPTV_CTX_READ(r, p, i)                     MREAD_I_8((uint8_t *)p, i, r)
#define RDD_IPTV_CONTEXT_IPTV_CTX_WRITE(v, p, i)                    MWRITE_I_8((uint8_t *)p, i, v)
/* <<<RDD_IPTV_CONTEXT_DTS */

/* <<<RDD_IPTV_CONTEXT */


/* >>>RDD_IPTV_PORT_CONTEXT_ENTRY */
#define IPTV_PORT_CONTEXT_ENTRY_STATE_F_OFFSET                                                           31
#define IPTV_PORT_CONTEXT_ENTRY_STATE_F_WIDTH                                                            1
#define IPTV_PORT_CONTEXT_ENTRY_IPTV_PORT_CONTEXT_ENTRY_OFFSET                                           0
#define IPTV_PORT_CONTEXT_ENTRY_STATE_OFFSET                                                             0
#define IPTV_PORT_CONTEXT_ENTRY_STATE_WORD_OFFSET                                                        0
#define IPTV_PORT_CONTEXT_ENTRY_STATE_F_OFFSET_MOD8                                                      7
#define IPTV_PORT_CONTEXT_ENTRY_STATE_F_OFFSET_MOD16                                                     15
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_F_OFFSET                                                13
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_F_WIDTH                                                 5
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_OFFSET                                                  1
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_WORD_OFFSET                                             0
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_F_OFFSET_MOD8                                           5
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_F_OFFSET_MOD16                                          13
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_F_OFFSET                                                         12
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_F_WIDTH                                                          1
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_OFFSET                                                           2
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_WORD_OFFSET                                                      0
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_F_OFFSET_MOD8                                                    4
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_F_OFFSET_MOD16                                                   12
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_F_OFFSET                                          5
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_F_WIDTH                                           7
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_OFFSET                                            2
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_WORD_OFFSET                                       0
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_F_OFFSET_MOD8                                     5
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_F_OFFSET_MOD16                                    5
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_F_OFFSET                                                       0
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_F_WIDTH                                                        5
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_OFFSET                                                         3
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_WORD_OFFSET                                                    0
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_F_OFFSET_MOD8                                                  0
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_F_OFFSET_MOD16                                                 0
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET                                               20
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_WIDTH                                                1
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_OFFSET                                                 5
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WORD_OFFSET                                            1
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET_MOD8                                          4
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET_MOD16                                         4
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET                                                      18
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_F_WIDTH                                                       2
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_OFFSET                                                        5
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_WORD_OFFSET                                                   1
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET_MOD8                                                 2
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET_MOD16                                                2
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_F_OFFSET                                                     16
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_F_WIDTH                                                      2
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_OFFSET                                                       5
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_WORD_OFFSET                                                  1
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_F_OFFSET_MOD8                                                0
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_F_OFFSET_MOD16                                               0
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_F_OFFSET                                                     8
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_F_WIDTH                                                      8
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_OFFSET                                                       6
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_WORD_OFFSET                                                  1
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_F_OFFSET_MOD16                                               8
#define IPTV_PORT_CONTEXT_ENTRY_QUEUE_F_OFFSET                                                           0
#define IPTV_PORT_CONTEXT_ENTRY_QUEUE_F_WIDTH                                                            8
#define IPTV_PORT_CONTEXT_ENTRY_QUEUE_OFFSET                                                             7
#define IPTV_PORT_CONTEXT_ENTRY_QUEUE_WORD_OFFSET                                                        1
#define IPTV_PORT_CONTEXT_ENTRY_QUEUE_F_OFFSET_MOD16                                                     0

/* >>>RDD_IPTV_PORT_CONTEXT_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	state                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved0             	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	l2_header_length      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	l2_push               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	l2_command_list_length	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	l2_offset             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_state                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved0             	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_l2_header_length      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_l2_push               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_l2_command_list_length	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_l2_offset             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_state                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved0             	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_l2_header_length      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_l2_push               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_l2_command_list_length	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_l2_offset             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved1             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_wred_high_prio     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_phy            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_info           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	egress_port           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	queue                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved1             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_wred_high_prio     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_egress_phy            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lag_port                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	reserved1_egress_port           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_queue                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved1             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_wred_high_prio     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_egress_phy            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_phy_ext                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	egress_mode                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	reserved2_egress_port           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_queue                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	l2_offset             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	l2_command_list_length	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	l2_push               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	l2_header_length      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved0             	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	state                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_l2_offset             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_l2_command_list_length	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_l2_push               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_l2_header_length      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved0             	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_state                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_l2_offset             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_l2_command_list_length	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_l2_push               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_l2_header_length      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved0             	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_state                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	queue                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_port           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_info           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	egress_phy            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_wred_high_prio     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_queue                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_egress_port           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lag_port                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	reserved1_egress_phy            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_wred_high_prio     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved1             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_queue                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_egress_port           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_phy_ext                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	egress_mode                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	reserved2_egress_phy            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_wred_high_prio     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved1             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_PORT_CONTEXT_ENTRY_DTS;

typedef RDD_IPTV_PORT_CONTEXT_ENTRY_DTS * aligned_RDD_IPTV_PORT_CONTEXT_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_IPTV_PORT_CONTEXT_ENTRY_DTS fields;
} RDD_IPTV_PORT_CONTEXT_ENTRY_DTS_NEW;
typedef RDD_IPTV_PORT_CONTEXT_ENTRY_DTS_NEW * aligned_RDD_IPTV_PORT_CONTEXT_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_IPTV_PORT_CONTEXT_ENTRY_STATE_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS), 7, 1, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_STATE_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS), 7, 1, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_STATE_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_STATE_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_READ_G(r, g, idx)                GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 0, 13, 5, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 0, 13, 5, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_READ(r, p)                       FIELD_MREAD_32((uint8_t *)p + 0, 13, 5, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_WRITE(v, p)                      FIELD_MWRITE_32((uint8_t *)p + 0, 13, 5, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 2, 4, 1, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 2, 4, 1, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 2, 4, 1, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 2, 4, 1, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 2, 5, 7, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 2, 5, 7, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 2, 5, 7, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 2, 5, 7, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 3, 0, 5, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 3, 0, 5, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 3, 0, 5, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 3, 0, 5, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 4, 1, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 4, 1, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 5, 4, 1, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 5, 4, 1, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 2, 2, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 2, 2, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 5, 2, 2, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 5, 2, 2, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 0, 2, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 0, 2, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 5, 0, 2, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 5, 0, 2, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_LAG_PORT_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 0, 2, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_LAG_PORT_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 0, 2, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_LAG_PORT_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 5, 0, 2, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_LAG_PORT_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 5, 0, 2, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_EXT_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 1, 1, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_EXT_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 1, 1, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_EXT_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 5, 1, 1, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_EXT_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 5, 1, 1, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_MODE_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 0, 1, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_MODE_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 5, 0, 1, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_MODE_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 5, 0, 1, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_MODE_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 5, 0, 1, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_READ_G(r, g, idx)                     GROUP_MREAD_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 6, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_WRITE_G(v, g, idx)                    GROUP_MWRITE_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 6, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_READ(r, p)                            MREAD_8((uint8_t *)p + 6, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_WRITE(v, p)                           MWRITE_8((uint8_t *)p + 6, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_QUEUE_READ_G(r, g, idx)                           GROUP_MREAD_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 7, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_QUEUE_WRITE_G(v, g, idx)                          GROUP_MWRITE_8(g, idx*sizeof(RDD_IPTV_PORT_CONTEXT_ENTRY_DTS) + 7, v)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_QUEUE_READ(r, p)                                  MREAD_8((uint8_t *)p + 7, r)
#define RDD_IPTV_PORT_CONTEXT_ENTRY_QUEUE_WRITE(v, p)                                 MWRITE_8((uint8_t *)p + 7, v)
/* <<<RDD_IPTV_PORT_CONTEXT_ENTRY_DTS */

/* <<<RDD_IPTV_PORT_CONTEXT_ENTRY */


/* >>>RDD_IPTV_DDR_PORT_BUFFER_ENTRY */
#define IPTV_DDR_PORT_BUFFER_ENTRY_IPTV_DDR_PORT_BUFFER_ENTRY_OFFSET                                        0
#define IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_OFFSET                                                            0
#define IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_WORD_OFFSET                                                       0
#define IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_F_OFFSET_MOD16                                                    0
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_F_OFFSET                                                       0
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_F_WIDTH                                                        32
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_OFFSET                                                         56
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_WORD_OFFSET                                                    14
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_F_OFFSET                                                       0
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_F_WIDTH                                                        32
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_OFFSET                                                         60
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_WORD_OFFSET                                                    15
/* <<<RDD_IPTV_DDR_PORT_BUFFER_ENTRY */


/* >>>RDD_FC_UCAST_FLOW_CONTEXT_ENTRY */
#define FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_F_OFFSET                                                    0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_F_WIDTH                                                     32
#define FC_UCAST_FLOW_CONTEXT_ENTRY_FC_UCAST_FLOW_CONTEXT_ENTRY_OFFSET                                       0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_OFFSET                                                      0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_WORD_OFFSET                                                 0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_F_OFFSET                                                  31
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_F_WIDTH                                                   1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_OFFSET                                                    4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_WORD_OFFSET                                               1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_F_OFFSET_MOD8                                             7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_F_OFFSET_MOD16                                            15
#define FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_F_OFFSET                                                        30
#define FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_F_WIDTH                                                         1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_OFFSET                                                          4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_WORD_OFFSET                                                     1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_F_OFFSET_MOD8                                                   6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_F_OFFSET_MOD16                                                  14
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_F_OFFSET                                                       29
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_F_WIDTH                                                        1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_OFFSET                                                         4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_WORD_OFFSET                                                    1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_F_OFFSET_MOD8                                                  5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_F_OFFSET_MOD16                                                 13
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_F_OFFSET                                                   28
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_F_WIDTH                                                    1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_OFFSET                                                     4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_WORD_OFFSET                                                1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_F_OFFSET_MOD8                                              4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_F_OFFSET_MOD16                                             12
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_F_OFFSET                                                     27
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_F_WIDTH                                                      1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_OFFSET                                                       4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_WORD_OFFSET                                                  1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_F_OFFSET_MOD8                                                3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_F_OFFSET_MOD16                                               11
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MTU_F_OFFSET                                                             16
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MTU_F_WIDTH                                                              11
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MTU_OFFSET                                                               4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MTU_WORD_OFFSET                                                          1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MTU_F_OFFSET_MOD16                                                       0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_F_OFFSET                                                     15
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_F_WIDTH                                                      1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_OFFSET                                                       6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_WORD_OFFSET                                                  1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_F_OFFSET_MOD8                                                7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_F_OFFSET_MOD16                                               15
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_F_OFFSET                                                            14
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_F_WIDTH                                                             1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_OFFSET                                                              6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_WORD_OFFSET                                                         1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_F_OFFSET_MOD8                                                       6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_F_OFFSET_MOD16                                                      14
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_F_OFFSET                                                           13
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_F_WIDTH                                                            1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_OFFSET                                                             6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_WORD_OFFSET                                                        1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_F_OFFSET_MOD8                                                      5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_F_OFFSET_MOD16                                                     13
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_F_OFFSET                                            12
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_F_WIDTH                                             1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_OFFSET                                              6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_WORD_OFFSET                                         1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_F_OFFSET_MOD8                                       4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_F_OFFSET_MOD16                                      12
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_64_F_OFFSET                                          8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_64_F_WIDTH                                           4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_64_OFFSET                                            6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_64_WORD_OFFSET                                       1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_64_F_OFFSET_MOD8                                     0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_64_F_OFFSET_MOD16                                    8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET                                               7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_WIDTH                                                1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_OFFSET                                                 7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WORD_OFFSET                                            1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET_MOD8                                          7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET_MOD16                                         7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_F_OFFSET                                                      6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_F_WIDTH                                                       1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_OFFSET                                                        7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_WORD_OFFSET                                                   1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_F_OFFSET_MOD8                                                 6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_F_OFFSET_MOD16                                                6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_F_OFFSET                                                           5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_F_WIDTH                                                            1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_OFFSET                                                             7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_WORD_OFFSET                                                        1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_F_OFFSET_MOD8                                                      5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_F_OFFSET_MOD16                                                     5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_F_OFFSET                                              31
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_F_WIDTH                                               1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_OFFSET                                                8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_WORD_OFFSET                                           2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_F_OFFSET_MOD8                                         7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_F_OFFSET_MOD16                                        15
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_F_OFFSET                                              30
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_F_WIDTH                                               1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_OFFSET                                                8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_WORD_OFFSET                                           2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_F_OFFSET_MOD8                                         6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_F_OFFSET_MOD16                                        14
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_F_OFFSET                                                        26
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_F_WIDTH                                                         4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_OFFSET                                                          8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_WORD_OFFSET                                                     2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_F_OFFSET_MOD8                                                   2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_F_OFFSET_MOD16                                                  10
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_F_OFFSET                                                        25
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_F_WIDTH                                                         1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_OFFSET                                                          8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_WORD_OFFSET                                                     2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_F_OFFSET_MOD8                                                   1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_F_OFFSET_MOD16                                                  9
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_F_OFFSET                                                         23
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_F_WIDTH                                                          2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_OFFSET                                                           8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_WORD_OFFSET                                                      2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_F_OFFSET_MOD8                                                    7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_F_OFFSET_MOD16                                                   7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_F_OFFSET                                                     22
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_F_WIDTH                                                      1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_OFFSET                                                       9
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_WORD_OFFSET                                                  2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_F_OFFSET_MOD8                                                6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_F_OFFSET_MOD16                                               6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET                                                      20
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_F_WIDTH                                                       2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_OFFSET                                                        9
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_WORD_OFFSET                                                   2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET_MOD8                                                 4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET_MOD16                                                4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_F_OFFSET                                             19
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_F_WIDTH                                              1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_OFFSET                                               9
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_WORD_OFFSET                                          2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_F_OFFSET_MOD8                                        3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_F_OFFSET_MOD16                                       3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_F_OFFSET                                                   18
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_F_WIDTH                                                    1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_OFFSET                                                     9
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_WORD_OFFSET                                                2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_F_OFFSET_MOD8                                              2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_F_OFFSET_MOD16                                             2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_F_OFFSET                                             0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_F_WIDTH                                              18
#define FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_OFFSET                                               8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_WORD_OFFSET                                          2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_F_OFFSET                                        29
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_F_WIDTH                                         3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_OFFSET                                          12
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_WORD_OFFSET                                     3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_F_OFFSET_MOD8                                   5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_F_OFFSET_MOD16                                  13
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_F_OFFSET                                            27
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_F_WIDTH                                             1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_OFFSET                                              12
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_WORD_OFFSET                                         3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_F_OFFSET_MOD8                                       3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_F_OFFSET_MOD16                                      11
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_STREAM_ID_F_OFFSET                                            24
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_STREAM_ID_F_WIDTH                                             3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_STREAM_ID_OFFSET                                              12
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_STREAM_ID_WORD_OFFSET                                         3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_STREAM_ID_F_OFFSET_MOD8                                       0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_STREAM_ID_F_OFFSET_MOD16                                      8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_F_OFFSET                                               22
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_F_WIDTH                                                2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_OFFSET                                                 13
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_WORD_OFFSET                                            3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_F_OFFSET_MOD8                                          6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_F_OFFSET_MOD16                                         6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_F_OFFSET                                                      16
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_F_WIDTH                                                       6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_OFFSET                                                        13
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_WORD_OFFSET                                                   3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_F_OFFSET_MOD8                                                 0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_F_OFFSET_MOD16                                                0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TOS_F_OFFSET                                                             8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TOS_F_WIDTH                                                              8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TOS_OFFSET                                                               14
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TOS_WORD_OFFSET                                                          3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TOS_F_OFFSET_MOD16                                                       8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_F_OFFSET                                                    0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_F_WIDTH                                                     8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_OFFSET                                                      15
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_WORD_OFFSET                                                 3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_F_OFFSET_MOD16                                              0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_F_OFFSET                                                31
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_F_WIDTH                                                 1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_OFFSET                                                  16
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_WORD_OFFSET                                             4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_F_OFFSET_MOD8                                           7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_F_OFFSET_MOD16                                          15
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_F_OFFSET                                                26
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_F_WIDTH                                                 5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_OFFSET                                                  16
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_WORD_OFFSET                                             4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_F_OFFSET_MOD8                                           2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_F_OFFSET_MOD16                                          10
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_OFFSET                                                      20
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_WORD_OFFSET                                                 5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_F_OFFSET_MOD16                                              8

/* >>>RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS */
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_NUMBER	104

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	natc_control                                                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	multicast_flag                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	overflow                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_routed                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_tos_mangle                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_l2_accel                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mtu                                                                   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	spdsvc_flow                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	drop                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	valid                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	connection_direction                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	command_list_length_64                                                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_wred_high_prio                                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_mapt_us                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_df                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                                                             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_unicast_wfd_nic                                                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_unicast_wfd_any                                                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	priority                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wfd_prio                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wfd_idx                                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_hit_trap                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	egress_phy                                                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_ingqos_high_prio                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_tcpspdtest                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	link_specific_union                                                   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_addresses_table_index                                              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_is_upload                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_stream_id                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dhd_flow_priority                                                     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cpu_reason                                                            	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tos                                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pathstat_idx                                                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_service_queue                                                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	service_queue_id                                                      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3                                                             	:26	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	command_list[RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_NUMBER];
#else
	uint32_t	natc_control                                                          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                                                             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_df                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_mapt_us                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_wred_high_prio                                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	command_list_length_64                                                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	connection_direction                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	valid                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	drop                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	spdsvc_flow                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mtu                                                                   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_l2_accel                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_tos_mangle                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_routed                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	overflow                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	multicast_flag                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	link_specific_union                                                   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_tcpspdtest                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_ingqos_high_prio                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	egress_phy                                                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_hit_trap                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wfd_idx                                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wfd_prio                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	priority                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_unicast_wfd_any                                                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_unicast_wfd_nic                                                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pathstat_idx                                                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tos                                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cpu_reason                                                            	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dhd_flow_priority                                                     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_stream_id                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcpspdtest_is_upload                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_addresses_table_index                                              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3                                                             	:26	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	service_queue_id                                                      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_service_queue                                                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	command_list[RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS;

typedef RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS * aligned_RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[31];
    uint64_t dword_val64[15];
    RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS fields;
} RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS_NEW;
typedef RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS_NEW * aligned_RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_READ_G(r, g, idx)                      GROUP_MREAD_32(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS), r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_WRITE_G(v, g, idx)                     GROUP_MWRITE_32(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS), v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_READ(r, p)                             MREAD_32((uint8_t *)p, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_WRITE(v, p)                            MWRITE_32((uint8_t *)p, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 7, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 7, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p + 4, 7, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p + 4, 7, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 6, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 6, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 4, 6, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 4, 6, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 5, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 5, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 4, 5, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 4, 5, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 4, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 4, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 4, 4, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 4, 4, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 3, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 3, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 4, 3, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 4, 3, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MTU_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 0, 11, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MTU_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 4, 0, 11, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MTU_READ(r, p)                                      FIELD_MREAD_16((uint8_t *)p + 4, 0, 11, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MTU_WRITE(v, p)                                     FIELD_MWRITE_16((uint8_t *)p + 4, 0, 11, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 6, 7, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 6, 7, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 6, 7, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 6, 7, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 6, 6, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 6, 6, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)p + 6, 6, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)p + 6, 6, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 6, 5, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 6, 5, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 6, 5, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 6, 5, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 6, 4, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 6, 4, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 6, 4, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 6, 4, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_64_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 6, 0, 4, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_64_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 6, 0, 4, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_64_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 6, 0, 4, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_64_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 6, 0, 4, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 7, 7, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 7, 7, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 7, 7, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 7, 7, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 7, 6, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 7, 6, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 7, 6, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 7, 6, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 7, 5, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 7, 5, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 7, 5, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 7, 5, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 7, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 7, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 8, 7, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 8, 7, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 6, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 6, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 8, 6, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 8, 6, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 2, 4, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 2, 4, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 8, 2, 4, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 8, 2, 4, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 1, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 1, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 8, 1, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 8, 1, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 7, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 7, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_READ(r, p)                                  FIELD_MREAD_16((uint8_t *)p + 8, 7, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_WRITE(v, p)                                 FIELD_MWRITE_16((uint8_t *)p + 8, 7, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 9, 6, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 9, 6, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 9, 6, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 9, 6, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 9, 4, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 9, 4, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 9, 4, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 9, 4, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 9, 3, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 9, 3, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 9, 3, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 9, 3, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 9, 2, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 9, 2, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 9, 2, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 9, 2, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_READ_G(r, g, idx)               GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 0, 18, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 8, 0, 18, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_READ(r, p)                      FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_WRITE(v, p)                     FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 12, 5, 3, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 12, 5, 3, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 12, 5, 3, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 12, 5, 3, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 12, 3, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 12, 3, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 12, 3, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 12, 3, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_STREAM_ID_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 12, 0, 3, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_STREAM_ID_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 12, 0, 3, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_STREAM_ID_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 12, 0, 3, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_STREAM_ID_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 12, 0, 3, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 13, 6, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 13, 6, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 13, 6, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 13, 6, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 13, 0, 6, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 13, 0, 6, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 13, 0, 6, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 13, 0, 6, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TOS_READ_G(r, g, idx)                               GROUP_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 14, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TOS_WRITE_G(v, g, idx)                              GROUP_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 14, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TOS_READ(r, p)                                      MREAD_8((uint8_t *)p + 14, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TOS_WRITE(v, p)                                     MWRITE_8((uint8_t *)p + 14, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_READ_G(r, g, idx)                      GROUP_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 15, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_WRITE_G(v, g, idx)                     GROUP_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 15, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_READ(r, p)                             MREAD_8((uint8_t *)p + 15, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_WRITE(v, p)                            MWRITE_8((uint8_t *)p + 15, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 16, 7, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 16, 7, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 16, 7, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 16, 7, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 16, 2, 5, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 16, 2, 5, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 16, 2, 5, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 16, 2, 5, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_READ_G(r, g, idx, i)                   GROUP_MREAD_I_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 20, i, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_WRITE_G(v, g, idx, i)                  GROUP_MWRITE_I_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS) + 20, i, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_READ(r, p, i)                          MREAD_I_8((uint8_t *)p + 20, i, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_WRITE(v, p, i)                         MWRITE_I_8((uint8_t *)p + 20, i, v)
/* <<<RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DTS */

/* <<<RDD_FC_UCAST_FLOW_CONTEXT_ENTRY */


/* >>>RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY */
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_F_OFFSET                                                     16
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_F_WIDTH                                                      2
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_OFFSET                                                       9
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_WORD_OFFSET                                                  2
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_F_OFFSET_MOD8                                                0
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_F_OFFSET_MOD16                                               0
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_F_OFFSET                                                     8
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_F_WIDTH                                                      8
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_OFFSET                                                       10
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_WORD_OFFSET                                                  2
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_F_OFFSET_MOD16                                               8
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_F_OFFSET                                                           0
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_F_WIDTH                                                            8
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_OFFSET                                                             11
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_WORD_OFFSET                                                        2
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_F_OFFSET_MOD16                                                     0

/* >>>RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved1     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved1     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved1     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved2     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved2     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved2     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved3     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_info   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	egress_port   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	queue         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved3     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lag_port                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	reserved1_egress_port   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_queue         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved3     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_phy_ext          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	egress_mode             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	reserved2_egress_port   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_queue         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved1     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved1     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved1     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved2     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved2     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved2     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	queue         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_port   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_info   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	reserved3     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_queue         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_egress_port   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lag_port                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	reserved1_reserved3     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_queue         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_egress_port   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_phy_ext          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	egress_mode             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
			uint32_t	reserved2_reserved3     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS;

typedef RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS * aligned_RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[3];
    uint64_t dword_val64[1];
    RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS fields;
} RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS_NEW;
typedef RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS_NEW * aligned_RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 9, 0, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 9, 0, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 9, 0, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 9, 0, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_LAG_PORT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 9, 0, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_LAG_PORT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 9, 0, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_LAG_PORT_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 9, 0, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_LAG_PORT_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 9, 0, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PHY_EXT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 9, 1, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PHY_EXT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 9, 1, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PHY_EXT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 9, 1, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PHY_EXT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 9, 1, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_MODE_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 9, 0, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_MODE_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 9, 0, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_MODE_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 9, 0, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_MODE_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 9, 0, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_READ_G(r, g, idx)             GROUP_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 10, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_WRITE_G(v, g, idx)            GROUP_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 10, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_READ(r, p)                    MREAD_8((uint8_t *)p + 10, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_WRITE(v, p)                   MWRITE_8((uint8_t *)p + 10, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_READ_G(r, g, idx)                   GROUP_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 11, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_WRITE_G(v, g, idx)                  GROUP_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS) + 11, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_READ(r, p)                          MREAD_8((uint8_t *)p + 11, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_WRITE(v, p)                         MWRITE_8((uint8_t *)p + 11, v)
/* <<<RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_DTS */

/* <<<RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY */


/* >>>RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY */
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_F_OFFSET                                                       0
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_F_WIDTH                                                        16
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_OFFSET                                                         10
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_WORD_OFFSET                                                    2

/* >>>RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reserved1 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	chain_idx 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved1 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	chain_idx 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_DTS;

typedef RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_DTS * aligned_RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[3];
    uint64_t dword_val64[1];
    RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_DTS fields;
} RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_DTS_NEW;
typedef RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_DTS_NEW * aligned_RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_DTS) + 10, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_DTS) + 10, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_READ(r, p)                 MREAD_16((uint8_t *)p + 10, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_WRITE(v, p)                MWRITE_16((uint8_t *)p + 10, v)
/* <<<RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_DTS */

/* <<<RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY */


/* >>>RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY */
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_F_OFFSET                                                       10
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_F_WIDTH                                                        4
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_OFFSET                                                         10
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_WORD_OFFSET                                                    2
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_F_OFFSET_MOD8                                                  2
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_F_OFFSET_MOD16                                                 10
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_F_OFFSET                                                    0
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_F_WIDTH                                                     10
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_OFFSET                                                      10
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_WORD_OFFSET                                                 2
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_F_OFFSET_MOD16                                              0

/* >>>RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reserved1   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wifi_ssid   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_id	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved1   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_id	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wifi_ssid   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS;

typedef RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS * aligned_RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[3];
    uint64_t dword_val64[1];
    RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS fields;
} RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS_NEW;
typedef RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS_NEW * aligned_RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS) + 10, 2, 4, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS) + 10, 2, 4, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 10, 2, 4, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 10, 2, 4, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS) + 10, 0, 10, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS) + 10, 0, 10, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 10, 0, 10, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 10, 0, 10, v)
/* <<<RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_DTS */

/* <<<RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY */


/* >>>RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY */
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_F_OFFSET                                                    16
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_F_WIDTH                                                     1
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_OFFSET                                                      9
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_WORD_OFFSET                                                 2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_F_OFFSET_MOD8                                               0
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_F_OFFSET_MOD16                                              0
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_F_OFFSET                                                       14
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_F_WIDTH                                                        2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_OFFSET                                                         10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_WORD_OFFSET                                                    2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_F_OFFSET_MOD8                                                  6
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_F_OFFSET_MOD16                                                 14
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_F_OFFSET                                                       10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_F_WIDTH                                                        4
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_OFFSET                                                         10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_WORD_OFFSET                                                    2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_F_OFFSET_MOD8                                                  2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_F_OFFSET_MOD16                                                 10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_F_OFFSET                                                    0
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_F_WIDTH                                                     10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_OFFSET                                                      10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_WORD_OFFSET                                                 2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_F_OFFSET_MOD16                                              0

/* >>>RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reserved1   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3   	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	llcsnap_flag	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	radio_idx   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wifi_ssid   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_id	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved1   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_id	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wifi_ssid   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	radio_idx   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	llcsnap_flag	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3   	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS;

typedef RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS * aligned_RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[3];
    uint64_t dword_val64[1];
    RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS fields;
} RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS_NEW;
typedef RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS_NEW * aligned_RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS) + 9, 0, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS) + 9, 0, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 9, 0, 1, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 9, 0, 1, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS) + 10, 6, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS) + 10, 6, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 10, 6, 2, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 10, 6, 2, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS) + 10, 2, 4, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS) + 10, 2, 4, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 10, 2, 4, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 10, 2, 4, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS) + 10, 0, 10, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS) + 10, 0, 10, v)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 10, 0, 10, r)
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 10, 0, 10, v)
/* <<<RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_DTS */

/* <<<RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY */


/* >>>RDD_RULE_BASED_CONTEXT_ENTRY */
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_GEM_F_OFFSET                                                     31
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_GEM_F_WIDTH                                                      1
#define RULE_BASED_CONTEXT_ENTRY_RULE_BASED_CONTEXT_ENTRY_OFFSET                                          0
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_GEM_OFFSET                                                       0
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_GEM_WORD_OFFSET                                                  0
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_GEM_F_OFFSET_MOD8                                                7
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_GEM_F_OFFSET_MOD16                                               15
#define RULE_BASED_CONTEXT_ENTRY_TC_TO_Q_F_OFFSET                                                         30
#define RULE_BASED_CONTEXT_ENTRY_TC_TO_Q_F_WIDTH                                                          1
#define RULE_BASED_CONTEXT_ENTRY_TC_TO_Q_OFFSET                                                           0
#define RULE_BASED_CONTEXT_ENTRY_TC_TO_Q_WORD_OFFSET                                                      0
#define RULE_BASED_CONTEXT_ENTRY_TC_TO_Q_F_OFFSET_MOD8                                                    6
#define RULE_BASED_CONTEXT_ENTRY_TC_TO_Q_F_OFFSET_MOD16                                                   14
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_Q_F_OFFSET                                                       29
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_Q_F_WIDTH                                                        1
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_Q_OFFSET                                                         0
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_Q_WORD_OFFSET                                                    0
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_Q_F_OFFSET_MOD8                                                  5
#define RULE_BASED_CONTEXT_ENTRY_PBIT_TO_Q_F_OFFSET_MOD16                                                 13
#define RULE_BASED_CONTEXT_ENTRY_PBIT_REMARK_F_OFFSET                                                     28
#define RULE_BASED_CONTEXT_ENTRY_PBIT_REMARK_F_WIDTH                                                      1
#define RULE_BASED_CONTEXT_ENTRY_PBIT_REMARK_OFFSET                                                       0
#define RULE_BASED_CONTEXT_ENTRY_PBIT_REMARK_WORD_OFFSET                                                  0
#define RULE_BASED_CONTEXT_ENTRY_PBIT_REMARK_F_OFFSET_MOD8                                                4
#define RULE_BASED_CONTEXT_ENTRY_PBIT_REMARK_F_OFFSET_MOD16                                               12
#define RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_OR_IPTV_COMMON_ACTIONS_F_OFFSET                              27
#define RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_OR_IPTV_COMMON_ACTIONS_F_WIDTH                               1
#define RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_OR_IPTV_COMMON_ACTIONS_OFFSET                                0
#define RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_OR_IPTV_COMMON_ACTIONS_WORD_OFFSET                           0
#define RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_OR_IPTV_COMMON_ACTIONS_F_OFFSET_MOD8                         3
#define RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_OR_IPTV_COMMON_ACTIONS_F_OFFSET_MOD16                        11
#define RULE_BASED_CONTEXT_ENTRY_DEI_F_OFFSET                                                             26
#define RULE_BASED_CONTEXT_ENTRY_DEI_F_WIDTH                                                              1
#define RULE_BASED_CONTEXT_ENTRY_DEI_OFFSET                                                               0
#define RULE_BASED_CONTEXT_ENTRY_DEI_WORD_OFFSET                                                          0
#define RULE_BASED_CONTEXT_ENTRY_DEI_F_OFFSET_MOD8                                                        2
#define RULE_BASED_CONTEXT_ENTRY_DEI_F_OFFSET_MOD16                                                       10
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_F_OFFSET                                                          25
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_F_WIDTH                                                           1
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_OFFSET                                                            0
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_WORD_OFFSET                                                       0
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_F_OFFSET_MOD8                                                     1
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_F_OFFSET_MOD16                                                    9
#define RULE_BASED_CONTEXT_ENTRY_DSCP_REMARK_F_OFFSET                                                     24
#define RULE_BASED_CONTEXT_ENTRY_DSCP_REMARK_F_WIDTH                                                      1
#define RULE_BASED_CONTEXT_ENTRY_DSCP_REMARK_OFFSET                                                       0
#define RULE_BASED_CONTEXT_ENTRY_DSCP_REMARK_WORD_OFFSET                                                  0
#define RULE_BASED_CONTEXT_ENTRY_DSCP_REMARK_F_OFFSET_MOD8                                                0
#define RULE_BASED_CONTEXT_ENTRY_DSCP_REMARK_F_OFFSET_MOD16                                               8
#define RULE_BASED_CONTEXT_ENTRY_DSCP_VALUE_F_OFFSET                                                      18
#define RULE_BASED_CONTEXT_ENTRY_DSCP_VALUE_F_WIDTH                                                       6
#define RULE_BASED_CONTEXT_ENTRY_DSCP_VALUE_OFFSET                                                        1
#define RULE_BASED_CONTEXT_ENTRY_DSCP_VALUE_WORD_OFFSET                                                   0
#define RULE_BASED_CONTEXT_ENTRY_DSCP_VALUE_F_OFFSET_MOD8                                                 2
#define RULE_BASED_CONTEXT_ENTRY_DSCP_VALUE_F_OFFSET_MOD16                                                2
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_ACTION_F_OFFSET                                                   17
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_ACTION_F_WIDTH                                                    1
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_ACTION_OFFSET                                                     1
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_ACTION_WORD_OFFSET                                                0
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_ACTION_F_OFFSET_MOD8                                              1
#define RULE_BASED_CONTEXT_ENTRY_NO_FWD_ACTION_F_OFFSET_MOD16                                             1
#define RULE_BASED_CONTEXT_ENTRY_FLOW_BASED_FORWARD_F_OFFSET                                              16
#define RULE_BASED_CONTEXT_ENTRY_FLOW_BASED_FORWARD_F_WIDTH                                               1
#define RULE_BASED_CONTEXT_ENTRY_FLOW_BASED_FORWARD_OFFSET                                                1
#define RULE_BASED_CONTEXT_ENTRY_FLOW_BASED_FORWARD_WORD_OFFSET                                           0
#define RULE_BASED_CONTEXT_ENTRY_FLOW_BASED_FORWARD_F_OFFSET_MOD8                                         0
#define RULE_BASED_CONTEXT_ENTRY_FLOW_BASED_FORWARD_F_OFFSET_MOD16                                        0
#define RULE_BASED_CONTEXT_ENTRY_GEM_MAPPING_TABLE_F_OFFSET                                               13
#define RULE_BASED_CONTEXT_ENTRY_GEM_MAPPING_TABLE_F_WIDTH                                                3
#define RULE_BASED_CONTEXT_ENTRY_GEM_MAPPING_TABLE_OFFSET                                                 2
#define RULE_BASED_CONTEXT_ENTRY_GEM_MAPPING_TABLE_WORD_OFFSET                                            0
#define RULE_BASED_CONTEXT_ENTRY_GEM_MAPPING_TABLE_F_OFFSET_MOD8                                          5
#define RULE_BASED_CONTEXT_ENTRY_GEM_MAPPING_TABLE_F_OFFSET_MOD16                                         13
#define RULE_BASED_CONTEXT_ENTRY_TRAP_REASON_F_OFFSET                                                     10
#define RULE_BASED_CONTEXT_ENTRY_TRAP_REASON_F_WIDTH                                                      3
#define RULE_BASED_CONTEXT_ENTRY_TRAP_REASON_OFFSET                                                       2
#define RULE_BASED_CONTEXT_ENTRY_TRAP_REASON_WORD_OFFSET                                                  0
#define RULE_BASED_CONTEXT_ENTRY_TRAP_REASON_F_OFFSET_MOD8                                                2
#define RULE_BASED_CONTEXT_ENTRY_TRAP_REASON_F_OFFSET_MOD16                                               10
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ENABLE_F_OFFSET                                                  9
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ENABLE_F_WIDTH                                                   1
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ENABLE_OFFSET                                                    2
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ENABLE_WORD_OFFSET                                               0
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ENABLE_F_OFFSET_MOD8                                             1
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ENABLE_F_OFFSET_MOD16                                            9
#define RULE_BASED_CONTEXT_ENTRY_QUEUE_UNION_F_OFFSET                                                     0
#define RULE_BASED_CONTEXT_ENTRY_QUEUE_UNION_F_WIDTH                                                      9
#define RULE_BASED_CONTEXT_ENTRY_QUEUE_UNION_OFFSET                                                       2
#define RULE_BASED_CONTEXT_ENTRY_QUEUE_UNION_WORD_OFFSET                                                  0
#define RULE_BASED_CONTEXT_ENTRY_QUEUE_UNION_F_OFFSET_MOD16                                               0
#define RULE_BASED_CONTEXT_ENTRY_TO_LAN_F_OFFSET                                                          24
#define RULE_BASED_CONTEXT_ENTRY_TO_LAN_F_WIDTH                                                           1
#define RULE_BASED_CONTEXT_ENTRY_TO_LAN_OFFSET                                                            4
#define RULE_BASED_CONTEXT_ENTRY_TO_LAN_WORD_OFFSET                                                       1
#define RULE_BASED_CONTEXT_ENTRY_TO_LAN_F_OFFSET_MOD8                                                     0
#define RULE_BASED_CONTEXT_ENTRY_TO_LAN_F_OFFSET_MOD16                                                    8
#define RULE_BASED_CONTEXT_ENTRY_FLOW_OR_PORT_F_OFFSET                                                    16
#define RULE_BASED_CONTEXT_ENTRY_FLOW_OR_PORT_F_WIDTH                                                     8
#define RULE_BASED_CONTEXT_ENTRY_FLOW_OR_PORT_OFFSET                                                      5
#define RULE_BASED_CONTEXT_ENTRY_FLOW_OR_PORT_WORD_OFFSET                                                 1
#define RULE_BASED_CONTEXT_ENTRY_FLOW_OR_PORT_F_OFFSET_MOD16                                              0
#define RULE_BASED_CONTEXT_ENTRY_RULE_F_OFFSET                                                            0
#define RULE_BASED_CONTEXT_ENTRY_RULE_F_WIDTH                                                             16
#define RULE_BASED_CONTEXT_ENTRY_RULE_OFFSET                                                              6
#define RULE_BASED_CONTEXT_ENTRY_RULE_WORD_OFFSET                                                         1
#define RULE_BASED_CONTEXT_ENTRY_CNTR_ID_F_OFFSET                                                         21
#define RULE_BASED_CONTEXT_ENTRY_CNTR_ID_F_WIDTH                                                          11
#define RULE_BASED_CONTEXT_ENTRY_CNTR_ID_OFFSET                                                           8
#define RULE_BASED_CONTEXT_ENTRY_CNTR_ID_WORD_OFFSET                                                      2
#define RULE_BASED_CONTEXT_ENTRY_CNTR_ID_F_OFFSET_MOD16                                                   5
#define RULE_BASED_CONTEXT_ENTRY_CNTR_DISABLE_F_OFFSET                                                    20
#define RULE_BASED_CONTEXT_ENTRY_CNTR_DISABLE_F_WIDTH                                                     1
#define RULE_BASED_CONTEXT_ENTRY_CNTR_DISABLE_OFFSET                                                      9
#define RULE_BASED_CONTEXT_ENTRY_CNTR_DISABLE_WORD_OFFSET                                                 2
#define RULE_BASED_CONTEXT_ENTRY_CNTR_DISABLE_F_OFFSET_MOD8                                               4
#define RULE_BASED_CONTEXT_ENTRY_CNTR_DISABLE_F_OFFSET_MOD16                                              4
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_MODE_F_OFFSET                                              19
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_MODE_F_WIDTH                                               1
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_MODE_OFFSET                                                9
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_MODE_WORD_OFFSET                                           2
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_MODE_F_OFFSET_MOD8                                         3
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_MODE_F_OFFSET_MOD16                                        3
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ID_F_OFFSET                                                      9
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ID_F_WIDTH                                                       7
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ID_OFFSET                                                        10
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ID_WORD_OFFSET                                                   2
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ID_F_OFFSET_MOD8                                                 1
#define RULE_BASED_CONTEXT_ENTRY_POLICER_ID_F_OFFSET_MOD16                                                9
#define RULE_BASED_CONTEXT_ENTRY_QOS_RULE_WAN_FLOW_OVERRUN_F_OFFSET                                       8
#define RULE_BASED_CONTEXT_ENTRY_QOS_RULE_WAN_FLOW_OVERRUN_F_WIDTH                                        1
#define RULE_BASED_CONTEXT_ENTRY_QOS_RULE_WAN_FLOW_OVERRUN_OFFSET                                         10
#define RULE_BASED_CONTEXT_ENTRY_QOS_RULE_WAN_FLOW_OVERRUN_WORD_OFFSET                                    2
#define RULE_BASED_CONTEXT_ENTRY_QOS_RULE_WAN_FLOW_OVERRUN_F_OFFSET_MOD8                                  0
#define RULE_BASED_CONTEXT_ENTRY_QOS_RULE_WAN_FLOW_OVERRUN_F_OFFSET_MOD16                                 8
#define RULE_BASED_CONTEXT_ENTRY_OPBIT_REMARK_MODE_F_OFFSET                                               7
#define RULE_BASED_CONTEXT_ENTRY_OPBIT_REMARK_MODE_F_WIDTH                                                1
#define RULE_BASED_CONTEXT_ENTRY_OPBIT_REMARK_MODE_OFFSET                                                 11
#define RULE_BASED_CONTEXT_ENTRY_OPBIT_REMARK_MODE_WORD_OFFSET                                            2
#define RULE_BASED_CONTEXT_ENTRY_OPBIT_REMARK_MODE_F_OFFSET_MOD8                                          7
#define RULE_BASED_CONTEXT_ENTRY_OPBIT_REMARK_MODE_F_OFFSET_MOD16                                         7
#define RULE_BASED_CONTEXT_ENTRY_IPBIT_REMARK_MODE_F_OFFSET                                               6
#define RULE_BASED_CONTEXT_ENTRY_IPBIT_REMARK_MODE_F_WIDTH                                                1
#define RULE_BASED_CONTEXT_ENTRY_IPBIT_REMARK_MODE_OFFSET                                                 11
#define RULE_BASED_CONTEXT_ENTRY_IPBIT_REMARK_MODE_WORD_OFFSET                                            2
#define RULE_BASED_CONTEXT_ENTRY_IPBIT_REMARK_MODE_F_OFFSET_MOD8                                          6
#define RULE_BASED_CONTEXT_ENTRY_IPBIT_REMARK_MODE_F_OFFSET_MOD16                                         6
#define RULE_BASED_CONTEXT_ENTRY_OUTER_PBIT_F_OFFSET                                                      3
#define RULE_BASED_CONTEXT_ENTRY_OUTER_PBIT_F_WIDTH                                                       3
#define RULE_BASED_CONTEXT_ENTRY_OUTER_PBIT_OFFSET                                                        11
#define RULE_BASED_CONTEXT_ENTRY_OUTER_PBIT_WORD_OFFSET                                                   2
#define RULE_BASED_CONTEXT_ENTRY_OUTER_PBIT_F_OFFSET_MOD8                                                 3
#define RULE_BASED_CONTEXT_ENTRY_OUTER_PBIT_F_OFFSET_MOD16                                                3
#define RULE_BASED_CONTEXT_ENTRY_INNER_PBIT_F_OFFSET                                                      0
#define RULE_BASED_CONTEXT_ENTRY_INNER_PBIT_F_WIDTH                                                       3
#define RULE_BASED_CONTEXT_ENTRY_INNER_PBIT_OFFSET                                                        11
#define RULE_BASED_CONTEXT_ENTRY_INNER_PBIT_WORD_OFFSET                                                   2
#define RULE_BASED_CONTEXT_ENTRY_INNER_PBIT_F_OFFSET_MOD8                                                 0
#define RULE_BASED_CONTEXT_ENTRY_INNER_PBIT_F_OFFSET_MOD16                                                0
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_F_OFFSET                                                   27
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_F_WIDTH                                                    5
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_OFFSET                                                     12
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_WORD_OFFSET                                                3
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_F_OFFSET_MOD8                                              3
#define RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_F_OFFSET_MOD16                                             11

/* >>>RDD_RULE_BASED_CONTEXT_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	pbit_to_gem              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tc_to_q                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	pbit_to_q                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	pbit_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	vlan_action_or_iptv_common_actions	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	dei                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	no_fwd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dscp_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dscp_value               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	no_fwd_action            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow_based_forward       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	gem_mapping_table        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	trap_reason              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	policer_enable           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	queue_union              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_pbit_to_gem              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tc_to_q                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_pbit_to_q                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_pbit_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	vlan_action                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_action_or_iptv_common_actions union */
			uint32_t	reserved1_dei                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_no_fwd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_dscp_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_dscp_value               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_no_fwd_action            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flow_based_forward       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_gem_mapping_table        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_trap_reason              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_policer_enable           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	queue                              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of queue_union union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_pbit_to_gem              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tc_to_q                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_pbit_to_q                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_pbit_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	iptv_common_actions_exit           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_action_or_iptv_common_actions union */
			uint32_t	reserved2_dei                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_no_fwd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_dscp_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_dscp_value               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_no_fwd_action            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flow_based_forward       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_gem_mapping_table        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_trap_reason              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_policer_enable           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2                          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of queue_union union */
			uint32_t	tc                                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of queue_union union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved3                	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	to_lan                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow_or_port             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	rule                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved3                	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_to_lan                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flow_or_port             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_rule                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved3                	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_to_lan                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flow_or_port             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_rule                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	cntr_id                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cntr_disable             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	service_queue_mode       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	policer_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	qos_rule_wan_flow_overrun	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	opbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ipbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	outer_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	inner_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_cntr_id                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cntr_disable             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_service_queue_mode       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved4                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_policer_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_qos_rule_wan_flow_overrun	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_opbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_ipbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_outer_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_inner_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_cntr_id                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cntr_disable             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_service_queue_mode       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved4                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_policer_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_qos_rule_wan_flow_overrun	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_opbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_ipbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_outer_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_inner_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	service_queue            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved5                	:27	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_service_queue            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved5                	:27	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_service_queue            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved5                	:27	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	queue_union              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	policer_enable           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	trap_reason              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	gem_mapping_table        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow_based_forward       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	no_fwd_action            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dscp_value               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dscp_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	no_fwd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dei                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	vlan_action_or_iptv_common_actions	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	pbit_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	pbit_to_q                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tc_to_q                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	pbit_to_gem              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	queue                              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of queue_union union */
			uint32_t	reserved1_policer_enable           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_trap_reason              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_gem_mapping_table        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flow_based_forward       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_no_fwd_action            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_dscp_value               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_dscp_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_no_fwd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_dei                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	vlan_action                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_action_or_iptv_common_actions union */
			uint32_t	reserved1_pbit_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_pbit_to_q                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tc_to_q                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_pbit_to_gem              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2                          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of queue_union union */
			uint32_t	tc                                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of queue_union union */
			uint32_t	reserved2_policer_enable           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_trap_reason              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_gem_mapping_table        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flow_based_forward       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_no_fwd_action            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_dscp_value               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_dscp_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_no_fwd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_dei                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	iptv_common_actions_exit           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_action_or_iptv_common_actions union */
			uint32_t	reserved2_pbit_remark              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_pbit_to_q                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tc_to_q                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_pbit_to_gem              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	rule                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow_or_port             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	to_lan                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3                	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_rule                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flow_or_port             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_to_lan                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved3                	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_rule                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flow_or_port             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_to_lan                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved3                	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	inner_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	outer_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ipbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	opbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	qos_rule_wan_flow_overrun	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	policer_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	service_queue_mode       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cntr_disable             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cntr_id                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_inner_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_outer_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_ipbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_opbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_qos_rule_wan_flow_overrun	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_policer_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved4                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_service_queue_mode       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cntr_disable             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cntr_id                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_inner_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_outer_pbit               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_ipbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_opbit_remark_mode        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_qos_rule_wan_flow_overrun	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_policer_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved4                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_service_queue_mode       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cntr_disable             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cntr_id                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved5                	:27	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	service_queue            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved5                	:27	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_service_queue            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved5                	:27	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_service_queue            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RULE_BASED_CONTEXT_ENTRY_DTS;

typedef RDD_RULE_BASED_CONTEXT_ENTRY_DTS * aligned_RDD_RULE_BASED_CONTEXT_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_RULE_BASED_CONTEXT_ENTRY_DTS fields;
} RDD_RULE_BASED_CONTEXT_ENTRY_DTS_NEW;
typedef RDD_RULE_BASED_CONTEXT_ENTRY_DTS_NEW * aligned_RDD_RULE_BASED_CONTEXT_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_TO_GEM_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 7, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_TO_GEM_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 7, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_TO_GEM_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_TO_GEM_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TC_TO_Q_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 6, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TC_TO_Q_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 6, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TC_TO_Q_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TC_TO_Q_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_TO_Q_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 5, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_TO_Q_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 5, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_TO_Q_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_TO_Q_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_REMARK_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 4, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_REMARK_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 4, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_REMARK_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_PBIT_REMARK_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_OR_IPTV_COMMON_ACTIONS_READ_G(r, g, idx) GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 3, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_OR_IPTV_COMMON_ACTIONS_WRITE_G(v, g, idx)GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 3, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_OR_IPTV_COMMON_ACTIONS_READ(r, p)        FIELD_MREAD_8((uint8_t *)p, 3, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_OR_IPTV_COMMON_ACTIONS_WRITE(v, p)       FIELD_MWRITE_8((uint8_t *)p, 3, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 3, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 3, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p, 3, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_VLAN_ACTION_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p, 3, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_IPTV_COMMON_ACTIONS_EXIT_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 3, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_IPTV_COMMON_ACTIONS_EXIT_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 3, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_IPTV_COMMON_ACTIONS_EXIT_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p, 3, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_IPTV_COMMON_ACTIONS_EXIT_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p, 3, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DEI_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 2, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DEI_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 2, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DEI_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)p, 2, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DEI_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)p, 2, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_NO_FWD_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 1, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_NO_FWD_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 1, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_NO_FWD_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p, 1, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_NO_FWD_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p, 1, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DSCP_REMARK_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 0, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DSCP_REMARK_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS), 0, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DSCP_REMARK_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p, 0, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DSCP_REMARK_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p, 0, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DSCP_VALUE_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 1, 2, 6, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DSCP_VALUE_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 1, 2, 6, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DSCP_VALUE_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 1, 2, 6, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_DSCP_VALUE_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 1, 2, 6, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_NO_FWD_ACTION_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 1, 1, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_NO_FWD_ACTION_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 1, 1, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_NO_FWD_ACTION_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 1, 1, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_NO_FWD_ACTION_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 1, 1, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_FLOW_BASED_FORWARD_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 1, 0, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_FLOW_BASED_FORWARD_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 1, 0, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_FLOW_BASED_FORWARD_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 1, 0, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_FLOW_BASED_FORWARD_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 1, 0, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_GEM_MAPPING_TABLE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 2, 5, 3, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_GEM_MAPPING_TABLE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 2, 5, 3, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_GEM_MAPPING_TABLE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 2, 5, 3, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_GEM_MAPPING_TABLE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 2, 5, 3, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TRAP_REASON_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 2, 2, 3, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TRAP_REASON_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 2, 2, 3, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TRAP_REASON_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 2, 2, 3, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TRAP_REASON_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 2, 2, 3, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_POLICER_ENABLE_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 2, 1, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_POLICER_ENABLE_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 2, 1, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_POLICER_ENABLE_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 2, 1, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_POLICER_ENABLE_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 2, 1, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QUEUE_UNION_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 2, 0, 9, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QUEUE_UNION_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 2, 0, 9, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QUEUE_UNION_READ(r, p)                               FIELD_MREAD_16((uint8_t *)p + 2, 0, 9, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QUEUE_UNION_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)p + 2, 0, 9, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QUEUE_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 2, 0, 9, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QUEUE_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 2, 0, 9, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QUEUE_READ(r, p)                                     FIELD_MREAD_16((uint8_t *)p + 2, 0, 9, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QUEUE_WRITE(v, p)                                    FIELD_MWRITE_16((uint8_t *)p + 2, 0, 9, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TC_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 3, 0, 3, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TC_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 3, 0, 3, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TC_READ(r, p)                                        FIELD_MREAD_8((uint8_t *)p + 3, 0, 3, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TC_WRITE(v, p)                                       FIELD_MWRITE_8((uint8_t *)p + 3, 0, 3, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TO_LAN_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 4, 0, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TO_LAN_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 4, 0, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TO_LAN_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 4, 0, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_TO_LAN_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 4, 0, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_FLOW_OR_PORT_READ_G(r, g, idx)                       GROUP_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 5, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_FLOW_OR_PORT_WRITE_G(v, g, idx)                      GROUP_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 5, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_FLOW_OR_PORT_READ(r, p)                              MREAD_8((uint8_t *)p + 5, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_FLOW_OR_PORT_WRITE(v, p)                             MWRITE_8((uint8_t *)p + 5, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_RULE_READ_G(r, g, idx)                               GROUP_MREAD_16(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 6, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_RULE_WRITE_G(v, g, idx)                              GROUP_MWRITE_16(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 6, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_RULE_READ(r, p)                                      MREAD_16((uint8_t *)p + 6, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_RULE_WRITE(v, p)                                     MWRITE_16((uint8_t *)p + 6, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_CNTR_ID_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 8, 5, 11, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_CNTR_ID_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 8, 5, 11, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_CNTR_ID_READ(r, p)                                   FIELD_MREAD_16((uint8_t *)p + 8, 5, 11, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_CNTR_ID_WRITE(v, p)                                  FIELD_MWRITE_16((uint8_t *)p + 8, 5, 11, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_CNTR_DISABLE_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 9, 4, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_CNTR_DISABLE_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 9, 4, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_CNTR_DISABLE_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 9, 4, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_CNTR_DISABLE_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 9, 4, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_MODE_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 9, 3, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_MODE_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 9, 3, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_MODE_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 9, 3, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_MODE_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 9, 3, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_POLICER_ID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 10, 1, 7, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_POLICER_ID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 10, 1, 7, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_POLICER_ID_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 10, 1, 7, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_POLICER_ID_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 10, 1, 7, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QOS_RULE_WAN_FLOW_OVERRUN_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 10, 0, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QOS_RULE_WAN_FLOW_OVERRUN_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 10, 0, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QOS_RULE_WAN_FLOW_OVERRUN_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 10, 0, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_QOS_RULE_WAN_FLOW_OVERRUN_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 10, 0, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_OPBIT_REMARK_MODE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 11, 7, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_OPBIT_REMARK_MODE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 11, 7, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_OPBIT_REMARK_MODE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 11, 7, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_OPBIT_REMARK_MODE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 11, 7, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_IPBIT_REMARK_MODE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 11, 6, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_IPBIT_REMARK_MODE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 11, 6, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_IPBIT_REMARK_MODE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 11, 6, 1, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_IPBIT_REMARK_MODE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 11, 6, 1, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_OUTER_PBIT_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 11, 3, 3, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_OUTER_PBIT_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 11, 3, 3, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_OUTER_PBIT_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 11, 3, 3, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_OUTER_PBIT_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 11, 3, 3, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_INNER_PBIT_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 11, 0, 3, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_INNER_PBIT_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 11, 0, 3, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_INNER_PBIT_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 11, 0, 3, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_INNER_PBIT_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 11, 0, 3, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 12, 3, 5, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_CONTEXT_ENTRY_DTS) + 12, 3, 5, v)
#define RDD_RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 12, 3, 5, r)
#define RDD_RULE_BASED_CONTEXT_ENTRY_SERVICE_QUEUE_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 12, 3, 5, v)
/* <<<RDD_RULE_BASED_CONTEXT_ENTRY_DTS */

/* <<<RDD_RULE_BASED_CONTEXT_ENTRY */


/* >>>RDD_CPU_TX_DESCRIPTOR */
#define CPU_TX_DESCRIPTOR_VALID_F_OFFSET                                                           31
#define CPU_TX_DESCRIPTOR_VALID_F_WIDTH                                                            1
#define CPU_TX_DESCRIPTOR_CPU_TX_DESCRIPTOR_OFFSET                                                 0
#define CPU_TX_DESCRIPTOR_VALID_OFFSET                                                             0
#define CPU_TX_DESCRIPTOR_VALID_WORD_OFFSET                                                        0
#define CPU_TX_DESCRIPTOR_VALID_F_OFFSET_MOD8                                                      7
#define CPU_TX_DESCRIPTOR_VALID_F_OFFSET_MOD16                                                     15
#define CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET                                                   22
#define CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_WIDTH                                                    9
#define CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_OFFSET                                                     0
#define CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WORD_OFFSET                                                0
#define CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET_MOD16                                             6
#define CPU_TX_DESCRIPTOR_ABS_DATA1_F_OFFSET                                                       0
#define CPU_TX_DESCRIPTOR_ABS_DATA1_F_WIDTH                                                        22
#define CPU_TX_DESCRIPTOR_ABS_DATA1_OFFSET                                                         0
#define CPU_TX_DESCRIPTOR_ABS_DATA1_WORD_OFFSET                                                    0
#define CPU_TX_DESCRIPTOR_ABS_DATA0_F_OFFSET                                                       14
#define CPU_TX_DESCRIPTOR_ABS_DATA0_F_WIDTH                                                        18
#define CPU_TX_DESCRIPTOR_ABS_DATA0_OFFSET                                                         4
#define CPU_TX_DESCRIPTOR_ABS_DATA0_WORD_OFFSET                                                    1
#define CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET                                                   0
#define CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_WIDTH                                                    14
#define CPU_TX_DESCRIPTOR_PACKET_LENGTH_OFFSET                                                     6
#define CPU_TX_DESCRIPTOR_PACKET_LENGTH_WORD_OFFSET                                                1
#define CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET_MOD16                                             0
#define CPU_TX_DESCRIPTOR_DROP_F_OFFSET                                                            31
#define CPU_TX_DESCRIPTOR_DROP_F_WIDTH                                                             1
#define CPU_TX_DESCRIPTOR_DROP_OFFSET                                                              8
#define CPU_TX_DESCRIPTOR_DROP_WORD_OFFSET                                                         2
#define CPU_TX_DESCRIPTOR_DROP_F_OFFSET_MOD8                                                       7
#define CPU_TX_DESCRIPTOR_DROP_F_OFFSET_MOD16                                                      15
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET                                                    30
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_F_WIDTH                                                     1
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_OFFSET                                                      8
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_WORD_OFFSET                                                 2
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD8                                               6
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD16                                              14
#define CPU_TX_DESCRIPTOR_COLOR_F_OFFSET                                                           29
#define CPU_TX_DESCRIPTOR_COLOR_F_WIDTH                                                            1
#define CPU_TX_DESCRIPTOR_COLOR_OFFSET                                                             8
#define CPU_TX_DESCRIPTOR_COLOR_WORD_OFFSET                                                        2
#define CPU_TX_DESCRIPTOR_COLOR_F_OFFSET_MOD8                                                      5
#define CPU_TX_DESCRIPTOR_COLOR_F_OFFSET_MOD16                                                     13
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET                                                  28
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_WIDTH                                                   1
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_OFFSET                                                    8
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WORD_OFFSET                                               2
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET_MOD8                                             4
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET_MOD16                                            12
#define CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET                                                       27
#define CPU_TX_DESCRIPTOR_FLAG_1588_F_WIDTH                                                        1
#define CPU_TX_DESCRIPTOR_FLAG_1588_OFFSET                                                         8
#define CPU_TX_DESCRIPTOR_FLAG_1588_WORD_OFFSET                                                    2
#define CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD8                                                  3
#define CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD16                                                 11
#define CPU_TX_DESCRIPTOR_LAN_F_OFFSET                                                             26
#define CPU_TX_DESCRIPTOR_LAN_F_WIDTH                                                              1
#define CPU_TX_DESCRIPTOR_LAN_OFFSET                                                               8
#define CPU_TX_DESCRIPTOR_LAN_WORD_OFFSET                                                          2
#define CPU_TX_DESCRIPTOR_LAN_F_OFFSET_MOD8                                                        2
#define CPU_TX_DESCRIPTOR_LAN_F_OFFSET_MOD16                                                       10
#define CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_F_OFFSET                                            18
#define CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_F_WIDTH                                             8
#define CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_OFFSET                                              8
#define CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_WORD_OFFSET                                         2
#define CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_F_OFFSET_MOD16                                      2
#define CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_F_OFFSET                                             0
#define CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_F_WIDTH                                              18
#define CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_OFFSET                                               8
#define CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_WORD_OFFSET                                          2
#define CPU_TX_DESCRIPTOR_AGG_PD_F_OFFSET                                                          31
#define CPU_TX_DESCRIPTOR_AGG_PD_F_WIDTH                                                           1
#define CPU_TX_DESCRIPTOR_AGG_PD_OFFSET                                                            12
#define CPU_TX_DESCRIPTOR_AGG_PD_WORD_OFFSET                                                       3
#define CPU_TX_DESCRIPTOR_AGG_PD_F_OFFSET_MOD8                                                     7
#define CPU_TX_DESCRIPTOR_AGG_PD_F_OFFSET_MOD16                                                    15
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    30
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      12
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 3
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               6
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              14
#define CPU_TX_DESCRIPTOR_ABS_F_OFFSET                                                             29
#define CPU_TX_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define CPU_TX_DESCRIPTOR_ABS_OFFSET                                                               12
#define CPU_TX_DESCRIPTOR_ABS_WORD_OFFSET                                                          3
#define CPU_TX_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        5
#define CPU_TX_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       13
#define CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_F_OFFSET                                         18
#define CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_F_WIDTH                                          11
#define CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_OFFSET                                           12
#define CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WORD_OFFSET                                      3
#define CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_F_OFFSET_MOD16                                   2
#define CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_F_OFFSET                                        0
#define CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_F_WIDTH                                         18
#define CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_OFFSET                                          12
#define CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WORD_OFFSET                                     3

/* >>>RDD_CPU_TX_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	wan_flow_source_port	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bn1_or_abs2_or_1588 	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_wan_flow_source_port	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ssid                          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	fpm_fallback                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	sbpm_copy                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	bn1_first                     	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_wan_flow_source_port	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	_ssid                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	_fpm_fallback                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	_sbpm_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	abs2                          	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_wan_flow_source_port	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	data_1588                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_wan_flow_source_port	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lag_index                     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	reserved2                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sop                           	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	bn0_first                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs1                          	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	abs0                          	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	bn1_or_abs2_or_1588 	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	wan_flow_source_port	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	ssid                          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	fpm_fallback                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	sbpm_copy                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	bn1_first                     	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	reserved1_wan_flow_source_port	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	_ssid                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	_fpm_fallback                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	_sbpm_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	abs2                          	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	reserved2_wan_flow_source_port	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	data_1588                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	reserved3_wan_flow_source_port	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	lag_index                     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	reserved2                     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
			uint32_t	reserved4_wan_flow_source_port	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	bn0_first                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
			uint32_t	sop                           	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	reserved1_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	abs0                          	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
			uint32_t	abs1                          	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	reserved2_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_TX_DESCRIPTOR_DTS;

typedef RDD_CPU_TX_DESCRIPTOR_DTS * aligned_RDD_CPU_TX_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_CPU_TX_DESCRIPTOR_DTS fields;
} RDD_CPU_TX_DESCRIPTOR_DTS_NEW;
typedef RDD_CPU_TX_DESCRIPTOR_DTS_NEW * aligned_RDD_CPU_TX_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_CPU_TX_DESCRIPTOR_VALID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_VALID_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_VALID_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS), 6, 9, r)
#define RDD_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS), 6, 9, v)
#define RDD_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                        FIELD_MREAD_16((uint8_t *)p, 6, 9, r)
#define RDD_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)p, 6, 9, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA1_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 0, 0, 22, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA1_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 0, 0, 22, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA1_READ(r, p)                            FIELD_MREAD_32((uint8_t *)p + 0, 0, 22, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA1_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)p + 0, 0, 22, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA0_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 4, 14, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA0_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 4, 14, 18, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA0_READ(r, p)                            FIELD_MREAD_32((uint8_t *)p + 4, 14, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA0_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)p + 4, 14, 18, v)
#define RDD_CPU_TX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 6, 0, 14, r)
#define RDD_CPU_TX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 6, 0, 14, v)
#define RDD_CPU_TX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                        FIELD_MREAD_16((uint8_t *)p + 6, 0, 14, r)
#define RDD_CPU_TX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)p + 6, 0, 14, v)
#define RDD_CPU_TX_DESCRIPTOR_DROP_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 7, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_DROP_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 7, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_DROP_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 8, 7, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_DROP_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 8, 7, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 6, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 6, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 8, 6, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 8, 6, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_COLOR_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 5, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 5, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_COLOR_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 8, 5, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_COLOR_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 8, 5, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 4, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 4, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 8, 4, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 8, 4, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 3, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 3, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_FLAG_1588_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 8, 3, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_FLAG_1588_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 8, 3, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_LAN_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 2, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 2, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_LAN_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 8, 2, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_LAN_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 8, 2, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_READ_G(r, g, idx)           GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 0, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 0, 18, v)
#define RDD_CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_READ(r, p)                  FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_WRITE(v, p)                 FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_CPU_TX_DESCRIPTOR_SSID_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 14, 4, r)
#define RDD_CPU_TX_DESCRIPTOR_SSID_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 14, 4, v)
#define RDD_CPU_TX_DESCRIPTOR_SSID_READ(r, p)                                 FIELD_MREAD_32((uint8_t *)p + 8, 14, 4, r)
#define RDD_CPU_TX_DESCRIPTOR_SSID_WRITE(v, p)                                FIELD_MWRITE_32((uint8_t *)p + 8, 14, 4, v)
#define RDD_CPU_TX_DESCRIPTOR_FPM_FALLBACK_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 5, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_FPM_FALLBACK_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 5, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_FPM_FALLBACK_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 10, 5, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_FPM_FALLBACK_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 10, 5, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_SBPM_COPY_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 4, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_SBPM_COPY_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 4, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_SBPM_COPY_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 10, 4, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_SBPM_COPY_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 10, 4, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_BN1_FIRST_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 0, 12, r)
#define RDD_CPU_TX_DESCRIPTOR_BN1_FIRST_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 0, 12, v)
#define RDD_CPU_TX_DESCRIPTOR_BN1_FIRST_READ(r, p)                            FIELD_MREAD_16((uint8_t *)p + 10, 0, 12, r)
#define RDD_CPU_TX_DESCRIPTOR_BN1_FIRST_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)p + 10, 0, 12, v)
#define RDD_CPU_TX_DESCRIPTOR__SSID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 14, 4, r)
#define RDD_CPU_TX_DESCRIPTOR__SSID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 14, 4, v)
#define RDD_CPU_TX_DESCRIPTOR__SSID_READ(r, p)                                FIELD_MREAD_32((uint8_t *)p + 8, 14, 4, r)
#define RDD_CPU_TX_DESCRIPTOR__SSID_WRITE(v, p)                               FIELD_MWRITE_32((uint8_t *)p + 8, 14, 4, v)
#define RDD_CPU_TX_DESCRIPTOR__FPM_FALLBACK_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 5, 1, r)
#define RDD_CPU_TX_DESCRIPTOR__FPM_FALLBACK_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 5, 1, v)
#define RDD_CPU_TX_DESCRIPTOR__FPM_FALLBACK_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 10, 5, 1, r)
#define RDD_CPU_TX_DESCRIPTOR__FPM_FALLBACK_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 10, 5, 1, v)
#define RDD_CPU_TX_DESCRIPTOR__SBPM_COPY_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 4, 1, r)
#define RDD_CPU_TX_DESCRIPTOR__SBPM_COPY_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 4, 1, v)
#define RDD_CPU_TX_DESCRIPTOR__SBPM_COPY_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p + 10, 4, 1, r)
#define RDD_CPU_TX_DESCRIPTOR__SBPM_COPY_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p + 10, 4, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS2_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 0, 12, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS2_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 10, 0, 12, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS2_READ(r, p)                                 FIELD_MREAD_16((uint8_t *)p + 10, 0, 12, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS2_WRITE(v, p)                                FIELD_MWRITE_16((uint8_t *)p + 10, 0, 12, v)
#define RDD_CPU_TX_DESCRIPTOR_DATA_1588_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 0, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_DATA_1588_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 8, 0, 18, v)
#define RDD_CPU_TX_DESCRIPTOR_DATA_1588_READ(r, p)                            FIELD_MREAD_32((uint8_t *)p + 8, 0, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_DATA_1588_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)p + 8, 0, 18, v)
#define RDD_CPU_TX_DESCRIPTOR_LAG_INDEX_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 9, 0, 2, r)
#define RDD_CPU_TX_DESCRIPTOR_LAG_INDEX_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 9, 0, 2, v)
#define RDD_CPU_TX_DESCRIPTOR_LAG_INDEX_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 9, 0, 2, r)
#define RDD_CPU_TX_DESCRIPTOR_LAG_INDEX_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 9, 0, 2, v)
#define RDD_CPU_TX_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 7, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 7, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_AGG_PD_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 12, 7, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_AGG_PD_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 12, 7, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 6, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 6, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 12, 6, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 12, 6, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 5, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 5, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 12, 5, 1, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 12, 5, 1, v)
#define RDD_CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_READ_G(r, g, idx)       GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WRITE_G(v, g, idx)      GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_READ(r, p)              FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WRITE(v, p)             FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_CPU_TX_DESCRIPTOR_SOP_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_CPU_TX_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_CPU_TX_DESCRIPTOR_SOP_READ(r, p)                                  FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_CPU_TX_DESCRIPTOR_SOP_WRITE(v, p)                                 FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS1_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS1_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS1_READ(r, p)                                 FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS1_WRITE(v, p)                                FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_READ_G(r, g, idx)      GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WRITE_G(v, g, idx)     GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_READ(r, p)             FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WRITE(v, p)            FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
#define RDD_CPU_TX_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_CPU_TX_DESCRIPTOR_BN0_FIRST_READ(r, p)                            FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS0_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS0_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_TX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_CPU_TX_DESCRIPTOR_ABS0_READ(r, p)                                 FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_CPU_TX_DESCRIPTOR_ABS0_WRITE(v, p)                                FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
/* <<<RDD_CPU_TX_DESCRIPTOR_DTS */

/* <<<RDD_CPU_TX_DESCRIPTOR */


/* >>>RDD_TC_TO_QUEUE_8 */
#define TC_TO_QUEUE_8_TC_TO_QUEUE_8_OFFSET                                                     0
#define TC_TO_QUEUE_8_QUEUE_OFFSET_OFFSET                                                      0
#define TC_TO_QUEUE_8_QUEUE_OFFSET_WORD_OFFSET                                                 0
#define TC_TO_QUEUE_8_QUEUE_OFFSET_F_OFFSET_MOD16                                              0
/* <<<RDD_TC_TO_QUEUE_8 */


/* >>>RDD_TC_TO_QUEUE_32 */
#define TC_TO_QUEUE_32_TC_TO_QUEUE_32_OFFSET                                                    0
#define TC_TO_QUEUE_32_QUEUE_OFFSET_OFFSET                                                      0
#define TC_TO_QUEUE_32_QUEUE_OFFSET_WORD_OFFSET                                                 0
#define TC_TO_QUEUE_32_QUEUE_OFFSET_F_OFFSET_MOD16                                              0

/* >>>RDD_TC_TO_QUEUE_32_DTS */
#define RDD_TC_TO_QUEUE_32_QUEUE_OFFSET_NUMBER	32

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	queue_offset[RDD_TC_TO_QUEUE_32_QUEUE_OFFSET_NUMBER];
#else
	uint8_t	queue_offset[RDD_TC_TO_QUEUE_32_QUEUE_OFFSET_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TC_TO_QUEUE_32_DTS;

typedef RDD_TC_TO_QUEUE_32_DTS * aligned_RDD_TC_TO_QUEUE_32_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[8];
    uint64_t dword_val64[4];
    RDD_TC_TO_QUEUE_32_DTS fields;
} RDD_TC_TO_QUEUE_32_DTS_NEW;
typedef RDD_TC_TO_QUEUE_32_DTS_NEW * aligned_RDD_TC_TO_QUEUE_32_DTS_NEW ALIGNMENT8;

#define RDD_TC_TO_QUEUE_32_QUEUE_OFFSET_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_TC_TO_QUEUE_32_DTS), i, r)
#define RDD_TC_TO_QUEUE_32_QUEUE_OFFSET_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_TC_TO_QUEUE_32_DTS), i, v)
#define RDD_TC_TO_QUEUE_32_QUEUE_OFFSET_READ(r, p, i)              MREAD_I_8((uint8_t *)p, i, r)
#define RDD_TC_TO_QUEUE_32_QUEUE_OFFSET_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p, i, v)
/* <<<RDD_TC_TO_QUEUE_32_DTS */

/* <<<RDD_TC_TO_QUEUE_32 */


/* >>>RDD_PBIT_TO_QUEUE_8 */
#define PBIT_TO_QUEUE_8_PBIT_TO_QUEUE_8_OFFSET                                                   0
#define PBIT_TO_QUEUE_8_QUEUE_OFFSET_OFFSET                                                      0
#define PBIT_TO_QUEUE_8_QUEUE_OFFSET_WORD_OFFSET                                                 0
#define PBIT_TO_QUEUE_8_QUEUE_OFFSET_F_OFFSET_MOD16                                              0
/* <<<RDD_PBIT_TO_QUEUE_8 */


/* >>>RDD_VPORT_CFG_ENTRY */
#define VPORT_CFG_ENTRY_LOOPBACK_EN_F_OFFSET                                                     31
#define VPORT_CFG_ENTRY_LOOPBACK_EN_F_WIDTH                                                      1
#define VPORT_CFG_ENTRY_VPORT_CFG_ENTRY_OFFSET                                                   0
#define VPORT_CFG_ENTRY_LOOPBACK_EN_OFFSET                                                       0
#define VPORT_CFG_ENTRY_LOOPBACK_EN_WORD_OFFSET                                                  0
#define VPORT_CFG_ENTRY_LOOPBACK_EN_F_OFFSET_MOD8                                                7
#define VPORT_CFG_ENTRY_LOOPBACK_EN_F_OFFSET_MOD16                                               15
#define VPORT_CFG_ENTRY_MIRRORING_EN_F_OFFSET                                                    30
#define VPORT_CFG_ENTRY_MIRRORING_EN_F_WIDTH                                                     1
#define VPORT_CFG_ENTRY_MIRRORING_EN_OFFSET                                                      0
#define VPORT_CFG_ENTRY_MIRRORING_EN_WORD_OFFSET                                                 0
#define VPORT_CFG_ENTRY_MIRRORING_EN_F_OFFSET_MOD8                                               6
#define VPORT_CFG_ENTRY_MIRRORING_EN_F_OFFSET_MOD16                                              14
#define VPORT_CFG_ENTRY_SA_LOOKUP_EN_F_OFFSET                                                    29
#define VPORT_CFG_ENTRY_SA_LOOKUP_EN_F_WIDTH                                                     1
#define VPORT_CFG_ENTRY_SA_LOOKUP_EN_OFFSET                                                      0
#define VPORT_CFG_ENTRY_SA_LOOKUP_EN_WORD_OFFSET                                                 0
#define VPORT_CFG_ENTRY_SA_LOOKUP_EN_F_OFFSET_MOD8                                               5
#define VPORT_CFG_ENTRY_SA_LOOKUP_EN_F_OFFSET_MOD16                                              13
#define VPORT_CFG_ENTRY_DA_LOOKUP_EN_F_OFFSET                                                    28
#define VPORT_CFG_ENTRY_DA_LOOKUP_EN_F_WIDTH                                                     1
#define VPORT_CFG_ENTRY_DA_LOOKUP_EN_OFFSET                                                      0
#define VPORT_CFG_ENTRY_DA_LOOKUP_EN_WORD_OFFSET                                                 0
#define VPORT_CFG_ENTRY_DA_LOOKUP_EN_F_OFFSET_MOD8                                               4
#define VPORT_CFG_ENTRY_DA_LOOKUP_EN_F_OFFSET_MOD16                                              12
#define VPORT_CFG_ENTRY_EGRESS_ISOLATION_EN_F_OFFSET                                             27
#define VPORT_CFG_ENTRY_EGRESS_ISOLATION_EN_F_WIDTH                                              1
#define VPORT_CFG_ENTRY_EGRESS_ISOLATION_EN_OFFSET                                               0
#define VPORT_CFG_ENTRY_EGRESS_ISOLATION_EN_WORD_OFFSET                                          0
#define VPORT_CFG_ENTRY_EGRESS_ISOLATION_EN_F_OFFSET_MOD8                                        3
#define VPORT_CFG_ENTRY_EGRESS_ISOLATION_EN_F_OFFSET_MOD16                                       11
#define VPORT_CFG_ENTRY_INGRESS_ISOLATION_EN_F_OFFSET                                            26
#define VPORT_CFG_ENTRY_INGRESS_ISOLATION_EN_F_WIDTH                                             1
#define VPORT_CFG_ENTRY_INGRESS_ISOLATION_EN_OFFSET                                              0
#define VPORT_CFG_ENTRY_INGRESS_ISOLATION_EN_WORD_OFFSET                                         0
#define VPORT_CFG_ENTRY_INGRESS_ISOLATION_EN_F_OFFSET_MOD8                                       2
#define VPORT_CFG_ENTRY_INGRESS_ISOLATION_EN_F_OFFSET_MOD16                                      10
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_INGRESS_LOOKUP_METHOD_F_OFFSET                           25
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_INGRESS_LOOKUP_METHOD_F_WIDTH                            1
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_INGRESS_LOOKUP_METHOD_OFFSET                             0
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_INGRESS_LOOKUP_METHOD_WORD_OFFSET                        0
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_INGRESS_LOOKUP_METHOD_F_OFFSET_MOD8                      1
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_INGRESS_LOOKUP_METHOD_F_OFFSET_MOD16                     9
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_EGRESS_LOOKUP_METHOD_F_OFFSET                            24
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_EGRESS_LOOKUP_METHOD_F_WIDTH                             1
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_EGRESS_LOOKUP_METHOD_OFFSET                              0
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_EGRESS_LOOKUP_METHOD_WORD_OFFSET                         0
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_EGRESS_LOOKUP_METHOD_F_OFFSET_MOD8                       0
#define VPORT_CFG_ENTRY_BRIDGE_AND_VLAN_EGRESS_LOOKUP_METHOD_F_OFFSET_MOD16                      8
#define VPORT_CFG_ENTRY_PROTOCOL_FILTERS_DIS_F_OFFSET                                            20
#define VPORT_CFG_ENTRY_PROTOCOL_FILTERS_DIS_F_WIDTH                                             4
#define VPORT_CFG_ENTRY_PROTOCOL_FILTERS_DIS_OFFSET                                              1
#define VPORT_CFG_ENTRY_PROTOCOL_FILTERS_DIS_WORD_OFFSET                                         0
#define VPORT_CFG_ENTRY_PROTOCOL_FILTERS_DIS_F_OFFSET_MOD8                                       4
#define VPORT_CFG_ENTRY_PROTOCOL_FILTERS_DIS_F_OFFSET_MOD16                                      4
#define VPORT_CFG_ENTRY_SA_LOOKUP_MISS_ACTION_F_OFFSET                                           18
#define VPORT_CFG_ENTRY_SA_LOOKUP_MISS_ACTION_F_WIDTH                                            2
#define VPORT_CFG_ENTRY_SA_LOOKUP_MISS_ACTION_OFFSET                                             1
#define VPORT_CFG_ENTRY_SA_LOOKUP_MISS_ACTION_WORD_OFFSET                                        0
#define VPORT_CFG_ENTRY_SA_LOOKUP_MISS_ACTION_F_OFFSET_MOD8                                      2
#define VPORT_CFG_ENTRY_SA_LOOKUP_MISS_ACTION_F_OFFSET_MOD16                                     2
#define VPORT_CFG_ENTRY_DA_LOOKUP_MISS_ACTION_F_OFFSET                                           16
#define VPORT_CFG_ENTRY_DA_LOOKUP_MISS_ACTION_F_WIDTH                                            2
#define VPORT_CFG_ENTRY_DA_LOOKUP_MISS_ACTION_OFFSET                                             1
#define VPORT_CFG_ENTRY_DA_LOOKUP_MISS_ACTION_WORD_OFFSET                                        0
#define VPORT_CFG_ENTRY_DA_LOOKUP_MISS_ACTION_F_OFFSET_MOD8                                      0
#define VPORT_CFG_ENTRY_DA_LOOKUP_MISS_ACTION_F_OFFSET_MOD16                                     0
#define VPORT_CFG_ENTRY_INGRESS_CONGESTION_F_OFFSET                                              15
#define VPORT_CFG_ENTRY_INGRESS_CONGESTION_F_WIDTH                                               1
#define VPORT_CFG_ENTRY_INGRESS_CONGESTION_OFFSET                                                2
#define VPORT_CFG_ENTRY_INGRESS_CONGESTION_WORD_OFFSET                                           0
#define VPORT_CFG_ENTRY_INGRESS_CONGESTION_F_OFFSET_MOD8                                         7
#define VPORT_CFG_ENTRY_INGRESS_CONGESTION_F_OFFSET_MOD16                                        15
#define VPORT_CFG_ENTRY_DISCARD_PRTY_F_OFFSET                                                    14
#define VPORT_CFG_ENTRY_DISCARD_PRTY_F_WIDTH                                                     1
#define VPORT_CFG_ENTRY_DISCARD_PRTY_OFFSET                                                      2
#define VPORT_CFG_ENTRY_DISCARD_PRTY_WORD_OFFSET                                                 0
#define VPORT_CFG_ENTRY_DISCARD_PRTY_F_OFFSET_MOD8                                               6
#define VPORT_CFG_ENTRY_DISCARD_PRTY_F_OFFSET_MOD16                                              14
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_F_OFFSET                                          8
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_F_WIDTH                                           6
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_OFFSET                                            2
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_WORD_OFFSET                                       0
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_F_OFFSET_MOD8                                     0
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_F_OFFSET_MOD16                                    8
#define VPORT_CFG_ENTRY_LS_FC_CFG_F_OFFSET                                                       0
#define VPORT_CFG_ENTRY_LS_FC_CFG_F_WIDTH                                                        1
#define VPORT_CFG_ENTRY_LS_FC_CFG_OFFSET                                                         3
#define VPORT_CFG_ENTRY_LS_FC_CFG_WORD_OFFSET                                                    0
#define VPORT_CFG_ENTRY_LS_FC_CFG_F_OFFSET_MOD8                                                  0
#define VPORT_CFG_ENTRY_LS_FC_CFG_F_OFFSET_MOD16                                                 0
#define VPORT_CFG_ENTRY_EGRESS_ISOLATION_MAP_F_OFFSET                                            0
#define VPORT_CFG_ENTRY_EGRESS_ISOLATION_MAP_F_WIDTH                                             32
#define VPORT_CFG_ENTRY_EGRESS_ISOLATION_MAP_OFFSET                                              4
#define VPORT_CFG_ENTRY_EGRESS_ISOLATION_MAP_WORD_OFFSET                                         1
/* <<<RDD_VPORT_CFG_ENTRY */


/* >>>RDD_FPM_GLOBAL_CFG */
#define FPM_GLOBAL_CFG_FPM_BASE_LOW_F_OFFSET                                                    0
#define FPM_GLOBAL_CFG_FPM_BASE_LOW_F_WIDTH                                                     32
#define FPM_GLOBAL_CFG_FPM_GLOBAL_CFG_OFFSET                                                    0
#define FPM_GLOBAL_CFG_FPM_BASE_LOW_OFFSET                                                      0
#define FPM_GLOBAL_CFG_FPM_BASE_LOW_WORD_OFFSET                                                 0
#define FPM_GLOBAL_CFG_FPM_BASE_HIGH_F_OFFSET                                                   0
#define FPM_GLOBAL_CFG_FPM_BASE_HIGH_F_WIDTH                                                    32
#define FPM_GLOBAL_CFG_FPM_BASE_HIGH_OFFSET                                                     4
#define FPM_GLOBAL_CFG_FPM_BASE_HIGH_WORD_OFFSET                                                1
#define FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_ASR_8_F_OFFSET                                            24
#define FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_ASR_8_F_WIDTH                                             8
#define FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_ASR_8_OFFSET                                              8
#define FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_ASR_8_WORD_OFFSET                                         2
#define FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_ASR_8_F_OFFSET_MOD16                                      8
/* <<<RDD_FPM_GLOBAL_CFG */


/* >>>RDD_DS_TM_EGRESS_PORT_RR_ENTRY */
#define DS_TM_EGRESS_PORT_RR_ENTRY_NEXT_SCHED_F_OFFSET                                                      8
#define DS_TM_EGRESS_PORT_RR_ENTRY_NEXT_SCHED_F_WIDTH                                                       8
#define DS_TM_EGRESS_PORT_RR_ENTRY_DS_TM_EGRESS_PORT_RR_ENTRY_OFFSET                                        0
#define DS_TM_EGRESS_PORT_RR_ENTRY_NEXT_SCHED_OFFSET                                                        0
#define DS_TM_EGRESS_PORT_RR_ENTRY_NEXT_SCHED_WORD_OFFSET                                                   0
#define DS_TM_EGRESS_PORT_RR_ENTRY_NEXT_SCHED_F_OFFSET_MOD16                                                8
#define DS_TM_EGRESS_PORT_RR_ENTRY_STATUS_F_OFFSET                                                          0
#define DS_TM_EGRESS_PORT_RR_ENTRY_STATUS_F_WIDTH                                                           8
#define DS_TM_EGRESS_PORT_RR_ENTRY_STATUS_OFFSET                                                            1
#define DS_TM_EGRESS_PORT_RR_ENTRY_STATUS_WORD_OFFSET                                                       0
#define DS_TM_EGRESS_PORT_RR_ENTRY_STATUS_F_OFFSET_MOD16                                                    0
/* <<<RDD_DS_TM_EGRESS_PORT_RR_ENTRY */


/* >>>RDD_QM_QUEUE_COUNTER_DATA */
#define QM_QUEUE_COUNTER_DATA_PACKETS_F_OFFSET                                                         0
#define QM_QUEUE_COUNTER_DATA_PACKETS_F_WIDTH                                                          32
#define QM_QUEUE_COUNTER_DATA_QM_QUEUE_COUNTER_DATA_OFFSET                                             0
#define QM_QUEUE_COUNTER_DATA_PACKETS_OFFSET                                                           0
#define QM_QUEUE_COUNTER_DATA_PACKETS_WORD_OFFSET                                                      0
#define QM_QUEUE_COUNTER_DATA_BYTES_F_OFFSET                                                           0
#define QM_QUEUE_COUNTER_DATA_BYTES_F_WIDTH                                                            32
#define QM_QUEUE_COUNTER_DATA_BYTES_OFFSET                                                             4
#define QM_QUEUE_COUNTER_DATA_BYTES_WORD_OFFSET                                                        1
/* <<<RDD_QM_QUEUE_COUNTER_DATA */


/* >>>RDD_DSL_PTM_BOND_TX_HDR_ENTRY */
#define DSL_PTM_BOND_TX_HDR_ENTRY_PORT_SEL_F_OFFSET                                                        15
#define DSL_PTM_BOND_TX_HDR_ENTRY_PORT_SEL_F_WIDTH                                                         1
#define DSL_PTM_BOND_TX_HDR_ENTRY_DSL_PTM_BOND_TX_HDR_ENTRY_OFFSET                                         0
#define DSL_PTM_BOND_TX_HDR_ENTRY_PORT_SEL_OFFSET                                                          0
#define DSL_PTM_BOND_TX_HDR_ENTRY_PORT_SEL_WORD_OFFSET                                                     0
#define DSL_PTM_BOND_TX_HDR_ENTRY_PORT_SEL_F_OFFSET_MOD8                                                   7
#define DSL_PTM_BOND_TX_HDR_ENTRY_PORT_SEL_F_OFFSET_MOD16                                                  15
#define DSL_PTM_BOND_TX_HDR_ENTRY_PKT_EOP_F_OFFSET                                                         12
#define DSL_PTM_BOND_TX_HDR_ENTRY_PKT_EOP_F_WIDTH                                                          1
#define DSL_PTM_BOND_TX_HDR_ENTRY_PKT_EOP_OFFSET                                                           0
#define DSL_PTM_BOND_TX_HDR_ENTRY_PKT_EOP_WORD_OFFSET                                                      0
#define DSL_PTM_BOND_TX_HDR_ENTRY_PKT_EOP_F_OFFSET_MOD8                                                    4
#define DSL_PTM_BOND_TX_HDR_ENTRY_PKT_EOP_F_OFFSET_MOD16                                                   12
#define DSL_PTM_BOND_TX_HDR_ENTRY_FRAG_SIZE_F_OFFSET                                                       0
#define DSL_PTM_BOND_TX_HDR_ENTRY_FRAG_SIZE_F_WIDTH                                                        12
#define DSL_PTM_BOND_TX_HDR_ENTRY_FRAG_SIZE_OFFSET                                                         0
#define DSL_PTM_BOND_TX_HDR_ENTRY_FRAG_SIZE_WORD_OFFSET                                                    0
#define DSL_PTM_BOND_TX_HDR_ENTRY_FRAG_SIZE_F_OFFSET_MOD16                                                 0

/* >>>RDD_DSL_PTM_BOND_TX_HDR_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	port_sel  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	reserved0 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	pkt_eop   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	frag_size 	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	frag_size 	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	pkt_eop   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	reserved0 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	port_sel  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DSL_PTM_BOND_TX_HDR_ENTRY_DTS;

typedef RDD_DSL_PTM_BOND_TX_HDR_ENTRY_DTS * aligned_RDD_DSL_PTM_BOND_TX_HDR_ENTRY_DTS ALIGNMENT8;

#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_PORT_SEL_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DSL_PTM_BOND_TX_HDR_ENTRY_DTS), 7, 1, r)
#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_PORT_SEL_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DSL_PTM_BOND_TX_HDR_ENTRY_DTS), 7, 1, v)
#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_PORT_SEL_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_PORT_SEL_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_PKT_EOP_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DSL_PTM_BOND_TX_HDR_ENTRY_DTS), 4, 1, r)
#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_PKT_EOP_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DSL_PTM_BOND_TX_HDR_ENTRY_DTS), 4, 1, v)
#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_PKT_EOP_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_PKT_EOP_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_FRAG_SIZE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DSL_PTM_BOND_TX_HDR_ENTRY_DTS), 0, 12, r)
#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_FRAG_SIZE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DSL_PTM_BOND_TX_HDR_ENTRY_DTS), 0, 12, v)
#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_FRAG_SIZE_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p, 0, 12, r)
#define RDD_DSL_PTM_BOND_TX_HDR_ENTRY_FRAG_SIZE_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p, 0, 12, v)
/* <<<RDD_DSL_PTM_BOND_TX_HDR_ENTRY_DTS */

/* <<<RDD_DSL_PTM_BOND_TX_HDR_ENTRY */


/* >>>RDD_HW_FLUSH_ENTRY */
#define HW_FLUSH_ENTRY_QM_QUEUE_F_OFFSET                                                        16
#define HW_FLUSH_ENTRY_QM_QUEUE_F_WIDTH                                                         16
#define HW_FLUSH_ENTRY_HW_FLUSH_ENTRY_OFFSET                                                    0
#define HW_FLUSH_ENTRY_QM_QUEUE_OFFSET                                                          0
#define HW_FLUSH_ENTRY_QM_QUEUE_WORD_OFFSET                                                     0
#define HW_FLUSH_ENTRY_HW_FLUSH_EN_F_OFFSET                                                     15
#define HW_FLUSH_ENTRY_HW_FLUSH_EN_F_WIDTH                                                      1
#define HW_FLUSH_ENTRY_HW_FLUSH_EN_OFFSET                                                       2
#define HW_FLUSH_ENTRY_HW_FLUSH_EN_WORD_OFFSET                                                  0
#define HW_FLUSH_ENTRY_HW_FLUSH_EN_F_OFFSET_MOD8                                                7
#define HW_FLUSH_ENTRY_HW_FLUSH_EN_F_OFFSET_MOD16                                               15
#define HW_FLUSH_ENTRY_US_F_OFFSET                                                              14
#define HW_FLUSH_ENTRY_US_F_WIDTH                                                               1
#define HW_FLUSH_ENTRY_US_OFFSET                                                                2
#define HW_FLUSH_ENTRY_US_WORD_OFFSET                                                           0
#define HW_FLUSH_ENTRY_US_F_OFFSET_MOD8                                                         6
#define HW_FLUSH_ENTRY_US_F_OFFSET_MOD16                                                        14
#define HW_FLUSH_ENTRY_FLUSH_AGGR_F_OFFSET                                                      0
#define HW_FLUSH_ENTRY_FLUSH_AGGR_F_WIDTH                                                       8
#define HW_FLUSH_ENTRY_FLUSH_AGGR_OFFSET                                                        3
#define HW_FLUSH_ENTRY_FLUSH_AGGR_WORD_OFFSET                                                   0
#define HW_FLUSH_ENTRY_FLUSH_AGGR_F_OFFSET_MOD16                                                0
/* <<<RDD_HW_FLUSH_ENTRY */


/* >>>RDD_VLAN_TAG */
#define VLAN_TAG_PBITS_F_OFFSET                                                           13
#define VLAN_TAG_PBITS_F_WIDTH                                                            3
#define VLAN_TAG_VLAN_TAG_OFFSET                                                          0
#define VLAN_TAG_PBITS_OFFSET                                                             0
#define VLAN_TAG_PBITS_WORD_OFFSET                                                        0
#define VLAN_TAG_PBITS_F_OFFSET_MOD8                                                      5
#define VLAN_TAG_PBITS_F_OFFSET_MOD16                                                     13
#define VLAN_TAG_CFI_F_OFFSET                                                             12
#define VLAN_TAG_CFI_F_WIDTH                                                              1
#define VLAN_TAG_CFI_OFFSET                                                               0
#define VLAN_TAG_CFI_WORD_OFFSET                                                          0
#define VLAN_TAG_CFI_F_OFFSET_MOD8                                                        4
#define VLAN_TAG_CFI_F_OFFSET_MOD16                                                       12
#define VLAN_TAG_VID_F_OFFSET                                                             0
#define VLAN_TAG_VID_F_WIDTH                                                              12
#define VLAN_TAG_VID_OFFSET                                                               0
#define VLAN_TAG_VID_WORD_OFFSET                                                          0
#define VLAN_TAG_VID_F_OFFSET_MOD16                                                       0

/* >>>RDD_VLAN_TAG_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	pbits     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	cfi       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	vid       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	vid       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	cfi       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	pbits     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_VLAN_TAG_DTS;

typedef RDD_VLAN_TAG_DTS * aligned_RDD_VLAN_TAG_DTS ALIGNMENT8;

#define RDD_VLAN_TAG_PBITS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VLAN_TAG_DTS), 5, 3, r)
#define RDD_VLAN_TAG_PBITS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VLAN_TAG_DTS), 5, 3, v)
#define RDD_VLAN_TAG_PBITS_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 5, 3, r)
#define RDD_VLAN_TAG_PBITS_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 5, 3, v)
#define RDD_VLAN_TAG_CFI_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_VLAN_TAG_DTS), 4, 1, r)
#define RDD_VLAN_TAG_CFI_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_VLAN_TAG_DTS), 4, 1, v)
#define RDD_VLAN_TAG_CFI_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_VLAN_TAG_CFI_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_VLAN_TAG_VID_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_VLAN_TAG_DTS), 0, 12, r)
#define RDD_VLAN_TAG_VID_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_VLAN_TAG_DTS), 0, 12, v)
#define RDD_VLAN_TAG_VID_READ(r, p)                   FIELD_MREAD_16((uint8_t *)p, 0, 12, r)
#define RDD_VLAN_TAG_VID_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)p, 0, 12, v)
/* <<<RDD_VLAN_TAG_DTS */

/* <<<RDD_VLAN_TAG */


/* >>>RDD_PROCESSING_CPU_RX_DESCRIPTOR */
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_F_OFFSET                                                           31
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_F_WIDTH                                                            1
#define PROCESSING_CPU_RX_DESCRIPTOR_PROCESSING_CPU_RX_DESCRIPTOR_OFFSET                                      0
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_OFFSET                                                             0
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_WORD_OFFSET                                                        0
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_F_OFFSET_MOD8                                                      7
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_F_OFFSET_MOD16                                                     15
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_F_OFFSET                                                        30
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_F_WIDTH                                                         1
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_OFFSET                                                          0
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_WORD_OFFSET                                                     0
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_F_OFFSET_MOD8                                                   6
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_F_OFFSET_MOD16                                                  14
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_F_OFFSET                                  29
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_F_WIDTH                                   1
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_OFFSET                                    0
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_WORD_OFFSET                               0
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_F_OFFSET_MOD8                             5
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_F_OFFSET_MOD16                            13
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_F_OFFSET                                                         28
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_F_WIDTH                                                          1
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_OFFSET                                                           0
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_WORD_OFFSET                                                      0
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_F_OFFSET_MOD8                                                    4
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_F_OFFSET_MOD16                                                   12
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_F_OFFSET                                                       27
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_F_WIDTH                                                        1
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_OFFSET                                                         0
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_WORD_OFFSET                                                    0
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_F_OFFSET_MOD8                                                  3
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_F_OFFSET_MOD16                                                 11
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_F_OFFSET                                                           26
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_F_WIDTH                                                            1
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_OFFSET                                                             0
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_WORD_OFFSET                                                        0
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_F_OFFSET_MOD8                                                      2
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_F_OFFSET_MOD16                                                     10
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_F_OFFSET                                                      25
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_F_WIDTH                                                       1
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_OFFSET                                                        0
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_WORD_OFFSET                                                   0
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_F_OFFSET_MOD8                                                 1
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_F_OFFSET_MOD16                                                9
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_F_OFFSET                                      23
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_F_WIDTH                                       2
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_OFFSET                                        0
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_WORD_OFFSET                                   0
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_F_OFFSET_MOD8                                 7
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_F_OFFSET_MOD16                                7
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_F_OFFSET                                            16
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_F_WIDTH                                             7
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_OFFSET                                              1
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_WORD_OFFSET                                         0
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_F_OFFSET_MOD8                                       0
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_F_OFFSET_MOD16                                      0
#define PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET                                                   7
#define PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_F_WIDTH                                                    9
#define PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_OFFSET                                                     2
#define PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_WORD_OFFSET                                                0
#define PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET_MOD16                                             7
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_OFFSET                                             6
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_WIDTH                                              1
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_OFFSET                                               3
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_WORD_OFFSET                                          0
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_OFFSET_MOD8                                        6
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_OFFSET_MOD16                                       6
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_F_OFFSET                                          5
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_F_WIDTH                                           1
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_OFFSET                                            3
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_WORD_OFFSET                                       0
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_F_OFFSET_MOD8                                     5
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_F_OFFSET_MOD16                                    5
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_F_OFFSET                            1
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_F_WIDTH                             4
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_OFFSET                              3
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_WORD_OFFSET                         0
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_F_OFFSET_MOD8                       1
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_F_OFFSET_MOD16                      1
#define PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_F_OFFSET             22
#define PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_F_WIDTH              10
#define PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_OFFSET               4
#define PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_WORD_OFFSET          1
#define PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_F_OFFSET_MOD16       6
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_F_OFFSET                                                        21
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_F_WIDTH                                                         1
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_OFFSET                                                          5
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_WORD_OFFSET                                                     1
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_F_OFFSET_MOD8                                                   5
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_F_OFFSET_MOD16                                                  5
#define PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_F_OFFSET                                                          14
#define PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_F_WIDTH                                                           7
#define PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_OFFSET                                                            5
#define PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_WORD_OFFSET                                                       1
#define PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_F_OFFSET_MOD8                                                     6
#define PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_F_OFFSET_MOD16                                                    14
#define PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET                                                   0
#define PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_F_WIDTH                                                    14
#define PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_OFFSET                                                     6
#define PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_WORD_OFFSET                                                1
#define PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET_MOD16                                             0
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_F_OFFSET                                                            31
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_F_WIDTH                                                             1
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_OFFSET                                                              8
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_WORD_OFFSET                                                         2
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_F_OFFSET_MOD8                                                       7
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_F_OFFSET_MOD16                                                      15
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET                                                    30
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_F_WIDTH                                                     1
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_OFFSET                                                      8
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_WORD_OFFSET                                                 2
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD8                                               6
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD16                                              14
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_F_OFFSET                                                    29
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_F_WIDTH                                                     1
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_OFFSET                                                      8
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_WORD_OFFSET                                                 2
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_F_OFFSET_MOD8                                               5
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_F_OFFSET_MOD16                                              13
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_F_OFFSET                                                    27
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_F_WIDTH                                                     2
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_OFFSET                                                      8
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_WORD_OFFSET                                                 2
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_F_OFFSET_MOD8                                               3
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_F_OFFSET_MOD16                                              11
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_F_OFFSET                                                             26
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_F_WIDTH                                                              1
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_OFFSET                                                               8
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_WORD_OFFSET                                                          2
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_F_OFFSET_MOD8                                                        2
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_F_OFFSET_MOD16                                                       10
#define PROCESSING_CPU_RX_DESCRIPTOR_VPORT_F_OFFSET                                                           18
#define PROCESSING_CPU_RX_DESCRIPTOR_VPORT_F_WIDTH                                                            8
#define PROCESSING_CPU_RX_DESCRIPTOR_VPORT_OFFSET                                                             8
#define PROCESSING_CPU_RX_DESCRIPTOR_VPORT_WORD_OFFSET                                                        2
#define PROCESSING_CPU_RX_DESCRIPTOR_VPORT_F_OFFSET_MOD16                                                     2
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_F_OFFSET                              14
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_F_WIDTH                               4
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_OFFSET                                9
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_WORD_OFFSET                           2
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_F_OFFSET_MOD8                         6
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_F_OFFSET_MOD16                        14
#define PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_F_OFFSET                                                     0
#define PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_F_WIDTH                                                      14
#define PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_OFFSET                                                       10
#define PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_WORD_OFFSET                                                  2
#define PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_F_OFFSET_MOD16                                               0
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_F_OFFSET                                                          31
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_F_WIDTH                                                           1
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_OFFSET                                                            12
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_WORD_OFFSET                                                       3
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_F_OFFSET_MOD8                                                     7
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_F_OFFSET_MOD16                                                    15
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    30
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      12
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 3
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               6
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              14
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_F_OFFSET                                                             29
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_OFFSET                                                               12
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_WORD_OFFSET                                                          3
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        5
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       13
#define PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_F_OFFSET                                         18
#define PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_F_WIDTH                                          11
#define PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_OFFSET                                           12
#define PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WORD_OFFSET                                      3
#define PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_F_OFFSET_MOD16                                   2
#define PROCESSING_CPU_RX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_F_OFFSET                                        0
#define PROCESSING_CPU_RX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_F_WIDTH                                         18
#define PROCESSING_CPU_RX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_OFFSET                                          12
#define PROCESSING_CPU_RX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WORD_OFFSET                                     3

/* >>>RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	type_or_service_queue_wlan 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	reason_or_forwarding       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flag_1588_or_dsl_rx        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	coherent_or_forwarding     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	reserved3                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dont_agg                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of dont_agg_or_is_chksum_verified union */
			uint32_t	reserved1_mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	type                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
			uint32_t	cpu_redirect_0                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	cpu_reason                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	reserved1_first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flag_1588                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
			uint32_t	coherent                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of coherent_or_forwarding union */
			uint32_t	metadata_1_2                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
			uint32_t	reserved1_reserved3                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_chksum_verified                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of dont_agg_or_is_chksum_verified union */
			uint32_t	reserved2_mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	service_queue_is_wlan                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
			uint32_t	service_queue_wlan_frw_type          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
			uint32_t	tc                                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	metadata_0_0                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	reserved2_first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dsl_rx                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
			uint32_t	ucast                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of coherent_or_forwarding union */
			uint32_t	tcpspdtest_stream_id                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
			uint32_t	tcpspdtest_is_upload                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
			uint32_t	reserved2_reserved3                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_type_or_service_queue_wlan 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_proxy_mode                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	wlan_mcast_idx                       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	reserved3_first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_flag_1588_or_dsl_rx        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_coherent_or_forwarding     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_reserved3                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_type_or_service_queue_wlan 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_redirect_1                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	wan_flow_1                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	reserved4_first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_flag_1588_or_dsl_rx        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_coherent_or_forwarding     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_reserved3                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bn_num                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	metadata_1_0                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
			uint32_t	reserved1_priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_bn_num                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	spdtest_l3_l4_hdr_len                	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
			uint32_t	reserved2_priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_bn_num                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	egress_queue                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
			uint32_t	wan_flow_0                           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
			uint32_t	reserved3_priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_bn_num                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_bn_num                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	vport                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	ssid_or_metadata_2_or_cpu_redirect	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	bn1_or_abs3                	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
			uint32_t	ssid                                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
			uint32_t	bn1_first                            	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	source_port                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
			uint32_t	reserved4                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
			uint32_t	metadata_2                           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
			uint32_t	reserved5                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
			uint32_t	abs3                                 	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_vport                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
			uint32_t	port_id                              	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
			uint32_t	reserved3_ssid_or_metadata_2_or_cpu_redirect	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_bn1_or_abs3                	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_vport                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_ssid_or_metadata_2_or_cpu_redirect	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_bn1_or_abs3                	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	payload_offset_or_abs_1    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	buffer_number_0_or_abs_0   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sop                                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	bn0_first                            	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs1                                 	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	abs0                                 	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_payload_offset_or_abs_1    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	fpm_pool                             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
			uint32_t	reserved6                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_payload_offset_or_abs_1    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_buffer_number_0_or_abs_0   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved3                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	coherent_or_forwarding     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	flag_1588_or_dsl_rx        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reason_or_forwarding       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	type_or_service_queue_wlan 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved3                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	metadata_1_2                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
			uint32_t	coherent                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of coherent_or_forwarding union */
			uint32_t	flag_1588                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
			uint32_t	reserved1_first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_redirect_0                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	cpu_reason                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	type                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
			uint32_t	reserved1_force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dont_agg                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of dont_agg_or_is_chksum_verified union */
			uint32_t	reserved1_headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved3                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tcpspdtest_stream_id                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
			uint32_t	tcpspdtest_is_upload                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
			uint32_t	ucast                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of coherent_or_forwarding union */
			uint32_t	dsl_rx                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
			uint32_t	reserved2_first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tc                                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	metadata_0_0                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	service_queue_is_wlan                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
			uint32_t	service_queue_wlan_frw_type          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
			uint32_t	reserved2_force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_chksum_verified                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of dont_agg_or_is_chksum_verified union */
			uint32_t	reserved2_headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_reserved3                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_coherent_or_forwarding     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_flag_1588_or_dsl_rx        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_proxy_mode                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	wlan_mcast_idx                       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	reserved3_type_or_service_queue_wlan 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_reserved3                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_coherent_or_forwarding     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_flag_1588_or_dsl_rx        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_redirect_1                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	wan_flow_1                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
			uint32_t	reserved4_type_or_service_queue_wlan 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	bn_num                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_bn_num                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	metadata_1_0                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_bn_num                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	spdtest_l3_l4_hdr_len                	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_bn_num                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_queue                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
			uint32_t	wan_flow_0                           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_bn_num                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	bn1_or_abs3                	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	ssid_or_metadata_2_or_cpu_redirect	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	vport                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	bn1_first                            	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
			uint32_t	ssid                                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
			uint32_t	flow                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
			uint32_t	reserved1_lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved5                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
			uint32_t	abs3                                 	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
			uint32_t	reserved4                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
			uint32_t	metadata_2                           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
			uint32_t	source_port                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
			uint32_t	reserved2_lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_bn1_or_abs3                	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_ssid_or_metadata_2_or_cpu_redirect	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_vport                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
			uint32_t	port_id                              	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
			uint32_t	reserved3_lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_bn1_or_abs3                	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_ssid_or_metadata_2_or_cpu_redirect	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_vport                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	buffer_number_0_or_abs_0   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	payload_offset_or_abs_1    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	bn0_first                            	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
			uint32_t	sop                                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	reserved1_abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	abs0                                 	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
			uint32_t	abs1                                 	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
			uint32_t	reserved2_abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	fpm_pool                             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
			uint32_t	reserved6                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
			uint32_t	reserved3_payload_offset_or_abs_1    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
			uint32_t	reserved4_buffer_number_0_or_abs_0   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_payload_offset_or_abs_1    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4_agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS;

typedef RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS * aligned_RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS fields;
} RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS_NEW;
typedef RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS_NEW * aligned_RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VALID_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VALID_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VALID_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_READ_G(r, g, idx)       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_WRITE_G(v, g, idx)      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_READ(r, p)              FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_WRITE(v, p)             FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 4, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 4, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 3, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 3, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p, 3, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p, 3, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COLOR_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 2, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 2, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COLOR_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)p, 2, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COLOR_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)p, 2, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 1, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 1, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p, 1, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p, 1, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 7, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 7, 2, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_READ(r, p)                  FIELD_MREAD_16((uint8_t *)p, 7, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)p, 7, 2, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 7, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 7, 2, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_READ(r, p)                                        FIELD_MREAD_16((uint8_t *)p, 7, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_WRITE(v, p)                                       FIELD_MWRITE_16((uint8_t *)p, 7, 2, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_IS_WLAN_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 0, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_IS_WLAN_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS), 0, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_IS_WLAN_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p, 0, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_IS_WLAN_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p, 0, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_WLAN_FRW_TYPE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 7, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_WLAN_FRW_TYPE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 7, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_WLAN_FRW_TYPE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 1, 7, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_WLAN_FRW_TYPE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 1, 7, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 0, 7, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 0, 7, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 1, 0, 7, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 1, 0, 7, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_0_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_0_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_0_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 1, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_0_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 1, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REASON_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 0, 6, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REASON_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 0, 6, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REASON_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 1, 0, 6, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REASON_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 1, 0, 6, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TC_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 4, 3, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TC_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 4, 3, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TC_READ(r, p)                                          FIELD_MREAD_8((uint8_t *)p + 1, 4, 3, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TC_WRITE(v, p)                                         FIELD_MWRITE_8((uint8_t *)p + 1, 4, 3, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_0_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 0, 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_0_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 0, 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_0_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 1, 0, 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_0_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 1, 0, 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_PROXY_MODE_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_PROXY_MODE_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_PROXY_MODE_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 1, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_PROXY_MODE_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 1, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WLAN_MCAST_IDX_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 0, 6, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WLAN_MCAST_IDX_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 0, 6, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WLAN_MCAST_IDX_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 1, 0, 6, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WLAN_MCAST_IDX_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 1, 0, 6, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_1_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_1_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_1_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 1, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_1_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 1, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_1_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 0, 6, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_1_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 1, 0, 6, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_1_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 1, 0, 6, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_1_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 1, 0, 6, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 2, 7, 9, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 2, 7, 9, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                               FIELD_MREAD_16((uint8_t *)p + 2, 7, 9, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)p + 2, 7, 9, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 3, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 3, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p + 3, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p + 3, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DSL_RX_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DSL_RX_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DSL_RX_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)p + 3, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DSL_RX_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)p + 3, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 3, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 3, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 3, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 3, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_UCAST_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_UCAST_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_UCAST_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)p + 3, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_UCAST_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)p + 3, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_READ_G(r, g, idx) GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 1, 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_WRITE_G(v, g, idx)GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 1, 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_READ(r, p)        FIELD_MREAD_8((uint8_t *)p + 3, 1, 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_WRITE(v, p)       FIELD_MWRITE_8((uint8_t *)p + 3, 1, 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 1, 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 1, 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 3, 1, 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 3, 1, 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_STREAM_ID_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 2, 3, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_STREAM_ID_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 2, 3, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_STREAM_ID_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 3, 2, 3, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_STREAM_ID_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 3, 2, 3, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 1, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 3, 1, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 3, 1, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 3, 1, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_READ_G(r, g, idx)GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 4, 6, 10, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_WRITE_G(v, g, idx)GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 4, 6, 10, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_READ(r, p)FIELD_MREAD_16((uint8_t *)p + 4, 6, 10, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_WRITE(v, p)FIELD_MWRITE_16((uint8_t *)p + 4, 6, 10, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_0_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 4, 6, 10, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_0_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 4, 6, 10, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_0_READ(r, p)                                FIELD_MREAD_16((uint8_t *)p + 4, 6, 10, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_0_WRITE(v, p)                               FIELD_MWRITE_16((uint8_t *)p + 4, 6, 10, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 4, 6, 10, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 4, 6, 10, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_READ(r, p)                       FIELD_MREAD_16((uint8_t *)p + 4, 6, 10, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)p + 4, 6, 10, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_READ_G(r, g, idx)                         GROUP_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_WRITE_G(v, g, idx)                        GROUP_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_READ(r, p)                                MREAD_8((uint8_t *)p + 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_WRITE(v, p)                               MWRITE_8((uint8_t *)p + 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_0_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 5, 6, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_0_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 5, 6, 2, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_0_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 5, 6, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_0_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 5, 6, 2, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 5, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 5, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 5, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 5, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 4, 14, 7, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 4, 14, 7, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_READ(r, p)                                      FIELD_MREAD_32((uint8_t *)p + 4, 14, 7, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_WRITE(v, p)                                     FIELD_MWRITE_32((uint8_t *)p + 4, 14, 7, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 6, 0, 14, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 6, 0, 14, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                               FIELD_MREAD_16((uint8_t *)p + 6, 0, 14, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)p + 6, 0, 14, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DROP_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 7, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DROP_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 7, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DROP_READ(r, p)                                        FIELD_MREAD_8((uint8_t *)p + 8, 7, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DROP_WRITE(v, p)                                       FIELD_MWRITE_8((uint8_t *)p + 8, 7, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 8, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 8, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 8, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 8, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 3, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 3, 2, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 8, 3, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 8, 3, 2, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_LAN_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 2, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 2, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_LAN_READ(r, p)                                         FIELD_MREAD_8((uint8_t *)p + 8, 2, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_LAN_WRITE(v, p)                                        FIELD_MWRITE_8((uint8_t *)p + 8, 2, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VPORT_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VPORT_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VPORT_READ(r, p)                                       FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VPORT_WRITE(v, p)                                      FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLOW_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLOW_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLOW_READ(r, p)                                        FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLOW_WRITE(v, p)                                       FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOURCE_PORT_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 2, 8, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOURCE_PORT_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 2, 8, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOURCE_PORT_READ(r, p)                                 FIELD_MREAD_16((uint8_t *)p + 8, 2, 8, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOURCE_PORT_WRITE(v, p)                                FIELD_MWRITE_16((uint8_t *)p + 8, 2, 8, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_VPORT_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 1, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_VPORT_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 1, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_VPORT_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 8, 1, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_VPORT_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 8, 1, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PORT_ID_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 2, 7, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PORT_ID_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 2, 7, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PORT_ID_READ(r, p)                                     FIELD_MREAD_16((uint8_t *)p + 8, 2, 7, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PORT_ID_WRITE(v, p)                                    FIELD_MWRITE_16((uint8_t *)p + 8, 2, 7, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_READ_G(r, g, idx)   GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 14, 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_WRITE_G(v, g, idx)  GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 14, 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_READ(r, p)          FIELD_MREAD_32((uint8_t *)p + 8, 14, 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_WRITE(v, p)         FIELD_MWRITE_32((uint8_t *)p + 8, 14, 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 14, 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 8, 14, 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_READ(r, p)                                        FIELD_MREAD_32((uint8_t *)p + 8, 14, 4, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_WRITE(v, p)                                       FIELD_MWRITE_32((uint8_t *)p + 8, 14, 4, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_2_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 10, 6, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_2_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 10, 6, 2, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_2_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)p + 10, 6, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_2_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)p + 10, 6, 2, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 10, 0, 14, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 10, 0, 14, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_READ(r, p)                                 FIELD_MREAD_16((uint8_t *)p + 10, 0, 14, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_WRITE(v, p)                                FIELD_MWRITE_16((uint8_t *)p + 10, 0, 14, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_FIRST_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 10, 0, 14, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_FIRST_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 10, 0, 14, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_FIRST_READ(r, p)                                   FIELD_MREAD_16((uint8_t *)p + 10, 0, 14, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_FIRST_WRITE(v, p)                                  FIELD_MWRITE_16((uint8_t *)p + 10, 0, 14, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS3_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 10, 0, 12, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS3_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 10, 0, 12, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS3_READ(r, p)                                        FIELD_MREAD_16((uint8_t *)p + 10, 0, 12, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS3_WRITE(v, p)                                       FIELD_MWRITE_16((uint8_t *)p + 10, 0, 12, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 7, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 7, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)p + 12, 7, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)p + 12, 7, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 12, 6, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 12, 6, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS_READ(r, p)                                         FIELD_MREAD_8((uint8_t *)p + 12, 5, 1, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS_WRITE(v, p)                                        FIELD_MWRITE_8((uint8_t *)p + 12, 5, 1, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_READ_G(r, g, idx)              GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_READ(r, p)                     FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WRITE(v, p)                    FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_READ(r, p)                                         FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_WRITE(v, p)                                        FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS1_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 2, 11, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS1_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 2, 11, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS1_READ(r, p)                                        FIELD_MREAD_16((uint8_t *)p + 12, 2, 11, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS1_WRITE(v, p)                                       FIELD_MWRITE_16((uint8_t *)p + 12, 2, 11, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_READ_G(r, g, idx)             GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_READ(r, p)                    FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WRITE(v, p)                   FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN0_FIRST_READ(r, p)                                   FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                                  FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS0_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 0, 18, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS0_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 12, 0, 18, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS0_READ(r, p)                                        FIELD_MREAD_32((uint8_t *)p + 12, 0, 18, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS0_WRITE(v, p)                                       FIELD_MWRITE_32((uint8_t *)p + 12, 0, 18, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_POOL_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 13, 0, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_POOL_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS) + 13, 0, 2, v)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_POOL_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 13, 0, 2, r)
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_POOL_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 13, 0, 2, v)
/* <<<RDD_PROCESSING_CPU_RX_DESCRIPTOR_DTS */

/* <<<RDD_PROCESSING_CPU_RX_DESCRIPTOR */


/* >>>RDD_CPU_RX_METER_ENTRY */
#define CPU_RX_METER_ENTRY_CURRENT_BUDGET_F_OFFSET                                                  16
#define CPU_RX_METER_ENTRY_CURRENT_BUDGET_F_WIDTH                                                   16
#define CPU_RX_METER_ENTRY_CPU_RX_METER_ENTRY_OFFSET                                                0
#define CPU_RX_METER_ENTRY_CURRENT_BUDGET_OFFSET                                                    0
#define CPU_RX_METER_ENTRY_CURRENT_BUDGET_WORD_OFFSET                                               0
#define CPU_RX_METER_ENTRY_BUDGET_LIMIT_F_OFFSET                                                    0
#define CPU_RX_METER_ENTRY_BUDGET_LIMIT_F_WIDTH                                                     16
#define CPU_RX_METER_ENTRY_BUDGET_LIMIT_OFFSET                                                      2
#define CPU_RX_METER_ENTRY_BUDGET_LIMIT_WORD_OFFSET                                                 0
#define CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_F_OFFSET                                                16
#define CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_F_WIDTH                                                 16
#define CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_OFFSET                                                  4
#define CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_WORD_OFFSET                                             1
#define CPU_RX_METER_ENTRY_BUDGET_RESIDUE_F_OFFSET                                                  8
#define CPU_RX_METER_ENTRY_BUDGET_RESIDUE_F_WIDTH                                                   8
#define CPU_RX_METER_ENTRY_BUDGET_RESIDUE_OFFSET                                                    6
#define CPU_RX_METER_ENTRY_BUDGET_RESIDUE_WORD_OFFSET                                               1
#define CPU_RX_METER_ENTRY_BUDGET_RESIDUE_F_OFFSET_MOD16                                            8
#define CPU_RX_METER_ENTRY_CURRENT_CYCLE_F_OFFSET                                                   0
#define CPU_RX_METER_ENTRY_CURRENT_CYCLE_F_WIDTH                                                    8
#define CPU_RX_METER_ENTRY_CURRENT_CYCLE_OFFSET                                                     7
#define CPU_RX_METER_ENTRY_CURRENT_CYCLE_WORD_OFFSET                                                1
#define CPU_RX_METER_ENTRY_CURRENT_CYCLE_F_OFFSET_MOD16                                             0
/* <<<RDD_CPU_RX_METER_ENTRY */


/* >>>RDD_CPU_REDIRECT_MODE_ENTRY */
#define CPU_REDIRECT_MODE_ENTRY_MODE_F_OFFSET                                                            0
#define CPU_REDIRECT_MODE_ENTRY_MODE_F_WIDTH                                                             8
#define CPU_REDIRECT_MODE_ENTRY_CPU_REDIRECT_MODE_ENTRY_OFFSET                                           0
#define CPU_REDIRECT_MODE_ENTRY_MODE_OFFSET                                                              0
#define CPU_REDIRECT_MODE_ENTRY_MODE_WORD_OFFSET                                                         0
#define CPU_REDIRECT_MODE_ENTRY_MODE_F_OFFSET_MOD16                                                      0
/* <<<RDD_CPU_REDIRECT_MODE_ENTRY */


/* >>>RDD_UDPSPDTEST_STREAM_RX_STAT */
#define UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_0_F_OFFSET                                                      0
#define UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_0_F_WIDTH                                                       32
#define UDPSPDTEST_STREAM_RX_STAT_UDPSPDTEST_STREAM_RX_STAT_OFFSET                                         0
#define UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_0_OFFSET                                                        0
#define UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_0_WORD_OFFSET                                                   0
#define UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_1_F_OFFSET                                                      0
#define UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_1_F_WIDTH                                                       32
#define UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_1_OFFSET                                                        4
#define UDPSPDTEST_STREAM_RX_STAT_RX_BYTES_1_WORD_OFFSET                                                   1
#define UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_0_F_OFFSET                                                    0
#define UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_0_F_WIDTH                                                     32
#define UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_0_OFFSET                                                      8
#define UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_0_WORD_OFFSET                                                 2
#define UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_1_F_OFFSET                                                    0
#define UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_1_F_WIDTH                                                     32
#define UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_1_OFFSET                                                      12
#define UDPSPDTEST_STREAM_RX_STAT_RX_PACKETS_1_WORD_OFFSET                                                 3
#define UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_F_OFFSET                                                        0
#define UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_F_WIDTH                                                         32
#define UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_OFFSET                                                          16
#define UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_WORD_OFFSET                                                     4
#define UDPSPDTEST_STREAM_RX_STAT_TS_LAST_0_F_OFFSET                                                       0
#define UDPSPDTEST_STREAM_RX_STAT_TS_LAST_0_F_WIDTH                                                        32
#define UDPSPDTEST_STREAM_RX_STAT_TS_LAST_0_OFFSET                                                         20
#define UDPSPDTEST_STREAM_RX_STAT_TS_LAST_0_WORD_OFFSET                                                    5
#define UDPSPDTEST_STREAM_RX_STAT_TS_LAST_1_F_OFFSET                                                       0
#define UDPSPDTEST_STREAM_RX_STAT_TS_LAST_1_F_WIDTH                                                        32
#define UDPSPDTEST_STREAM_RX_STAT_TS_LAST_1_OFFSET                                                         24
#define UDPSPDTEST_STREAM_RX_STAT_TS_LAST_1_WORD_OFFSET                                                    6
#define UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_SET_F_OFFSET                                                    31
#define UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_SET_F_WIDTH                                                     1
#define UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_SET_OFFSET                                                      28
#define UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_SET_WORD_OFFSET                                                 7
#define UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_SET_F_OFFSET_MOD8                                               7
#define UDPSPDTEST_STREAM_RX_STAT_TS_FIRST_SET_F_OFFSET_MOD16                                              15
#define UDPSPDTEST_STREAM_RX_STAT_BAD_PROTO_CNTR_F_OFFSET                                                  0
#define UDPSPDTEST_STREAM_RX_STAT_BAD_PROTO_CNTR_F_WIDTH                                                   16
#define UDPSPDTEST_STREAM_RX_STAT_BAD_PROTO_CNTR_OFFSET                                                    30
#define UDPSPDTEST_STREAM_RX_STAT_BAD_PROTO_CNTR_WORD_OFFSET                                               7
/* <<<RDD_UDPSPDTEST_STREAM_RX_STAT */


/* >>>RDD_SPDSVC_RX_TS_STAT */
#define SPDSVC_RX_TS_STAT_TS_FIRST_F_OFFSET                                                        0
#define SPDSVC_RX_TS_STAT_TS_FIRST_F_WIDTH                                                         32
#define SPDSVC_RX_TS_STAT_SPDSVC_RX_TS_STAT_OFFSET                                                 0
#define SPDSVC_RX_TS_STAT_TS_FIRST_OFFSET                                                          0
#define SPDSVC_RX_TS_STAT_TS_FIRST_WORD_OFFSET                                                     0
#define SPDSVC_RX_TS_STAT_TS_LAST_F_OFFSET                                                         0
#define SPDSVC_RX_TS_STAT_TS_LAST_F_WIDTH                                                          32
#define SPDSVC_RX_TS_STAT_TS_LAST_OFFSET                                                           4
#define SPDSVC_RX_TS_STAT_TS_LAST_WORD_OFFSET                                                      1
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_F_OFFSET                                                    0
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_F_WIDTH                                                     1
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_OFFSET                                                      11
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_WORD_OFFSET                                                 2
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_F_OFFSET_MOD8                                               0
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_F_OFFSET_MOD16                                              0
/* <<<RDD_SPDSVC_RX_TS_STAT */


/* >>>RDD_RING_CPU_TX_DESCRIPTOR */
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_F_OFFSET                                                       31
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_F_WIDTH                                                        1
#define RING_CPU_TX_DESCRIPTOR_RING_CPU_TX_DESCRIPTOR_OFFSET                                            0
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_OFFSET                                                         0
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_WORD_OFFSET                                                    0
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_F_OFFSET_MOD8                                                  7
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_F_OFFSET_MOD16                                                 15
#define RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET                                                   22
#define RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_WIDTH                                                    9
#define RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_OFFSET                                                     0
#define RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WORD_OFFSET                                                0
#define RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET_MOD16                                             6
#define RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET                                                   8
#define RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_WIDTH                                                    14
#define RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_OFFSET                                                     0
#define RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_WORD_OFFSET                                                0
#define RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET_MOD16                                             8
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_F_OFFSET                                                 0
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_F_WIDTH                                                  8
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_OFFSET                                                   3
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_WORD_OFFSET                                              0
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_F_OFFSET_MOD16                                           0
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_F_OFFSET                                     0
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_F_WIDTH                                      32
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_OFFSET                                       4
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_WORD_OFFSET                                  1
#define RING_CPU_TX_DESCRIPTOR_COLOR_F_OFFSET                                                           31
#define RING_CPU_TX_DESCRIPTOR_COLOR_F_WIDTH                                                            1
#define RING_CPU_TX_DESCRIPTOR_COLOR_OFFSET                                                             8
#define RING_CPU_TX_DESCRIPTOR_COLOR_WORD_OFFSET                                                        2
#define RING_CPU_TX_DESCRIPTOR_COLOR_F_OFFSET_MOD8                                                      7
#define RING_CPU_TX_DESCRIPTOR_COLOR_F_OFFSET_MOD16                                                     15
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET                                                  30
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_WIDTH                                                   1
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_OFFSET                                                    8
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WORD_OFFSET                                               2
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET_MOD8                                             6
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET_MOD16                                            14
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET                                                       29
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_F_WIDTH                                                        1
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_OFFSET                                                         8
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_WORD_OFFSET                                                    2
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD8                                                  5
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD16                                                 13
#define RING_CPU_TX_DESCRIPTOR_LAN_F_OFFSET                                                             28
#define RING_CPU_TX_DESCRIPTOR_LAN_F_WIDTH                                                              1
#define RING_CPU_TX_DESCRIPTOR_LAN_OFFSET                                                               8
#define RING_CPU_TX_DESCRIPTOR_LAN_WORD_OFFSET                                                          2
#define RING_CPU_TX_DESCRIPTOR_LAN_F_OFFSET_MOD8                                                        4
#define RING_CPU_TX_DESCRIPTOR_LAN_F_OFFSET_MOD16                                                       12
#define RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_F_OFFSET                                      20
#define RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_F_WIDTH                                       8
#define RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_OFFSET                                        8
#define RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_WORD_OFFSET                                   2
#define RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_F_OFFSET_MOD16                                4
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_F_OFFSET                                                    19
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_F_WIDTH                                                     1
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_OFFSET                                                      9
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_WORD_OFFSET                                                 2
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_F_OFFSET_MOD8                                               3
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_F_OFFSET_MOD16                                              3
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_F_OFFSET                                                       18
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_F_WIDTH                                                        1
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_OFFSET                                                         9
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_WORD_OFFSET                                                    2
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_F_OFFSET_MOD8                                                  2
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_F_OFFSET_MOD16                                                 2
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    17
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      9
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 2
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               1
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              1
#define RING_CPU_TX_DESCRIPTOR_ABS_F_OFFSET                                                             16
#define RING_CPU_TX_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define RING_CPU_TX_DESCRIPTOR_ABS_OFFSET                                                               9
#define RING_CPU_TX_DESCRIPTOR_ABS_WORD_OFFSET                                                          2
#define RING_CPU_TX_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        0
#define RING_CPU_TX_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       0
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_F_OFFSET                                                       14
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_F_WIDTH                                                        2
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_OFFSET                                                         10
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_WORD_OFFSET                                                    2
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_F_OFFSET_MOD8                                                  6
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_F_OFFSET_MOD16                                                 14
#define RING_CPU_TX_DESCRIPTOR_SSID_F_OFFSET                                                            10
#define RING_CPU_TX_DESCRIPTOR_SSID_F_WIDTH                                                             4
#define RING_CPU_TX_DESCRIPTOR_SSID_OFFSET                                                              10
#define RING_CPU_TX_DESCRIPTOR_SSID_WORD_OFFSET                                                         2
#define RING_CPU_TX_DESCRIPTOR_SSID_F_OFFSET_MOD8                                                       2
#define RING_CPU_TX_DESCRIPTOR_SSID_F_OFFSET_MOD16                                                      10
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_F_OFFSET                                                9
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_F_WIDTH                                                 1
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_OFFSET                                                  10
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_WORD_OFFSET                                             2
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_F_OFFSET_MOD8                                           1
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_F_OFFSET_MOD16                                          9
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_F_OFFSET                                                0
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_F_WIDTH                                                 8
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_OFFSET                                                  11
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_WORD_OFFSET                                             2
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_F_OFFSET_MOD16                                          0
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_F_OFFSET                                      0
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_F_WIDTH                                       32
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_OFFSET                                        12
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_WORD_OFFSET                                   3
/* <<<RDD_RING_CPU_TX_DESCRIPTOR */


/* >>>RDD_CPU_TX_RING_INDICES */
#define CPU_TX_RING_INDICES_READ_IDX_F_OFFSET                                                        16
#define CPU_TX_RING_INDICES_READ_IDX_F_WIDTH                                                         16
#define CPU_TX_RING_INDICES_CPU_TX_RING_INDICES_OFFSET                                               0
#define CPU_TX_RING_INDICES_READ_IDX_OFFSET                                                          0
#define CPU_TX_RING_INDICES_READ_IDX_WORD_OFFSET                                                     0
#define CPU_TX_RING_INDICES_WRITE_IDX_F_OFFSET                                                       0
#define CPU_TX_RING_INDICES_WRITE_IDX_F_WIDTH                                                        16
#define CPU_TX_RING_INDICES_WRITE_IDX_OFFSET                                                         2
#define CPU_TX_RING_INDICES_WRITE_IDX_WORD_OFFSET                                                    0
/* <<<RDD_CPU_TX_RING_INDICES */


/* >>>RDD_CPU_TX_SYNC_FIFO_ENTRY */
#define CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_F_OFFSET                                                       16
#define CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_F_WIDTH                                                        16
#define CPU_TX_SYNC_FIFO_ENTRY_CPU_TX_SYNC_FIFO_ENTRY_OFFSET                                            0
#define CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_OFFSET                                                         0
#define CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_WORD_OFFSET                                                    0
#define CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_F_OFFSET                                                        0
#define CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_F_WIDTH                                                         16
#define CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_OFFSET                                                          2
#define CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_WORD_OFFSET                                                     0
#define CPU_TX_SYNC_FIFO_ENTRY_FIFO_F_OFFSET                                                            16
#define CPU_TX_SYNC_FIFO_ENTRY_FIFO_F_WIDTH                                                             16
#define CPU_TX_SYNC_FIFO_ENTRY_FIFO_OFFSET                                                              4
#define CPU_TX_SYNC_FIFO_ENTRY_FIFO_WORD_OFFSET                                                         1
/* <<<RDD_CPU_TX_SYNC_FIFO_ENTRY */


/* >>>RDD_CPU_TX_DBG_CNTRS */
#define CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_F_OFFSET                                                    0
#define CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_F_WIDTH                                                     32
#define CPU_TX_DBG_CNTRS_CPU_TX_DBG_CNTRS_OFFSET                                                  0
#define CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_OFFSET                                                      0
#define CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_WORD_OFFSET                                                 0
#define CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_F_OFFSET                                                   0
#define CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_F_WIDTH                                                    32
#define CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_OFFSET                                                     4
#define CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_WORD_OFFSET                                                1
#define CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_F_OFFSET                                                 0
#define CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_F_WIDTH                                                  32
#define CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_OFFSET                                                   8
#define CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_WORD_OFFSET                                              2
#define CPU_TX_DBG_CNTRS_NO_FPM_F_OFFSET                                                          0
#define CPU_TX_DBG_CNTRS_NO_FPM_F_WIDTH                                                           32
#define CPU_TX_DBG_CNTRS_NO_FPM_OFFSET                                                            12
#define CPU_TX_DBG_CNTRS_NO_FPM_WORD_OFFSET                                                       3
#define CPU_TX_DBG_CNTRS_TASK_EXIT_F_OFFSET                                                       0
#define CPU_TX_DBG_CNTRS_TASK_EXIT_F_WIDTH                                                        32
#define CPU_TX_DBG_CNTRS_TASK_EXIT_OFFSET                                                         16
#define CPU_TX_DBG_CNTRS_TASK_EXIT_WORD_OFFSET                                                    4
#define CPU_TX_DBG_CNTRS_SYNC_WAIT_F_OFFSET                                                       0
#define CPU_TX_DBG_CNTRS_SYNC_WAIT_F_WIDTH                                                        32
#define CPU_TX_DBG_CNTRS_SYNC_WAIT_OFFSET                                                         20
#define CPU_TX_DBG_CNTRS_SYNC_WAIT_WORD_OFFSET                                                    5
#define CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_F_OFFSET                                         0
#define CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_F_WIDTH                                          32
#define CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_OFFSET                                           24
#define CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_WORD_OFFSET                                      6
#define CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_F_OFFSET                                               0
#define CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_F_WIDTH                                                32
#define CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_OFFSET                                                 28
#define CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_WORD_OFFSET                                            7
#define CPU_TX_DBG_CNTRS_DROP_PKT_F_OFFSET                                                        0
#define CPU_TX_DBG_CNTRS_DROP_PKT_F_WIDTH                                                         32
#define CPU_TX_DBG_CNTRS_DROP_PKT_OFFSET                                                          32
#define CPU_TX_DBG_CNTRS_DROP_PKT_WORD_OFFSET                                                     8
#define CPU_TX_DBG_CNTRS_TASK_START_F_OFFSET                                                      0
#define CPU_TX_DBG_CNTRS_TASK_START_F_WIDTH                                                       32
#define CPU_TX_DBG_CNTRS_TASK_START_OFFSET                                                        36
#define CPU_TX_DBG_CNTRS_TASK_START_WORD_OFFSET                                                   9
#define CPU_TX_DBG_CNTRS_NO_FWD_F_OFFSET                                                          0
#define CPU_TX_DBG_CNTRS_NO_FWD_F_WIDTH                                                           32
#define CPU_TX_DBG_CNTRS_NO_FWD_OFFSET                                                            40
#define CPU_TX_DBG_CNTRS_NO_FWD_WORD_OFFSET                                                       10
/* <<<RDD_CPU_TX_DBG_CNTRS */


/* >>>RDD_SPDSVC_GEN_PARAMS */
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_F_OFFSET                                              0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_F_WIDTH                                               32
#define SPDSVC_GEN_PARAMS_SPDSVC_GEN_PARAMS_OFFSET                                                 0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_OFFSET                                                0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_WORD_OFFSET                                           0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_F_OFFSET                                              0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_F_WIDTH                                               32
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_OFFSET                                                4
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_WORD_OFFSET                                           1
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_F_OFFSET                                              0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_F_WIDTH                                               32
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_OFFSET                                                24
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_WORD_OFFSET                                           6
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_F_OFFSET                                              0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_F_WIDTH                                               32
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_OFFSET                                                28
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_WORD_OFFSET                                           7
#define SPDSVC_GEN_PARAMS_TOTAL_COPIES_F_OFFSET                                                    0
#define SPDSVC_GEN_PARAMS_TOTAL_COPIES_F_WIDTH                                                     32
#define SPDSVC_GEN_PARAMS_TOTAL_COPIES_OFFSET                                                      32
#define SPDSVC_GEN_PARAMS_TOTAL_COPIES_WORD_OFFSET                                                 8
#define SPDSVC_GEN_PARAMS_BUCKET_F_OFFSET                                                          0
#define SPDSVC_GEN_PARAMS_BUCKET_F_WIDTH                                                           32
#define SPDSVC_GEN_PARAMS_BUCKET_OFFSET                                                            36
#define SPDSVC_GEN_PARAMS_BUCKET_WORD_OFFSET                                                       9
#define SPDSVC_GEN_PARAMS_TIMER_PERIOD_F_OFFSET                                                    16
#define SPDSVC_GEN_PARAMS_TIMER_PERIOD_F_WIDTH                                                     16
#define SPDSVC_GEN_PARAMS_TIMER_PERIOD_OFFSET                                                      40
#define SPDSVC_GEN_PARAMS_TIMER_PERIOD_WORD_OFFSET                                                 10
#define SPDSVC_GEN_PARAMS_TOTAL_LENGTH_F_OFFSET                                                    0
#define SPDSVC_GEN_PARAMS_TOTAL_LENGTH_F_WIDTH                                                     16
#define SPDSVC_GEN_PARAMS_TOTAL_LENGTH_OFFSET                                                      42
#define SPDSVC_GEN_PARAMS_TOTAL_LENGTH_WORD_OFFSET                                                 10
#define SPDSVC_GEN_PARAMS_TX_PACKETS_F_OFFSET                                                      0
#define SPDSVC_GEN_PARAMS_TX_PACKETS_F_WIDTH                                                       32
#define SPDSVC_GEN_PARAMS_TX_PACKETS_OFFSET                                                        44
#define SPDSVC_GEN_PARAMS_TX_PACKETS_WORD_OFFSET                                                   11
#define SPDSVC_GEN_PARAMS_TX_DROPPED_F_OFFSET                                                      0
#define SPDSVC_GEN_PARAMS_TX_DROPPED_F_WIDTH                                                       32
#define SPDSVC_GEN_PARAMS_TX_DROPPED_OFFSET                                                        48
#define SPDSVC_GEN_PARAMS_TX_DROPPED_WORD_OFFSET                                                   12
#define SPDSVC_GEN_PARAMS_TOKENS_F_OFFSET                                                          0
#define SPDSVC_GEN_PARAMS_TOKENS_F_WIDTH                                                           32
#define SPDSVC_GEN_PARAMS_TOKENS_OFFSET                                                            52
#define SPDSVC_GEN_PARAMS_TOKENS_WORD_OFFSET                                                       13
#define SPDSVC_GEN_PARAMS_BUCKET_SIZE_F_OFFSET                                                     0
#define SPDSVC_GEN_PARAMS_BUCKET_SIZE_F_WIDTH                                                      32
#define SPDSVC_GEN_PARAMS_BUCKET_SIZE_OFFSET                                                       56
#define SPDSVC_GEN_PARAMS_BUCKET_SIZE_WORD_OFFSET                                                  14
/* <<<RDD_SPDSVC_GEN_PARAMS */


/* >>>RDD_SPDTEST_GEN_CFG */
#define SPDTEST_GEN_CFG_TEST_TYPE_F_OFFSET                                                       26
#define SPDTEST_GEN_CFG_TEST_TYPE_F_WIDTH                                                        6
#define SPDTEST_GEN_CFG_SPDTEST_GEN_CFG_OFFSET                                                   0
#define SPDTEST_GEN_CFG_TEST_TYPE_OFFSET                                                         0
#define SPDTEST_GEN_CFG_TEST_TYPE_WORD_OFFSET                                                    0
#define SPDTEST_GEN_CFG_TEST_TYPE_F_OFFSET_MOD8                                                  2
#define SPDTEST_GEN_CFG_TEST_TYPE_F_OFFSET_MOD16                                                 10
#define SPDTEST_GEN_CFG_IS_ON_F_OFFSET                                                           25
#define SPDTEST_GEN_CFG_IS_ON_F_WIDTH                                                            1
#define SPDTEST_GEN_CFG_IS_ON_OFFSET                                                             0
#define SPDTEST_GEN_CFG_IS_ON_WORD_OFFSET                                                        0
#define SPDTEST_GEN_CFG_IS_ON_F_OFFSET_MOD8                                                      1
#define SPDTEST_GEN_CFG_IS_ON_F_OFFSET_MOD16                                                     9
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_F_OFFSET                                                   24
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_F_WIDTH                                                    1
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_OFFSET                                                     0
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_WORD_OFFSET                                                0
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_F_OFFSET_MOD8                                              0
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_F_OFFSET_MOD16                                             8
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_F_OFFSET                                               23
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_F_WIDTH                                                1
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_OFFSET                                                 1
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_WORD_OFFSET                                            0
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_F_OFFSET_MOD8                                          7
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_F_OFFSET_MOD16                                         7
/* <<<RDD_SPDTEST_GEN_CFG */


/* >>>RDD_UDPSPDTEST_STREAM_TX_STAT */
#define UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_0_F_OFFSET                                                    0
#define UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_0_F_WIDTH                                                     32
#define UDPSPDTEST_STREAM_TX_STAT_UDPSPDTEST_STREAM_TX_STAT_OFFSET                                         0
#define UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_0_OFFSET                                                      0
#define UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_0_WORD_OFFSET                                                 0
#define UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_1_F_OFFSET                                                    0
#define UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_1_F_WIDTH                                                     32
#define UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_1_OFFSET                                                      4
#define UDPSPDTEST_STREAM_TX_STAT_TX_PACKETS_1_WORD_OFFSET                                                 1
#define UDPSPDTEST_STREAM_TX_STAT_TX_DROPS_NO_SPBM_F_OFFSET                                                0
#define UDPSPDTEST_STREAM_TX_STAT_TX_DROPS_NO_SPBM_F_WIDTH                                                 32
#define UDPSPDTEST_STREAM_TX_STAT_TX_DROPS_NO_SPBM_OFFSET                                                  8
#define UDPSPDTEST_STREAM_TX_STAT_TX_DROPS_NO_SPBM_WORD_OFFSET                                             2
/* <<<RDD_UDPSPDTEST_STREAM_TX_STAT */


/* >>>RDD_SPDSVC_WLAN_GEN_PARAMS */
#define SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_F_OFFSET                                                0
#define SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_F_WIDTH                                                 32
#define SPDSVC_WLAN_GEN_PARAMS_SPDSVC_WLAN_GEN_PARAMS_OFFSET                                            0
#define SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_OFFSET                                                  0
#define SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_WORD_OFFSET                                             0
#define SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_F_OFFSET                                                       0
#define SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_F_WIDTH                                                        32
#define SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_OFFSET                                                         4
#define SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_WORD_OFFSET                                                    1
#define SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_F_OFFSET                                                 16
#define SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_F_WIDTH                                                  16
#define SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_OFFSET                                                   8
#define SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_WORD_OFFSET                                              2
/* <<<RDD_SPDSVC_WLAN_GEN_PARAMS */


/* >>>RDD_SPDSVC_WLAN_TXPOST_PARAMS */
#define SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_F_OFFSET                                                 0
#define SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_F_WIDTH                                                  16
#define SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_WLAN_TXPOST_PARAMS_OFFSET                                         0
#define SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_OFFSET                                                   0
#define SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_WORD_OFFSET                                              0
/* <<<RDD_SPDSVC_WLAN_TXPOST_PARAMS */


/* >>>RDD_PKTGEN_TX_PARAMS */
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_F_OFFSET                                      0
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_F_WIDTH                                       32
#define PKTGEN_TX_PARAMS_PKTGEN_TX_PARAMS_OFFSET                                                  0
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_OFFSET                                        0
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_WORD_OFFSET                                   0
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_F_OFFSET                                      0
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_F_WIDTH                                       32
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_OFFSET                                        4
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_WORD_OFFSET                                   1
#define PKTGEN_TX_PARAMS_REF_PD_0_F_OFFSET                                                        0
#define PKTGEN_TX_PARAMS_REF_PD_0_F_WIDTH                                                         32
#define PKTGEN_TX_PARAMS_REF_PD_0_OFFSET                                                          8
#define PKTGEN_TX_PARAMS_REF_PD_0_WORD_OFFSET                                                     2
#define PKTGEN_TX_PARAMS_REF_PD_1_F_OFFSET                                                        0
#define PKTGEN_TX_PARAMS_REF_PD_1_F_WIDTH                                                         32
#define PKTGEN_TX_PARAMS_REF_PD_1_OFFSET                                                          12
#define PKTGEN_TX_PARAMS_REF_PD_1_WORD_OFFSET                                                     3
#define PKTGEN_TX_PARAMS_REF_PD_2_F_OFFSET                                                        0
#define PKTGEN_TX_PARAMS_REF_PD_2_F_WIDTH                                                         32
#define PKTGEN_TX_PARAMS_REF_PD_2_OFFSET                                                          16
#define PKTGEN_TX_PARAMS_REF_PD_2_WORD_OFFSET                                                     4
#define PKTGEN_TX_PARAMS_REF_PD_3_F_OFFSET                                                        0
#define PKTGEN_TX_PARAMS_REF_PD_3_F_WIDTH                                                         32
#define PKTGEN_TX_PARAMS_REF_PD_3_OFFSET                                                          20
#define PKTGEN_TX_PARAMS_REF_PD_3_WORD_OFFSET                                                     5
/* <<<RDD_PKTGEN_TX_PARAMS */


/* >>>RDD_PKTGEN_SBPM_HDR_BN */
#define PKTGEN_SBPM_HDR_BN_FIRST_BN_F_OFFSET                                                        2
#define PKTGEN_SBPM_HDR_BN_FIRST_BN_F_WIDTH                                                         14
#define PKTGEN_SBPM_HDR_BN_PKTGEN_SBPM_HDR_BN_OFFSET                                                0
#define PKTGEN_SBPM_HDR_BN_FIRST_BN_OFFSET                                                          0
#define PKTGEN_SBPM_HDR_BN_FIRST_BN_WORD_OFFSET                                                     0
#define PKTGEN_SBPM_HDR_BN_FIRST_BN_F_OFFSET_MOD16                                                  2
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_F_OFFSET                                                         0
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_F_WIDTH                                                          2
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_OFFSET                                                           1
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_WORD_OFFSET                                                      0
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_F_OFFSET_MOD8                                                    0
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_F_OFFSET_MOD16                                                   0
/* <<<RDD_PKTGEN_SBPM_HDR_BN */


/* >>>RDD_PKTGEN_SBPM_EXT */
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_F_OFFSET                                                      14
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_F_WIDTH                                                       4
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_OFFSET                                                        1
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_WORD_OFFSET                                                   0
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_F_OFFSET_MOD8                                                 6
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_F_OFFSET_MOD16                                                14
#define PKTGEN_SBPM_EXT_BN1_F_OFFSET                                                             0
#define PKTGEN_SBPM_EXT_BN1_F_WIDTH                                                              14
#define PKTGEN_SBPM_EXT_BN1_OFFSET                                                               2
#define PKTGEN_SBPM_EXT_BN1_WORD_OFFSET                                                          0
#define PKTGEN_SBPM_EXT_BN1_F_OFFSET_MOD16                                                       0
/* <<<RDD_PKTGEN_SBPM_EXT */


/* >>>RDD_PKTGEN_FPM_UG_MGMT_ENTRY */
#define PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_F_OFFSET                                                          0
#define PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_F_WIDTH                                                           32
#define PKTGEN_FPM_UG_MGMT_ENTRY_PKTGEN_FPM_UG_MGMT_ENTRY_OFFSET                                          0
#define PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_OFFSET                                                            0
#define PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_WORD_OFFSET                                                       0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_F_OFFSET                                                0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_F_WIDTH                                                 32
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_OFFSET                                                  4
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_WORD_OFFSET                                             1
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_F_OFFSET                                                      0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_F_WIDTH                                                       32
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_OFFSET                                                        8
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_WORD_OFFSET                                                   2
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_F_OFFSET                                             0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_F_WIDTH                                              32
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_OFFSET                                               12
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_WORD_OFFSET                                          3
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_F_OFFSET                                                0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_F_WIDTH                                                 32
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_OFFSET                                                  16
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_WORD_OFFSET                                             4
/* <<<RDD_PKTGEN_FPM_UG_MGMT_ENTRY */


/* >>>RDD_PKTGEN_TX_STREAM_ENTRY */
#define PKTGEN_TX_STREAM_ENTRY_WAN_FLOW_F_OFFSET                                                        16
#define PKTGEN_TX_STREAM_ENTRY_WAN_FLOW_F_WIDTH                                                         16
#define PKTGEN_TX_STREAM_ENTRY_PKTGEN_TX_STREAM_ENTRY_OFFSET                                            0
#define PKTGEN_TX_STREAM_ENTRY_WAN_FLOW_OFFSET                                                          0
#define PKTGEN_TX_STREAM_ENTRY_WAN_FLOW_WORD_OFFSET                                                     0
#define PKTGEN_TX_STREAM_ENTRY_TX_QM_QUEUE_F_OFFSET                                                     0
#define PKTGEN_TX_STREAM_ENTRY_TX_QM_QUEUE_F_WIDTH                                                      16
#define PKTGEN_TX_STREAM_ENTRY_TX_QM_QUEUE_OFFSET                                                       2
#define PKTGEN_TX_STREAM_ENTRY_TX_QM_QUEUE_WORD_OFFSET                                                  0
/* <<<RDD_PKTGEN_TX_STREAM_ENTRY */


/* >>>RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO */
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_F_OFFSET                                                     24
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_F_WIDTH                                                      8
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_TCPSPDTEST_ENGINE_GLOBAL_INFO_OFFSET                                     0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_OFFSET                                                       0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_WORD_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_F_OFFSET_MOD16                                               8
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_F_OFFSET                                                   0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_F_WIDTH                                                    32
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_OFFSET                                                     4
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_WORD_OFFSET                                                1
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_F_OFFSET                                                0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_F_WIDTH                                                 32
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_OFFSET                                                  8
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_WORD_OFFSET                                             2
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_F_OFFSET                                           0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_F_WIDTH                                            32
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_OFFSET                                             12
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_WORD_OFFSET                                        3
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_F_OFFSET                                      16
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_F_WIDTH                                       16
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_OFFSET                                        16
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_WORD_OFFSET                                   4
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_F_OFFSET                                               8
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_F_WIDTH                                                8
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_OFFSET                                                 18
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_WORD_OFFSET                                            4
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_F_OFFSET_MOD16                                         8
/* <<<RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO */


/* >>>RDD_TCPSPDTEST_ENGINE_CONN_INFO */
#define TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_F_OFFSET                                                      24
#define TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_F_WIDTH                                                       8
#define TCPSPDTEST_ENGINE_CONN_INFO_TCPSPDTEST_ENGINE_CONN_INFO_OFFSET                                       0
#define TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_OFFSET                                                        0
#define TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_WORD_OFFSET                                                   0
#define TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_F_OFFSET_MOD16                                                8
#define TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_F_OFFSET                                                      16
#define TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_F_WIDTH                                                       8
#define TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_OFFSET                                                        1
#define TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_WORD_OFFSET                                                   0
#define TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_F_OFFSET_MOD16                                                0
#define TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_F_OFFSET                                                     8
#define TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_F_WIDTH                                                      8
#define TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_OFFSET                                                       2
#define TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_WORD_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_F_OFFSET_MOD16                                               8
#define TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_F_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_F_WIDTH                                                       8
#define TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_OFFSET                                                        3
#define TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_WORD_OFFSET                                                   0
#define TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_F_OFFSET_MOD16                                                0
#define TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_OFFSET                                                24
#define TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_WIDTH                                                 8
#define TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_OFFSET                                                  4
#define TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WORD_OFFSET                                             1
#define TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_OFFSET_MOD16                                          8
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_OFFSET                                                16
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_WIDTH                                                 8
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_OFFSET                                                  5
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WORD_OFFSET                                             1
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_OFFSET_MOD16                                          0
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_OFFSET                                                8
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_WIDTH                                                 8
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_OFFSET                                                  6
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WORD_OFFSET                                             1
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_OFFSET_MOD16                                          8
#define TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_F_OFFSET                                                        16
#define TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_F_WIDTH                                                         16
#define TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_OFFSET                                                          8
#define TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_WORD_OFFSET                                                     2
#define TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_F_OFFSET                                                     0
#define TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_F_WIDTH                                                      16
#define TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_OFFSET                                                       10
#define TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_WORD_OFFSET                                                  2
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_F_OFFSET                                                       16
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_F_WIDTH                                                        16
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_OFFSET                                                         12
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WORD_OFFSET                                                    3
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_F_OFFSET                                                0
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_F_WIDTH                                                 16
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_OFFSET                                                  14
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WORD_OFFSET                                             3

/* >>>RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	l2_hdr_len      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l3_hdr_len      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l3_protocol     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_hdr_len      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cpu_rx_rdd_queue	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_pppoe_hdr_ofs	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_peer_rx_scale	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wan_flow        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_qm_queue     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_tx_mss       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_tx_max_pd_len	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	tx_hdr_len      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l3_protocol     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l3_hdr_len      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l2_hdr_len      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_peer_rx_scale	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_pppoe_hdr_ofs	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cpu_rx_rdd_queue	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_qm_queue     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wan_flow        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_tx_max_pd_len	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_tx_mss       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS;

typedef RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS * aligned_RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS fields;
} RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS_NEW;
typedef RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS_NEW * aligned_RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS_NEW ALIGNMENT8;

#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_READ_G(r, g, idx)                GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS), r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_WRITE_G(v, g, idx)               GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS), v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_READ(r, p)                       MREAD_8((uint8_t *)p, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_WRITE(v, p)                      MWRITE_8((uint8_t *)p, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_READ_G(r, g, idx)                GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 1, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_WRITE_G(v, g, idx)               GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 1, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_READ(r, p)                       MREAD_8((uint8_t *)p + 1, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_WRITE(v, p)                      MWRITE_8((uint8_t *)p + 1, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_READ_G(r, g, idx)               GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 2, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_WRITE_G(v, g, idx)              GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 2, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_READ(r, p)                      MREAD_8((uint8_t *)p + 2, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_WRITE(v, p)                     MWRITE_8((uint8_t *)p + 2, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_READ_G(r, g, idx)                GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 3, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_WRITE_G(v, g, idx)               GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 3, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_READ(r, p)                       MREAD_8((uint8_t *)p + 3, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_WRITE(v, p)                      MWRITE_8((uint8_t *)p + 3, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 4, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 4, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_READ(r, p)                 MREAD_8((uint8_t *)p + 4, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WRITE(v, p)                MWRITE_8((uint8_t *)p + 4, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 5, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 5, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_READ(r, p)                 MREAD_8((uint8_t *)p + 5, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WRITE(v, p)                MWRITE_8((uint8_t *)p + 5, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 6, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 6, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_READ(r, p)                 MREAD_8((uint8_t *)p + 6, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WRITE(v, p)                MWRITE_8((uint8_t *)p + 6, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_READ_G(r, g, idx)                  GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 8, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_WRITE_G(v, g, idx)                 GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 8, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_READ(r, p)                         MREAD_16((uint8_t *)p + 8, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_WRITE(v, p)                        MWRITE_16((uint8_t *)p + 8, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_READ_G(r, g, idx)               GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 10, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_WRITE_G(v, g, idx)              GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 10, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_READ(r, p)                      MREAD_16((uint8_t *)p + 10, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_WRITE(v, p)                     MWRITE_16((uint8_t *)p + 10, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_READ_G(r, g, idx)                 GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 12, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WRITE_G(v, g, idx)                GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 12, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_READ(r, p)                        MREAD_16((uint8_t *)p + 12, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WRITE(v, p)                       MWRITE_16((uint8_t *)p + 12, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 14, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS) + 14, v)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_READ(r, p)                 MREAD_16((uint8_t *)p + 14, r)
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WRITE(v, p)                MWRITE_16((uint8_t *)p + 14, v)
/* <<<RDD_TCPSPDTEST_ENGINE_CONN_INFO_DTS */

/* <<<RDD_TCPSPDTEST_ENGINE_CONN_INFO */


/* >>>RDD_TCPSPDTEST_ENGINE_TCB */
#define TCPSPDTEST_ENGINE_TCB_RX_PKTS_F_OFFSET                                                         0
#define TCPSPDTEST_ENGINE_TCB_RX_PKTS_F_WIDTH                                                          32
#define TCPSPDTEST_ENGINE_TCB_TCPSPDTEST_ENGINE_TCB_OFFSET                                             0
#define TCPSPDTEST_ENGINE_TCB_RX_PKTS_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_TCB_RX_PKTS_WORD_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_TCB_TXED_PKTS_F_OFFSET                                                       0
#define TCPSPDTEST_ENGINE_TCB_TXED_PKTS_F_WIDTH                                                        32
#define TCPSPDTEST_ENGINE_TCB_TXED_PKTS_OFFSET                                                         4
#define TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WORD_OFFSET                                                    1
#define TCPSPDTEST_ENGINE_TCB_FREED_PKTS_F_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_TCB_FREED_PKTS_F_WIDTH                                                       32
#define TCPSPDTEST_ENGINE_TCB_FREED_PKTS_OFFSET                                                        8
#define TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WORD_OFFSET                                                   2
#define TCPSPDTEST_ENGINE_TCB_ACK_SEQ_F_OFFSET                                                         0
#define TCPSPDTEST_ENGINE_TCB_ACK_SEQ_F_WIDTH                                                          32
#define TCPSPDTEST_ENGINE_TCB_ACK_SEQ_OFFSET                                                           12
#define TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WORD_OFFSET                                                      3
#define TCPSPDTEST_ENGINE_TCB_TX_SEQ_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_TCB_TX_SEQ_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_TCB_TX_SEQ_OFFSET                                                            16
#define TCPSPDTEST_ENGINE_TCB_TX_SEQ_WORD_OFFSET                                                       4
#define TCPSPDTEST_ENGINE_TCB_BAD_PKTS_F_OFFSET                                                        0
#define TCPSPDTEST_ENGINE_TCB_BAD_PKTS_F_WIDTH                                                         32
#define TCPSPDTEST_ENGINE_TCB_BAD_PKTS_OFFSET                                                          20
#define TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WORD_OFFSET                                                     5
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_F_OFFSET                                                       0
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_F_WIDTH                                                        32
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_OFFSET                                                         24
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WORD_OFFSET                                                    6
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_F_OFFSET                                                     0
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_F_WIDTH                                                      32
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_OFFSET                                                       28
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WORD_OFFSET                                                  7
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_F_OFFSET                                                        0
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_F_WIDTH                                                         32
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_OFFSET                                                          32
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_WORD_OFFSET                                                     8
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_F_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_F_WIDTH                                                       32
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_OFFSET                                                        36
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WORD_OFFSET                                                   9
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_F_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_F_WIDTH                                                   32
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_OFFSET                                                    40
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WORD_OFFSET                                               10
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_F_OFFSET                                                0
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_F_WIDTH                                                 32
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_OFFSET                                                  44
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WORD_OFFSET                                             11
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_F_OFFSET                                                0
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_F_WIDTH                                                 32
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_OFFSET                                                  48
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WORD_OFFSET                                             12
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_F_OFFSET                                              0
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_F_WIDTH                                               32
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_OFFSET                                                52
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WORD_OFFSET                                           13
#define TCPSPDTEST_ENGINE_TCB_NO_CREDITS_F_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_TCB_NO_CREDITS_F_WIDTH                                                       32
#define TCPSPDTEST_ENGINE_TCB_NO_CREDITS_OFFSET                                                        56
#define TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WORD_OFFSET                                                   14
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_F_OFFSET                                                         0
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_F_WIDTH                                                          32
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_OFFSET                                                           60
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_WORD_OFFSET                                                      15
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_F_OFFSET                                                     0
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_F_WIDTH                                                      32
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_OFFSET                                                       64
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WORD_OFFSET                                                  16
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_F_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_F_WIDTH                                                   32
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_OFFSET                                                    68
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WORD_OFFSET                                               17
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_F_OFFSET                                                 0
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_F_WIDTH                                                  32
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_OFFSET                                                   72
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WORD_OFFSET                                              18
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_F_OFFSET                                                0
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_F_WIDTH                                                 32
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_OFFSET                                                  76
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WORD_OFFSET                                             19
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_F_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_F_WIDTH                                                   32
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_OFFSET                                                    80
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WORD_OFFSET                                               20
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_F_OFFSET                                             0
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_F_WIDTH                                              32
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_OFFSET                                               84
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WORD_OFFSET                                          21
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_F_OFFSET                                       16
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_F_WIDTH                                        16
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_OFFSET                                         88
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WORD_OFFSET                                    22
#define TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_F_OFFSET                                             0
#define TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_F_WIDTH                                              16
#define TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_OFFSET                                               90
#define TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WORD_OFFSET                                          22
#define TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_F_OFFSET                                                  16
#define TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_F_WIDTH                                                   16
#define TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_OFFSET                                                    92
#define TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_WORD_OFFSET                                               23
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_OFFSET                                                8
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_WIDTH                                                 8
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_OFFSET                                                  94
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WORD_OFFSET                                             23
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_OFFSET_MOD16                                          8
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET                                               2
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_WIDTH                                                1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_OFFSET                                                 95
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WORD_OFFSET                                            23
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET_MOD8                                          2
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET_MOD16                                         2
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET                                                   1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_WIDTH                                                    1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_OFFSET                                                     95
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WORD_OFFSET                                                23
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET_MOD8                                              1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET_MOD16                                             1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET                                                    0
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_WIDTH                                                     1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_OFFSET                                                      95
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WORD_OFFSET                                                 23
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET_MOD8                                               0
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET_MOD16                                              0

/* >>>RDD_TCPSPDTEST_ENGINE_TCB_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	rx_pkts                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	txed_pkts                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	freed_pkts               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ack_seq                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_seq                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_pkts                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_bytes                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_bytes_1              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_bytes                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_bytes_1               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	expected_bytes           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	expected_bytes_1         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_to_send_bytes         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_to_send_bytes_1       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_credits               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_cwnd                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_cwnd_thr              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_cwnd_budget           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_last_ack_seq          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_last_ack_time         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_dup_ack_cnt           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_dup_ack_seq_done      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_dup_ack_total_pkts_cnt	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_fast_retrans_cnt      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_timeout_cnt           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_dup_ack_state         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_is_rx_win_stop        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_is_timeout            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_is_active             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	rx_pkts                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	txed_pkts                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	freed_pkts               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ack_seq                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_seq                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_pkts                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_bytes                	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bad_bytes_1              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_bytes                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rx_bytes_1               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	expected_bytes           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	expected_bytes_1         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_to_send_bytes         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_to_send_bytes_1       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_credits               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_cwnd                  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_cwnd_thr              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_cwnd_budget           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_last_ack_seq          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_last_ack_time         	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_dup_ack_cnt           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_dup_ack_seq_done      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_fast_retrans_cnt      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_dup_ack_total_pkts_cnt	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_is_active             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_is_timeout            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_is_rx_win_stop        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_dup_ack_state         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	up_timeout_cnt           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCPSPDTEST_ENGINE_TCB_DTS;

typedef RDD_TCPSPDTEST_ENGINE_TCB_DTS * aligned_RDD_TCPSPDTEST_ENGINE_TCB_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[24];
    uint64_t dword_val64[12];
    RDD_TCPSPDTEST_ENGINE_TCB_DTS fields;
} RDD_TCPSPDTEST_ENGINE_TCB_DTS_NEW;
typedef RDD_TCPSPDTEST_ENGINE_TCB_DTS_NEW * aligned_RDD_TCPSPDTEST_ENGINE_TCB_DTS_NEW ALIGNMENT8;

#define RDD_TCPSPDTEST_ENGINE_TCB_RX_PKTS_READ_G(r, g, idx)                            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS), r)
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_PKTS_WRITE_G(v, g, idx)                           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS), v)
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_PKTS_READ(r, p)                                   MREAD_32((uint8_t *)p, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_PKTS_WRITE(v, p)                                  MWRITE_32((uint8_t *)p, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_READ_G(r, g, idx)                          GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 4, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WRITE_G(v, g, idx)                         GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 4, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_READ(r, p)                                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WRITE(v, p)                                MWRITE_32((uint8_t *)p + 4, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_READ_G(r, g, idx)                         GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 8, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WRITE_G(v, g, idx)                        GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 8, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_READ(r, p)                                MREAD_32((uint8_t *)p + 8, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WRITE(v, p)                               MWRITE_32((uint8_t *)p + 8, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_READ_G(r, g, idx)                            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 12, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WRITE_G(v, g, idx)                           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 12, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_READ(r, p)                                   MREAD_32((uint8_t *)p + 12, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WRITE(v, p)                                  MWRITE_32((uint8_t *)p + 12, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_TX_SEQ_READ_G(r, g, idx)                             GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 16, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_TX_SEQ_WRITE_G(v, g, idx)                            GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 16, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_TX_SEQ_READ(r, p)                                    MREAD_32((uint8_t *)p + 16, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_TX_SEQ_WRITE(v, p)                                   MWRITE_32((uint8_t *)p + 16, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_READ_G(r, g, idx)                           GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 20, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WRITE_G(v, g, idx)                          GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 20, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_READ(r, p)                                  MREAD_32((uint8_t *)p + 20, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WRITE(v, p)                                 MWRITE_32((uint8_t *)p + 20, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_READ_G(r, g, idx)                          GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 24, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WRITE_G(v, g, idx)                         GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 24, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_READ(r, p)                                 MREAD_32((uint8_t *)p + 24, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WRITE(v, p)                                MWRITE_32((uint8_t *)p + 24, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_READ_G(r, g, idx)                        GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 28, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WRITE_G(v, g, idx)                       GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 28, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_READ(r, p)                               MREAD_32((uint8_t *)p + 28, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WRITE(v, p)                              MWRITE_32((uint8_t *)p + 28, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_READ_G(r, g, idx)                           GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 32, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_WRITE_G(v, g, idx)                          GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 32, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_READ(r, p)                                  MREAD_32((uint8_t *)p + 32, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_WRITE(v, p)                                 MWRITE_32((uint8_t *)p + 32, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_READ_G(r, g, idx)                         GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 36, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WRITE_G(v, g, idx)                        GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 36, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_READ(r, p)                                MREAD_32((uint8_t *)p + 36, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WRITE(v, p)                               MWRITE_32((uint8_t *)p + 36, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 40, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 40, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_READ(r, p)                            MREAD_32((uint8_t *)p + 40, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 40, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 44, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 44, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_READ(r, p)                          MREAD_32((uint8_t *)p + 44, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 44, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 48, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 48, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_READ(r, p)                          MREAD_32((uint8_t *)p + 48, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 48, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_READ_G(r, g, idx)                 GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 52, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WRITE_G(v, g, idx)                GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 52, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_READ(r, p)                        MREAD_32((uint8_t *)p + 52, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WRITE(v, p)                       MWRITE_32((uint8_t *)p + 52, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_READ_G(r, g, idx)                         GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 56, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WRITE_G(v, g, idx)                        GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 56, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_READ(r, p)                                MREAD_32((uint8_t *)p + 56, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WRITE(v, p)                               MWRITE_32((uint8_t *)p + 56, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_READ_G(r, g, idx)                            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 60, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_WRITE_G(v, g, idx)                           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 60, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_READ(r, p)                                   MREAD_32((uint8_t *)p + 60, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_WRITE(v, p)                                  MWRITE_32((uint8_t *)p + 60, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_READ_G(r, g, idx)                        GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 64, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WRITE_G(v, g, idx)                       GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 64, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_READ(r, p)                               MREAD_32((uint8_t *)p + 64, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WRITE(v, p)                              MWRITE_32((uint8_t *)p + 64, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 68, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 68, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_READ(r, p)                            MREAD_32((uint8_t *)p + 68, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 68, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_READ_G(r, g, idx)                    GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 72, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WRITE_G(v, g, idx)                   GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 72, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_READ(r, p)                           MREAD_32((uint8_t *)p + 72, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WRITE(v, p)                          MWRITE_32((uint8_t *)p + 72, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_READ_G(r, g, idx)                   GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 76, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WRITE_G(v, g, idx)                  GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 76, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_READ(r, p)                          MREAD_32((uint8_t *)p + 76, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WRITE(v, p)                         MWRITE_32((uint8_t *)p + 76, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 80, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 80, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_READ(r, p)                            MREAD_32((uint8_t *)p + 80, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 80, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 84, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 84, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_READ(r, p)                       MREAD_32((uint8_t *)p + 84, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 84, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 88, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 88, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_READ(r, p)                 MREAD_16((uint8_t *)p + 88, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WRITE(v, p)                MWRITE_16((uint8_t *)p + 88, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 90, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 90, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_READ(r, p)                       MREAD_16((uint8_t *)p + 90, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WRITE(v, p)                      MWRITE_16((uint8_t *)p + 90, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_READ_G(r, g, idx)                     GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 92, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_WRITE_G(v, g, idx)                    GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 92, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_READ(r, p)                            MREAD_16((uint8_t *)p + 92, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_WRITE(v, p)                           MWRITE_16((uint8_t *)p + 92, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_READ_G(r, g, idx)                   GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 94, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WRITE_G(v, g, idx)                  GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 94, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_READ(r, p)                          MREAD_8((uint8_t *)p + 94, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WRITE(v, p)                         MWRITE_8((uint8_t *)p + 94, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 95, 2, 1, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 95, 2, 1, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 95, 2, 1, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 95, 2, 1, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 95, 1, 1, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 95, 1, 1, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 95, 1, 1, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 95, 1, 1, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 95, 0, 1, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_TCB_DTS) + 95, 0, 1, v)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 95, 0, 1, r)
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 95, 0, 1, v)
/* <<<RDD_TCPSPDTEST_ENGINE_TCB_DTS */

/* <<<RDD_TCPSPDTEST_ENGINE_TCB */


/* >>>RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR */
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_F_OFFSET                                                            16
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_F_WIDTH                                                             16
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET                                     0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_OFFSET                                                              0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_WORD_OFFSET                                                         0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_F_WIDTH                                                           16
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_OFFSET                                                            2
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_WORD_OFFSET                                                       0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_F_OFFSET                                                             0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_F_WIDTH                                                              32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_OFFSET                                                               8
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_WORD_OFFSET                                                          2
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_F_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_F_WIDTH                                                            32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_OFFSET                                                             12
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_WORD_OFFSET                                                        3
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_F_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_F_WIDTH                                                            32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_OFFSET                                                             16
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_WORD_OFFSET                                                        4
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_F_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_F_WIDTH                                                            32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_OFFSET                                                             20
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_WORD_OFFSET                                                        5
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_F_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_F_WIDTH                                                            32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_OFFSET                                                             24
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_WORD_OFFSET                                                        6
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_F_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_F_WIDTH                                                            32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_OFFSET                                                             28
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_WORD_OFFSET                                                        7
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_F_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_F_WIDTH                                                            32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_OFFSET                                                             32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_WORD_OFFSET                                                        8
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_F_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_F_WIDTH                                                            32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_OFFSET                                                             36
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_WORD_OFFSET                                                        9
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_F_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_F_WIDTH                                                            32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_OFFSET                                                             40
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_WORD_OFFSET                                                        10
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_F_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_F_WIDTH                                                            32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_OFFSET                                                             44
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_WORD_OFFSET                                                        11
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_OFFSET                                                            48
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_WORD_OFFSET                                                       12
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_OFFSET                                                            52
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_WORD_OFFSET                                                       13
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_OFFSET                                                            56
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_WORD_OFFSET                                                       14
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_OFFSET                                                            60
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_WORD_OFFSET                                                       15
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_OFFSET                                                            64
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_WORD_OFFSET                                                       16
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_OFFSET                                                            68
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_WORD_OFFSET                                                       17
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_OFFSET                                                            72
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_WORD_OFFSET                                                       18
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_OFFSET                                                            76
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_WORD_OFFSET                                                       19
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_OFFSET                                                            80
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_WORD_OFFSET                                                       20
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_OFFSET                                                            84
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_WORD_OFFSET                                                       21
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_OFFSET                                                            88
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_WORD_OFFSET                                                       22
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_OFFSET                                                            92
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_WORD_OFFSET                                                       23
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_OFFSET                                                            96
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_WORD_OFFSET                                                       24
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_OFFSET                                                            100
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_WORD_OFFSET                                                       25
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_OFFSET                                                            104
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_WORD_OFFSET                                                       26
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_OFFSET                                                            108
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_WORD_OFFSET                                                       27
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_OFFSET                                                            112
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_WORD_OFFSET                                                       28
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_OFFSET                                                            116
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_WORD_OFFSET                                                       29
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_OFFSET                                                            120
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_WORD_OFFSET                                                       30
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_OFFSET                                                            124
#define TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_WORD_OFFSET                                                       31

/* >>>RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	size      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	offset    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_1     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_2     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_3     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_4     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_5     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_6     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_7     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_8     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_9     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_10    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_11    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_12    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_13    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_14    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_15    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_16    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_17    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_18    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_19    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_20    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_21    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_22    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_23    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_24    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_25    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_26    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_27    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_28    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_29    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	offset    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	size      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_1     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_2     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_3     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_4     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_5     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_6     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_7     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_8     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_9     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_10    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_11    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_12    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_13    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_14    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_15    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_16    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_17    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_18    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_19    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_20    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_21    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_22    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_23    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_24    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_25    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_26    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_27    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_28    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_29    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS;

typedef RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS * aligned_RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[32];
    uint64_t dword_val64[16];
    RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS fields;
} RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS_NEW;
typedef RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS_NEW * aligned_RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS_NEW ALIGNMENT8;

#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_READ_G(r, g, idx)              GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS), r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_WRITE_G(v, g, idx)             GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS), v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_READ(r, p)                     MREAD_16((uint8_t *)p, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_WRITE(v, p)                    MWRITE_16((uint8_t *)p, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_READ_G(r, g, idx)            GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 2, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_WRITE_G(v, g, idx)           GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 2, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_READ(r, p)                   MREAD_16((uint8_t *)p + 2, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_WRITE(v, p)                  MWRITE_16((uint8_t *)p + 2, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 8, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 8, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_READ(r, p)                      MREAD_32((uint8_t *)p + 8, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 8, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 12, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 12, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_READ(r, p)                    MREAD_32((uint8_t *)p + 12, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 12, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 16, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 16, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_READ(r, p)                    MREAD_32((uint8_t *)p + 16, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 16, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 20, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 20, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_READ(r, p)                    MREAD_32((uint8_t *)p + 20, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 20, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 24, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 24, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_READ(r, p)                    MREAD_32((uint8_t *)p + 24, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 24, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 28, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 28, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_READ(r, p)                    MREAD_32((uint8_t *)p + 28, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 28, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 32, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 32, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_READ(r, p)                    MREAD_32((uint8_t *)p + 32, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 32, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 36, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 36, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_READ(r, p)                    MREAD_32((uint8_t *)p + 36, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 36, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 40, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 40, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_READ(r, p)                    MREAD_32((uint8_t *)p + 40, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 40, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 44, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 44, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_READ(r, p)                    MREAD_32((uint8_t *)p + 44, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_WRITE(v, p)                   MWRITE_32((uint8_t *)p + 44, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 48, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 48, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_READ(r, p)                   MREAD_32((uint8_t *)p + 48, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 48, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 52, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 52, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_READ(r, p)                   MREAD_32((uint8_t *)p + 52, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 52, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 56, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 56, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_READ(r, p)                   MREAD_32((uint8_t *)p + 56, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 56, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 60, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 60, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_READ(r, p)                   MREAD_32((uint8_t *)p + 60, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 60, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 64, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 64, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_READ(r, p)                   MREAD_32((uint8_t *)p + 64, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 64, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 68, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 68, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_READ(r, p)                   MREAD_32((uint8_t *)p + 68, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 68, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 72, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 72, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_READ(r, p)                   MREAD_32((uint8_t *)p + 72, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 72, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 76, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 76, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_READ(r, p)                   MREAD_32((uint8_t *)p + 76, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 76, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 80, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 80, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_READ(r, p)                   MREAD_32((uint8_t *)p + 80, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 80, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 84, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 84, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_READ(r, p)                   MREAD_32((uint8_t *)p + 84, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 84, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 88, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 88, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_READ(r, p)                   MREAD_32((uint8_t *)p + 88, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 88, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 92, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 92, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_READ(r, p)                   MREAD_32((uint8_t *)p + 92, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 92, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 96, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 96, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_READ(r, p)                   MREAD_32((uint8_t *)p + 96, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 96, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 100, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 100, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_READ(r, p)                   MREAD_32((uint8_t *)p + 100, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 100, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 104, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 104, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_READ(r, p)                   MREAD_32((uint8_t *)p + 104, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 104, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 108, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 108, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_READ(r, p)                   MREAD_32((uint8_t *)p + 108, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 108, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 112, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 112, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_READ(r, p)                   MREAD_32((uint8_t *)p + 112, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 112, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 116, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 116, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_READ(r, p)                   MREAD_32((uint8_t *)p + 116, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 116, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 120, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 120, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_READ(r, p)                   MREAD_32((uint8_t *)p + 120, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 120, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 124, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS) + 124, v)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_READ(r, p)                   MREAD_32((uint8_t *)p + 124, r)
#define RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_WRITE(v, p)                  MWRITE_32((uint8_t *)p + 124, v)
/* <<<RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR_DTS */

/* <<<RDD_TCPSPDTEST_ENGINE_REF_PKT_HDR */


/* >>>RDD_TCPSPDTEST_ENGINE_PKT_DROP */
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_OFFSET                                                         24
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_WIDTH                                                          8
#define TCPSPDTEST_ENGINE_PKT_DROP_TCPSPDTEST_ENGINE_PKT_DROP_OFFSET                                        0
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WORD_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_OFFSET_MOD16                                                   8
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_OFFSET                                                     16
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_WIDTH                                                      8
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_OFFSET                                                       1
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WORD_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_OFFSET_MOD16                                               0
#define TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_F_OFFSET                                                        0
#define TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_F_WIDTH                                                         16
#define TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_OFFSET                                                          2
#define TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WORD_OFFSET                                                     0
#define TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_F_OFFSET                                                          16
#define TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_F_WIDTH                                                           16
#define TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_OFFSET                                                            4
#define TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WORD_OFFSET                                                       1
#define TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_F_WIDTH                                                           16
#define TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_OFFSET                                                            6
#define TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WORD_OFFSET                                                       1
#define TCPSPDTEST_ENGINE_PKT_DROP_SEQ_OFFSET                                                               8
#define TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WORD_OFFSET                                                          2

/* >>>RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS */
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER	32

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	is_drop                                           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_win_full                                       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	num_errs                                          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wr_ofs                                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rd_ofs                                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	seq[RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER];
#else
	uint32_t	num_errs                                          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_win_full                                       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_drop                                           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rd_ofs                                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wr_ofs                                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	seq[RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS;

typedef RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS * aligned_RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[34];
    uint64_t dword_val64[17];
    RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS fields;
} RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS_NEW;
typedef RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS_NEW * aligned_RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS_NEW ALIGNMENT8;

#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_READ_G(r, g, idx)              GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS), r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WRITE_G(v, g, idx)             GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS), v)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_READ(r, p)                     MREAD_8((uint8_t *)p, r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WRITE(v, p)                    MWRITE_8((uint8_t *)p, v)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS) + 1, r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS) + 1, v)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_READ(r, p)                 MREAD_8((uint8_t *)p + 1, r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WRITE(v, p)                MWRITE_8((uint8_t *)p + 1, v)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_READ_G(r, g, idx)             GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS) + 2, r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WRITE_G(v, g, idx)            GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS) + 2, v)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_READ(r, p)                    MREAD_16((uint8_t *)p + 2, r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WRITE(v, p)                   MWRITE_16((uint8_t *)p + 2, v)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_READ_G(r, g, idx)               GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS) + 4, r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WRITE_G(v, g, idx)              GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS) + 4, v)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_READ(r, p)                      MREAD_16((uint8_t *)p + 4, r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WRITE(v, p)                     MWRITE_16((uint8_t *)p + 4, v)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_READ_G(r, g, idx)               GROUP_MREAD_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS) + 6, r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WRITE_G(v, g, idx)              GROUP_MWRITE_16(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS) + 6, v)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_READ(r, p)                      MREAD_16((uint8_t *)p + 6, r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WRITE(v, p)                     MWRITE_16((uint8_t *)p + 6, v)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_READ_G(r, g, idx, i)               GROUP_MREAD_I_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS) + 8, i, r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WRITE_G(v, g, idx, i)              GROUP_MWRITE_I_32(g, idx*sizeof(RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS) + 8, i, v)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_READ(r, p, i)                      MREAD_I_32((uint8_t *)p + 8, i, r)
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WRITE(v, p, i)                     MWRITE_I_32((uint8_t *)p + 8, i, v)
/* <<<RDD_TCPSPDTEST_ENGINE_PKT_DROP_DTS */

/* <<<RDD_TCPSPDTEST_ENGINE_PKT_DROP */


/* >>>RDD_TCPSPDTEST_STREAM */
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_F_OFFSET                          24
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_F_WIDTH                           8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_OFFSET                                       0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_WORD_OFFSET                       0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L2_HDR_LEN_F_OFFSET_MOD16                    8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_F_OFFSET                          16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_F_WIDTH                           8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_OFFSET                            1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_WORD_OFFSET                       0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_HDR_LEN_F_OFFSET_MOD16                    0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_F_OFFSET                         8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_F_WIDTH                          8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_OFFSET                           2
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_WORD_OFFSET                      0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_L3_PROTOCOL_F_OFFSET_MOD16                   8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_F_OFFSET                          0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_F_WIDTH                           8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_OFFSET                            3
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_WORD_OFFSET                       0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_HDR_LEN_F_OFFSET_MOD16                    0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_OFFSET                    24
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_WIDTH                     8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_OFFSET                      4
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WORD_OFFSET                 1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_OFFSET_MOD16              8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_OFFSET                    16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_WIDTH                     8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_OFFSET                      5
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WORD_OFFSET                 1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_OFFSET_MOD16              0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_OFFSET                    8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_WIDTH                     8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_OFFSET                      6
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WORD_OFFSET                 1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_OFFSET_MOD16              8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_RESERVED0_F_OFFSET                           0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_RESERVED0_F_WIDTH                            8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_RESERVED0_OFFSET                             7
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_RESERVED0_WORD_OFFSET                        1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_RESERVED0_F_OFFSET_MOD16                     0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_F_OFFSET                            16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_F_WIDTH                             16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_OFFSET                              8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_WAN_FLOW_WORD_OFFSET                         2
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_F_OFFSET                         0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_F_WIDTH                          16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_OFFSET                           10
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_TX_QM_QUEUE_WORD_OFFSET                      2
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_F_OFFSET                           16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_F_WIDTH                            16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_OFFSET                             12
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WORD_OFFSET                        3
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_F_OFFSET                    0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_F_WIDTH                     16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_OFFSET                      14
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WORD_OFFSET                 3
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_F_OFFSET                                   0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_F_WIDTH                                    32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_OFFSET                                             16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_OFFSET                                     16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_WORD_OFFSET                                4
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_F_OFFSET                                 0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_F_WIDTH                                  32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_OFFSET                                   20
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WORD_OFFSET                              5
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_F_OFFSET                                0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_F_WIDTH                                 32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_OFFSET                                  24
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WORD_OFFSET                             6
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_F_OFFSET                                   0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_F_WIDTH                                    32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_OFFSET                                     28
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WORD_OFFSET                                7
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_F_OFFSET                                    0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_F_WIDTH                                     32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_OFFSET                                      32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_WORD_OFFSET                                 8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_F_OFFSET                                  0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_F_WIDTH                                   32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_OFFSET                                    36
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WORD_OFFSET                               9
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_F_OFFSET                                 0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_F_WIDTH                                  32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_OFFSET                                   40
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WORD_OFFSET                              10
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_F_OFFSET                               0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_F_WIDTH                                32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_OFFSET                                 44
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WORD_OFFSET                            11
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_F_OFFSET                                  0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_F_WIDTH                                   32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_OFFSET                                    48
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_WORD_OFFSET                               12
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_F_OFFSET                                0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_F_WIDTH                                 32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_OFFSET                                  52
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WORD_OFFSET                             13
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_OFFSET                              56
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WORD_OFFSET                         14
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_F_OFFSET                          0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_F_WIDTH                           32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_OFFSET                            60
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WORD_OFFSET                       15
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_F_OFFSET                          0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_F_WIDTH                           32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_OFFSET                            64
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WORD_OFFSET                       16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_F_OFFSET                        0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_F_WIDTH                         32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_OFFSET                          68
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WORD_OFFSET                     17
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_F_OFFSET                                0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_F_WIDTH                                 32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_OFFSET                                  72
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WORD_OFFSET                             18
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_F_OFFSET                                   0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_F_WIDTH                                    32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_OFFSET                                     76
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_WORD_OFFSET                                19
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_F_OFFSET                               0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_F_WIDTH                                32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_OFFSET                                 80
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WORD_OFFSET                            20
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_OFFSET                              84
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WORD_OFFSET                         21
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_F_OFFSET                           0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_F_WIDTH                            32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_OFFSET                             88
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WORD_OFFSET                        22
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_F_OFFSET                          0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_F_WIDTH                           32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_OFFSET                            92
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WORD_OFFSET                       23
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_OFFSET                              96
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WORD_OFFSET                         24
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_F_OFFSET                       0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_F_WIDTH                        32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_OFFSET                         100
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WORD_OFFSET                    25
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_F_OFFSET                 16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_F_WIDTH                  16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_OFFSET                   104
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WORD_OFFSET              26
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_F_OFFSET                       0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_F_WIDTH                        16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_OFFSET                         106
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WORD_OFFSET                    26
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_F_OFFSET                            16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_F_WIDTH                             16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_OFFSET                              108
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TIMEOUT_CNT_WORD_OFFSET                         27
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_OFFSET                          8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_WIDTH                           8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_OFFSET                            110
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WORD_OFFSET                       27
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_OFFSET_MOD16                    8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_F_OFFSET                                 3
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_F_WIDTH                                  5
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_OFFSET                                   111
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_WORD_OFFSET                              27
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_F_OFFSET_MOD8                            3
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_F_OFFSET_MOD16                           3
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET                         2
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_WIDTH                          1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_OFFSET                           111
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WORD_OFFSET                      27
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET_MOD8                    2
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET_MOD16                   2
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET                             1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_WIDTH                              1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_OFFSET                               111
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WORD_OFFSET                          27
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET_MOD8                        1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET_MOD16                       1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET                              0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_WIDTH                               1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_OFFSET                                111
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WORD_OFFSET                           27
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET_MOD8                         0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET_MOD16                        0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_F_OFFSET                              16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_F_WIDTH                               16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET                                     112
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_OFFSET                                112
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_SIZE_WORD_OFFSET                           28
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_F_WIDTH                             16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_OFFSET                              114
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_OFFSET_WORD_OFFSET                         28
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_RESERVED_F_OFFSET                          0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_RESERVED_F_WIDTH                           32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_RESERVED_OFFSET                            116
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_RESERVED_WORD_OFFSET                       29
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_F_OFFSET                               0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_F_WIDTH                                32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_OFFSET                                 120
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_WORD_OFFSET                            30
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_F_OFFSET                             0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_F_WIDTH                              32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_OFFSET                               124
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_1_WORD_OFFSET                          31
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_F_OFFSET                             0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_F_WIDTH                              32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_OFFSET                               128
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_2_WORD_OFFSET                          32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_F_OFFSET                             0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_F_WIDTH                              32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_OFFSET                               132
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_3_WORD_OFFSET                          33
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_F_OFFSET                             0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_F_WIDTH                              32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_OFFSET                               136
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_4_WORD_OFFSET                          34
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_F_OFFSET                             0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_F_WIDTH                              32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_OFFSET                               140
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_5_WORD_OFFSET                          35
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_F_OFFSET                             0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_F_WIDTH                              32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_OFFSET                               144
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_6_WORD_OFFSET                          36
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_F_OFFSET                             0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_F_WIDTH                              32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_OFFSET                               148
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_7_WORD_OFFSET                          37
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_F_OFFSET                             0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_F_WIDTH                              32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_OFFSET                               152
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_8_WORD_OFFSET                          38
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_F_OFFSET                             0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_F_WIDTH                              32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_OFFSET                               156
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_9_WORD_OFFSET                          39
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_OFFSET                              160
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_10_WORD_OFFSET                         40
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_OFFSET                              164
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_11_WORD_OFFSET                         41
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_OFFSET                              168
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_12_WORD_OFFSET                         42
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_OFFSET                              172
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_13_WORD_OFFSET                         43
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_OFFSET                              176
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_14_WORD_OFFSET                         44
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_OFFSET                              180
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_15_WORD_OFFSET                         45
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_OFFSET                              184
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_16_WORD_OFFSET                         46
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_OFFSET                              188
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_17_WORD_OFFSET                         47
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_OFFSET                              192
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_18_WORD_OFFSET                         48
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_OFFSET                              196
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_19_WORD_OFFSET                         49
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_OFFSET                              200
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_20_WORD_OFFSET                         50
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_OFFSET                              204
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_21_WORD_OFFSET                         51
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_OFFSET                              208
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_22_WORD_OFFSET                         52
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_OFFSET                              212
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_23_WORD_OFFSET                         53
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_OFFSET                              216
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_24_WORD_OFFSET                         54
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_OFFSET                              220
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_25_WORD_OFFSET                         55
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_OFFSET                              224
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_26_WORD_OFFSET                         56
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_OFFSET                              228
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_27_WORD_OFFSET                         57
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_OFFSET                              232
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_28_WORD_OFFSET                         58
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_OFFSET                              236
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_REF_PKT_HDR_HDR_29_WORD_OFFSET                         59
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_OFFSET                              24
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_WIDTH                               8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_OFFSET                                        240
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_OFFSET                                240
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WORD_OFFSET                           60
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_OFFSET_MOD16                        8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_OFFSET                          16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_WIDTH                           8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_OFFSET                            241
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WORD_OFFSET                       60
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_OFFSET_MOD16                    0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_F_OFFSET                             0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_F_WIDTH                              16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_OFFSET                               242
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WORD_OFFSET                          60
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_F_OFFSET                               16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_F_WIDTH                                16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_OFFSET                                 244
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WORD_OFFSET                            61
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_F_OFFSET                               0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_F_WIDTH                                16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_OFFSET                                 246
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WORD_OFFSET                            61
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_OFFSET                                    248
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WORD_OFFSET                               62
/* <<<RDD_TCPSPDTEST_STREAM */


/* >>>RDD_DEBUG_PRINT_HEADER */
#define DEBUG_PRINT_HEADER_PRINT_MARK_F_OFFSET                                                      24
#define DEBUG_PRINT_HEADER_PRINT_MARK_F_WIDTH                                                       8
#define DEBUG_PRINT_HEADER_DEBUG_PRINT_HEADER_OFFSET                                                0
#define DEBUG_PRINT_HEADER_PRINT_MARK_OFFSET                                                        0
#define DEBUG_PRINT_HEADER_PRINT_MARK_WORD_OFFSET                                                   0
#define DEBUG_PRINT_HEADER_PRINT_MARK_F_OFFSET_MOD16                                                8
#define DEBUG_PRINT_HEADER_CORE_ID_F_OFFSET                                                         20
#define DEBUG_PRINT_HEADER_CORE_ID_F_WIDTH                                                          4
#define DEBUG_PRINT_HEADER_CORE_ID_OFFSET                                                           1
#define DEBUG_PRINT_HEADER_CORE_ID_WORD_OFFSET                                                      0
#define DEBUG_PRINT_HEADER_CORE_ID_F_OFFSET_MOD8                                                    4
#define DEBUG_PRINT_HEADER_CORE_ID_F_OFFSET_MOD16                                                   4
#define DEBUG_PRINT_HEADER_TASK_ID_F_OFFSET                                                         16
#define DEBUG_PRINT_HEADER_TASK_ID_F_WIDTH                                                          4
#define DEBUG_PRINT_HEADER_TASK_ID_OFFSET                                                           1
#define DEBUG_PRINT_HEADER_TASK_ID_WORD_OFFSET                                                      0
#define DEBUG_PRINT_HEADER_TASK_ID_F_OFFSET_MOD8                                                    0
#define DEBUG_PRINT_HEADER_TASK_ID_F_OFFSET_MOD16                                                   0
#define DEBUG_PRINT_HEADER_PRINT_PRIO_F_OFFSET                                                      14
#define DEBUG_PRINT_HEADER_PRINT_PRIO_F_WIDTH                                                       2
#define DEBUG_PRINT_HEADER_PRINT_PRIO_OFFSET                                                        2
#define DEBUG_PRINT_HEADER_PRINT_PRIO_WORD_OFFSET                                                   0
#define DEBUG_PRINT_HEADER_PRINT_PRIO_F_OFFSET_MOD8                                                 6
#define DEBUG_PRINT_HEADER_PRINT_PRIO_F_OFFSET_MOD16                                                14
#define DEBUG_PRINT_HEADER_MSG_LEN_F_OFFSET                                                         11
#define DEBUG_PRINT_HEADER_MSG_LEN_F_WIDTH                                                          3
#define DEBUG_PRINT_HEADER_MSG_LEN_OFFSET                                                           2
#define DEBUG_PRINT_HEADER_MSG_LEN_WORD_OFFSET                                                      0
#define DEBUG_PRINT_HEADER_MSG_LEN_F_OFFSET_MOD8                                                    3
#define DEBUG_PRINT_HEADER_MSG_LEN_F_OFFSET_MOD16                                                   11
#define DEBUG_PRINT_HEADER_STRING_ID_F_OFFSET                                                       0
#define DEBUG_PRINT_HEADER_STRING_ID_F_WIDTH                                                        11
#define DEBUG_PRINT_HEADER_STRING_ID_OFFSET                                                         2
#define DEBUG_PRINT_HEADER_STRING_ID_WORD_OFFSET                                                    0
#define DEBUG_PRINT_HEADER_STRING_ID_F_OFFSET_MOD16                                                 0

/* >>>RDD_DEBUG_PRINT_HEADER_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	print_mark	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	core_id   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	task_id   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	print_prio	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	msg_len   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	string_id 	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	string_id 	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	msg_len   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	print_prio	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	task_id   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	core_id   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	print_mark	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DEBUG_PRINT_HEADER_DTS;

typedef RDD_DEBUG_PRINT_HEADER_DTS * aligned_RDD_DEBUG_PRINT_HEADER_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_DEBUG_PRINT_HEADER_DTS fields;
} RDD_DEBUG_PRINT_HEADER_DTS_NEW;
typedef RDD_DEBUG_PRINT_HEADER_DTS_NEW * aligned_RDD_DEBUG_PRINT_HEADER_DTS_NEW ALIGNMENT8;

#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS), r)
#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS), v)
#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_READ(r, p)                 MREAD_8((uint8_t *)p, r)
#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_WRITE(v, p)                MWRITE_8((uint8_t *)p, v)
#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_L_READ( wv )               FIELD_GET( wv, 24, 8 )
#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_L_WRITE( v, wv )           FIELD_SET( v, 24, 8, wv )
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS) + 1, 4, 4, r)
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS) + 1, 4, 4, v)
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 1, 4, 4, r)
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 1, 4, 4, v)
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_L_READ( wv )                  FIELD_GET( wv, 20, 4 )
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_L_WRITE( v, wv )              FIELD_SET( v, 20, 4, wv )
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS) + 1, 0, 4, r)
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS) + 1, 0, 4, v)
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 1, 0, 4, r)
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 1, 0, 4, v)
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_L_READ( wv )                  FIELD_GET( wv, 16, 4 )
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_L_WRITE( v, wv )              FIELD_SET( v, 16, 4, wv )
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS) + 2, 6, 2, r)
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS) + 2, 6, 2, v)
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 2, 6, 2, r)
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 2, 6, 2, v)
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_L_READ( wv )               FIELD_GET( wv, 14, 2 )
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_L_WRITE( v, wv )           FIELD_SET( v, 14, 2, wv )
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS) + 2, 3, 3, r)
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS) + 2, 3, 3, v)
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 2, 3, 3, r)
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 2, 3, 3, v)
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_L_READ( wv )                  FIELD_GET( wv, 11, 3 )
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_L_WRITE( v, wv )              FIELD_SET( v, 11, 3, wv )
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS) + 2, 0, 11, r)
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DEBUG_PRINT_HEADER_DTS) + 2, 0, 11, v)
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_READ(r, p)                  FIELD_MREAD_16((uint8_t *)p + 2, 0, 11, r)
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)p + 2, 0, 11, v)
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_L_READ( wv )                FIELD_GET( wv, 0, 11 )
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_L_WRITE( v, wv )            FIELD_SET( v, 0, 11, wv )
/* <<<RDD_DEBUG_PRINT_HEADER_DTS */

/* <<<RDD_DEBUG_PRINT_HEADER */


/* >>>RDD_DEBUG_PRINT_INFO */
#define DEBUG_PRINT_INFO_ADDR_LOW_F_OFFSET                                                        0
#define DEBUG_PRINT_INFO_ADDR_LOW_F_WIDTH                                                         32
#define DEBUG_PRINT_INFO_DEBUG_PRINT_INFO_OFFSET                                                  0
#define DEBUG_PRINT_INFO_ADDR_LOW_OFFSET                                                          0
#define DEBUG_PRINT_INFO_ADDR_LOW_WORD_OFFSET                                                     0
#define DEBUG_PRINT_INFO_ADDR_HIGH_F_OFFSET                                                       0
#define DEBUG_PRINT_INFO_ADDR_HIGH_F_WIDTH                                                        32
#define DEBUG_PRINT_INFO_ADDR_HIGH_OFFSET                                                         4
#define DEBUG_PRINT_INFO_ADDR_HIGH_WORD_OFFSET                                                    1
#define DEBUG_PRINT_INFO_SIZE_F_OFFSET                                                            0
#define DEBUG_PRINT_INFO_SIZE_F_WIDTH                                                             32
#define DEBUG_PRINT_INFO_SIZE_OFFSET                                                              8
#define DEBUG_PRINT_INFO_SIZE_WORD_OFFSET                                                         2
#define DEBUG_PRINT_INFO_TABLE_ID_F_OFFSET                                                        24
#define DEBUG_PRINT_INFO_TABLE_ID_F_WIDTH                                                         8
#define DEBUG_PRINT_INFO_TABLE_ID_OFFSET                                                          12
#define DEBUG_PRINT_INFO_TABLE_ID_WORD_OFFSET                                                     3
#define DEBUG_PRINT_INFO_TABLE_ID_F_OFFSET_MOD16                                                  8
/* <<<RDD_DEBUG_PRINT_INFO */


/* >>>RDD_IPTV_HASH_LKP_ENTRY */
#define IPTV_HASH_LKP_ENTRY_ADDR_HIGH_F_OFFSET                                                       0
#define IPTV_HASH_LKP_ENTRY_ADDR_HIGH_F_WIDTH                                                        32
#define IPTV_HASH_LKP_ENTRY_ADDR_HIGH_OFFSET                                                         0
#define IPTV_HASH_LKP_ENTRY_ADDR_HIGH_WORD_OFFSET                                                    0
#define IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_F_OFFSET                                               0
#define IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_F_WIDTH                                                32
#define IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_OFFSET                                                 4
#define IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_WORD_OFFSET                                            1

/* >>>RDD_IPTV_HASH_LKP_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	addr_high        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved0                  	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
			uint32_t	ipv6                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved1                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
			uint32_t	mac_high                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	dst_ip_or_mac_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_dst_ip_or_mac_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_dst_ip_or_mac_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	addr_high        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved0                  	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
			uint32_t	ipv6                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved1                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
			uint32_t	mac_high                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	dst_ip_or_mac_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_dst_ip_or_mac_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_dst_ip_or_mac_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_HASH_LKP_ENTRY_DTS;

typedef RDD_IPTV_HASH_LKP_ENTRY_DTS * aligned_RDD_IPTV_HASH_LKP_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_IPTV_HASH_LKP_ENTRY_DTS fields;
} RDD_IPTV_HASH_LKP_ENTRY_DTS_NEW;
typedef RDD_IPTV_HASH_LKP_ENTRY_DTS_NEW * aligned_RDD_IPTV_HASH_LKP_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_IPTV_HASH_LKP_ENTRY_ADDR_HIGH_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_IPTV_HASH_LKP_ENTRY_DTS), r)
#define RDD_IPTV_HASH_LKP_ENTRY_ADDR_HIGH_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_IPTV_HASH_LKP_ENTRY_DTS), v)
#define RDD_IPTV_HASH_LKP_ENTRY_ADDR_HIGH_READ(r, p)                         MREAD_32((uint8_t *)p, r)
#define RDD_IPTV_HASH_LKP_ENTRY_ADDR_HIGH_WRITE(v, p)                        MWRITE_32((uint8_t *)p, v)
#define RDD_IPTV_HASH_LKP_ENTRY_IPV6_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_HASH_LKP_ENTRY_DTS) + 3, 0, 1, r)
#define RDD_IPTV_HASH_LKP_ENTRY_IPV6_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_HASH_LKP_ENTRY_DTS) + 3, 0, 1, v)
#define RDD_IPTV_HASH_LKP_ENTRY_IPV6_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 3, 0, 1, r)
#define RDD_IPTV_HASH_LKP_ENTRY_IPV6_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 3, 0, 1, v)
#define RDD_IPTV_HASH_LKP_ENTRY_MAC_HIGH_READ_G(r, g, idx)                   GROUP_MREAD_16(g, idx*sizeof(RDD_IPTV_HASH_LKP_ENTRY_DTS) + 2, r)
#define RDD_IPTV_HASH_LKP_ENTRY_MAC_HIGH_WRITE_G(v, g, idx)                  GROUP_MWRITE_16(g, idx*sizeof(RDD_IPTV_HASH_LKP_ENTRY_DTS) + 2, v)
#define RDD_IPTV_HASH_LKP_ENTRY_MAC_HIGH_READ(r, p)                          MREAD_16((uint8_t *)p + 2, r)
#define RDD_IPTV_HASH_LKP_ENTRY_MAC_HIGH_WRITE(v, p)                         MWRITE_16((uint8_t *)p + 2, v)
#define RDD_IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_IPTV_HASH_LKP_ENTRY_DTS) + 4, r)
#define RDD_IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_IPTV_HASH_LKP_ENTRY_DTS) + 4, v)
#define RDD_IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_IPTV_HASH_LKP_ENTRY_DTS */

/* <<<RDD_IPTV_HASH_LKP_ENTRY */


/* >>>RDD_IPTV_HASH_RESULT_ENTRY */
#define IPTV_HASH_RESULT_ENTRY_CTX_IDX_F_OFFSET                                                         22
#define IPTV_HASH_RESULT_ENTRY_CTX_IDX_F_WIDTH                                                          10
#define IPTV_HASH_RESULT_ENTRY_IPTV_HASH_RESULT_ENTRY_OFFSET                                            0
#define IPTV_HASH_RESULT_ENTRY_CTX_IDX_OFFSET                                                           0
#define IPTV_HASH_RESULT_ENTRY_CTX_IDX_WORD_OFFSET                                                      0
#define IPTV_HASH_RESULT_ENTRY_CTX_IDX_F_OFFSET_MOD16                                                   6

/* >>>RDD_IPTV_HASH_RESULT_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	ctx_idx   	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved0 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ctx_idx   	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_HASH_RESULT_ENTRY_DTS;

typedef RDD_IPTV_HASH_RESULT_ENTRY_DTS * aligned_RDD_IPTV_HASH_RESULT_ENTRY_DTS ALIGNMENT8;

#define RDD_IPTV_HASH_RESULT_ENTRY_CTX_IDX_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_IPTV_HASH_RESULT_ENTRY_DTS), 6, 10, r)
#define RDD_IPTV_HASH_RESULT_ENTRY_CTX_IDX_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_IPTV_HASH_RESULT_ENTRY_DTS), 6, 10, v)
#define RDD_IPTV_HASH_RESULT_ENTRY_CTX_IDX_READ(r, p)                   FIELD_MREAD_16((uint8_t *)p, 6, 10, r)
#define RDD_IPTV_HASH_RESULT_ENTRY_CTX_IDX_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)p, 6, 10, v)
/* <<<RDD_IPTV_HASH_RESULT_ENTRY_DTS */

/* <<<RDD_IPTV_HASH_RESULT_ENTRY */


/* >>>RDD_IPTV_DDR_CONTEXT_ENTRY */
#define IPTV_DDR_CONTEXT_ENTRY_VALID_F_OFFSET                                                           31
#define IPTV_DDR_CONTEXT_ENTRY_VALID_F_WIDTH                                                            1
#define IPTV_DDR_CONTEXT_ENTRY_IPTV_DDR_CONTEXT_ENTRY_OFFSET                                            0
#define IPTV_DDR_CONTEXT_ENTRY_VALID_OFFSET                                                             0
#define IPTV_DDR_CONTEXT_ENTRY_VALID_WORD_OFFSET                                                        0
#define IPTV_DDR_CONTEXT_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define IPTV_DDR_CONTEXT_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_F_OFFSET                                                          30
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_F_WIDTH                                                           1
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_OFFSET                                                            0
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_WORD_OFFSET                                                       0
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_F_OFFSET_MOD8                                                     6
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_F_OFFSET_MOD16                                                    14
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_F_OFFSET                                                         29
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_F_WIDTH                                                          1
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_OFFSET                                                           0
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_WORD_OFFSET                                                      0
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_F_OFFSET_MOD8                                                    5
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_F_OFFSET_MOD16                                                   13
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_F_OFFSET                                                      28
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_F_WIDTH                                                       1
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_OFFSET                                                        0
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_WORD_OFFSET                                                   0
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_F_OFFSET_MOD8                                                 4
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_F_OFFSET_MOD16                                                12
#define IPTV_DDR_CONTEXT_ENTRY_VID_F_OFFSET                                                             16
#define IPTV_DDR_CONTEXT_ENTRY_VID_F_WIDTH                                                              12
#define IPTV_DDR_CONTEXT_ENTRY_VID_OFFSET                                                               0
#define IPTV_DDR_CONTEXT_ENTRY_VID_WORD_OFFSET                                                          0
#define IPTV_DDR_CONTEXT_ENTRY_VID_F_OFFSET_MOD16                                                       0
#define IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_F_OFFSET                                                  0
#define IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_F_WIDTH                                                   16
#define IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_OFFSET                                                    2
#define IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WORD_OFFSET                                               0
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_F_OFFSET                                 16
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_F_WIDTH                                  16
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_OFFSET                                   4
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_WORD_OFFSET                              1
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_F_OFFSET                                                   0
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_F_WIDTH                                                    16
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_OFFSET                                                     6
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_WORD_OFFSET                                                1
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_F_OFFSET                                                   16
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_F_WIDTH                                                    16
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_OFFSET                                                     8
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_WORD_OFFSET                                                2
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_OFFSET                                                13
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_WIDTH                                                 3
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_OFFSET                                                  10
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_WORD_OFFSET                                             2
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_OFFSET_MOD8                                           5
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_OFFSET_MOD16                                          13
#define IPTV_DDR_CONTEXT_ENTRY_RX_IF_F_OFFSET                                                           8
#define IPTV_DDR_CONTEXT_ENTRY_RX_IF_F_WIDTH                                                            5
#define IPTV_DDR_CONTEXT_ENTRY_RX_IF_OFFSET                                                             10
#define IPTV_DDR_CONTEXT_ENTRY_RX_IF_WORD_OFFSET                                                        2
#define IPTV_DDR_CONTEXT_ENTRY_RX_IF_F_OFFSET_MOD8                                                      0
#define IPTV_DDR_CONTEXT_ENTRY_RX_IF_F_OFFSET_MOD16                                                     8
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_F_OFFSET                                        7
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_F_WIDTH                                         1
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_OFFSET                                          11
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_WORD_OFFSET                                     2
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_F_OFFSET_MOD8                                   7
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_F_OFFSET_MOD16                                  7
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_F_OFFSET                                                0
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_F_WIDTH                                                 7
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_OFFSET                                                  11
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_WORD_OFFSET                                             2
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_F_OFFSET_MOD8                                           0
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_F_OFFSET_MOD16                                          0
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_F_OFFSET                                              28
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_F_WIDTH                                               3
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_OFFSET                                                12
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_WORD_OFFSET                                           3
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_F_OFFSET_MOD8                                         4
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_F_OFFSET_MOD16                                        12
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_F_OFFSET                                                        22
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_F_WIDTH                                                         2
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_OFFSET                                                          13
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_WORD_OFFSET                                                     3
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_F_OFFSET_MOD8                                                   6
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_F_OFFSET_MOD16                                                  6
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_F_OFFSET                                                    16
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_F_WIDTH                                                     6
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_OFFSET                                                      13
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_WORD_OFFSET                                                 3
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_F_OFFSET_MOD8                                               0
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_F_OFFSET_MOD16                                              0
#define IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_F_OFFSET                                                         0
#define IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_F_WIDTH                                                          10
#define IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_OFFSET                                                           14
#define IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_WORD_OFFSET                                                      3
#define IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_F_OFFSET_MOD16                                                   0
#define IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_F_OFFSET                                             0
#define IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_F_WIDTH                                              32
#define IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_OFFSET                                               16
#define IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_WORD_OFFSET                                          4
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IP_F_OFFSET                                                          0
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IP_F_WIDTH                                                           32
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IP_OFFSET                                                            20
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IP_WORD_OFFSET                                                       5
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_OFFSET                                                     24
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_WORD_OFFSET                                                6
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_F_OFFSET_MOD16                                             8
#define IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_OFFSET                                                     40
#define IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_WORD_OFFSET                                                10
#define IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_F_OFFSET_MOD16                                             8
#define IPTV_DDR_CONTEXT_ENTRY_RESULT_OFFSET                                                            56
#define IPTV_DDR_CONTEXT_ENTRY_RESULT_WORD_OFFSET                                                       14
#define IPTV_DDR_CONTEXT_ENTRY_RESULT_F_OFFSET_MOD16                                                    8
/* <<<RDD_IPTV_DDR_CONTEXT_ENTRY */


/* >>>RDD_IPTV_RULE_BASED_RESULT */
#define IPTV_RULE_BASED_RESULT_IPTV_RULE_BASED_RESULT_OFFSET                                            0
#define IPTV_RULE_BASED_RESULT_RULE_OFFSET                                                              0
#define IPTV_RULE_BASED_RESULT_RULE_WORD_OFFSET                                                         0
#define IPTV_RULE_BASED_RESULT_RULE_F_OFFSET_MOD16                                                      0

/* >>>RDD_IPTV_RULE_BASED_RESULT_DTS */
#define RDD_IPTV_RULE_BASED_RESULT_RULE_NUMBER	16

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	rule[RDD_IPTV_RULE_BASED_RESULT_RULE_NUMBER];
#else
	uint8_t	rule[RDD_IPTV_RULE_BASED_RESULT_RULE_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_RULE_BASED_RESULT_DTS;

typedef RDD_IPTV_RULE_BASED_RESULT_DTS * aligned_RDD_IPTV_RULE_BASED_RESULT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_IPTV_RULE_BASED_RESULT_DTS fields;
} RDD_IPTV_RULE_BASED_RESULT_DTS_NEW;
typedef RDD_IPTV_RULE_BASED_RESULT_DTS_NEW * aligned_RDD_IPTV_RULE_BASED_RESULT_DTS_NEW ALIGNMENT8;

#define RDD_IPTV_RULE_BASED_RESULT_RULE_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_IPTV_RULE_BASED_RESULT_DTS), i, r)
#define RDD_IPTV_RULE_BASED_RESULT_RULE_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_IPTV_RULE_BASED_RESULT_DTS), i, v)
#define RDD_IPTV_RULE_BASED_RESULT_RULE_READ(r, p, i)              MREAD_I_8((uint8_t *)p, i, r)
#define RDD_IPTV_RULE_BASED_RESULT_RULE_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p, i, v)
/* <<<RDD_IPTV_RULE_BASED_RESULT_DTS */

/* <<<RDD_IPTV_RULE_BASED_RESULT */


/* >>>RDD_IPTV_GPE_BASED_RESULT */
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_F_OFFSET                                            0
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_F_WIDTH                                             32
#define IPTV_GPE_BASED_RESULT_IPTV_GPE_BASED_RESULT_OFFSET                                             0
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_OFFSET                                              0
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_WORD_OFFSET                                         0
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_F_OFFSET                                           24
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_F_WIDTH                                            8
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_OFFSET                                             4
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_WORD_OFFSET                                        1
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_F_OFFSET_MOD16                                     8
#define IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_F_OFFSET                                              12
#define IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_F_WIDTH                                               8
#define IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_OFFSET                                                5
#define IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_WORD_OFFSET                                           1
#define IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_F_OFFSET_MOD16                                        12
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_F_OFFSET                                                       11
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_F_WIDTH                                                        1
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_OFFSET                                                         6
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_WORD_OFFSET                                                    1
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_F_OFFSET_MOD8                                                  3
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_F_OFFSET_MOD16                                                 11
#define IPTV_GPE_BASED_RESULT_MTU_F_OFFSET                                                             0
#define IPTV_GPE_BASED_RESULT_MTU_F_WIDTH                                                              11
#define IPTV_GPE_BASED_RESULT_MTU_OFFSET                                                               6
#define IPTV_GPE_BASED_RESULT_MTU_WORD_OFFSET                                                          1
#define IPTV_GPE_BASED_RESULT_MTU_F_OFFSET_MOD16                                                       0
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_F_OFFSET                                                   30
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_F_WIDTH                                                    2
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_OFFSET                                                     8
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_WORD_OFFSET                                                2
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_F_OFFSET_MOD8                                              6
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_F_OFFSET_MOD16                                             14
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_F_OFFSET                                                   12
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_F_WIDTH                                                    1
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_OFFSET                                                     10
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_WORD_OFFSET                                                2
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_F_OFFSET_MOD8                                              4
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_F_OFFSET_MOD16                                             12
#define IPTV_GPE_BASED_RESULT_INNER_VID_F_OFFSET                                                       0
#define IPTV_GPE_BASED_RESULT_INNER_VID_F_WIDTH                                                        12
#define IPTV_GPE_BASED_RESULT_INNER_VID_OFFSET                                                         10
#define IPTV_GPE_BASED_RESULT_INNER_VID_WORD_OFFSET                                                    2
#define IPTV_GPE_BASED_RESULT_INNER_VID_F_OFFSET_MOD16                                                 0
#define IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_OFFSET                                                   12
#define IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_WORD_OFFSET                                              3
#define IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_F_OFFSET_MOD16                                           8

/* >>>RDD_IPTV_GPE_BASED_RESULT_DTS */
#define RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_NUMBER	20

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	port_buffer_addr_low                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	port_buffer_addr_high                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wlan_mcast_clients                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_routed                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mtu                                                                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	num_vlan_tags                                                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                                                            	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	any_inner_vid                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	inner_vid                                                            	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	l3_command_list[RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_NUMBER];
#else
	uint32_t	port_buffer_addr_low                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mtu                                                                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_routed                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wlan_mcast_clients                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	port_buffer_addr_high                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	inner_vid                                                            	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	any_inner_vid                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1                                                            	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	num_vlan_tags                                                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	l3_command_list[RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_IPTV_GPE_BASED_RESULT_DTS;

typedef RDD_IPTV_GPE_BASED_RESULT_DTS * aligned_RDD_IPTV_GPE_BASED_RESULT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[8];
    uint64_t dword_val64[4];
    RDD_IPTV_GPE_BASED_RESULT_DTS fields;
} RDD_IPTV_GPE_BASED_RESULT_DTS_NEW;
typedef RDD_IPTV_GPE_BASED_RESULT_DTS_NEW * aligned_RDD_IPTV_GPE_BASED_RESULT_DTS_NEW ALIGNMENT8;

#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS), r)
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS), v)
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_READ(r, p)                  MREAD_32((uint8_t *)p, r)
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p, v)
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 4, r)
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 4, v)
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_READ(r, p)                 MREAD_8((uint8_t *)p + 4, r)
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_WRITE(v, p)                MWRITE_8((uint8_t *)p + 4, v)
#define RDD_IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_READ_G(r, g, idx)             GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 4, 12, 8, r)
#define RDD_IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 4, 12, 8, v)
#define RDD_IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_READ(r, p)                    FIELD_MREAD_32((uint8_t *)p + 4, 12, 8, r)
#define RDD_IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_WRITE(v, p)                   FIELD_MWRITE_32((uint8_t *)p + 4, 12, 8, v)
#define RDD_IPTV_GPE_BASED_RESULT_IS_ROUTED_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 6, 3, 1, r)
#define RDD_IPTV_GPE_BASED_RESULT_IS_ROUTED_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 6, 3, 1, v)
#define RDD_IPTV_GPE_BASED_RESULT_IS_ROUTED_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 6, 3, 1, r)
#define RDD_IPTV_GPE_BASED_RESULT_IS_ROUTED_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 6, 3, 1, v)
#define RDD_IPTV_GPE_BASED_RESULT_MTU_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 6, 0, 11, r)
#define RDD_IPTV_GPE_BASED_RESULT_MTU_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 6, 0, 11, v)
#define RDD_IPTV_GPE_BASED_RESULT_MTU_READ(r, p)                                   FIELD_MREAD_16((uint8_t *)p + 6, 0, 11, r)
#define RDD_IPTV_GPE_BASED_RESULT_MTU_WRITE(v, p)                                  FIELD_MWRITE_16((uint8_t *)p + 6, 0, 11, v)
#define RDD_IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 8, 6, 2, r)
#define RDD_IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 8, 6, 2, v)
#define RDD_IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 8, 6, 2, r)
#define RDD_IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 8, 6, 2, v)
#define RDD_IPTV_GPE_BASED_RESULT_ANY_INNER_VID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 10, 4, 1, r)
#define RDD_IPTV_GPE_BASED_RESULT_ANY_INNER_VID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 10, 4, 1, v)
#define RDD_IPTV_GPE_BASED_RESULT_ANY_INNER_VID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 10, 4, 1, r)
#define RDD_IPTV_GPE_BASED_RESULT_ANY_INNER_VID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 10, 4, 1, v)
#define RDD_IPTV_GPE_BASED_RESULT_INNER_VID_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 10, 0, 12, r)
#define RDD_IPTV_GPE_BASED_RESULT_INNER_VID_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 10, 0, 12, v)
#define RDD_IPTV_GPE_BASED_RESULT_INNER_VID_READ(r, p)                             FIELD_MREAD_16((uint8_t *)p + 10, 0, 12, r)
#define RDD_IPTV_GPE_BASED_RESULT_INNER_VID_WRITE(v, p)                            FIELD_MWRITE_16((uint8_t *)p + 10, 0, 12, v)
#define RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_READ_G(r, g, idx, i)             GROUP_MREAD_I_8(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 12, i, r)
#define RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_WRITE_G(v, g, idx, i)            GROUP_MWRITE_I_8(g, idx*sizeof(RDD_IPTV_GPE_BASED_RESULT_DTS) + 12, i, v)
#define RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_READ(r, p, i)                    MREAD_I_8((uint8_t *)p + 12, i, r)
#define RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_WRITE(v, p, i)                   MWRITE_I_8((uint8_t *)p + 12, i, v)
/* <<<RDD_IPTV_GPE_BASED_RESULT_DTS */

/* <<<RDD_IPTV_GPE_BASED_RESULT */


/* >>>RDD_IPTV_CLASSIFICATION_CFG_ENTRY */
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_F_OFFSET                                              7
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_F_WIDTH                                               1
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_CLASSIFICATION_CFG_ENTRY_OFFSET                                     0
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_OFFSET                                                0
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_WORD_OFFSET                                           0
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_F_OFFSET_MOD8                                         7
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_F_OFFSET_MOD16                                        7
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_F_OFFSET                                               6
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_F_WIDTH                                                1
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_OFFSET                                                 0
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_WORD_OFFSET                                            0
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_F_OFFSET_MOD8                                          6
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_F_OFFSET_MOD16                                         6
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_F_OFFSET                                                         5
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_F_WIDTH                                                          1
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_OFFSET                                                           0
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_WORD_OFFSET                                                      0
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_F_OFFSET_MOD8                                                    5
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_F_OFFSET_MOD16                                                   5
/* <<<RDD_IPTV_CLASSIFICATION_CFG_ENTRY */


/* >>>RDD_NAT_CACHE_L3_LKP_ENTRY */
#define NAT_CACHE_L3_LKP_ENTRY_VALID_F_OFFSET                                                           31
#define NAT_CACHE_L3_LKP_ENTRY_VALID_F_WIDTH                                                            1
#define NAT_CACHE_L3_LKP_ENTRY_NAT_CACHE_L3_LKP_ENTRY_OFFSET                                            0
#define NAT_CACHE_L3_LKP_ENTRY_VALID_OFFSET                                                             0
#define NAT_CACHE_L3_LKP_ENTRY_VALID_WORD_OFFSET                                                        0
#define NAT_CACHE_L3_LKP_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define NAT_CACHE_L3_LKP_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define NAT_CACHE_L3_LKP_ENTRY_ZERO_RESERVED_F_OFFSET                                                   24
#define NAT_CACHE_L3_LKP_ENTRY_ZERO_RESERVED_F_WIDTH                                                    7
#define NAT_CACHE_L3_LKP_ENTRY_ZERO_RESERVED_OFFSET                                                     0
#define NAT_CACHE_L3_LKP_ENTRY_ZERO_RESERVED_WORD_OFFSET                                                0
#define NAT_CACHE_L3_LKP_ENTRY_ZERO_RESERVED_F_OFFSET_MOD8                                              0
#define NAT_CACHE_L3_LKP_ENTRY_ZERO_RESERVED_F_OFFSET_MOD16                                             8
#define NAT_CACHE_L3_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET                                                    23
#define NAT_CACHE_L3_LKP_ENTRY_TCP_PURE_ACK_F_WIDTH                                                     1
#define NAT_CACHE_L3_LKP_ENTRY_TCP_PURE_ACK_OFFSET                                                      1
#define NAT_CACHE_L3_LKP_ENTRY_TCP_PURE_ACK_WORD_OFFSET                                                 0
#define NAT_CACHE_L3_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET_MOD8                                               7
#define NAT_CACHE_L3_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET_MOD16                                              7
#define NAT_CACHE_L3_LKP_ENTRY_IS_CONTEXT_EXTENSION_F_OFFSET                                            22
#define NAT_CACHE_L3_LKP_ENTRY_IS_CONTEXT_EXTENSION_F_WIDTH                                             1
#define NAT_CACHE_L3_LKP_ENTRY_IS_CONTEXT_EXTENSION_OFFSET                                              1
#define NAT_CACHE_L3_LKP_ENTRY_IS_CONTEXT_EXTENSION_WORD_OFFSET                                         0
#define NAT_CACHE_L3_LKP_ENTRY_IS_CONTEXT_EXTENSION_F_OFFSET_MOD8                                       6
#define NAT_CACHE_L3_LKP_ENTRY_IS_CONTEXT_EXTENSION_F_OFFSET_MOD16                                      6
#define NAT_CACHE_L3_LKP_ENTRY_VPORT_F_OFFSET                                                           16
#define NAT_CACHE_L3_LKP_ENTRY_VPORT_F_WIDTH                                                            6
#define NAT_CACHE_L3_LKP_ENTRY_VPORT_OFFSET                                                             1
#define NAT_CACHE_L3_LKP_ENTRY_VPORT_WORD_OFFSET                                                        0
#define NAT_CACHE_L3_LKP_ENTRY_VPORT_F_OFFSET_MOD8                                                      0
#define NAT_CACHE_L3_LKP_ENTRY_VPORT_F_OFFSET_MOD16                                                     0
#define NAT_CACHE_L3_LKP_ENTRY_DST_IP_3_0_F_OFFSET                                                      12
#define NAT_CACHE_L3_LKP_ENTRY_DST_IP_3_0_F_WIDTH                                                       4
#define NAT_CACHE_L3_LKP_ENTRY_DST_IP_3_0_OFFSET                                                        2
#define NAT_CACHE_L3_LKP_ENTRY_DST_IP_3_0_WORD_OFFSET                                                   0
#define NAT_CACHE_L3_LKP_ENTRY_DST_IP_3_0_F_OFFSET_MOD8                                                 4
#define NAT_CACHE_L3_LKP_ENTRY_DST_IP_3_0_F_OFFSET_MOD16                                                12
#define NAT_CACHE_L3_LKP_ENTRY_SUB_TABLE_ID_F_OFFSET                                                    9
#define NAT_CACHE_L3_LKP_ENTRY_SUB_TABLE_ID_F_WIDTH                                                     3
#define NAT_CACHE_L3_LKP_ENTRY_SUB_TABLE_ID_OFFSET                                                      2
#define NAT_CACHE_L3_LKP_ENTRY_SUB_TABLE_ID_WORD_OFFSET                                                 0
#define NAT_CACHE_L3_LKP_ENTRY_SUB_TABLE_ID_F_OFFSET_MOD8                                               1
#define NAT_CACHE_L3_LKP_ENTRY_SUB_TABLE_ID_F_OFFSET_MOD16                                              9
#define NAT_CACHE_L3_LKP_ENTRY_KEY_EXTEND_F_OFFSET                                                      8
#define NAT_CACHE_L3_LKP_ENTRY_KEY_EXTEND_F_WIDTH                                                       1
#define NAT_CACHE_L3_LKP_ENTRY_KEY_EXTEND_OFFSET                                                        2
#define NAT_CACHE_L3_LKP_ENTRY_KEY_EXTEND_WORD_OFFSET                                                   0
#define NAT_CACHE_L3_LKP_ENTRY_KEY_EXTEND_F_OFFSET_MOD8                                                 0
#define NAT_CACHE_L3_LKP_ENTRY_KEY_EXTEND_F_OFFSET_MOD16                                                8
#define NAT_CACHE_L3_LKP_ENTRY_PROTOCOL_F_OFFSET                                                        0
#define NAT_CACHE_L3_LKP_ENTRY_PROTOCOL_F_WIDTH                                                         8
#define NAT_CACHE_L3_LKP_ENTRY_PROTOCOL_OFFSET                                                          3
#define NAT_CACHE_L3_LKP_ENTRY_PROTOCOL_WORD_OFFSET                                                     0
#define NAT_CACHE_L3_LKP_ENTRY_PROTOCOL_F_OFFSET_MOD16                                                  0
#define NAT_CACHE_L3_LKP_ENTRY_SRC_PORT_F_OFFSET                                                        16
#define NAT_CACHE_L3_LKP_ENTRY_SRC_PORT_F_WIDTH                                                         16
#define NAT_CACHE_L3_LKP_ENTRY_SRC_PORT_OFFSET                                                          4
#define NAT_CACHE_L3_LKP_ENTRY_SRC_PORT_WORD_OFFSET                                                     1
#define NAT_CACHE_L3_LKP_ENTRY_DST_PORT_F_OFFSET                                                        0
#define NAT_CACHE_L3_LKP_ENTRY_DST_PORT_F_WIDTH                                                         16
#define NAT_CACHE_L3_LKP_ENTRY_DST_PORT_OFFSET                                                          6
#define NAT_CACHE_L3_LKP_ENTRY_DST_PORT_WORD_OFFSET                                                     1
#define NAT_CACHE_L3_LKP_ENTRY_SRC_IP_F_OFFSET                                                          0
#define NAT_CACHE_L3_LKP_ENTRY_SRC_IP_F_WIDTH                                                           32
#define NAT_CACHE_L3_LKP_ENTRY_SRC_IP_OFFSET                                                            8
#define NAT_CACHE_L3_LKP_ENTRY_SRC_IP_WORD_OFFSET                                                       2
#define NAT_CACHE_L3_LKP_ENTRY_DST_IP_F_OFFSET                                                          0
#define NAT_CACHE_L3_LKP_ENTRY_DST_IP_F_WIDTH                                                           32
#define NAT_CACHE_L3_LKP_ENTRY_DST_IP_OFFSET                                                            12
#define NAT_CACHE_L3_LKP_ENTRY_DST_IP_WORD_OFFSET                                                       3

/* >>>RDD_NAT_CACHE_L3_LKP_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	zero_reserved       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_pure_ack        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_context_extension	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vport               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dst_ip_3_0          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sub_table_id        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_extend          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	protocol            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	src_port            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dst_port            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	src_ip              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dst_ip              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	protocol            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_extend          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sub_table_id        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dst_ip_3_0          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vport               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	is_context_extension	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_pure_ack        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	zero_reserved       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dst_port            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	src_port            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	src_ip              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dst_ip              	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NAT_CACHE_L3_LKP_ENTRY_DTS;

typedef RDD_NAT_CACHE_L3_LKP_ENTRY_DTS * aligned_RDD_NAT_CACHE_L3_LKP_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_NAT_CACHE_L3_LKP_ENTRY_DTS fields;
} RDD_NAT_CACHE_L3_LKP_ENTRY_DTS_NEW;
typedef RDD_NAT_CACHE_L3_LKP_ENTRY_DTS_NEW * aligned_RDD_NAT_CACHE_L3_LKP_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_NAT_CACHE_L3_LKP_ENTRY_VALID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS), 7, 1, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS), 7, 1, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_VALID_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_VALID_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_ZERO_RESERVED_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS), 0, 7, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_ZERO_RESERVED_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS), 0, 7, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_ZERO_RESERVED_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 0, 7, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_ZERO_RESERVED_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 0, 7, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_TCP_PURE_ACK_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 1, 7, 1, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_TCP_PURE_ACK_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 1, 7, 1, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_TCP_PURE_ACK_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 1, 7, 1, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_TCP_PURE_ACK_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 1, 7, 1, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_IS_CONTEXT_EXTENSION_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 1, 6, 1, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_IS_CONTEXT_EXTENSION_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 1, 6, 1, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_IS_CONTEXT_EXTENSION_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 1, 6, 1, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_IS_CONTEXT_EXTENSION_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 1, 6, 1, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_VPORT_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 1, 0, 6, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_VPORT_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 1, 0, 6, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_VPORT_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 1, 0, 6, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_VPORT_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 1, 0, 6, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_IP_3_0_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 2, 4, 4, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_IP_3_0_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 2, 4, 4, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_IP_3_0_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p + 2, 4, 4, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_IP_3_0_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p + 2, 4, 4, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SUB_TABLE_ID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 2, 1, 3, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SUB_TABLE_ID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 2, 1, 3, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SUB_TABLE_ID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 2, 1, 3, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SUB_TABLE_ID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 2, 1, 3, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_KEY_EXTEND_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 2, 0, 1, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_KEY_EXTEND_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 2, 0, 1, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_KEY_EXTEND_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p + 2, 0, 1, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_KEY_EXTEND_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p + 2, 0, 1, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_PROTOCOL_READ_G(r, g, idx)                      GROUP_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 3, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_PROTOCOL_WRITE_G(v, g, idx)                     GROUP_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 3, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_PROTOCOL_READ(r, p)                             MREAD_8((uint8_t *)p + 3, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_PROTOCOL_WRITE(v, p)                            MWRITE_8((uint8_t *)p + 3, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SRC_PORT_READ_G(r, g, idx)                      GROUP_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 4, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SRC_PORT_WRITE_G(v, g, idx)                     GROUP_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 4, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SRC_PORT_READ(r, p)                             MREAD_16((uint8_t *)p + 4, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SRC_PORT_WRITE(v, p)                            MWRITE_16((uint8_t *)p + 4, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_PORT_READ_G(r, g, idx)                      GROUP_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 6, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_PORT_WRITE_G(v, g, idx)                     GROUP_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 6, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_PORT_READ(r, p)                             MREAD_16((uint8_t *)p + 6, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_PORT_WRITE(v, p)                            MWRITE_16((uint8_t *)p + 6, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SRC_IP_READ_G(r, g, idx)                        GROUP_MREAD_32(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 8, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SRC_IP_WRITE_G(v, g, idx)                       GROUP_MWRITE_32(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 8, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SRC_IP_READ(r, p)                               MREAD_32((uint8_t *)p + 8, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_SRC_IP_WRITE(v, p)                              MWRITE_32((uint8_t *)p + 8, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_IP_READ_G(r, g, idx)                        GROUP_MREAD_32(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 12, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_IP_WRITE_G(v, g, idx)                       GROUP_MWRITE_32(g, idx*sizeof(RDD_NAT_CACHE_L3_LKP_ENTRY_DTS) + 12, v)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_IP_READ(r, p)                               MREAD_32((uint8_t *)p + 12, r)
#define RDD_NAT_CACHE_L3_LKP_ENTRY_DST_IP_WRITE(v, p)                              MWRITE_32((uint8_t *)p + 12, v)
/* <<<RDD_NAT_CACHE_L3_LKP_ENTRY_DTS */

/* <<<RDD_NAT_CACHE_L3_LKP_ENTRY */


/* >>>RDD_NAT_CACHE_L2_LKP_ENTRY */
#define NAT_CACHE_L2_LKP_ENTRY_VALID_F_OFFSET                                                           31
#define NAT_CACHE_L2_LKP_ENTRY_VALID_F_WIDTH                                                            1
#define NAT_CACHE_L2_LKP_ENTRY_NAT_CACHE_L2_LKP_ENTRY_OFFSET                                            0
#define NAT_CACHE_L2_LKP_ENTRY_VALID_OFFSET                                                             0
#define NAT_CACHE_L2_LKP_ENTRY_VALID_WORD_OFFSET                                                        0
#define NAT_CACHE_L2_LKP_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define NAT_CACHE_L2_LKP_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define NAT_CACHE_L2_LKP_ENTRY_IS_CONTEXT_EXTENSION_F_OFFSET                                            22
#define NAT_CACHE_L2_LKP_ENTRY_IS_CONTEXT_EXTENSION_F_WIDTH                                             1
#define NAT_CACHE_L2_LKP_ENTRY_IS_CONTEXT_EXTENSION_OFFSET                                              1
#define NAT_CACHE_L2_LKP_ENTRY_IS_CONTEXT_EXTENSION_WORD_OFFSET                                         0
#define NAT_CACHE_L2_LKP_ENTRY_IS_CONTEXT_EXTENSION_F_OFFSET_MOD8                                       6
#define NAT_CACHE_L2_LKP_ENTRY_IS_CONTEXT_EXTENSION_F_OFFSET_MOD16                                      6
#define NAT_CACHE_L2_LKP_ENTRY_VPORT_F_OFFSET                                                           16
#define NAT_CACHE_L2_LKP_ENTRY_VPORT_F_WIDTH                                                            6
#define NAT_CACHE_L2_LKP_ENTRY_VPORT_OFFSET                                                             1
#define NAT_CACHE_L2_LKP_ENTRY_VPORT_WORD_OFFSET                                                        0
#define NAT_CACHE_L2_LKP_ENTRY_VPORT_F_OFFSET_MOD8                                                      0
#define NAT_CACHE_L2_LKP_ENTRY_VPORT_F_OFFSET_MOD16                                                     0
#define NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_3_0_F_OFFSET                                         12
#define NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_3_0_F_WIDTH                                          4
#define NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_3_0_OFFSET                                           2
#define NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_3_0_WORD_OFFSET                                      0
#define NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_3_0_F_OFFSET_MOD8                                    4
#define NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_3_0_F_OFFSET_MOD16                                   12
#define NAT_CACHE_L2_LKP_ENTRY_SUB_TABLE_ID_F_OFFSET                                                    9
#define NAT_CACHE_L2_LKP_ENTRY_SUB_TABLE_ID_F_WIDTH                                                     3
#define NAT_CACHE_L2_LKP_ENTRY_SUB_TABLE_ID_OFFSET                                                      2
#define NAT_CACHE_L2_LKP_ENTRY_SUB_TABLE_ID_WORD_OFFSET                                                 0
#define NAT_CACHE_L2_LKP_ENTRY_SUB_TABLE_ID_F_OFFSET_MOD8                                               1
#define NAT_CACHE_L2_LKP_ENTRY_SUB_TABLE_ID_F_OFFSET_MOD16                                              9
#define NAT_CACHE_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET                                                    8
#define NAT_CACHE_L2_LKP_ENTRY_TCP_PURE_ACK_F_WIDTH                                                     1
#define NAT_CACHE_L2_LKP_ENTRY_TCP_PURE_ACK_OFFSET                                                      2
#define NAT_CACHE_L2_LKP_ENTRY_TCP_PURE_ACK_WORD_OFFSET                                                 0
#define NAT_CACHE_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET_MOD8                                               0
#define NAT_CACHE_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET_MOD16                                              8
#define NAT_CACHE_L2_LKP_ENTRY_WAN_FLOW_F_OFFSET                                                        0
#define NAT_CACHE_L2_LKP_ENTRY_WAN_FLOW_F_WIDTH                                                         8
#define NAT_CACHE_L2_LKP_ENTRY_WAN_FLOW_OFFSET                                                          3
#define NAT_CACHE_L2_LKP_ENTRY_WAN_FLOW_WORD_OFFSET                                                     0
#define NAT_CACHE_L2_LKP_ENTRY_WAN_FLOW_F_OFFSET_MOD16                                                  0
#define NAT_CACHE_L2_LKP_ENTRY_ETYPE_F_OFFSET                                                           16
#define NAT_CACHE_L2_LKP_ENTRY_ETYPE_F_WIDTH                                                            16
#define NAT_CACHE_L2_LKP_ENTRY_ETYPE_OFFSET                                                             4
#define NAT_CACHE_L2_LKP_ENTRY_ETYPE_WORD_OFFSET                                                        1
#define NAT_CACHE_L2_LKP_ENTRY_TOS_UNION_F_OFFSET                                                       8
#define NAT_CACHE_L2_LKP_ENTRY_TOS_UNION_F_WIDTH                                                        8
#define NAT_CACHE_L2_LKP_ENTRY_TOS_UNION_OFFSET                                                         6
#define NAT_CACHE_L2_LKP_ENTRY_TOS_UNION_WORD_OFFSET                                                    1
#define NAT_CACHE_L2_LKP_ENTRY_TOS_UNION_F_OFFSET_MOD16                                                 8
#define NAT_CACHE_L2_LKP_ENTRY_NUM_OF_VLANS_F_OFFSET                                                    6
#define NAT_CACHE_L2_LKP_ENTRY_NUM_OF_VLANS_F_WIDTH                                                     2
#define NAT_CACHE_L2_LKP_ENTRY_NUM_OF_VLANS_OFFSET                                                      7
#define NAT_CACHE_L2_LKP_ENTRY_NUM_OF_VLANS_WORD_OFFSET                                                 1
#define NAT_CACHE_L2_LKP_ENTRY_NUM_OF_VLANS_F_OFFSET_MOD8                                               6
#define NAT_CACHE_L2_LKP_ENTRY_NUM_OF_VLANS_F_OFFSET_MOD16                                              6
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_0_F_OFFSET                                                     3
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_0_F_WIDTH                                                      3
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_0_OFFSET                                                       7
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_0_WORD_OFFSET                                                  1
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_0_F_OFFSET_MOD8                                                3
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_0_F_OFFSET_MOD16                                               3
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_1_F_OFFSET                                                     0
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_1_F_WIDTH                                                      3
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_1_OFFSET                                                       7
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_1_WORD_OFFSET                                                  1
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_1_F_OFFSET_MOD8                                                0
#define NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_1_F_OFFSET_MOD16                                               0
#define NAT_CACHE_L2_LKP_ENTRY_VLAN_0_UNION_F_OFFSET                                                    16
#define NAT_CACHE_L2_LKP_ENTRY_VLAN_0_UNION_F_WIDTH                                                     16
#define NAT_CACHE_L2_LKP_ENTRY_VLAN_0_UNION_OFFSET                                                      8
#define NAT_CACHE_L2_LKP_ENTRY_VLAN_0_UNION_WORD_OFFSET                                                 2
#define NAT_CACHE_L2_LKP_ENTRY_VLAN_1_UNION_F_OFFSET                                                    0
#define NAT_CACHE_L2_LKP_ENTRY_VLAN_1_UNION_F_WIDTH                                                     16
#define NAT_CACHE_L2_LKP_ENTRY_VLAN_1_UNION_OFFSET                                                      10
#define NAT_CACHE_L2_LKP_ENTRY_VLAN_1_UNION_WORD_OFFSET                                                 2
#define NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_F_OFFSET                                             0
#define NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_F_WIDTH                                              32
#define NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_OFFSET                                               12
#define NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_WORD_OFFSET                                          3

/* >>>RDD_NAT_CACHE_L2_LKP_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	valid                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved0              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_context_extension   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	vport                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	src_mac_dst_mac_crc_3_0	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sub_table_id           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tcp_pure_ack           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	wan_flow               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_valid                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved0              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_context_extension   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_vport                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_src_mac_dst_mac_crc_3_0	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_sub_table_id           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tcp_pure_ack           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_wan_flow               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_valid                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved0              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_context_extension   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_vport                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_src_mac_dst_mac_crc_3_0	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_sub_table_id           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tcp_pure_ack           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_wan_flow               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	etype                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tos_union              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	num_of_vlans           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tpid_vlan_0            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tpid_vlan_1            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_etype                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tos                              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_union union */
			uint32_t	reserved1_num_of_vlans           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tpid_vlan_0            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tpid_vlan_1            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_etype                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dscp                             	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_union union */
			uint32_t	ecn                              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_union union */
			uint32_t	reserved2_num_of_vlans           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tpid_vlan_0            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tpid_vlan_1            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	vlan_0_union           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	vlan_1_union           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	vlan0                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	vlan1                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	vid0                             	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	dei0                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	pbit0                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	vid1                             	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	dei1                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	pbit1                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	src_mac_dst_mac_crc    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_src_mac_dst_mac_crc    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_src_mac_dst_mac_crc    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	wan_flow               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tcp_pure_ack           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	sub_table_id           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	src_mac_dst_mac_crc_3_0	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	vport                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_context_extension   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved0              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	valid                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_wan_flow               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tcp_pure_ack           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_sub_table_id           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_src_mac_dst_mac_crc_3_0	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_vport                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_context_extension   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved0              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_valid                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_wan_flow               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tcp_pure_ack           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_sub_table_id           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_src_mac_dst_mac_crc_3_0	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_vport                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_context_extension   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved0              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_valid                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	tpid_vlan_1            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tpid_vlan_0            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	num_of_vlans           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tos_union              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	etype                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_tpid_vlan_1            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tpid_vlan_0            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_num_of_vlans           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tos                              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_union union */
			uint32_t	reserved1_etype                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_tpid_vlan_1            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tpid_vlan_0            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_num_of_vlans           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	dscp                             	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_union union */
			uint32_t	ecn                              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_union union */
			uint32_t	reserved2_etype                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	vlan_1_union           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	vlan_0_union           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	vlan1                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	vlan0                            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	vid1                             	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	dei1                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	pbit1                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	vid0                             	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	dei0                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	pbit0                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	src_mac_dst_mac_crc    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_src_mac_dst_mac_crc    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_src_mac_dst_mac_crc    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NAT_CACHE_L2_LKP_ENTRY_DTS;

typedef RDD_NAT_CACHE_L2_LKP_ENTRY_DTS * aligned_RDD_NAT_CACHE_L2_LKP_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_NAT_CACHE_L2_LKP_ENTRY_DTS fields;
} RDD_NAT_CACHE_L2_LKP_ENTRY_DTS_NEW;
typedef RDD_NAT_CACHE_L2_LKP_ENTRY_DTS_NEW * aligned_RDD_NAT_CACHE_L2_LKP_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_NAT_CACHE_L2_LKP_ENTRY_VALID_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS), 7, 1, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS), 7, 1, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VALID_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VALID_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_IS_CONTEXT_EXTENSION_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 1, 6, 1, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_IS_CONTEXT_EXTENSION_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 1, 6, 1, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_IS_CONTEXT_EXTENSION_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 1, 6, 1, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_IS_CONTEXT_EXTENSION_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 1, 6, 1, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VPORT_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 1, 0, 6, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VPORT_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 1, 0, 6, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VPORT_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p + 1, 0, 6, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VPORT_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p + 1, 0, 6, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_3_0_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 2, 4, 4, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_3_0_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 2, 4, 4, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_3_0_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 2, 4, 4, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_3_0_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 2, 4, 4, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SUB_TABLE_ID_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 2, 1, 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SUB_TABLE_ID_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 2, 1, 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SUB_TABLE_ID_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 2, 1, 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SUB_TABLE_ID_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 2, 1, 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TCP_PURE_ACK_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 2, 0, 1, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TCP_PURE_ACK_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 2, 0, 1, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TCP_PURE_ACK_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 2, 0, 1, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TCP_PURE_ACK_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 2, 0, 1, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_WAN_FLOW_READ_G(r, g, idx)                         GROUP_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_WAN_FLOW_WRITE_G(v, g, idx)                        GROUP_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_WAN_FLOW_READ(r, p)                                MREAD_8((uint8_t *)p + 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_WAN_FLOW_WRITE(v, p)                               MWRITE_8((uint8_t *)p + 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_ETYPE_READ_G(r, g, idx)                            GROUP_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 4, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_ETYPE_WRITE_G(v, g, idx)                           GROUP_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 4, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_ETYPE_READ(r, p)                                   MREAD_16((uint8_t *)p + 4, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_ETYPE_WRITE(v, p)                                  MWRITE_16((uint8_t *)p + 4, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TOS_UNION_READ_G(r, g, idx)                        GROUP_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 6, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TOS_UNION_WRITE_G(v, g, idx)                       GROUP_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 6, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TOS_UNION_READ(r, p)                               MREAD_8((uint8_t *)p + 6, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TOS_UNION_WRITE(v, p)                              MWRITE_8((uint8_t *)p + 6, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TOS_READ_G(r, g, idx)                              GROUP_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 6, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TOS_WRITE_G(v, g, idx)                             GROUP_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 6, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TOS_READ(r, p)                                     MREAD_8((uint8_t *)p + 6, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TOS_WRITE(v, p)                                    MWRITE_8((uint8_t *)p + 6, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DSCP_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 6, 2, 6, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DSCP_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 6, 2, 6, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DSCP_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 6, 2, 6, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DSCP_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 6, 2, 6, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_ECN_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 6, 0, 2, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_ECN_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 6, 0, 2, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_ECN_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)p + 6, 0, 2, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_ECN_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)p + 6, 0, 2, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_NUM_OF_VLANS_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 7, 6, 2, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_NUM_OF_VLANS_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 7, 6, 2, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_NUM_OF_VLANS_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 7, 6, 2, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_NUM_OF_VLANS_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 7, 6, 2, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_0_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 7, 3, 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_0_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 7, 3, 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_0_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 7, 3, 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_0_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 7, 3, 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_1_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 7, 0, 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_1_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 7, 0, 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_1_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 7, 0, 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_TPID_VLAN_1_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 7, 0, 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN_0_UNION_READ_G(r, g, idx)                     GROUP_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 8, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN_0_UNION_WRITE_G(v, g, idx)                    GROUP_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 8, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN_0_UNION_READ(r, p)                            MREAD_16((uint8_t *)p + 8, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN_0_UNION_WRITE(v, p)                           MWRITE_16((uint8_t *)p + 8, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN0_READ_G(r, g, idx)                            GROUP_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 8, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN0_WRITE_G(v, g, idx)                           GROUP_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 8, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN0_READ(r, p)                                   MREAD_16((uint8_t *)p + 8, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN0_WRITE(v, p)                                  MWRITE_16((uint8_t *)p + 8, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VID0_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 8, 4, 12, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VID0_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 8, 4, 12, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VID0_READ(r, p)                                    FIELD_MREAD_16((uint8_t *)p + 8, 4, 12, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VID0_WRITE(v, p)                                   FIELD_MWRITE_16((uint8_t *)p + 8, 4, 12, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DEI0_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 9, 3, 1, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DEI0_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 9, 3, 1, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DEI0_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 9, 3, 1, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DEI0_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 9, 3, 1, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_PBIT0_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 9, 0, 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_PBIT0_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 9, 0, 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_PBIT0_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p + 9, 0, 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_PBIT0_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p + 9, 0, 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN_1_UNION_READ_G(r, g, idx)                     GROUP_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 10, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN_1_UNION_WRITE_G(v, g, idx)                    GROUP_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 10, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN_1_UNION_READ(r, p)                            MREAD_16((uint8_t *)p + 10, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN_1_UNION_WRITE(v, p)                           MWRITE_16((uint8_t *)p + 10, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN1_READ_G(r, g, idx)                            GROUP_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 10, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN1_WRITE_G(v, g, idx)                           GROUP_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 10, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN1_READ(r, p)                                   MREAD_16((uint8_t *)p + 10, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VLAN1_WRITE(v, p)                                  MWRITE_16((uint8_t *)p + 10, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VID1_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 10, 4, 12, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VID1_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 10, 4, 12, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VID1_READ(r, p)                                    FIELD_MREAD_16((uint8_t *)p + 10, 4, 12, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_VID1_WRITE(v, p)                                   FIELD_MWRITE_16((uint8_t *)p + 10, 4, 12, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DEI1_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 11, 3, 1, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DEI1_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 11, 3, 1, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DEI1_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 11, 3, 1, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_DEI1_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 11, 3, 1, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_PBIT1_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 11, 0, 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_PBIT1_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 11, 0, 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_PBIT1_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p + 11, 0, 3, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_PBIT1_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p + 11, 0, 3, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_READ_G(r, g, idx)              GROUP_MREAD_32(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 12, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_WRITE_G(v, g, idx)             GROUP_MWRITE_32(g, idx*sizeof(RDD_NAT_CACHE_L2_LKP_ENTRY_DTS) + 12, v)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_READ(r, p)                     MREAD_32((uint8_t *)p + 12, r)
#define RDD_NAT_CACHE_L2_LKP_ENTRY_SRC_MAC_DST_MAC_CRC_WRITE(v, p)                    MWRITE_32((uint8_t *)p + 12, v)
/* <<<RDD_NAT_CACHE_L2_LKP_ENTRY_DTS */

/* <<<RDD_NAT_CACHE_L2_LKP_ENTRY */


/* >>>RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY */
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_F_OFFSET                                                           31
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_F_WIDTH                                                            1
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_OFFSET                                   0
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_OFFSET                                                             0
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_WORD_OFFSET                                                        0
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_F_OFFSET                                                    9
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_F_WIDTH                                                     3
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_OFFSET                                                      2
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_WORD_OFFSET                                                 0
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_F_OFFSET_MOD8                                               1
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_F_OFFSET_MOD16                                              9
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_F_OFFSET                                                       24
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_F_WIDTH                                                        1
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_OFFSET                                                         12
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_WORD_OFFSET                                                    3
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_F_OFFSET_MOD8                                                  0
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_F_OFFSET_MOD16                                                 8
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_F_OFFSET                                                            16
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_F_WIDTH                                                             8
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_OFFSET                                                              13
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_WORD_OFFSET                                                         3
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_F_OFFSET_MOD16                                                      0
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_F_OFFSET                                                            0
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_F_WIDTH                                                             16
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_OFFSET                                                              14
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_WORD_OFFSET                                                         3

/* >>>RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1   	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sub_table_id	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved4   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved5   	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	extension   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	port        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rule        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved2   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sub_table_id	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1   	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved4   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rule        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	port        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	extension   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved5   	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS;

typedef RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS * aligned_RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS fields;
} RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS_NEW;
typedef RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS_NEW * aligned_RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS), 7, 1, r)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS), 7, 1, v)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS) + 2, 1, 3, r)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS) + 2, 1, 3, v)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 2, 1, 3, r)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 2, 1, 3, v)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS) + 12, 0, 1, r)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS) + 12, 0, 1, v)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 12, 0, 1, r)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 12, 0, 1, v)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_READ_G(r, g, idx)                  GROUP_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS) + 13, r)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_WRITE_G(v, g, idx)                 GROUP_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS) + 13, v)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_READ(r, p)                         MREAD_8((uint8_t *)p + 13, r)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_WRITE(v, p)                        MWRITE_8((uint8_t *)p + 13, v)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_READ_G(r, g, idx)                  GROUP_MREAD_16(g, idx*sizeof(RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS) + 14, r)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_WRITE_G(v, g, idx)                 GROUP_MWRITE_16(g, idx*sizeof(RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS) + 14, v)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_READ(r, p)                         MREAD_16((uint8_t *)p + 14, r)
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_WRITE(v, p)                        MWRITE_16((uint8_t *)p + 14, v)
/* <<<RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_DTS */

/* <<<RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY */


/* >>>RDD_NAT_CACHE_COUNTER_LKP_ENTRY */
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_F_OFFSET                                                           31
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_F_WIDTH                                                            1
#define NAT_CACHE_COUNTER_LKP_ENTRY_NAT_CACHE_COUNTER_LKP_ENTRY_OFFSET                                       0
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_OFFSET                                                             0
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_WORD_OFFSET                                                        0
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_F_OFFSET                                                    16
#define NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_F_WIDTH                                                     8
#define NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_OFFSET                                                      1
#define NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_WORD_OFFSET                                                 0
#define NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_F_OFFSET_MOD16                                              0
#define NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_F_OFFSET                                                     0
#define NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_F_WIDTH                                                      32
#define NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_OFFSET                                                       12
#define NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_WORD_OFFSET                                                  3

/* >>>RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0   	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sub_table_id	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	counter_key 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved1   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sub_table_id	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0   	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	counter_key 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS;

typedef RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS * aligned_RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS fields;
} RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS_NEW;
typedef RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS_NEW * aligned_RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_VALID_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS), 7, 1, r)
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS), 7, 1, v)
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_VALID_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_VALID_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS) + 1, r)
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS) + 1, v)
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_READ(r, p)                 MREAD_8((uint8_t *)p + 1, r)
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_WRITE(v, p)                MWRITE_8((uint8_t *)p + 1, v)
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS) + 12, r)
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS) + 12, v)
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_READ(r, p)                  MREAD_32((uint8_t *)p + 12, r)
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 12, v)
/* <<<RDD_NAT_CACHE_COUNTER_LKP_ENTRY_DTS */

/* <<<RDD_NAT_CACHE_COUNTER_LKP_ENTRY */


/* >>>RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX */
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_F_OFFSET                                                    4
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_F_WIDTH                                                     4
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_OFFSET                                                      15
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_WORD_OFFSET                                                 3
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_F_OFFSET_MOD8                                               4
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_F_OFFSET_MOD16                                              4

/* >>>RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reserved1   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved4   	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	var_size_ctx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved1   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	var_size_ctx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved4   	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_DTS;

typedef RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_DTS * aligned_RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_DTS fields;
} RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_DTS_NEW;
typedef RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_DTS_NEW * aligned_RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_DTS_NEW ALIGNMENT8;

#define RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_DTS) + 15, 4, 4, r)
#define RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_DTS) + 15, 4, 4, v)
#define RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 15, 4, 4, r)
#define RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 15, 4, 4, v)
/* <<<RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_DTS */

/* <<<RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX */


/* >>>RDD_NATC_COMMAND_DATA_EXT */
#define NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_EXT_OFFSET                                             0
#define NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_OFFSET                                        0
#define NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_WORD_OFFSET                                   0
#define NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_F_OFFSET_MOD16                                0
#define NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_OFFSET                                                   40
#define NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_WORD_OFFSET                                              10
#define NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_F_OFFSET_MOD16                                           8

/* >>>RDD_NATC_COMMAND_DATA_EXT_DTS */
#define RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_NUMBER	40
#define RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_NUMBER	16

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	natc_command_data_reserved[RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_NUMBER];
	uint8_t	natc_l2_crc_buf[RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_NUMBER];
#else
	uint8_t	natc_command_data_reserved[RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_NUMBER];
	uint8_t	natc_l2_crc_buf[RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NATC_COMMAND_DATA_EXT_DTS;

typedef RDD_NATC_COMMAND_DATA_EXT_DTS * aligned_RDD_NATC_COMMAND_DATA_EXT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[14];
    uint64_t dword_val64[7];
    RDD_NATC_COMMAND_DATA_EXT_DTS fields;
} RDD_NATC_COMMAND_DATA_EXT_DTS_NEW;
typedef RDD_NATC_COMMAND_DATA_EXT_DTS_NEW * aligned_RDD_NATC_COMMAND_DATA_EXT_DTS_NEW ALIGNMENT8;

#define RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_NATC_COMMAND_DATA_EXT_DTS), i, r)
#define RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_NATC_COMMAND_DATA_EXT_DTS), i, v)
#define RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_READ(r, p, i)              MREAD_I_8((uint8_t *)p, i, r)
#define RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p, i, v)
#define RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_READ_G(r, g, idx, i)                  GROUP_MREAD_I_8(g, idx*sizeof(RDD_NATC_COMMAND_DATA_EXT_DTS) + 40, i, r)
#define RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_WRITE_G(v, g, idx, i)                 GROUP_MWRITE_I_8(g, idx*sizeof(RDD_NATC_COMMAND_DATA_EXT_DTS) + 40, i, v)
#define RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_READ(r, p, i)                         MREAD_I_8((uint8_t *)p + 40, i, r)
#define RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_WRITE(v, p, i)                        MWRITE_I_8((uint8_t *)p + 40, i, v)
/* <<<RDD_NATC_COMMAND_DATA_EXT_DTS */

/* <<<RDD_NATC_COMMAND_DATA_EXT */


/* >>>RDD_TCAM_IC_SCRATCH */
#define TCAM_IC_SCRATCH_KEY_OFFSET                                                               8
#define TCAM_IC_SCRATCH_KEY_WORD_OFFSET                                                          2
#define TCAM_IC_SCRATCH_KEY_F_OFFSET_MOD16                                                       8
#define TCAM_IC_SCRATCH_RESULT_OFFSET                                                            72
#define TCAM_IC_SCRATCH_RESULT_WORD_OFFSET                                                       18
#define TCAM_IC_SCRATCH_RESULT_F_OFFSET_MOD16                                                    8

/* >>>RDD_TCAM_IC_SCRATCH_DTS */
#define RDD_TCAM_IC_SCRATCH_RESERVED0_NUMBER	8
#define RDD_TCAM_IC_SCRATCH_KEY_NUMBER	64
#define RDD_TCAM_IC_SCRATCH_RESULT_NUMBER	16

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	reserved0[RDD_TCAM_IC_SCRATCH_RESERVED0_NUMBER];
	uint8_t	key[RDD_TCAM_IC_SCRATCH_KEY_NUMBER];
	uint8_t	result[RDD_TCAM_IC_SCRATCH_RESULT_NUMBER];
#else
	uint8_t	reserved0[RDD_TCAM_IC_SCRATCH_RESERVED0_NUMBER];
	uint8_t	key[RDD_TCAM_IC_SCRATCH_KEY_NUMBER];
	uint8_t	result[RDD_TCAM_IC_SCRATCH_RESULT_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCAM_IC_SCRATCH_DTS;

typedef RDD_TCAM_IC_SCRATCH_DTS * aligned_RDD_TCAM_IC_SCRATCH_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[22];
    uint64_t dword_val64[11];
    RDD_TCAM_IC_SCRATCH_DTS fields;
} RDD_TCAM_IC_SCRATCH_DTS_NEW;
typedef RDD_TCAM_IC_SCRATCH_DTS_NEW * aligned_RDD_TCAM_IC_SCRATCH_DTS_NEW ALIGNMENT8;

#define RDD_TCAM_IC_SCRATCH_KEY_READ_G(r, g, idx, i)             GROUP_MREAD_I_8(g, idx*sizeof(RDD_TCAM_IC_SCRATCH_DTS) + 8, i, r)
#define RDD_TCAM_IC_SCRATCH_KEY_WRITE_G(v, g, idx, i)            GROUP_MWRITE_I_8(g, idx*sizeof(RDD_TCAM_IC_SCRATCH_DTS) + 8, i, v)
#define RDD_TCAM_IC_SCRATCH_KEY_READ(r, p, i)                    MREAD_I_8((uint8_t *)p + 8, i, r)
#define RDD_TCAM_IC_SCRATCH_KEY_WRITE(v, p, i)                   MWRITE_I_8((uint8_t *)p + 8, i, v)
#define RDD_TCAM_IC_SCRATCH_RESULT_READ_G(r, g, idx, i)          GROUP_MREAD_I_8(g, idx*sizeof(RDD_TCAM_IC_SCRATCH_DTS) + 72, i, r)
#define RDD_TCAM_IC_SCRATCH_RESULT_WRITE_G(v, g, idx, i)         GROUP_MWRITE_I_8(g, idx*sizeof(RDD_TCAM_IC_SCRATCH_DTS) + 72, i, v)
#define RDD_TCAM_IC_SCRATCH_RESULT_READ(r, p, i)                 MREAD_I_8((uint8_t *)p + 72, i, r)
#define RDD_TCAM_IC_SCRATCH_RESULT_WRITE(v, p, i)                MWRITE_I_8((uint8_t *)p + 72, i, v)
/* <<<RDD_TCAM_IC_SCRATCH_DTS */

/* <<<RDD_TCAM_IC_SCRATCH */


/* >>>RDD_TCAM_IC_SCRATCH2 */
#define TCAM_IC_SCRATCH2_RESULT_OFFSET                                                            24
#define TCAM_IC_SCRATCH2_RESULT_WORD_OFFSET                                                       6
#define TCAM_IC_SCRATCH2_RESULT_F_OFFSET_MOD16                                                    8
#define TCAM_IC_SCRATCH2_KEY_OFFSET                                                               40
#define TCAM_IC_SCRATCH2_KEY_WORD_OFFSET                                                          10
#define TCAM_IC_SCRATCH2_KEY_F_OFFSET_MOD16                                                       8

/* >>>RDD_TCAM_IC_SCRATCH2_DTS */
#define RDD_TCAM_IC_SCRATCH2_RESERVED0_NUMBER	24
#define RDD_TCAM_IC_SCRATCH2_RESULT_NUMBER	16
#define RDD_TCAM_IC_SCRATCH2_KEY_NUMBER	64

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	reserved0[RDD_TCAM_IC_SCRATCH2_RESERVED0_NUMBER];
	uint8_t	result[RDD_TCAM_IC_SCRATCH2_RESULT_NUMBER];
	uint8_t	key[RDD_TCAM_IC_SCRATCH2_KEY_NUMBER];
#else
	uint8_t	reserved0[RDD_TCAM_IC_SCRATCH2_RESERVED0_NUMBER];
	uint8_t	result[RDD_TCAM_IC_SCRATCH2_RESULT_NUMBER];
	uint8_t	key[RDD_TCAM_IC_SCRATCH2_KEY_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_TCAM_IC_SCRATCH2_DTS;

typedef RDD_TCAM_IC_SCRATCH2_DTS * aligned_RDD_TCAM_IC_SCRATCH2_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[26];
    uint64_t dword_val64[13];
    RDD_TCAM_IC_SCRATCH2_DTS fields;
} RDD_TCAM_IC_SCRATCH2_DTS_NEW;
typedef RDD_TCAM_IC_SCRATCH2_DTS_NEW * aligned_RDD_TCAM_IC_SCRATCH2_DTS_NEW ALIGNMENT8;

#define RDD_TCAM_IC_SCRATCH2_RESULT_READ_G(r, g, idx, i)          GROUP_MREAD_I_8(g, idx*sizeof(RDD_TCAM_IC_SCRATCH2_DTS) + 24, i, r)
#define RDD_TCAM_IC_SCRATCH2_RESULT_WRITE_G(v, g, idx, i)         GROUP_MWRITE_I_8(g, idx*sizeof(RDD_TCAM_IC_SCRATCH2_DTS) + 24, i, v)
#define RDD_TCAM_IC_SCRATCH2_RESULT_READ(r, p, i)                 MREAD_I_8((uint8_t *)p + 24, i, r)
#define RDD_TCAM_IC_SCRATCH2_RESULT_WRITE(v, p, i)                MWRITE_I_8((uint8_t *)p + 24, i, v)
#define RDD_TCAM_IC_SCRATCH2_KEY_READ_G(r, g, idx, i)             GROUP_MREAD_I_8(g, idx*sizeof(RDD_TCAM_IC_SCRATCH2_DTS) + 40, i, r)
#define RDD_TCAM_IC_SCRATCH2_KEY_WRITE_G(v, g, idx, i)            GROUP_MWRITE_I_8(g, idx*sizeof(RDD_TCAM_IC_SCRATCH2_DTS) + 40, i, v)
#define RDD_TCAM_IC_SCRATCH2_KEY_READ(r, p, i)                    MREAD_I_8((uint8_t *)p + 40, i, r)
#define RDD_TCAM_IC_SCRATCH2_KEY_WRITE(v, p, i)                   MWRITE_I_8((uint8_t *)p + 40, i, v)
/* <<<RDD_TCAM_IC_SCRATCH2_DTS */

/* <<<RDD_TCAM_IC_SCRATCH2 */


/* >>>RDD_MULTICAST_WHITELIST_LKP_ENTRY */
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_F_OFFSET                                                           31
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_F_WIDTH                                                            1
#define MULTICAST_WHITELIST_LKP_ENTRY_MULTICAST_WHITELIST_LKP_ENTRY_OFFSET                                     0
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_OFFSET                                                             0
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_WORD_OFFSET                                                        0
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_F_OFFSET                                                    1
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_F_WIDTH                                                     2
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_OFFSET                                                      3
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_WORD_OFFSET                                                 0
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_F_OFFSET_MOD8                                               1
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_F_OFFSET_MOD16                                              1
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_F_OFFSET                                                         0
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_F_WIDTH                                                          1
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_OFFSET                                                           3
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_WORD_OFFSET                                                      0
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_F_OFFSET_MOD8                                                    0
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_F_OFFSET_MOD16                                                   0
#define MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_F_OFFSET                                                          0
#define MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_F_WIDTH                                                           32
#define MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_OFFSET                                                            4
#define MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_WORD_OFFSET                                                       1
#define MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_F_OFFSET                                                          0
#define MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_F_WIDTH                                                           32
#define MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_OFFSET                                                            8
#define MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_WORD_OFFSET                                                       2
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_F_OFFSET                                                    16
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_F_WIDTH                                                     16
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_OFFSET                                                      12
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_WORD_OFFSET                                                 3
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_F_OFFSET                                                    0
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_F_WIDTH                                                     16
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_OFFSET                                                      14
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_WORD_OFFSET                                                 3

/* >>>RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	num_of_vlans	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_ipv6     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_num_of_vlans	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_ipv6     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_num_of_vlans	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_ipv6     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	dst_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_dst_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_dst_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	src_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_src_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_src_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	vlan_0_union	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	vlan_1_union	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	vlan0                 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	vlan1                 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	vid0                  	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	dei0                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	pbit0                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	vid1                  	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	dei1                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	pbit1                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	is_ipv6     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	num_of_vlans	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_is_ipv6     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_num_of_vlans	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_is_ipv6     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_num_of_vlans	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	dst_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_dst_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_dst_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	src_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_src_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_src_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	vlan_1_union	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	vlan_0_union	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	vlan1                 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	vlan0                 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	vid1                  	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	dei1                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	pbit1                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	vid0                  	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	dei0                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	pbit0                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS;

typedef RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS * aligned_RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS fields;
} RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS_NEW;
typedef RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS_NEW * aligned_RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VALID_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS), 7, 1, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS), 7, 1, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VALID_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VALID_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 3, 1, 2, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 3, 1, 2, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 3, 1, 2, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 3, 1, 2, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 3, 0, 1, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 3, 0, 1, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 3, 0, 1, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 3, 0, 1, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 4, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 4, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_READ(r, p)                       MREAD_32((uint8_t *)p + 4, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 4, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 8, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 8, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_READ(r, p)                       MREAD_32((uint8_t *)p + 8, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 8, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 12, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 12, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_READ(r, p)                 MREAD_16((uint8_t *)p + 12, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_WRITE(v, p)                MWRITE_16((uint8_t *)p + 12, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN0_READ_G(r, g, idx)                 GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 12, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN0_WRITE_G(v, g, idx)                GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 12, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN0_READ(r, p)                        MREAD_16((uint8_t *)p + 12, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN0_WRITE(v, p)                       MWRITE_16((uint8_t *)p + 12, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID0_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 12, 4, 12, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID0_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 12, 4, 12, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID0_READ(r, p)                         FIELD_MREAD_16((uint8_t *)p + 12, 4, 12, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID0_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)p + 12, 4, 12, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI0_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 13, 3, 1, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI0_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 13, 3, 1, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI0_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 13, 3, 1, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI0_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 13, 3, 1, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT0_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 13, 0, 3, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT0_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 13, 0, 3, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT0_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 13, 0, 3, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT0_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 13, 0, 3, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 14, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 14, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_READ(r, p)                 MREAD_16((uint8_t *)p + 14, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_WRITE(v, p)                MWRITE_16((uint8_t *)p + 14, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN1_READ_G(r, g, idx)                 GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 14, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN1_WRITE_G(v, g, idx)                GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 14, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN1_READ(r, p)                        MREAD_16((uint8_t *)p + 14, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN1_WRITE(v, p)                       MWRITE_16((uint8_t *)p + 14, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID1_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 14, 4, 12, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID1_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 14, 4, 12, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID1_READ(r, p)                         FIELD_MREAD_16((uint8_t *)p + 14, 4, 12, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID1_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)p + 14, 4, 12, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI1_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 15, 3, 1, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI1_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 15, 3, 1, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI1_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 15, 3, 1, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI1_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 15, 3, 1, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT1_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 15, 0, 3, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT1_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS) + 15, 0, 3, v)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT1_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 15, 0, 3, r)
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT1_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 15, 0, 3, v)
/* <<<RDD_MULTICAST_WHITELIST_LKP_ENTRY_DTS */

/* <<<RDD_MULTICAST_WHITELIST_LKP_ENTRY */


/* >>>RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY */
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_F_OFFSET                                                    0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_F_WIDTH                                                     32
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_MULTICAST_WHITELIST_CONTEXT_ENTRY_OFFSET                                 0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_OFFSET                                                      0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_WORD_OFFSET                                                 0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_F_OFFSET                                                           31
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_F_WIDTH                                                            1
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_OFFSET                                                             4
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_WORD_OFFSET                                                        1
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_F_OFFSET                                                    30
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_F_WIDTH                                                     1
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_OFFSET                                                      4
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_WORD_OFFSET                                                 1
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_F_OFFSET_MOD8                                               6
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_F_OFFSET_MOD16                                              14
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_F_OFFSET                                                    28
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_F_WIDTH                                                     2
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_OFFSET                                                      4
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_WORD_OFFSET                                                 1
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_F_OFFSET_MOD8                                               4
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_F_OFFSET_MOD16                                              12
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_F_OFFSET                                                    16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_F_WIDTH                                                     16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_OFFSET                                                      8
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_WORD_OFFSET                                                 2
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_F_OFFSET                                                    0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_F_WIDTH                                                     16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_OFFSET                                                      10
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_WORD_OFFSET                                                 2
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_F_OFFSET                                                  16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_F_WIDTH                                                   16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_OFFSET                                                    12
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WORD_OFFSET                                               3
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_F_OFFSET                                                  0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_F_WIDTH                                                   16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_OFFSET                                                    14
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_WORD_OFFSET                                               3
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_OFFSET                                                            16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_WORD_OFFSET                                                       4
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_F_OFFSET_MOD16                                                    8
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_OFFSET                                                            32
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_WORD_OFFSET                                                       8
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_F_OFFSET_MOD16                                                    8

/* >>>RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS */
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_NUMBER	16
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_NUMBER	16
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_RESERVED_LIST_NUMBER	12

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	natc_control                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_natc_control                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_natc_control                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	valid                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	check_src_ip                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	num_of_vlans                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved0                                                                    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_valid                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_check_src_ip                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_num_of_vlans                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved0                                                                    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_valid                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_check_src_ip                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_num_of_vlans                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved0                                                                    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	vlan_0_union                                                                 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	vlan_1_union                                                                 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	vlan0                                                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	vlan1                                                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	vid0                                                                                   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	dei0                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	pbit0                                                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	vid1                                                                                   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	dei1                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	pbit1                                                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	next_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	prev_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_next_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_prev_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_next_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_prev_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	src_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_src_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_src_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_NUMBER];
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	dst_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_dst_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_dst_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_NUMBER];
		};
	};
	/* Union WORD 9 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 10 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 11 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	reserved_list[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_RESERVED_LIST_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_reserved_list[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_RESERVED_LIST_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_reserved_list[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_RESERVED_LIST_NUMBER];
		};
	};
	/* Union WORD 13 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 14 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	natc_control                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_natc_control                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_natc_control                                                                 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved0                                                                    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	num_of_vlans                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	check_src_ip                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	valid                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved0                                                                    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_num_of_vlans                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_check_src_ip                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_valid                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved0                                                                    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_num_of_vlans                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_check_src_ip                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_valid                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	vlan_1_union                                                                 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	vlan_0_union                                                                 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	vlan1                                                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	vlan0                                                                                  	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	vid1                                                                                   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	dei1                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	pbit1                                                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
			uint32_t	vid0                                                                                   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	dei0                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
			uint32_t	pbit0                                                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	prev_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	next_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_prev_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_next_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_prev_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_next_entry_idx                                                               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	src_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_src_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_src_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_NUMBER];
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	dst_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_dst_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_dst_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_NUMBER];
		};
	};
	/* Union WORD 9 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 10 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 11 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
			uint8_t	reserved_list[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_RESERVED_LIST_NUMBER];
		};
		/* Sub Union 1 */
		struct{
			uint8_t	reserved1_reserved_list[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_RESERVED_LIST_NUMBER];
		};
		/* Sub Union 2 */
		struct{
			uint8_t	reserved2_reserved_list[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_RESERVED_LIST_NUMBER];
		};
	};
	/* Union WORD 13 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
	/* Union WORD 14 */
	union{
		/* Sub Union 0 */
		struct{
		};
		/* Sub Union 1 */
		struct{
		};
		/* Sub Union 2 */
		struct{
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS;

typedef RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS * aligned_RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[15];
    uint64_t dword_val64[7];
    RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS fields;
} RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS_NEW;
typedef RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS_NEW * aligned_RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS), r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS), v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_READ(r, p)                   MREAD_32((uint8_t *)p, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_WRITE(v, p)                  MWRITE_32((uint8_t *)p, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 4, 7, 1, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 4, 7, 1, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 4, 7, 1, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 4, 7, 1, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 4, 6, 1, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 4, 6, 1, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 4, 6, 1, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 4, 6, 1, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 4, 4, 2, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 4, 4, 2, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 4, 4, 2, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 4, 4, 2, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_READ_G(r, g, idx)            GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 8, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_WRITE_G(v, g, idx)           GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 8, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_READ(r, p)                   MREAD_16((uint8_t *)p + 8, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_WRITE(v, p)                  MWRITE_16((uint8_t *)p + 8, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN0_READ_G(r, g, idx)                   GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 8, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN0_WRITE_G(v, g, idx)                  GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 8, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN0_READ(r, p)                          MREAD_16((uint8_t *)p + 8, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN0_WRITE(v, p)                         MWRITE_16((uint8_t *)p + 8, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID0_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 8, 4, 12, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID0_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 8, 4, 12, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID0_READ(r, p)                           FIELD_MREAD_16((uint8_t *)p + 8, 4, 12, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID0_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)p + 8, 4, 12, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI0_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 9, 3, 1, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI0_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 9, 3, 1, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI0_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p + 9, 3, 1, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI0_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p + 9, 3, 1, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT0_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 9, 0, 3, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT0_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 9, 0, 3, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT0_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 9, 0, 3, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT0_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 9, 0, 3, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_READ_G(r, g, idx)            GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 10, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_WRITE_G(v, g, idx)           GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 10, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_READ(r, p)                   MREAD_16((uint8_t *)p + 10, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_WRITE(v, p)                  MWRITE_16((uint8_t *)p + 10, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN1_READ_G(r, g, idx)                   GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 10, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN1_WRITE_G(v, g, idx)                  GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 10, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN1_READ(r, p)                          MREAD_16((uint8_t *)p + 10, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN1_WRITE(v, p)                         MWRITE_16((uint8_t *)p + 10, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID1_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 10, 4, 12, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID1_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 10, 4, 12, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID1_READ(r, p)                           FIELD_MREAD_16((uint8_t *)p + 10, 4, 12, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID1_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)p + 10, 4, 12, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI1_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 11, 3, 1, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI1_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 11, 3, 1, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI1_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p + 11, 3, 1, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI1_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p + 11, 3, 1, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT1_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 11, 0, 3, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT1_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 11, 0, 3, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT1_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 11, 0, 3, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT1_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 11, 0, 3, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 12, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 12, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_READ(r, p)                 MREAD_16((uint8_t *)p + 12, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WRITE(v, p)                MWRITE_16((uint8_t *)p + 12, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 14, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 14, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_READ(r, p)                 MREAD_16((uint8_t *)p + 14, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_WRITE(v, p)                MWRITE_16((uint8_t *)p + 14, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_READ_G(r, g, idx, i)               GROUP_MREAD_I_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 16, i, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_WRITE_G(v, g, idx, i)              GROUP_MWRITE_I_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 16, i, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_READ(r, p, i)                      MREAD_I_8((uint8_t *)p + 16, i, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_WRITE(v, p, i)                     MWRITE_I_8((uint8_t *)p + 16, i, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_READ_G(r, g, idx, i)               GROUP_MREAD_I_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 32, i, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_WRITE_G(v, g, idx, i)              GROUP_MWRITE_I_8(g, idx*sizeof(RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS) + 32, i, v)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_READ(r, p, i)                      MREAD_I_8((uint8_t *)p + 32, i, r)
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_WRITE(v, p, i)                     MWRITE_I_8((uint8_t *)p + 32, i, v)
/* <<<RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DTS */

/* <<<RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY */


/* >>>RDD_MIRRORING_DESCRIPTOR */
#define MIRRORING_DESCRIPTOR_MIRROR_EN_F_OFFSET                                                       15
#define MIRRORING_DESCRIPTOR_MIRROR_EN_F_WIDTH                                                        1
#define MIRRORING_DESCRIPTOR_MIRRORING_DESCRIPTOR_OFFSET                                              0
#define MIRRORING_DESCRIPTOR_MIRROR_EN_OFFSET                                                         0
#define MIRRORING_DESCRIPTOR_MIRROR_EN_WORD_OFFSET                                                    0
#define MIRRORING_DESCRIPTOR_MIRROR_EN_F_OFFSET_MOD8                                                  7
#define MIRRORING_DESCRIPTOR_MIRROR_EN_F_OFFSET_MOD16                                                 15
#define MIRRORING_DESCRIPTOR_DST_VPORT_F_OFFSET                                                       9
#define MIRRORING_DESCRIPTOR_DST_VPORT_F_WIDTH                                                        6
#define MIRRORING_DESCRIPTOR_DST_VPORT_OFFSET                                                         0
#define MIRRORING_DESCRIPTOR_DST_VPORT_WORD_OFFSET                                                    0
#define MIRRORING_DESCRIPTOR_DST_VPORT_F_OFFSET_MOD8                                                  1
#define MIRRORING_DESCRIPTOR_DST_VPORT_F_OFFSET_MOD16                                                 9
#define MIRRORING_DESCRIPTOR_DST_QUEUE_F_OFFSET                                                       0
#define MIRRORING_DESCRIPTOR_DST_QUEUE_F_WIDTH                                                        9
#define MIRRORING_DESCRIPTOR_DST_QUEUE_OFFSET                                                         0
#define MIRRORING_DESCRIPTOR_DST_QUEUE_WORD_OFFSET                                                    0
#define MIRRORING_DESCRIPTOR_DST_QUEUE_F_OFFSET_MOD16                                                 0
/* <<<RDD_MIRRORING_DESCRIPTOR */


/* >>>RDD_PARSER_SUMMARY */
#define PARSER_SUMMARY_DA_FILTER_MATCH_F_OFFSET                                                 31
#define PARSER_SUMMARY_DA_FILTER_MATCH_F_WIDTH                                                  1
#define PARSER_SUMMARY_PARSER_SUMMARY_OFFSET                                                    0
#define PARSER_SUMMARY_DA_FILTER_MATCH_OFFSET                                                   0
#define PARSER_SUMMARY_DA_FILTER_MATCH_WORD_OFFSET                                              0
#define PARSER_SUMMARY_DA_FILTER_MATCH_F_OFFSET_MOD8                                            7
#define PARSER_SUMMARY_DA_FILTER_MATCH_F_OFFSET_MOD16                                           15
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_OFFSET                                               30
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_WIDTH                                                1
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_OFFSET                                                 0
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_WORD_OFFSET                                            0
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_OFFSET_MOD8                                          6
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_OFFSET_MOD16                                         14
#define PARSER_SUMMARY_IP_FRAGMENT_F_OFFSET                                                     29
#define PARSER_SUMMARY_IP_FRAGMENT_F_WIDTH                                                      1
#define PARSER_SUMMARY_IP_FRAGMENT_OFFSET                                                       0
#define PARSER_SUMMARY_IP_FRAGMENT_WORD_OFFSET                                                  0
#define PARSER_SUMMARY_IP_FRAGMENT_F_OFFSET_MOD8                                                5
#define PARSER_SUMMARY_IP_FRAGMENT_F_OFFSET_MOD16                                               13
#define PARSER_SUMMARY_IP_FILTER_MATCH_F_OFFSET                                                 28
#define PARSER_SUMMARY_IP_FILTER_MATCH_F_WIDTH                                                  1
#define PARSER_SUMMARY_IP_FILTER_MATCH_OFFSET                                                   0
#define PARSER_SUMMARY_IP_FILTER_MATCH_WORD_OFFSET                                              0
#define PARSER_SUMMARY_IP_FILTER_MATCH_F_OFFSET_MOD8                                            4
#define PARSER_SUMMARY_IP_FILTER_MATCH_F_OFFSET_MOD16                                           12
#define PARSER_SUMMARY_IP_FILTER_NUM_F_OFFSET                                                   26
#define PARSER_SUMMARY_IP_FILTER_NUM_F_WIDTH                                                    2
#define PARSER_SUMMARY_IP_FILTER_NUM_OFFSET                                                     0
#define PARSER_SUMMARY_IP_FILTER_NUM_WORD_OFFSET                                                0
#define PARSER_SUMMARY_IP_FILTER_NUM_F_OFFSET_MOD8                                              2
#define PARSER_SUMMARY_IP_FILTER_NUM_F_OFFSET_MOD16                                             10
#define PARSER_SUMMARY_TCP_UDP_F_OFFSET                                                         25
#define PARSER_SUMMARY_TCP_UDP_F_WIDTH                                                          1
#define PARSER_SUMMARY_TCP_UDP_OFFSET                                                           0
#define PARSER_SUMMARY_TCP_UDP_WORD_OFFSET                                                      0
#define PARSER_SUMMARY_TCP_UDP_F_OFFSET_MOD8                                                    1
#define PARSER_SUMMARY_TCP_UDP_F_OFFSET_MOD16                                                   9
#define PARSER_SUMMARY_IPV6_EXT_HEADER_F_OFFSET                                                 24
#define PARSER_SUMMARY_IPV6_EXT_HEADER_F_WIDTH                                                  1
#define PARSER_SUMMARY_IPV6_EXT_HEADER_OFFSET                                                   0
#define PARSER_SUMMARY_IPV6_EXT_HEADER_WORD_OFFSET                                              0
#define PARSER_SUMMARY_IPV6_EXT_HEADER_F_OFFSET_MOD8                                            0
#define PARSER_SUMMARY_IPV6_EXT_HEADER_F_OFFSET_MOD16                                           8
#define PARSER_SUMMARY_TCP_FLAG_F_OFFSET                                                        23
#define PARSER_SUMMARY_TCP_FLAG_F_WIDTH                                                         1
#define PARSER_SUMMARY_TCP_FLAG_OFFSET                                                          1
#define PARSER_SUMMARY_TCP_FLAG_WORD_OFFSET                                                     0
#define PARSER_SUMMARY_TCP_FLAG_F_OFFSET_MOD8                                                   7
#define PARSER_SUMMARY_TCP_FLAG_F_OFFSET_MOD16                                                  7
#define PARSER_SUMMARY_P_TAG_F_OFFSET                                                           22
#define PARSER_SUMMARY_P_TAG_F_WIDTH                                                            1
#define PARSER_SUMMARY_P_TAG_OFFSET                                                             1
#define PARSER_SUMMARY_P_TAG_WORD_OFFSET                                                        0
#define PARSER_SUMMARY_P_TAG_F_OFFSET_MOD8                                                      6
#define PARSER_SUMMARY_P_TAG_F_OFFSET_MOD16                                                     6
#define PARSER_SUMMARY_VID_FILTER_HIT_F_OFFSET                                                  21
#define PARSER_SUMMARY_VID_FILTER_HIT_F_WIDTH                                                   1
#define PARSER_SUMMARY_VID_FILTER_HIT_OFFSET                                                    1
#define PARSER_SUMMARY_VID_FILTER_HIT_WORD_OFFSET                                               0
#define PARSER_SUMMARY_VID_FILTER_HIT_F_OFFSET_MOD8                                             5
#define PARSER_SUMMARY_VID_FILTER_HIT_F_OFFSET_MOD16                                            5
#define PARSER_SUMMARY_EXCEPTION_F_OFFSET                                                       20
#define PARSER_SUMMARY_EXCEPTION_F_WIDTH                                                        1
#define PARSER_SUMMARY_EXCEPTION_OFFSET                                                         1
#define PARSER_SUMMARY_EXCEPTION_WORD_OFFSET                                                    0
#define PARSER_SUMMARY_EXCEPTION_F_OFFSET_MOD8                                                  4
#define PARSER_SUMMARY_EXCEPTION_F_OFFSET_MOD16                                                 4
#define PARSER_SUMMARY_DA_FILTER_NUMBER_F_OFFSET                                                16
#define PARSER_SUMMARY_DA_FILTER_NUMBER_F_WIDTH                                                 4
#define PARSER_SUMMARY_DA_FILTER_NUMBER_OFFSET                                                  1
#define PARSER_SUMMARY_DA_FILTER_NUMBER_WORD_OFFSET                                             0
#define PARSER_SUMMARY_DA_FILTER_NUMBER_F_OFFSET_MOD8                                           0
#define PARSER_SUMMARY_DA_FILTER_NUMBER_F_OFFSET_MOD16                                          0
#define PARSER_SUMMARY_L4_PROTOCOL_F_OFFSET                                                     12
#define PARSER_SUMMARY_L4_PROTOCOL_F_WIDTH                                                      4
#define PARSER_SUMMARY_L4_PROTOCOL_OFFSET                                                       2
#define PARSER_SUMMARY_L4_PROTOCOL_WORD_OFFSET                                                  0
#define PARSER_SUMMARY_L4_PROTOCOL_F_OFFSET_MOD8                                                4
#define PARSER_SUMMARY_L4_PROTOCOL_F_OFFSET_MOD16                                               12
#define PARSER_SUMMARY__5_TUP_VALID_F_OFFSET                                                    11
#define PARSER_SUMMARY__5_TUP_VALID_F_WIDTH                                                     1
#define PARSER_SUMMARY__5_TUP_VALID_OFFSET                                                      2
#define PARSER_SUMMARY__5_TUP_VALID_WORD_OFFSET                                                 0
#define PARSER_SUMMARY__5_TUP_VALID_F_OFFSET_MOD8                                               3
#define PARSER_SUMMARY__5_TUP_VALID_F_OFFSET_MOD16                                              11
#define PARSER_SUMMARY_DHCP_F_OFFSET                                                            10
#define PARSER_SUMMARY_DHCP_F_WIDTH                                                             1
#define PARSER_SUMMARY_DHCP_OFFSET                                                              2
#define PARSER_SUMMARY_DHCP_WORD_OFFSET                                                         0
#define PARSER_SUMMARY_DHCP_F_OFFSET_MOD8                                                       2
#define PARSER_SUMMARY_DHCP_F_OFFSET_MOD16                                                      10
#define PARSER_SUMMARY_VLANS_NUM_F_OFFSET                                                       8
#define PARSER_SUMMARY_VLANS_NUM_F_WIDTH                                                        2
#define PARSER_SUMMARY_VLANS_NUM_OFFSET                                                         2
#define PARSER_SUMMARY_VLANS_NUM_WORD_OFFSET                                                    0
#define PARSER_SUMMARY_VLANS_NUM_F_OFFSET_MOD8                                                  0
#define PARSER_SUMMARY_VLANS_NUM_F_OFFSET_MOD16                                                 8
#define PARSER_SUMMARY_BROADCAST_F_OFFSET                                                       7
#define PARSER_SUMMARY_BROADCAST_F_WIDTH                                                        1
#define PARSER_SUMMARY_BROADCAST_OFFSET                                                         3
#define PARSER_SUMMARY_BROADCAST_WORD_OFFSET                                                    0
#define PARSER_SUMMARY_BROADCAST_F_OFFSET_MOD8                                                  7
#define PARSER_SUMMARY_BROADCAST_F_OFFSET_MOD16                                                 7
#define PARSER_SUMMARY_MULTICAST_F_OFFSET                                                       6
#define PARSER_SUMMARY_MULTICAST_F_WIDTH                                                        1
#define PARSER_SUMMARY_MULTICAST_OFFSET                                                         3
#define PARSER_SUMMARY_MULTICAST_WORD_OFFSET                                                    0
#define PARSER_SUMMARY_MULTICAST_F_OFFSET_MOD8                                                  6
#define PARSER_SUMMARY_MULTICAST_F_OFFSET_MOD16                                                 6
#define PARSER_SUMMARY_L3_PROTOCOL_F_OFFSET                                                     4
#define PARSER_SUMMARY_L3_PROTOCOL_F_WIDTH                                                      2
#define PARSER_SUMMARY_L3_PROTOCOL_OFFSET                                                       3
#define PARSER_SUMMARY_L3_PROTOCOL_WORD_OFFSET                                                  0
#define PARSER_SUMMARY_L3_PROTOCOL_F_OFFSET_MOD8                                                4
#define PARSER_SUMMARY_L3_PROTOCOL_F_OFFSET_MOD16                                               4
#define PARSER_SUMMARY_L2_PROTOCOL_F_OFFSET                                                     0
#define PARSER_SUMMARY_L2_PROTOCOL_F_WIDTH                                                      4
#define PARSER_SUMMARY_L2_PROTOCOL_OFFSET                                                       3
#define PARSER_SUMMARY_L2_PROTOCOL_WORD_OFFSET                                                  0
#define PARSER_SUMMARY_L2_PROTOCOL_F_OFFSET_MOD8                                                0
#define PARSER_SUMMARY_L2_PROTOCOL_F_OFFSET_MOD16                                               0

/* >>>RDD_PARSER_SUMMARY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	da_filter_match  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	first_ip_fragment	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_fragment      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_filter_match  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_filter_num    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_udp          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ipv6_ext_header  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_flag         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	p_tag            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vid_filter_hit   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	exception        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	da_filter_number 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l4_protocol      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l4_protocol enumeration*/
	uint32_t	_5_tup_valid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dhcp             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vlans_num        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	broadcast        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	multicast        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l3_protocol      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l3_protocol enumeration*/
	uint32_t	l2_protocol      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	l2_protocol      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l3_protocol      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l3_protocol enumeration*/
	uint32_t	multicast        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	broadcast        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vlans_num        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dhcp             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	_5_tup_valid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	l4_protocol      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l4_protocol enumeration*/
	uint32_t	da_filter_number 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	exception        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vid_filter_hit   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	p_tag            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_flag         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ipv6_ext_header  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_udp          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_filter_num    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_filter_match  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_fragment      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	first_ip_fragment	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	da_filter_match  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PARSER_SUMMARY_DTS;

typedef RDD_PARSER_SUMMARY_DTS * aligned_RDD_PARSER_SUMMARY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_PARSER_SUMMARY_DTS fields;
} RDD_PARSER_SUMMARY_DTS_NEW;
typedef RDD_PARSER_SUMMARY_DTS_NEW * aligned_RDD_PARSER_SUMMARY_DTS_NEW ALIGNMENT8;

#define RDD_PARSER_SUMMARY_DA_FILTER_MATCH_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 7, 1, r)
#define RDD_PARSER_SUMMARY_DA_FILTER_MATCH_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 7, 1, v)
#define RDD_PARSER_SUMMARY_DA_FILTER_MATCH_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_PARSER_SUMMARY_DA_FILTER_MATCH_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_PARSER_SUMMARY_FIRST_IP_FRAGMENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 6, 1, r)
#define RDD_PARSER_SUMMARY_FIRST_IP_FRAGMENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 6, 1, v)
#define RDD_PARSER_SUMMARY_FIRST_IP_FRAGMENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_PARSER_SUMMARY_FIRST_IP_FRAGMENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_PARSER_SUMMARY_IP_FRAGMENT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 5, 1, r)
#define RDD_PARSER_SUMMARY_IP_FRAGMENT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 5, 1, v)
#define RDD_PARSER_SUMMARY_IP_FRAGMENT_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_PARSER_SUMMARY_IP_FRAGMENT_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_PARSER_SUMMARY_IP_FILTER_MATCH_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 4, 1, r)
#define RDD_PARSER_SUMMARY_IP_FILTER_MATCH_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 4, 1, v)
#define RDD_PARSER_SUMMARY_IP_FILTER_MATCH_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_PARSER_SUMMARY_IP_FILTER_MATCH_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_PARSER_SUMMARY_IP_FILTER_NUM_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 2, 2, r)
#define RDD_PARSER_SUMMARY_IP_FILTER_NUM_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 2, 2, v)
#define RDD_PARSER_SUMMARY_IP_FILTER_NUM_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p, 2, 2, r)
#define RDD_PARSER_SUMMARY_IP_FILTER_NUM_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p, 2, 2, v)
#define RDD_PARSER_SUMMARY_TCP_UDP_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 1, 1, r)
#define RDD_PARSER_SUMMARY_TCP_UDP_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 1, 1, v)
#define RDD_PARSER_SUMMARY_TCP_UDP_READ(r, p)                           FIELD_MREAD_8((uint8_t *)p, 1, 1, r)
#define RDD_PARSER_SUMMARY_TCP_UDP_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)p, 1, 1, v)
#define RDD_PARSER_SUMMARY_IPV6_EXT_HEADER_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 0, 1, r)
#define RDD_PARSER_SUMMARY_IPV6_EXT_HEADER_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS), 0, 1, v)
#define RDD_PARSER_SUMMARY_IPV6_EXT_HEADER_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p, 0, 1, r)
#define RDD_PARSER_SUMMARY_IPV6_EXT_HEADER_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p, 0, 1, v)
#define RDD_PARSER_SUMMARY_TCP_FLAG_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 1, 7, 1, r)
#define RDD_PARSER_SUMMARY_TCP_FLAG_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 1, 7, 1, v)
#define RDD_PARSER_SUMMARY_TCP_FLAG_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 1, 7, 1, r)
#define RDD_PARSER_SUMMARY_TCP_FLAG_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 1, 7, 1, v)
#define RDD_PARSER_SUMMARY_P_TAG_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 1, 6, 1, r)
#define RDD_PARSER_SUMMARY_P_TAG_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 1, 6, 1, v)
#define RDD_PARSER_SUMMARY_P_TAG_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 1, 6, 1, r)
#define RDD_PARSER_SUMMARY_P_TAG_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 1, 6, 1, v)
#define RDD_PARSER_SUMMARY_VID_FILTER_HIT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 1, 5, 1, r)
#define RDD_PARSER_SUMMARY_VID_FILTER_HIT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 1, 5, 1, v)
#define RDD_PARSER_SUMMARY_VID_FILTER_HIT_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 1, 5, 1, r)
#define RDD_PARSER_SUMMARY_VID_FILTER_HIT_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 1, 5, 1, v)
#define RDD_PARSER_SUMMARY_EXCEPTION_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 1, 4, 1, r)
#define RDD_PARSER_SUMMARY_EXCEPTION_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 1, 4, 1, v)
#define RDD_PARSER_SUMMARY_EXCEPTION_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 1, 4, 1, r)
#define RDD_PARSER_SUMMARY_EXCEPTION_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 1, 4, 1, v)
#define RDD_PARSER_SUMMARY_DA_FILTER_NUMBER_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 1, 0, 4, r)
#define RDD_PARSER_SUMMARY_DA_FILTER_NUMBER_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 1, 0, 4, v)
#define RDD_PARSER_SUMMARY_DA_FILTER_NUMBER_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 1, 0, 4, r)
#define RDD_PARSER_SUMMARY_DA_FILTER_NUMBER_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 1, 0, 4, v)
#define RDD_PARSER_SUMMARY_L4_PROTOCOL_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 2, 4, 4, r) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_SUMMARY_L4_PROTOCOL_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 2, 4, 4, v) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_SUMMARY_L4_PROTOCOL_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 2, 4, 4, r) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_SUMMARY_L4_PROTOCOL_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 2, 4, 4, v) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_SUMMARY__5_TUP_VALID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 2, 3, 1, r)
#define RDD_PARSER_SUMMARY__5_TUP_VALID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 2, 3, 1, v)
#define RDD_PARSER_SUMMARY__5_TUP_VALID_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 2, 3, 1, r)
#define RDD_PARSER_SUMMARY__5_TUP_VALID_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 2, 3, 1, v)
#define RDD_PARSER_SUMMARY_DHCP_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 2, 2, 1, r)
#define RDD_PARSER_SUMMARY_DHCP_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 2, 2, 1, v)
#define RDD_PARSER_SUMMARY_DHCP_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 2, 2, 1, r)
#define RDD_PARSER_SUMMARY_DHCP_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 2, 2, 1, v)
#define RDD_PARSER_SUMMARY_VLANS_NUM_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 2, 0, 2, r)
#define RDD_PARSER_SUMMARY_VLANS_NUM_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 2, 0, 2, v)
#define RDD_PARSER_SUMMARY_VLANS_NUM_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 2, 0, 2, r)
#define RDD_PARSER_SUMMARY_VLANS_NUM_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 2, 0, 2, v)
#define RDD_PARSER_SUMMARY_BROADCAST_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 3, 7, 1, r)
#define RDD_PARSER_SUMMARY_BROADCAST_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 3, 7, 1, v)
#define RDD_PARSER_SUMMARY_BROADCAST_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 3, 7, 1, r)
#define RDD_PARSER_SUMMARY_BROADCAST_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 3, 7, 1, v)
#define RDD_PARSER_SUMMARY_MULTICAST_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 3, 6, 1, r)
#define RDD_PARSER_SUMMARY_MULTICAST_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 3, 6, 1, v)
#define RDD_PARSER_SUMMARY_MULTICAST_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 3, 6, 1, r)
#define RDD_PARSER_SUMMARY_MULTICAST_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 3, 6, 1, v)
#define RDD_PARSER_SUMMARY_L3_PROTOCOL_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 3, 4, 2, r) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_SUMMARY_L3_PROTOCOL_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 3, 4, 2, v) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_SUMMARY_L3_PROTOCOL_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 3, 4, 2, r) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_SUMMARY_L3_PROTOCOL_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 3, 4, 2, v) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_SUMMARY_L2_PROTOCOL_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 3, 0, 4, r)
#define RDD_PARSER_SUMMARY_L2_PROTOCOL_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_SUMMARY_DTS) + 3, 0, 4, v)
#define RDD_PARSER_SUMMARY_L2_PROTOCOL_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 3, 0, 4, r)
#define RDD_PARSER_SUMMARY_L2_PROTOCOL_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 3, 0, 4, v)
/* <<<RDD_PARSER_SUMMARY_DTS */

/* <<<RDD_PARSER_SUMMARY */


/* >>>RDD_PARSER_RESULT */
#define PARSER_RESULT_DA_FILTER_MATCH_F_OFFSET                                                 31
#define PARSER_RESULT_DA_FILTER_MATCH_F_WIDTH                                                  1
#define PARSER_RESULT_PARSER_RESULT_OFFSET                                                     0
#define PARSER_RESULT_DA_FILTER_MATCH_OFFSET                                                   0
#define PARSER_RESULT_DA_FILTER_MATCH_WORD_OFFSET                                              0
#define PARSER_RESULT_DA_FILTER_MATCH_F_OFFSET_MOD8                                            7
#define PARSER_RESULT_DA_FILTER_MATCH_F_OFFSET_MOD16                                           15
#define PARSER_RESULT_FIRST_IP_FRAGMENT_F_OFFSET                                               30
#define PARSER_RESULT_FIRST_IP_FRAGMENT_F_WIDTH                                                1
#define PARSER_RESULT_FIRST_IP_FRAGMENT_OFFSET                                                 0
#define PARSER_RESULT_FIRST_IP_FRAGMENT_WORD_OFFSET                                            0
#define PARSER_RESULT_FIRST_IP_FRAGMENT_F_OFFSET_MOD8                                          6
#define PARSER_RESULT_FIRST_IP_FRAGMENT_F_OFFSET_MOD16                                         14
#define PARSER_RESULT_IP_FRAGMENT_F_OFFSET                                                     29
#define PARSER_RESULT_IP_FRAGMENT_F_WIDTH                                                      1
#define PARSER_RESULT_IP_FRAGMENT_OFFSET                                                       0
#define PARSER_RESULT_IP_FRAGMENT_WORD_OFFSET                                                  0
#define PARSER_RESULT_IP_FRAGMENT_F_OFFSET_MOD8                                                5
#define PARSER_RESULT_IP_FRAGMENT_F_OFFSET_MOD16                                               13
#define PARSER_RESULT_IP_FILTER_MATCH_F_OFFSET                                                 28
#define PARSER_RESULT_IP_FILTER_MATCH_F_WIDTH                                                  1
#define PARSER_RESULT_IP_FILTER_MATCH_OFFSET                                                   0
#define PARSER_RESULT_IP_FILTER_MATCH_WORD_OFFSET                                              0
#define PARSER_RESULT_IP_FILTER_MATCH_F_OFFSET_MOD8                                            4
#define PARSER_RESULT_IP_FILTER_MATCH_F_OFFSET_MOD16                                           12
#define PARSER_RESULT_IP_FILTER_NUM_F_OFFSET                                                   26
#define PARSER_RESULT_IP_FILTER_NUM_F_WIDTH                                                    2
#define PARSER_RESULT_IP_FILTER_NUM_OFFSET                                                     0
#define PARSER_RESULT_IP_FILTER_NUM_WORD_OFFSET                                                0
#define PARSER_RESULT_IP_FILTER_NUM_F_OFFSET_MOD8                                              2
#define PARSER_RESULT_IP_FILTER_NUM_F_OFFSET_MOD16                                             10
#define PARSER_RESULT_TCP_UDP_F_OFFSET                                                         25
#define PARSER_RESULT_TCP_UDP_F_WIDTH                                                          1
#define PARSER_RESULT_TCP_UDP_OFFSET                                                           0
#define PARSER_RESULT_TCP_UDP_WORD_OFFSET                                                      0
#define PARSER_RESULT_TCP_UDP_F_OFFSET_MOD8                                                    1
#define PARSER_RESULT_TCP_UDP_F_OFFSET_MOD16                                                   9
#define PARSER_RESULT_IPV6_EXT_HEADER_F_OFFSET                                                 24
#define PARSER_RESULT_IPV6_EXT_HEADER_F_WIDTH                                                  1
#define PARSER_RESULT_IPV6_EXT_HEADER_OFFSET                                                   0
#define PARSER_RESULT_IPV6_EXT_HEADER_WORD_OFFSET                                              0
#define PARSER_RESULT_IPV6_EXT_HEADER_F_OFFSET_MOD8                                            0
#define PARSER_RESULT_IPV6_EXT_HEADER_F_OFFSET_MOD16                                           8
#define PARSER_RESULT_TCP_FLAG_F_OFFSET                                                        23
#define PARSER_RESULT_TCP_FLAG_F_WIDTH                                                         1
#define PARSER_RESULT_TCP_FLAG_OFFSET                                                          1
#define PARSER_RESULT_TCP_FLAG_WORD_OFFSET                                                     0
#define PARSER_RESULT_TCP_FLAG_F_OFFSET_MOD8                                                   7
#define PARSER_RESULT_TCP_FLAG_F_OFFSET_MOD16                                                  7
#define PARSER_RESULT_P_TAG_F_OFFSET                                                           22
#define PARSER_RESULT_P_TAG_F_WIDTH                                                            1
#define PARSER_RESULT_P_TAG_OFFSET                                                             1
#define PARSER_RESULT_P_TAG_WORD_OFFSET                                                        0
#define PARSER_RESULT_P_TAG_F_OFFSET_MOD8                                                      6
#define PARSER_RESULT_P_TAG_F_OFFSET_MOD16                                                     6
#define PARSER_RESULT_VID_FILTER_HIT_F_OFFSET                                                  21
#define PARSER_RESULT_VID_FILTER_HIT_F_WIDTH                                                   1
#define PARSER_RESULT_VID_FILTER_HIT_OFFSET                                                    1
#define PARSER_RESULT_VID_FILTER_HIT_WORD_OFFSET                                               0
#define PARSER_RESULT_VID_FILTER_HIT_F_OFFSET_MOD8                                             5
#define PARSER_RESULT_VID_FILTER_HIT_F_OFFSET_MOD16                                            5
#define PARSER_RESULT_EXCEPTION_F_OFFSET                                                       20
#define PARSER_RESULT_EXCEPTION_F_WIDTH                                                        1
#define PARSER_RESULT_EXCEPTION_OFFSET                                                         1
#define PARSER_RESULT_EXCEPTION_WORD_OFFSET                                                    0
#define PARSER_RESULT_EXCEPTION_F_OFFSET_MOD8                                                  4
#define PARSER_RESULT_EXCEPTION_F_OFFSET_MOD16                                                 4
#define PARSER_RESULT_DA_FILTER_NUMBER_F_OFFSET                                                16
#define PARSER_RESULT_DA_FILTER_NUMBER_F_WIDTH                                                 4
#define PARSER_RESULT_DA_FILTER_NUMBER_OFFSET                                                  1
#define PARSER_RESULT_DA_FILTER_NUMBER_WORD_OFFSET                                             0
#define PARSER_RESULT_DA_FILTER_NUMBER_F_OFFSET_MOD8                                           0
#define PARSER_RESULT_DA_FILTER_NUMBER_F_OFFSET_MOD16                                          0
#define PARSER_RESULT_LAYER4_PROTOCOL_F_OFFSET                                                 12
#define PARSER_RESULT_LAYER4_PROTOCOL_F_WIDTH                                                  4
#define PARSER_RESULT_LAYER4_PROTOCOL_OFFSET                                                   2
#define PARSER_RESULT_LAYER4_PROTOCOL_WORD_OFFSET                                              0
#define PARSER_RESULT_LAYER4_PROTOCOL_F_OFFSET_MOD8                                            4
#define PARSER_RESULT_LAYER4_PROTOCOL_F_OFFSET_MOD16                                           12
#define PARSER_RESULT__5_TUP_VALID_F_OFFSET                                                    11
#define PARSER_RESULT__5_TUP_VALID_F_WIDTH                                                     1
#define PARSER_RESULT__5_TUP_VALID_OFFSET                                                      2
#define PARSER_RESULT__5_TUP_VALID_WORD_OFFSET                                                 0
#define PARSER_RESULT__5_TUP_VALID_F_OFFSET_MOD8                                               3
#define PARSER_RESULT__5_TUP_VALID_F_OFFSET_MOD16                                              11
#define PARSER_RESULT_DHCP_F_OFFSET                                                            10
#define PARSER_RESULT_DHCP_F_WIDTH                                                             1
#define PARSER_RESULT_DHCP_OFFSET                                                              2
#define PARSER_RESULT_DHCP_WORD_OFFSET                                                         0
#define PARSER_RESULT_DHCP_F_OFFSET_MOD8                                                       2
#define PARSER_RESULT_DHCP_F_OFFSET_MOD16                                                      10
#define PARSER_RESULT_VLANS_NUM_F_OFFSET                                                       8
#define PARSER_RESULT_VLANS_NUM_F_WIDTH                                                        2
#define PARSER_RESULT_VLANS_NUM_OFFSET                                                         2
#define PARSER_RESULT_VLANS_NUM_WORD_OFFSET                                                    0
#define PARSER_RESULT_VLANS_NUM_F_OFFSET_MOD8                                                  0
#define PARSER_RESULT_VLANS_NUM_F_OFFSET_MOD16                                                 8
#define PARSER_RESULT_BROADCAST_F_OFFSET                                                       7
#define PARSER_RESULT_BROADCAST_F_WIDTH                                                        1
#define PARSER_RESULT_BROADCAST_OFFSET                                                         3
#define PARSER_RESULT_BROADCAST_WORD_OFFSET                                                    0
#define PARSER_RESULT_BROADCAST_F_OFFSET_MOD8                                                  7
#define PARSER_RESULT_BROADCAST_F_OFFSET_MOD16                                                 7
#define PARSER_RESULT_MULTICAST_F_OFFSET                                                       6
#define PARSER_RESULT_MULTICAST_F_WIDTH                                                        1
#define PARSER_RESULT_MULTICAST_OFFSET                                                         3
#define PARSER_RESULT_MULTICAST_WORD_OFFSET                                                    0
#define PARSER_RESULT_MULTICAST_F_OFFSET_MOD8                                                  6
#define PARSER_RESULT_MULTICAST_F_OFFSET_MOD16                                                 6
#define PARSER_RESULT_LAYER3_PROTOCOL_F_OFFSET                                                 4
#define PARSER_RESULT_LAYER3_PROTOCOL_F_WIDTH                                                  2
#define PARSER_RESULT_LAYER3_PROTOCOL_OFFSET                                                   3
#define PARSER_RESULT_LAYER3_PROTOCOL_WORD_OFFSET                                              0
#define PARSER_RESULT_LAYER3_PROTOCOL_F_OFFSET_MOD8                                            4
#define PARSER_RESULT_LAYER3_PROTOCOL_F_OFFSET_MOD16                                           4
#define PARSER_RESULT_LAYER2_PROTOCOL_F_OFFSET                                                 0
#define PARSER_RESULT_LAYER2_PROTOCOL_F_WIDTH                                                  4
#define PARSER_RESULT_LAYER2_PROTOCOL_OFFSET                                                   3
#define PARSER_RESULT_LAYER2_PROTOCOL_WORD_OFFSET                                              0
#define PARSER_RESULT_LAYER2_PROTOCOL_F_OFFSET_MOD8                                            0
#define PARSER_RESULT_LAYER2_PROTOCOL_F_OFFSET_MOD16                                           0
#define PARSER_RESULT_TAG_TYPE_F_OFFSET                                                        30
#define PARSER_RESULT_TAG_TYPE_F_WIDTH                                                         2
#define PARSER_RESULT_TAG_TYPE_OFFSET                                                          4
#define PARSER_RESULT_TAG_TYPE_WORD_OFFSET                                                     1
#define PARSER_RESULT_TAG_TYPE_F_OFFSET_MOD8                                                   6
#define PARSER_RESULT_TAG_TYPE_F_OFFSET_MOD16                                                  14
#define PARSER_RESULT_MAC_SPOOF_F_OFFSET                                                       29
#define PARSER_RESULT_MAC_SPOOF_F_WIDTH                                                        1
#define PARSER_RESULT_MAC_SPOOF_OFFSET                                                         4
#define PARSER_RESULT_MAC_SPOOF_WORD_OFFSET                                                    1
#define PARSER_RESULT_MAC_SPOOF_F_OFFSET_MOD8                                                  5
#define PARSER_RESULT_MAC_SPOOF_F_OFFSET_MOD16                                                 13
#define PARSER_RESULT_TPID_VLAN_0_F_OFFSET                                                     26
#define PARSER_RESULT_TPID_VLAN_0_F_WIDTH                                                      3
#define PARSER_RESULT_TPID_VLAN_0_OFFSET                                                       4
#define PARSER_RESULT_TPID_VLAN_0_WORD_OFFSET                                                  1
#define PARSER_RESULT_TPID_VLAN_0_F_OFFSET_MOD8                                                2
#define PARSER_RESULT_TPID_VLAN_0_F_OFFSET_MOD16                                               10
#define PARSER_RESULT_TPID_VLAN_1_F_OFFSET                                                     23
#define PARSER_RESULT_TPID_VLAN_1_F_WIDTH                                                      3
#define PARSER_RESULT_TPID_VLAN_1_OFFSET                                                       4
#define PARSER_RESULT_TPID_VLAN_1_WORD_OFFSET                                                  1
#define PARSER_RESULT_TPID_VLAN_1_F_OFFSET_MOD8                                                7
#define PARSER_RESULT_TPID_VLAN_1_F_OFFSET_MOD16                                               7
#define PARSER_RESULT_TPID_VLAN_2_F_OFFSET                                                     20
#define PARSER_RESULT_TPID_VLAN_2_F_WIDTH                                                      3
#define PARSER_RESULT_TPID_VLAN_2_OFFSET                                                       5
#define PARSER_RESULT_TPID_VLAN_2_WORD_OFFSET                                                  1
#define PARSER_RESULT_TPID_VLAN_2_F_OFFSET_MOD8                                                4
#define PARSER_RESULT_TPID_VLAN_2_F_OFFSET_MOD16                                               4
#define PARSER_RESULT_IN_CFI_F_OFFSET                                                          19
#define PARSER_RESULT_IN_CFI_F_WIDTH                                                           1
#define PARSER_RESULT_IN_CFI_OFFSET                                                            5
#define PARSER_RESULT_IN_CFI_WORD_OFFSET                                                       1
#define PARSER_RESULT_IN_CFI_F_OFFSET_MOD8                                                     3
#define PARSER_RESULT_IN_CFI_F_OFFSET_MOD16                                                    3
#define PARSER_RESULT_OUT_CFI_F_OFFSET                                                         18
#define PARSER_RESULT_OUT_CFI_F_WIDTH                                                          1
#define PARSER_RESULT_OUT_CFI_OFFSET                                                           5
#define PARSER_RESULT_OUT_CFI_WORD_OFFSET                                                      1
#define PARSER_RESULT_OUT_CFI_F_OFFSET_MOD8                                                    2
#define PARSER_RESULT_OUT_CFI_F_OFFSET_MOD16                                                   2
#define PARSER_RESULT_NO_OUTER_F_OFFSET                                                        17
#define PARSER_RESULT_NO_OUTER_F_WIDTH                                                         1
#define PARSER_RESULT_NO_OUTER_OFFSET                                                          5
#define PARSER_RESULT_NO_OUTER_WORD_OFFSET                                                     1
#define PARSER_RESULT_NO_OUTER_F_OFFSET_MOD8                                                   1
#define PARSER_RESULT_NO_OUTER_F_OFFSET_MOD16                                                  1
#define PARSER_RESULT_NO_INNER_F_OFFSET                                                        16
#define PARSER_RESULT_NO_INNER_F_WIDTH                                                         1
#define PARSER_RESULT_NO_INNER_OFFSET                                                          5
#define PARSER_RESULT_NO_INNER_WORD_OFFSET                                                     1
#define PARSER_RESULT_NO_INNER_F_OFFSET_MOD8                                                   0
#define PARSER_RESULT_NO_INNER_F_OFFSET_MOD16                                                  0
#define PARSER_RESULT_ETH_VERSION_F_OFFSET                                                     14
#define PARSER_RESULT_ETH_VERSION_F_WIDTH                                                      2
#define PARSER_RESULT_ETH_VERSION_OFFSET                                                       6
#define PARSER_RESULT_ETH_VERSION_WORD_OFFSET                                                  1
#define PARSER_RESULT_ETH_VERSION_F_OFFSET_MOD8                                                6
#define PARSER_RESULT_ETH_VERSION_F_OFFSET_MOD16                                               14
#define PARSER_RESULT_IP_MC_L2_F_OFFSET                                                        12
#define PARSER_RESULT_IP_MC_L2_F_WIDTH                                                         1
#define PARSER_RESULT_IP_MC_L2_OFFSET                                                          6
#define PARSER_RESULT_IP_MC_L2_WORD_OFFSET                                                     1
#define PARSER_RESULT_IP_MC_L2_F_OFFSET_MOD8                                                   4
#define PARSER_RESULT_IP_MC_L2_F_OFFSET_MOD16                                                  12
#define PARSER_RESULT_VID_FILTER_MATCH_F_OFFSET                                                8
#define PARSER_RESULT_VID_FILTER_MATCH_F_WIDTH                                                 4
#define PARSER_RESULT_VID_FILTER_MATCH_OFFSET                                                  6
#define PARSER_RESULT_VID_FILTER_MATCH_WORD_OFFSET                                             1
#define PARSER_RESULT_VID_FILTER_MATCH_F_OFFSET_MOD8                                           0
#define PARSER_RESULT_VID_FILTER_MATCH_F_OFFSET_MOD16                                          8
#define PARSER_RESULT_LAYER2_ADDRESS_F_OFFSET                                                  0
#define PARSER_RESULT_LAYER2_ADDRESS_F_WIDTH                                                   8
#define PARSER_RESULT_LAYER2_ADDRESS_OFFSET                                                    7
#define PARSER_RESULT_LAYER2_ADDRESS_WORD_OFFSET                                               1
#define PARSER_RESULT_LAYER2_ADDRESS_F_OFFSET_MOD16                                            0
#define PARSER_RESULT_OUTER_VLAN_F_OFFSET                                                      16
#define PARSER_RESULT_OUTER_VLAN_F_WIDTH                                                       16
#define PARSER_RESULT_OUTER_VLAN_OFFSET                                                        8
#define PARSER_RESULT_OUTER_VLAN_WORD_OFFSET                                                   2
#define PARSER_RESULT_DA1_2_F_OFFSET                                                           0
#define PARSER_RESULT_DA1_2_F_WIDTH                                                            16
#define PARSER_RESULT_DA1_2_OFFSET                                                             10
#define PARSER_RESULT_DA1_2_WORD_OFFSET                                                        2
#define PARSER_RESULT_DA3_6_F_OFFSET                                                           0
#define PARSER_RESULT_DA3_6_F_WIDTH                                                            32
#define PARSER_RESULT_DA3_6_OFFSET                                                             12
#define PARSER_RESULT_DA3_6_WORD_OFFSET                                                        3
#define PARSER_RESULT_INNER_VLAN_F_OFFSET                                                      16
#define PARSER_RESULT_INNER_VLAN_F_WIDTH                                                       16
#define PARSER_RESULT_INNER_VLAN_OFFSET                                                        16
#define PARSER_RESULT_INNER_VLAN_WORD_OFFSET                                                   4
#define PARSER_RESULT_SA1_2_F_OFFSET                                                           0
#define PARSER_RESULT_SA1_2_F_WIDTH                                                            16
#define PARSER_RESULT_SA1_2_OFFSET                                                             18
#define PARSER_RESULT_SA1_2_WORD_OFFSET                                                        4
#define PARSER_RESULT_SA3_6_F_OFFSET                                                           0
#define PARSER_RESULT_SA3_6_F_WIDTH                                                            32
#define PARSER_RESULT_SA3_6_OFFSET                                                             20
#define PARSER_RESULT_SA3_6_WORD_OFFSET                                                        5
#define PARSER_RESULT__3RD_VLAN_F_OFFSET                                                       16
#define PARSER_RESULT__3RD_VLAN_F_WIDTH                                                        16
#define PARSER_RESULT__3RD_VLAN_OFFSET                                                         24
#define PARSER_RESULT__3RD_VLAN_WORD_OFFSET                                                    6
#define PARSER_RESULT_ETHERTYPE_F_OFFSET                                                       0
#define PARSER_RESULT_ETHERTYPE_F_WIDTH                                                        16
#define PARSER_RESULT_ETHERTYPE_OFFSET                                                         26
#define PARSER_RESULT_ETHERTYPE_WORD_OFFSET                                                    6
#define PARSER_RESULT_IP_LENGTH_F_OFFSET                                                       16
#define PARSER_RESULT_IP_LENGTH_F_WIDTH                                                        16
#define PARSER_RESULT_IP_LENGTH_OFFSET                                                         28
#define PARSER_RESULT_IP_LENGTH_WORD_OFFSET                                                    7
#define PARSER_RESULT_IP_TTL_F_OFFSET                                                          8
#define PARSER_RESULT_IP_TTL_F_WIDTH                                                           8
#define PARSER_RESULT_IP_TTL_OFFSET                                                            30
#define PARSER_RESULT_IP_TTL_WORD_OFFSET                                                       7
#define PARSER_RESULT_IP_TTL_F_OFFSET_MOD16                                                    8
#define PARSER_RESULT_TOS_F_OFFSET                                                             0
#define PARSER_RESULT_TOS_F_WIDTH                                                              8
#define PARSER_RESULT_TOS_OFFSET                                                               31
#define PARSER_RESULT_TOS_WORD_OFFSET                                                          7
#define PARSER_RESULT_TOS_F_OFFSET_MOD16                                                       0
#define PARSER_RESULT_LAYER4_OFFSET_F_OFFSET                                                   24
#define PARSER_RESULT_LAYER4_OFFSET_F_WIDTH                                                    8
#define PARSER_RESULT_LAYER4_OFFSET_OFFSET                                                     32
#define PARSER_RESULT_LAYER4_OFFSET_WORD_OFFSET                                                8
#define PARSER_RESULT_LAYER4_OFFSET_F_OFFSET_MOD16                                             8
#define PARSER_RESULT_LAYER3_OFFSET_F_OFFSET                                                   16
#define PARSER_RESULT_LAYER3_OFFSET_F_WIDTH                                                    8
#define PARSER_RESULT_LAYER3_OFFSET_OFFSET                                                     33
#define PARSER_RESULT_LAYER3_OFFSET_WORD_OFFSET                                                8
#define PARSER_RESULT_LAYER3_OFFSET_F_OFFSET_MOD16                                             0
#define PARSER_RESULT_MC_L3_CTL_F_OFFSET                                                       12
#define PARSER_RESULT_MC_L3_CTL_F_WIDTH                                                        1
#define PARSER_RESULT_MC_L3_CTL_OFFSET                                                         34
#define PARSER_RESULT_MC_L3_CTL_WORD_OFFSET                                                    8
#define PARSER_RESULT_MC_L3_CTL_F_OFFSET_MOD8                                                  4
#define PARSER_RESULT_MC_L3_CTL_F_OFFSET_MOD16                                                 12
#define PARSER_RESULT_MC_L3_F_OFFSET                                                           11
#define PARSER_RESULT_MC_L3_F_WIDTH                                                            1
#define PARSER_RESULT_MC_L3_OFFSET                                                             34
#define PARSER_RESULT_MC_L3_WORD_OFFSET                                                        8
#define PARSER_RESULT_MC_L3_F_OFFSET_MOD8                                                      3
#define PARSER_RESULT_MC_L3_F_OFFSET_MOD16                                                     11
#define PARSER_RESULT_ERROR_F_OFFSET                                                           10
#define PARSER_RESULT_ERROR_F_WIDTH                                                            1
#define PARSER_RESULT_ERROR_OFFSET                                                             34
#define PARSER_RESULT_ERROR_WORD_OFFSET                                                        8
#define PARSER_RESULT_ERROR_F_OFFSET_MOD8                                                      2
#define PARSER_RESULT_ERROR_F_OFFSET_MOD16                                                     10
#define PARSER_RESULT_NON_FIVE_TUPLE_F_OFFSET                                                  9
#define PARSER_RESULT_NON_FIVE_TUPLE_F_WIDTH                                                   1
#define PARSER_RESULT_NON_FIVE_TUPLE_OFFSET                                                    34
#define PARSER_RESULT_NON_FIVE_TUPLE_WORD_OFFSET                                               8
#define PARSER_RESULT_NON_FIVE_TUPLE_F_OFFSET_MOD8                                             1
#define PARSER_RESULT_NON_FIVE_TUPLE_F_OFFSET_MOD16                                            9
#define PARSER_RESULT_IP_LEN_ERROR_F_OFFSET                                                    8
#define PARSER_RESULT_IP_LEN_ERROR_F_WIDTH                                                     1
#define PARSER_RESULT_IP_LEN_ERROR_OFFSET                                                      34
#define PARSER_RESULT_IP_LEN_ERROR_WORD_OFFSET                                                 8
#define PARSER_RESULT_IP_LEN_ERROR_F_OFFSET_MOD8                                               0
#define PARSER_RESULT_IP_LEN_ERROR_F_OFFSET_MOD16                                              8
#define PARSER_RESULT_PROTOCOL_F_OFFSET                                                        0
#define PARSER_RESULT_PROTOCOL_F_WIDTH                                                         8
#define PARSER_RESULT_PROTOCOL_OFFSET                                                          35
#define PARSER_RESULT_PROTOCOL_WORD_OFFSET                                                     8
#define PARSER_RESULT_PROTOCOL_F_OFFSET_MOD16                                                  0
#define PARSER_RESULT_SOURCE_PORT_F_OFFSET                                                     16
#define PARSER_RESULT_SOURCE_PORT_F_WIDTH                                                      16
#define PARSER_RESULT_SOURCE_PORT_OFFSET                                                       36
#define PARSER_RESULT_SOURCE_PORT_WORD_OFFSET                                                  9
#define PARSER_RESULT_DESTINATION_PORT_F_OFFSET                                                0
#define PARSER_RESULT_DESTINATION_PORT_F_WIDTH                                                 16
#define PARSER_RESULT_DESTINATION_PORT_OFFSET                                                  38
#define PARSER_RESULT_DESTINATION_PORT_WORD_OFFSET                                             9
#define PARSER_RESULT_SOURCE_IP_F_OFFSET                                                       0
#define PARSER_RESULT_SOURCE_IP_F_WIDTH                                                        32
#define PARSER_RESULT_SOURCE_IP_OFFSET                                                         40
#define PARSER_RESULT_SOURCE_IP_WORD_OFFSET                                                    10
#define PARSER_RESULT_DESTINATION_IP_F_OFFSET                                                  0
#define PARSER_RESULT_DESTINATION_IP_F_WIDTH                                                   32
#define PARSER_RESULT_DESTINATION_IP_OFFSET                                                    44
#define PARSER_RESULT_DESTINATION_IP_WORD_OFFSET                                               11
#define PARSER_RESULT_FLAGS_F_OFFSET                                                           24
#define PARSER_RESULT_FLAGS_F_WIDTH                                                            8
#define PARSER_RESULT_FLAGS_OFFSET                                                             48
#define PARSER_RESULT_FLAGS_WORD_OFFSET                                                        12
#define PARSER_RESULT_FLAGS_F_OFFSET_MOD16                                                     8
#define PARSER_RESULT_ICMPV6_F_OFFSET                                                          23
#define PARSER_RESULT_ICMPV6_F_WIDTH                                                           1
#define PARSER_RESULT_ICMPV6_OFFSET                                                            49
#define PARSER_RESULT_ICMPV6_WORD_OFFSET                                                       12
#define PARSER_RESULT_ICMPV6_F_OFFSET_MOD8                                                     7
#define PARSER_RESULT_ICMPV6_F_OFFSET_MOD16                                                    7
#define PARSER_RESULT_V6_AH_F_OFFSET                                                           22
#define PARSER_RESULT_V6_AH_F_WIDTH                                                            1
#define PARSER_RESULT_V6_AH_OFFSET                                                             49
#define PARSER_RESULT_V6_AH_WORD_OFFSET                                                        12
#define PARSER_RESULT_V6_AH_F_OFFSET_MOD8                                                      6
#define PARSER_RESULT_V6_AH_F_OFFSET_MOD16                                                     6
#define PARSER_RESULT_V6_DEST_OPT_F_OFFSET                                                     21
#define PARSER_RESULT_V6_DEST_OPT_F_WIDTH                                                      1
#define PARSER_RESULT_V6_DEST_OPT_OFFSET                                                       49
#define PARSER_RESULT_V6_DEST_OPT_WORD_OFFSET                                                  12
#define PARSER_RESULT_V6_DEST_OPT_F_OFFSET_MOD8                                                5
#define PARSER_RESULT_V6_DEST_OPT_F_OFFSET_MOD16                                               5
#define PARSER_RESULT_V6_ROUTE_F_OFFSET                                                        20
#define PARSER_RESULT_V6_ROUTE_F_WIDTH                                                         1
#define PARSER_RESULT_V6_ROUTE_OFFSET                                                          49
#define PARSER_RESULT_V6_ROUTE_WORD_OFFSET                                                     12
#define PARSER_RESULT_V6_ROUTE_F_OFFSET_MOD8                                                   4
#define PARSER_RESULT_V6_ROUTE_F_OFFSET_MOD16                                                  4
#define PARSER_RESULT_V6_HOP_F_OFFSET                                                          19
#define PARSER_RESULT_V6_HOP_F_WIDTH                                                           1
#define PARSER_RESULT_V6_HOP_OFFSET                                                            49
#define PARSER_RESULT_V6_HOP_WORD_OFFSET                                                       12
#define PARSER_RESULT_V6_HOP_F_OFFSET_MOD8                                                     3
#define PARSER_RESULT_V6_HOP_F_OFFSET_MOD16                                                    3
#define PARSER_RESULT_HDR_LEN_ERR_F_OFFSET                                                     18
#define PARSER_RESULT_HDR_LEN_ERR_F_WIDTH                                                      1
#define PARSER_RESULT_HDR_LEN_ERR_OFFSET                                                       49
#define PARSER_RESULT_HDR_LEN_ERR_WORD_OFFSET                                                  12
#define PARSER_RESULT_HDR_LEN_ERR_F_OFFSET_MOD8                                                2
#define PARSER_RESULT_HDR_LEN_ERR_F_OFFSET_MOD16                                               2
#define PARSER_RESULT_CHKSM_ERR_F_OFFSET                                                       17
#define PARSER_RESULT_CHKSM_ERR_F_WIDTH                                                        1
#define PARSER_RESULT_CHKSM_ERR_OFFSET                                                         49
#define PARSER_RESULT_CHKSM_ERR_WORD_OFFSET                                                    12
#define PARSER_RESULT_CHKSM_ERR_F_OFFSET_MOD8                                                  1
#define PARSER_RESULT_CHKSM_ERR_F_OFFSET_MOD16                                                 1
#define PARSER_RESULT_VER_MISS_F_OFFSET                                                        16
#define PARSER_RESULT_VER_MISS_F_WIDTH                                                         1
#define PARSER_RESULT_VER_MISS_OFFSET                                                          49
#define PARSER_RESULT_VER_MISS_WORD_OFFSET                                                     12
#define PARSER_RESULT_VER_MISS_F_OFFSET_MOD8                                                   0
#define PARSER_RESULT_VER_MISS_F_OFFSET_MOD16                                                  0
#define PARSER_RESULT_LAYER3_CHECKSUM_F_OFFSET                                                 0
#define PARSER_RESULT_LAYER3_CHECKSUM_F_WIDTH                                                  16
#define PARSER_RESULT_LAYER3_CHECKSUM_OFFSET                                                   50
#define PARSER_RESULT_LAYER3_CHECKSUM_WORD_OFFSET                                              12
#define PARSER_RESULT_LAYER4_CALC_CHECKSUM_F_OFFSET                                            16
#define PARSER_RESULT_LAYER4_CALC_CHECKSUM_F_WIDTH                                             16
#define PARSER_RESULT_LAYER4_CALC_CHECKSUM_OFFSET                                              52
#define PARSER_RESULT_LAYER4_CALC_CHECKSUM_WORD_OFFSET                                         13
#define PARSER_RESULT_LAYER4_CHECKSUM_F_OFFSET                                                 0
#define PARSER_RESULT_LAYER4_CHECKSUM_F_WIDTH                                                  16
#define PARSER_RESULT_LAYER4_CHECKSUM_OFFSET                                                   54
#define PARSER_RESULT_LAYER4_CHECKSUM_WORD_OFFSET                                              13

/* >>>RDD_PARSER_RESULT_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	da_filter_match     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	first_ip_fragment   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_fragment         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_filter_match     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_filter_num       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_udp             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ipv6_ext_header     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_flag            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	p_tag               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vid_filter_hit      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	exception           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	da_filter_number    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer4_protocol     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l4_protocol enumeration*/
	uint32_t	_5_tup_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dhcp                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vlans_num           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	broadcast           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	multicast           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer3_protocol     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l3_protocol enumeration*/
	uint32_t	layer2_protocol     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tag_type            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mac_spoof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tpid_vlan_0         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tpid_vlan_1         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tpid_vlan_2         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	in_cfi              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	out_cfi             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_outer            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_inner            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	eth_version         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_mc_l2            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vid_filter_match    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer2_address      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	outer_vlan          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	da1_2               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	da3_6               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	inner_vlan          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sa1_2               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sa3_6               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	_3rd_vlan           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ethertype           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_length           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_ttl              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tos                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer4_offset       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer3_offset       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mc_l3_ctl           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mc_l3               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	error               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	non_five_tuple      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_len_error        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	protocol            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	source_port         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	destination_port    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	source_ip           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	destination_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flags               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	icmpv6              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	v6_ah               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	v6_dest_opt         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	v6_route            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	v6_hop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_len_err         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	chksm_err           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ver_miss            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer3_checksum     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer4_calc_checksum	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer4_checksum     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	layer2_protocol     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer3_protocol     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l3_protocol enumeration*/
	uint32_t	multicast           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	broadcast           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vlans_num           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dhcp                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	_5_tup_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer4_protocol     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l4_protocol enumeration*/
	uint32_t	da_filter_number    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	exception           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vid_filter_hit      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	p_tag               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_flag            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ipv6_ext_header     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tcp_udp             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_filter_num       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_filter_match     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_fragment         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	first_ip_fragment   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	da_filter_match     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer2_address      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	vid_filter_match    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_mc_l2            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	eth_version         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_inner            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	no_outer            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	out_cfi             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	in_cfi              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tpid_vlan_2         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tpid_vlan_1         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tpid_vlan_0         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mac_spoof           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tag_type            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	da1_2               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	outer_vlan          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	da3_6               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sa1_2               	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	inner_vlan          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sa3_6               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ethertype           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	_3rd_vlan           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tos                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_ttl              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_length           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	protocol            	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ip_len_error        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	non_five_tuple      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	error               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mc_l3               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	mc_l3_ctl           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer3_offset       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer4_offset       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	destination_port    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	source_port         	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	source_ip           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	destination_ip      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer3_checksum     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ver_miss            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	chksm_err           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hdr_len_err         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	v6_hop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	v6_route            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	v6_dest_opt         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	v6_ah               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	icmpv6              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flags               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer4_checksum     	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	layer4_calc_checksum	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PARSER_RESULT_DTS;

typedef RDD_PARSER_RESULT_DTS * aligned_RDD_PARSER_RESULT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[14];
    uint64_t dword_val64[7];
    RDD_PARSER_RESULT_DTS fields;
} RDD_PARSER_RESULT_DTS_NEW;
typedef RDD_PARSER_RESULT_DTS_NEW * aligned_RDD_PARSER_RESULT_DTS_NEW ALIGNMENT8;

#define RDD_PARSER_RESULT_DA_FILTER_MATCH_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 7, 1, r)
#define RDD_PARSER_RESULT_DA_FILTER_MATCH_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 7, 1, v)
#define RDD_PARSER_RESULT_DA_FILTER_MATCH_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_PARSER_RESULT_DA_FILTER_MATCH_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_PARSER_RESULT_FIRST_IP_FRAGMENT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 6, 1, r)
#define RDD_PARSER_RESULT_FIRST_IP_FRAGMENT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 6, 1, v)
#define RDD_PARSER_RESULT_FIRST_IP_FRAGMENT_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_PARSER_RESULT_FIRST_IP_FRAGMENT_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_PARSER_RESULT_IP_FRAGMENT_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 5, 1, r)
#define RDD_PARSER_RESULT_IP_FRAGMENT_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 5, 1, v)
#define RDD_PARSER_RESULT_IP_FRAGMENT_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_PARSER_RESULT_IP_FRAGMENT_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_PARSER_RESULT_IP_FILTER_MATCH_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 4, 1, r)
#define RDD_PARSER_RESULT_IP_FILTER_MATCH_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 4, 1, v)
#define RDD_PARSER_RESULT_IP_FILTER_MATCH_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_PARSER_RESULT_IP_FILTER_MATCH_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_PARSER_RESULT_IP_FILTER_NUM_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 2, 2, r)
#define RDD_PARSER_RESULT_IP_FILTER_NUM_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 2, 2, v)
#define RDD_PARSER_RESULT_IP_FILTER_NUM_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 2, 2, r)
#define RDD_PARSER_RESULT_IP_FILTER_NUM_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 2, 2, v)
#define RDD_PARSER_RESULT_TCP_UDP_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 1, 1, r)
#define RDD_PARSER_RESULT_TCP_UDP_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 1, 1, v)
#define RDD_PARSER_RESULT_TCP_UDP_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p, 1, 1, r)
#define RDD_PARSER_RESULT_TCP_UDP_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p, 1, 1, v)
#define RDD_PARSER_RESULT_IPV6_EXT_HEADER_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 0, 1, r)
#define RDD_PARSER_RESULT_IPV6_EXT_HEADER_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS), 0, 1, v)
#define RDD_PARSER_RESULT_IPV6_EXT_HEADER_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p, 0, 1, r)
#define RDD_PARSER_RESULT_IPV6_EXT_HEADER_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p, 0, 1, v)
#define RDD_PARSER_RESULT_TCP_FLAG_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 1, 7, 1, r)
#define RDD_PARSER_RESULT_TCP_FLAG_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 1, 7, 1, v)
#define RDD_PARSER_RESULT_TCP_FLAG_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 1, 7, 1, r)
#define RDD_PARSER_RESULT_TCP_FLAG_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 1, 7, 1, v)
#define RDD_PARSER_RESULT_P_TAG_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 1, 6, 1, r)
#define RDD_PARSER_RESULT_P_TAG_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 1, 6, 1, v)
#define RDD_PARSER_RESULT_P_TAG_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 1, 6, 1, r)
#define RDD_PARSER_RESULT_P_TAG_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 1, 6, 1, v)
#define RDD_PARSER_RESULT_VID_FILTER_HIT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 1, 5, 1, r)
#define RDD_PARSER_RESULT_VID_FILTER_HIT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 1, 5, 1, v)
#define RDD_PARSER_RESULT_VID_FILTER_HIT_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 1, 5, 1, r)
#define RDD_PARSER_RESULT_VID_FILTER_HIT_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 1, 5, 1, v)
#define RDD_PARSER_RESULT_EXCEPTION_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 1, 4, 1, r)
#define RDD_PARSER_RESULT_EXCEPTION_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 1, 4, 1, v)
#define RDD_PARSER_RESULT_EXCEPTION_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 1, 4, 1, r)
#define RDD_PARSER_RESULT_EXCEPTION_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 1, 4, 1, v)
#define RDD_PARSER_RESULT_DA_FILTER_NUMBER_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 1, 0, 4, r)
#define RDD_PARSER_RESULT_DA_FILTER_NUMBER_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 1, 0, 4, v)
#define RDD_PARSER_RESULT_DA_FILTER_NUMBER_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 1, 0, 4, r)
#define RDD_PARSER_RESULT_DA_FILTER_NUMBER_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 1, 0, 4, v)
#define RDD_PARSER_RESULT_LAYER4_PROTOCOL_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 2, 4, 4, r) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_RESULT_LAYER4_PROTOCOL_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 2, 4, 4, v) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_RESULT_LAYER4_PROTOCOL_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 2, 4, 4, r) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_RESULT_LAYER4_PROTOCOL_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 2, 4, 4, v) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_RESULT__5_TUP_VALID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 2, 3, 1, r)
#define RDD_PARSER_RESULT__5_TUP_VALID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 2, 3, 1, v)
#define RDD_PARSER_RESULT__5_TUP_VALID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 2, 3, 1, r)
#define RDD_PARSER_RESULT__5_TUP_VALID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 2, 3, 1, v)
#define RDD_PARSER_RESULT_DHCP_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 2, 2, 1, r)
#define RDD_PARSER_RESULT_DHCP_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 2, 2, 1, v)
#define RDD_PARSER_RESULT_DHCP_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 2, 2, 1, r)
#define RDD_PARSER_RESULT_DHCP_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 2, 2, 1, v)
#define RDD_PARSER_RESULT_VLANS_NUM_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 2, 0, 2, r)
#define RDD_PARSER_RESULT_VLANS_NUM_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 2, 0, 2, v)
#define RDD_PARSER_RESULT_VLANS_NUM_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 2, 0, 2, r)
#define RDD_PARSER_RESULT_VLANS_NUM_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 2, 0, 2, v)
#define RDD_PARSER_RESULT_BROADCAST_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 3, 7, 1, r)
#define RDD_PARSER_RESULT_BROADCAST_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 3, 7, 1, v)
#define RDD_PARSER_RESULT_BROADCAST_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 3, 7, 1, r)
#define RDD_PARSER_RESULT_BROADCAST_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 3, 7, 1, v)
#define RDD_PARSER_RESULT_MULTICAST_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 3, 6, 1, r)
#define RDD_PARSER_RESULT_MULTICAST_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 3, 6, 1, v)
#define RDD_PARSER_RESULT_MULTICAST_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 3, 6, 1, r)
#define RDD_PARSER_RESULT_MULTICAST_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 3, 6, 1, v)
#define RDD_PARSER_RESULT_LAYER3_PROTOCOL_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 3, 4, 2, r) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_RESULT_LAYER3_PROTOCOL_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 3, 4, 2, v) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_RESULT_LAYER3_PROTOCOL_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 3, 4, 2, r) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_RESULT_LAYER3_PROTOCOL_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 3, 4, 2, v) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_RESULT_LAYER2_PROTOCOL_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 3, 0, 4, r)
#define RDD_PARSER_RESULT_LAYER2_PROTOCOL_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 3, 0, 4, v)
#define RDD_PARSER_RESULT_LAYER2_PROTOCOL_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 3, 0, 4, r)
#define RDD_PARSER_RESULT_LAYER2_PROTOCOL_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 3, 0, 4, v)
#define RDD_PARSER_RESULT_TAG_TYPE_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 4, 6, 2, r)
#define RDD_PARSER_RESULT_TAG_TYPE_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 4, 6, 2, v)
#define RDD_PARSER_RESULT_TAG_TYPE_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 4, 6, 2, r)
#define RDD_PARSER_RESULT_TAG_TYPE_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 4, 6, 2, v)
#define RDD_PARSER_RESULT_MAC_SPOOF_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 4, 5, 1, r)
#define RDD_PARSER_RESULT_MAC_SPOOF_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 4, 5, 1, v)
#define RDD_PARSER_RESULT_MAC_SPOOF_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 4, 5, 1, r)
#define RDD_PARSER_RESULT_MAC_SPOOF_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 4, 5, 1, v)
#define RDD_PARSER_RESULT_TPID_VLAN_0_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 4, 2, 3, r)
#define RDD_PARSER_RESULT_TPID_VLAN_0_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 4, 2, 3, v)
#define RDD_PARSER_RESULT_TPID_VLAN_0_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 4, 2, 3, r)
#define RDD_PARSER_RESULT_TPID_VLAN_0_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 4, 2, 3, v)
#define RDD_PARSER_RESULT_TPID_VLAN_1_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 4, 7, 3, r)
#define RDD_PARSER_RESULT_TPID_VLAN_1_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 4, 7, 3, v)
#define RDD_PARSER_RESULT_TPID_VLAN_1_READ(r, p)                          FIELD_MREAD_16((uint8_t *)p + 4, 7, 3, r)
#define RDD_PARSER_RESULT_TPID_VLAN_1_WRITE(v, p)                         FIELD_MWRITE_16((uint8_t *)p + 4, 7, 3, v)
#define RDD_PARSER_RESULT_TPID_VLAN_2_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 5, 4, 3, r)
#define RDD_PARSER_RESULT_TPID_VLAN_2_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 5, 4, 3, v)
#define RDD_PARSER_RESULT_TPID_VLAN_2_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 5, 4, 3, r)
#define RDD_PARSER_RESULT_TPID_VLAN_2_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 5, 4, 3, v)
#define RDD_PARSER_RESULT_IN_CFI_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 5, 3, 1, r)
#define RDD_PARSER_RESULT_IN_CFI_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 5, 3, 1, v)
#define RDD_PARSER_RESULT_IN_CFI_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 5, 3, 1, r)
#define RDD_PARSER_RESULT_IN_CFI_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 5, 3, 1, v)
#define RDD_PARSER_RESULT_OUT_CFI_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 5, 2, 1, r)
#define RDD_PARSER_RESULT_OUT_CFI_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 5, 2, 1, v)
#define RDD_PARSER_RESULT_OUT_CFI_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 5, 2, 1, r)
#define RDD_PARSER_RESULT_OUT_CFI_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 5, 2, 1, v)
#define RDD_PARSER_RESULT_NO_OUTER_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 5, 1, 1, r)
#define RDD_PARSER_RESULT_NO_OUTER_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 5, 1, 1, v)
#define RDD_PARSER_RESULT_NO_OUTER_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 5, 1, 1, r)
#define RDD_PARSER_RESULT_NO_OUTER_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 5, 1, 1, v)
#define RDD_PARSER_RESULT_NO_INNER_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 5, 0, 1, r)
#define RDD_PARSER_RESULT_NO_INNER_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 5, 0, 1, v)
#define RDD_PARSER_RESULT_NO_INNER_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 5, 0, 1, r)
#define RDD_PARSER_RESULT_NO_INNER_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 5, 0, 1, v)
#define RDD_PARSER_RESULT_ETH_VERSION_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 6, 6, 2, r)
#define RDD_PARSER_RESULT_ETH_VERSION_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 6, 6, 2, v)
#define RDD_PARSER_RESULT_ETH_VERSION_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 6, 6, 2, r)
#define RDD_PARSER_RESULT_ETH_VERSION_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 6, 6, 2, v)
#define RDD_PARSER_RESULT_IP_MC_L2_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 6, 4, 1, r)
#define RDD_PARSER_RESULT_IP_MC_L2_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 6, 4, 1, v)
#define RDD_PARSER_RESULT_IP_MC_L2_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 6, 4, 1, r)
#define RDD_PARSER_RESULT_IP_MC_L2_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 6, 4, 1, v)
#define RDD_PARSER_RESULT_VID_FILTER_MATCH_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 6, 0, 4, r)
#define RDD_PARSER_RESULT_VID_FILTER_MATCH_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 6, 0, 4, v)
#define RDD_PARSER_RESULT_VID_FILTER_MATCH_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 6, 0, 4, r)
#define RDD_PARSER_RESULT_VID_FILTER_MATCH_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 6, 0, 4, v)
#define RDD_PARSER_RESULT_LAYER2_ADDRESS_READ_G(r, g, idx)                GROUP_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 7, r)
#define RDD_PARSER_RESULT_LAYER2_ADDRESS_WRITE_G(v, g, idx)               GROUP_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 7, v)
#define RDD_PARSER_RESULT_LAYER2_ADDRESS_READ(r, p)                       MREAD_8((uint8_t *)p + 7, r)
#define RDD_PARSER_RESULT_LAYER2_ADDRESS_WRITE(v, p)                      MWRITE_8((uint8_t *)p + 7, v)
#define RDD_PARSER_RESULT_OUTER_VLAN_READ_G(r, g, idx)                    GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 8, r)
#define RDD_PARSER_RESULT_OUTER_VLAN_WRITE_G(v, g, idx)                   GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 8, v)
#define RDD_PARSER_RESULT_OUTER_VLAN_READ(r, p)                           MREAD_16((uint8_t *)p + 8, r)
#define RDD_PARSER_RESULT_OUTER_VLAN_WRITE(v, p)                          MWRITE_16((uint8_t *)p + 8, v)
#define RDD_PARSER_RESULT_DA1_2_READ_G(r, g, idx)                         GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 10, r)
#define RDD_PARSER_RESULT_DA1_2_WRITE_G(v, g, idx)                        GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 10, v)
#define RDD_PARSER_RESULT_DA1_2_READ(r, p)                                MREAD_16((uint8_t *)p + 10, r)
#define RDD_PARSER_RESULT_DA1_2_WRITE(v, p)                               MWRITE_16((uint8_t *)p + 10, v)
#define RDD_PARSER_RESULT_DA3_6_READ_G(r, g, idx)                         GROUP_MREAD_32(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 12, r)
#define RDD_PARSER_RESULT_DA3_6_WRITE_G(v, g, idx)                        GROUP_MWRITE_32(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 12, v)
#define RDD_PARSER_RESULT_DA3_6_READ(r, p)                                MREAD_32((uint8_t *)p + 12, r)
#define RDD_PARSER_RESULT_DA3_6_WRITE(v, p)                               MWRITE_32((uint8_t *)p + 12, v)
#define RDD_PARSER_RESULT_INNER_VLAN_READ_G(r, g, idx)                    GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 16, r)
#define RDD_PARSER_RESULT_INNER_VLAN_WRITE_G(v, g, idx)                   GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 16, v)
#define RDD_PARSER_RESULT_INNER_VLAN_READ(r, p)                           MREAD_16((uint8_t *)p + 16, r)
#define RDD_PARSER_RESULT_INNER_VLAN_WRITE(v, p)                          MWRITE_16((uint8_t *)p + 16, v)
#define RDD_PARSER_RESULT_SA1_2_READ_G(r, g, idx)                         GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 18, r)
#define RDD_PARSER_RESULT_SA1_2_WRITE_G(v, g, idx)                        GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 18, v)
#define RDD_PARSER_RESULT_SA1_2_READ(r, p)                                MREAD_16((uint8_t *)p + 18, r)
#define RDD_PARSER_RESULT_SA1_2_WRITE(v, p)                               MWRITE_16((uint8_t *)p + 18, v)
#define RDD_PARSER_RESULT_SA3_6_READ_G(r, g, idx)                         GROUP_MREAD_32(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 20, r)
#define RDD_PARSER_RESULT_SA3_6_WRITE_G(v, g, idx)                        GROUP_MWRITE_32(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 20, v)
#define RDD_PARSER_RESULT_SA3_6_READ(r, p)                                MREAD_32((uint8_t *)p + 20, r)
#define RDD_PARSER_RESULT_SA3_6_WRITE(v, p)                               MWRITE_32((uint8_t *)p + 20, v)
#define RDD_PARSER_RESULT__3RD_VLAN_READ_G(r, g, idx)                     GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 24, r)
#define RDD_PARSER_RESULT__3RD_VLAN_WRITE_G(v, g, idx)                    GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 24, v)
#define RDD_PARSER_RESULT__3RD_VLAN_READ(r, p)                            MREAD_16((uint8_t *)p + 24, r)
#define RDD_PARSER_RESULT__3RD_VLAN_WRITE(v, p)                           MWRITE_16((uint8_t *)p + 24, v)
#define RDD_PARSER_RESULT_ETHERTYPE_READ_G(r, g, idx)                     GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 26, r)
#define RDD_PARSER_RESULT_ETHERTYPE_WRITE_G(v, g, idx)                    GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 26, v)
#define RDD_PARSER_RESULT_ETHERTYPE_READ(r, p)                            MREAD_16((uint8_t *)p + 26, r)
#define RDD_PARSER_RESULT_ETHERTYPE_WRITE(v, p)                           MWRITE_16((uint8_t *)p + 26, v)
#define RDD_PARSER_RESULT_IP_LENGTH_READ_G(r, g, idx)                     GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 28, r)
#define RDD_PARSER_RESULT_IP_LENGTH_WRITE_G(v, g, idx)                    GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 28, v)
#define RDD_PARSER_RESULT_IP_LENGTH_READ(r, p)                            MREAD_16((uint8_t *)p + 28, r)
#define RDD_PARSER_RESULT_IP_LENGTH_WRITE(v, p)                           MWRITE_16((uint8_t *)p + 28, v)
#define RDD_PARSER_RESULT_IP_TTL_READ_G(r, g, idx)                        GROUP_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 30, r)
#define RDD_PARSER_RESULT_IP_TTL_WRITE_G(v, g, idx)                       GROUP_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 30, v)
#define RDD_PARSER_RESULT_IP_TTL_READ(r, p)                               MREAD_8((uint8_t *)p + 30, r)
#define RDD_PARSER_RESULT_IP_TTL_WRITE(v, p)                              MWRITE_8((uint8_t *)p + 30, v)
#define RDD_PARSER_RESULT_TOS_READ_G(r, g, idx)                           GROUP_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 31, r)
#define RDD_PARSER_RESULT_TOS_WRITE_G(v, g, idx)                          GROUP_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 31, v)
#define RDD_PARSER_RESULT_TOS_READ(r, p)                                  MREAD_8((uint8_t *)p + 31, r)
#define RDD_PARSER_RESULT_TOS_WRITE(v, p)                                 MWRITE_8((uint8_t *)p + 31, v)
#define RDD_PARSER_RESULT_LAYER4_OFFSET_READ_G(r, g, idx)                 GROUP_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 32, r)
#define RDD_PARSER_RESULT_LAYER4_OFFSET_WRITE_G(v, g, idx)                GROUP_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 32, v)
#define RDD_PARSER_RESULT_LAYER4_OFFSET_READ(r, p)                        MREAD_8((uint8_t *)p + 32, r)
#define RDD_PARSER_RESULT_LAYER4_OFFSET_WRITE(v, p)                       MWRITE_8((uint8_t *)p + 32, v)
#define RDD_PARSER_RESULT_LAYER3_OFFSET_READ_G(r, g, idx)                 GROUP_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 33, r)
#define RDD_PARSER_RESULT_LAYER3_OFFSET_WRITE_G(v, g, idx)                GROUP_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 33, v)
#define RDD_PARSER_RESULT_LAYER3_OFFSET_READ(r, p)                        MREAD_8((uint8_t *)p + 33, r)
#define RDD_PARSER_RESULT_LAYER3_OFFSET_WRITE(v, p)                       MWRITE_8((uint8_t *)p + 33, v)
#define RDD_PARSER_RESULT_MC_L3_CTL_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 34, 4, 1, r)
#define RDD_PARSER_RESULT_MC_L3_CTL_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 34, 4, 1, v)
#define RDD_PARSER_RESULT_MC_L3_CTL_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 34, 4, 1, r)
#define RDD_PARSER_RESULT_MC_L3_CTL_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 34, 4, 1, v)
#define RDD_PARSER_RESULT_MC_L3_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 34, 3, 1, r)
#define RDD_PARSER_RESULT_MC_L3_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 34, 3, 1, v)
#define RDD_PARSER_RESULT_MC_L3_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 34, 3, 1, r)
#define RDD_PARSER_RESULT_MC_L3_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 34, 3, 1, v)
#define RDD_PARSER_RESULT_ERROR_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 34, 2, 1, r)
#define RDD_PARSER_RESULT_ERROR_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 34, 2, 1, v)
#define RDD_PARSER_RESULT_ERROR_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 34, 2, 1, r)
#define RDD_PARSER_RESULT_ERROR_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 34, 2, 1, v)
#define RDD_PARSER_RESULT_NON_FIVE_TUPLE_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 34, 1, 1, r)
#define RDD_PARSER_RESULT_NON_FIVE_TUPLE_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 34, 1, 1, v)
#define RDD_PARSER_RESULT_NON_FIVE_TUPLE_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 34, 1, 1, r)
#define RDD_PARSER_RESULT_NON_FIVE_TUPLE_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 34, 1, 1, v)
#define RDD_PARSER_RESULT_IP_LEN_ERROR_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 34, 0, 1, r)
#define RDD_PARSER_RESULT_IP_LEN_ERROR_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 34, 0, 1, v)
#define RDD_PARSER_RESULT_IP_LEN_ERROR_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 34, 0, 1, r)
#define RDD_PARSER_RESULT_IP_LEN_ERROR_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 34, 0, 1, v)
#define RDD_PARSER_RESULT_PROTOCOL_READ_G(r, g, idx)                      GROUP_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 35, r)
#define RDD_PARSER_RESULT_PROTOCOL_WRITE_G(v, g, idx)                     GROUP_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 35, v)
#define RDD_PARSER_RESULT_PROTOCOL_READ(r, p)                             MREAD_8((uint8_t *)p + 35, r)
#define RDD_PARSER_RESULT_PROTOCOL_WRITE(v, p)                            MWRITE_8((uint8_t *)p + 35, v)
#define RDD_PARSER_RESULT_SOURCE_PORT_READ_G(r, g, idx)                   GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 36, r)
#define RDD_PARSER_RESULT_SOURCE_PORT_WRITE_G(v, g, idx)                  GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 36, v)
#define RDD_PARSER_RESULT_SOURCE_PORT_READ(r, p)                          MREAD_16((uint8_t *)p + 36, r)
#define RDD_PARSER_RESULT_SOURCE_PORT_WRITE(v, p)                         MWRITE_16((uint8_t *)p + 36, v)
#define RDD_PARSER_RESULT_DESTINATION_PORT_READ_G(r, g, idx)              GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 38, r)
#define RDD_PARSER_RESULT_DESTINATION_PORT_WRITE_G(v, g, idx)             GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 38, v)
#define RDD_PARSER_RESULT_DESTINATION_PORT_READ(r, p)                     MREAD_16((uint8_t *)p + 38, r)
#define RDD_PARSER_RESULT_DESTINATION_PORT_WRITE(v, p)                    MWRITE_16((uint8_t *)p + 38, v)
#define RDD_PARSER_RESULT_SOURCE_IP_READ_G(r, g, idx)                     GROUP_MREAD_32(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 40, r)
#define RDD_PARSER_RESULT_SOURCE_IP_WRITE_G(v, g, idx)                    GROUP_MWRITE_32(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 40, v)
#define RDD_PARSER_RESULT_SOURCE_IP_READ(r, p)                            MREAD_32((uint8_t *)p + 40, r)
#define RDD_PARSER_RESULT_SOURCE_IP_WRITE(v, p)                           MWRITE_32((uint8_t *)p + 40, v)
#define RDD_PARSER_RESULT_DESTINATION_IP_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 44, r)
#define RDD_PARSER_RESULT_DESTINATION_IP_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 44, v)
#define RDD_PARSER_RESULT_DESTINATION_IP_READ(r, p)                       MREAD_32((uint8_t *)p + 44, r)
#define RDD_PARSER_RESULT_DESTINATION_IP_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 44, v)
#define RDD_PARSER_RESULT_FLAGS_READ_G(r, g, idx)                         GROUP_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 48, r)
#define RDD_PARSER_RESULT_FLAGS_WRITE_G(v, g, idx)                        GROUP_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 48, v)
#define RDD_PARSER_RESULT_FLAGS_READ(r, p)                                MREAD_8((uint8_t *)p + 48, r)
#define RDD_PARSER_RESULT_FLAGS_WRITE(v, p)                               MWRITE_8((uint8_t *)p + 48, v)
#define RDD_PARSER_RESULT_ICMPV6_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 7, 1, r)
#define RDD_PARSER_RESULT_ICMPV6_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 7, 1, v)
#define RDD_PARSER_RESULT_ICMPV6_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 49, 7, 1, r)
#define RDD_PARSER_RESULT_ICMPV6_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 49, 7, 1, v)
#define RDD_PARSER_RESULT_V6_AH_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 6, 1, r)
#define RDD_PARSER_RESULT_V6_AH_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 6, 1, v)
#define RDD_PARSER_RESULT_V6_AH_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 49, 6, 1, r)
#define RDD_PARSER_RESULT_V6_AH_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 49, 6, 1, v)
#define RDD_PARSER_RESULT_V6_DEST_OPT_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 5, 1, r)
#define RDD_PARSER_RESULT_V6_DEST_OPT_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 5, 1, v)
#define RDD_PARSER_RESULT_V6_DEST_OPT_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 49, 5, 1, r)
#define RDD_PARSER_RESULT_V6_DEST_OPT_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 49, 5, 1, v)
#define RDD_PARSER_RESULT_V6_ROUTE_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 4, 1, r)
#define RDD_PARSER_RESULT_V6_ROUTE_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 4, 1, v)
#define RDD_PARSER_RESULT_V6_ROUTE_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 49, 4, 1, r)
#define RDD_PARSER_RESULT_V6_ROUTE_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 49, 4, 1, v)
#define RDD_PARSER_RESULT_V6_HOP_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 3, 1, r)
#define RDD_PARSER_RESULT_V6_HOP_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 3, 1, v)
#define RDD_PARSER_RESULT_V6_HOP_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 49, 3, 1, r)
#define RDD_PARSER_RESULT_V6_HOP_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 49, 3, 1, v)
#define RDD_PARSER_RESULT_HDR_LEN_ERR_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 2, 1, r)
#define RDD_PARSER_RESULT_HDR_LEN_ERR_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 2, 1, v)
#define RDD_PARSER_RESULT_HDR_LEN_ERR_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 49, 2, 1, r)
#define RDD_PARSER_RESULT_HDR_LEN_ERR_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 49, 2, 1, v)
#define RDD_PARSER_RESULT_CHKSM_ERR_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 1, 1, r)
#define RDD_PARSER_RESULT_CHKSM_ERR_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 1, 1, v)
#define RDD_PARSER_RESULT_CHKSM_ERR_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 49, 1, 1, r)
#define RDD_PARSER_RESULT_CHKSM_ERR_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 49, 1, 1, v)
#define RDD_PARSER_RESULT_VER_MISS_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 0, 1, r)
#define RDD_PARSER_RESULT_VER_MISS_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 49, 0, 1, v)
#define RDD_PARSER_RESULT_VER_MISS_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 49, 0, 1, r)
#define RDD_PARSER_RESULT_VER_MISS_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 49, 0, 1, v)
#define RDD_PARSER_RESULT_LAYER3_CHECKSUM_READ_G(r, g, idx)               GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 50, r)
#define RDD_PARSER_RESULT_LAYER3_CHECKSUM_WRITE_G(v, g, idx)              GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 50, v)
#define RDD_PARSER_RESULT_LAYER3_CHECKSUM_READ(r, p)                      MREAD_16((uint8_t *)p + 50, r)
#define RDD_PARSER_RESULT_LAYER3_CHECKSUM_WRITE(v, p)                     MWRITE_16((uint8_t *)p + 50, v)
#define RDD_PARSER_RESULT_LAYER4_CALC_CHECKSUM_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 52, r)
#define RDD_PARSER_RESULT_LAYER4_CALC_CHECKSUM_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 52, v)
#define RDD_PARSER_RESULT_LAYER4_CALC_CHECKSUM_READ(r, p)                 MREAD_16((uint8_t *)p + 52, r)
#define RDD_PARSER_RESULT_LAYER4_CALC_CHECKSUM_WRITE(v, p)                MWRITE_16((uint8_t *)p + 52, v)
#define RDD_PARSER_RESULT_LAYER4_CHECKSUM_READ_G(r, g, idx)               GROUP_MREAD_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 54, r)
#define RDD_PARSER_RESULT_LAYER4_CHECKSUM_WRITE_G(v, g, idx)              GROUP_MWRITE_16(g, idx*sizeof(RDD_PARSER_RESULT_DTS) + 54, v)
#define RDD_PARSER_RESULT_LAYER4_CHECKSUM_READ(r, p)                      MREAD_16((uint8_t *)p + 54, r)
#define RDD_PARSER_RESULT_LAYER4_CHECKSUM_WRITE(v, p)                     MWRITE_16((uint8_t *)p + 54, v)
/* <<<RDD_PARSER_RESULT_DTS */

/* <<<RDD_PARSER_RESULT */


/* >>>RDD_SBPM_ALLOC_REQUEST */
#define SBPM_ALLOC_REQUEST_SYNCH_F_OFFSET                                                           31
#define SBPM_ALLOC_REQUEST_SYNCH_F_WIDTH                                                            1
#define SBPM_ALLOC_REQUEST_SBPM_ALLOC_REQUEST_OFFSET                                                0
#define SBPM_ALLOC_REQUEST_SYNCH_OFFSET                                                             0
#define SBPM_ALLOC_REQUEST_SYNCH_WORD_OFFSET                                                        0
#define SBPM_ALLOC_REQUEST_SYNCH_F_OFFSET_MOD8                                                      7
#define SBPM_ALLOC_REQUEST_SYNCH_F_OFFSET_MOD16                                                     15
#define SBPM_ALLOC_REQUEST_WAKEUP_F_OFFSET                                                          30
#define SBPM_ALLOC_REQUEST_WAKEUP_F_WIDTH                                                           1
#define SBPM_ALLOC_REQUEST_WAKEUP_OFFSET                                                            0
#define SBPM_ALLOC_REQUEST_WAKEUP_WORD_OFFSET                                                       0
#define SBPM_ALLOC_REQUEST_WAKEUP_F_OFFSET_MOD8                                                     6
#define SBPM_ALLOC_REQUEST_WAKEUP_F_OFFSET_MOD16                                                    14
#define SBPM_ALLOC_REQUEST_TASK_NUM_F_OFFSET                                                        24
#define SBPM_ALLOC_REQUEST_TASK_NUM_F_WIDTH                                                         4
#define SBPM_ALLOC_REQUEST_TASK_NUM_OFFSET                                                          0
#define SBPM_ALLOC_REQUEST_TASK_NUM_WORD_OFFSET                                                     0
#define SBPM_ALLOC_REQUEST_TASK_NUM_F_OFFSET_MOD8                                                   0
#define SBPM_ALLOC_REQUEST_TASK_NUM_F_OFFSET_MOD16                                                  8
#define SBPM_ALLOC_REQUEST_TARGET_ADDRESS_F_OFFSET                                                  8
#define SBPM_ALLOC_REQUEST_TARGET_ADDRESS_F_WIDTH                                                   11
#define SBPM_ALLOC_REQUEST_TARGET_ADDRESS_OFFSET                                                    0
#define SBPM_ALLOC_REQUEST_TARGET_ADDRESS_WORD_OFFSET                                               0
#define SBPM_ALLOC_REQUEST_TARGET_ADDRESS_F_OFFSET_MOD16                                            8
#define SBPM_ALLOC_REQUEST_BB_ID_F_OFFSET                                                           14
#define SBPM_ALLOC_REQUEST_BB_ID_F_WIDTH                                                            6
#define SBPM_ALLOC_REQUEST_BB_ID_OFFSET                                                             5
#define SBPM_ALLOC_REQUEST_BB_ID_WORD_OFFSET                                                        1
#define SBPM_ALLOC_REQUEST_BB_ID_F_OFFSET_MOD8                                                      6
#define SBPM_ALLOC_REQUEST_BB_ID_F_OFFSET_MOD16                                                     14

/* >>>RDD_SBPM_ALLOC_REQUEST_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1     	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	target_address	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3     	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bb_id         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved4     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved2     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	target_address	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1     	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved4     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bb_id         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3     	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SBPM_ALLOC_REQUEST_DTS;

typedef RDD_SBPM_ALLOC_REQUEST_DTS * aligned_RDD_SBPM_ALLOC_REQUEST_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_SBPM_ALLOC_REQUEST_DTS fields;
} RDD_SBPM_ALLOC_REQUEST_DTS_NEW;
typedef RDD_SBPM_ALLOC_REQUEST_DTS_NEW * aligned_RDD_SBPM_ALLOC_REQUEST_DTS_NEW ALIGNMENT8;

#define RDD_SBPM_ALLOC_REQUEST_SYNCH_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SBPM_ALLOC_REQUEST_DTS), 7, 1, r)
#define RDD_SBPM_ALLOC_REQUEST_SYNCH_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SBPM_ALLOC_REQUEST_DTS), 7, 1, v)
#define RDD_SBPM_ALLOC_REQUEST_SYNCH_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_SBPM_ALLOC_REQUEST_SYNCH_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_SBPM_ALLOC_REQUEST_WAKEUP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SBPM_ALLOC_REQUEST_DTS), 6, 1, r)
#define RDD_SBPM_ALLOC_REQUEST_WAKEUP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SBPM_ALLOC_REQUEST_DTS), 6, 1, v)
#define RDD_SBPM_ALLOC_REQUEST_WAKEUP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_SBPM_ALLOC_REQUEST_WAKEUP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_SBPM_ALLOC_REQUEST_TASK_NUM_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SBPM_ALLOC_REQUEST_DTS), 0, 4, r)
#define RDD_SBPM_ALLOC_REQUEST_TASK_NUM_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SBPM_ALLOC_REQUEST_DTS), 0, 4, v)
#define RDD_SBPM_ALLOC_REQUEST_TASK_NUM_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p, 0, 4, r)
#define RDD_SBPM_ALLOC_REQUEST_TASK_NUM_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p, 0, 4, v)
#define RDD_SBPM_ALLOC_REQUEST_TARGET_ADDRESS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_SBPM_ALLOC_REQUEST_DTS) + 0, 8, 11, r)
#define RDD_SBPM_ALLOC_REQUEST_TARGET_ADDRESS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_SBPM_ALLOC_REQUEST_DTS) + 0, 8, 11, v)
#define RDD_SBPM_ALLOC_REQUEST_TARGET_ADDRESS_READ(r, p)                 FIELD_MREAD_32((uint8_t *)p + 0, 8, 11, r)
#define RDD_SBPM_ALLOC_REQUEST_TARGET_ADDRESS_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)p + 0, 8, 11, v)
#define RDD_SBPM_ALLOC_REQUEST_BB_ID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_SBPM_ALLOC_REQUEST_DTS) + 4, 14, 6, r)
#define RDD_SBPM_ALLOC_REQUEST_BB_ID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_SBPM_ALLOC_REQUEST_DTS) + 4, 14, 6, v)
#define RDD_SBPM_ALLOC_REQUEST_BB_ID_READ(r, p)                          FIELD_MREAD_32((uint8_t *)p + 4, 14, 6, r)
#define RDD_SBPM_ALLOC_REQUEST_BB_ID_WRITE(v, p)                         FIELD_MWRITE_32((uint8_t *)p + 4, 14, 6, v)
/* <<<RDD_SBPM_ALLOC_REQUEST_DTS */

/* <<<RDD_SBPM_ALLOC_REQUEST */


/* >>>RDD_SBPM_MULTICAST_REQUEST */
#define SBPM_MULTICAST_REQUEST_SYNCH_F_OFFSET                                                           31
#define SBPM_MULTICAST_REQUEST_SYNCH_F_WIDTH                                                            1
#define SBPM_MULTICAST_REQUEST_SBPM_MULTICAST_REQUEST_OFFSET                                            0
#define SBPM_MULTICAST_REQUEST_SYNCH_OFFSET                                                             0
#define SBPM_MULTICAST_REQUEST_SYNCH_WORD_OFFSET                                                        0
#define SBPM_MULTICAST_REQUEST_SYNCH_F_OFFSET_MOD8                                                      7
#define SBPM_MULTICAST_REQUEST_SYNCH_F_OFFSET_MOD16                                                     15
#define SBPM_MULTICAST_REQUEST_WAKEUP_F_OFFSET                                                          30
#define SBPM_MULTICAST_REQUEST_WAKEUP_F_WIDTH                                                           1
#define SBPM_MULTICAST_REQUEST_WAKEUP_OFFSET                                                            0
#define SBPM_MULTICAST_REQUEST_WAKEUP_WORD_OFFSET                                                       0
#define SBPM_MULTICAST_REQUEST_WAKEUP_F_OFFSET_MOD8                                                     6
#define SBPM_MULTICAST_REQUEST_WAKEUP_F_OFFSET_MOD16                                                    14
#define SBPM_MULTICAST_REQUEST_TASK_NUM_F_OFFSET                                                        24
#define SBPM_MULTICAST_REQUEST_TASK_NUM_F_WIDTH                                                         4
#define SBPM_MULTICAST_REQUEST_TASK_NUM_OFFSET                                                          0
#define SBPM_MULTICAST_REQUEST_TASK_NUM_WORD_OFFSET                                                     0
#define SBPM_MULTICAST_REQUEST_TASK_NUM_F_OFFSET_MOD8                                                   0
#define SBPM_MULTICAST_REQUEST_TASK_NUM_F_OFFSET_MOD16                                                  8
#define SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_F_OFFSET                                                  8
#define SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_F_WIDTH                                                   12
#define SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_OFFSET                                                    0
#define SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_WORD_OFFSET                                               0
#define SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_F_OFFSET_MOD16                                            8
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_F_OFFSET                                                     22
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_F_WIDTH                                                      1
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_OFFSET                                                       5
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_WORD_OFFSET                                                  1
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_F_OFFSET_MOD8                                                6
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_F_OFFSET_MOD16                                               6
#define SBPM_MULTICAST_REQUEST_VALUE_F_OFFSET                                                           14
#define SBPM_MULTICAST_REQUEST_VALUE_F_WIDTH                                                            8
#define SBPM_MULTICAST_REQUEST_VALUE_OFFSET                                                             5
#define SBPM_MULTICAST_REQUEST_VALUE_WORD_OFFSET                                                        1
#define SBPM_MULTICAST_REQUEST_VALUE_F_OFFSET_MOD16                                                     14
#define SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_F_OFFSET                                                   0
#define SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_F_WIDTH                                                    14
#define SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_OFFSET                                                     6
#define SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_WORD_OFFSET                                                1
#define SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_F_OFFSET_MOD16                                             0

/* >>>RDD_SBPM_MULTICAST_REQUEST_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	target_address	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved3     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved4     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ack_request   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	value         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	buffer_number 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	reserved3     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	target_address	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	buffer_number 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	value         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ack_request   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved4     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_SBPM_MULTICAST_REQUEST_DTS;

typedef RDD_SBPM_MULTICAST_REQUEST_DTS * aligned_RDD_SBPM_MULTICAST_REQUEST_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_SBPM_MULTICAST_REQUEST_DTS fields;
} RDD_SBPM_MULTICAST_REQUEST_DTS_NEW;
typedef RDD_SBPM_MULTICAST_REQUEST_DTS_NEW * aligned_RDD_SBPM_MULTICAST_REQUEST_DTS_NEW ALIGNMENT8;

#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS), 7, 1, r)
#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS), 7, 1, v)
#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_L_READ( wv )                        FIELD_GET( wv, 31, 1 )
#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_L_WRITE( v, wv )                    FIELD_SET( v, 31, 1, wv )
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS), 6, 1, r)
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS), 6, 1, v)
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_L_READ( wv )                       FIELD_GET( wv, 30, 1 )
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_L_WRITE( v, wv )                   FIELD_SET( v, 30, 1, wv )
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS), 0, 4, r)
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS), 0, 4, v)
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p, 0, 4, r)
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p, 0, 4, v)
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_L_READ( wv )                     FIELD_GET( wv, 24, 4 )
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_L_WRITE( v, wv )                 FIELD_SET( v, 24, 4, wv )
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS) + 0, 8, 12, r)
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS) + 0, 8, 12, v)
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_READ(r, p)                 FIELD_MREAD_32((uint8_t *)p + 0, 8, 12, r)
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)p + 0, 8, 12, v)
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_L_READ( wv )               FIELD_GET( wv, 8, 12 )
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_L_WRITE( v, wv )           FIELD_SET( v, 8, 12, wv )
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS) + 5, 6, 1, r)
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS) + 5, 6, 1, v)
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 5, 6, 1, r)
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 5, 6, 1, v)
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_L_READ( wv )                  FIELD_GET( wv, 22, 1 )
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_L_WRITE( v, wv )              FIELD_SET( v, 22, 1, wv )
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS) + 4, 14, 8, r)
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS) + 4, 14, 8, v)
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_READ(r, p)                          FIELD_MREAD_32((uint8_t *)p + 4, 14, 8, r)
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_WRITE(v, p)                         FIELD_MWRITE_32((uint8_t *)p + 4, 14, 8, v)
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_L_READ( wv )                        FIELD_GET( wv, 14, 8 )
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_L_WRITE( v, wv )                    FIELD_SET( v, 14, 8, wv )
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS) + 6, 0, 14, r)
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_SBPM_MULTICAST_REQUEST_DTS) + 6, 0, 14, v)
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_READ(r, p)                  FIELD_MREAD_16((uint8_t *)p + 6, 0, 14, r)
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)p + 6, 0, 14, v)
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_L_READ( wv )                FIELD_GET( wv, 0, 14 )
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_L_WRITE( v, wv )            FIELD_SET( v, 0, 14, wv )
/* <<<RDD_SBPM_MULTICAST_REQUEST_DTS */

/* <<<RDD_SBPM_MULTICAST_REQUEST */


/* >>>RDD_NATC_CONTROL_ENTRY */
#define NATC_CONTROL_ENTRY_DONE_F_OFFSET                                                            31
#define NATC_CONTROL_ENTRY_DONE_F_WIDTH                                                             1
#define NATC_CONTROL_ENTRY_NATC_CONTROL_ENTRY_OFFSET                                                0
#define NATC_CONTROL_ENTRY_DONE_OFFSET                                                              0
#define NATC_CONTROL_ENTRY_DONE_WORD_OFFSET                                                         0
#define NATC_CONTROL_ENTRY_DONE_F_OFFSET_MOD8                                                       7
#define NATC_CONTROL_ENTRY_DONE_F_OFFSET_MOD16                                                      15
#define NATC_CONTROL_ENTRY_NATC_HIT_F_OFFSET                                                        30
#define NATC_CONTROL_ENTRY_NATC_HIT_F_WIDTH                                                         1
#define NATC_CONTROL_ENTRY_NATC_HIT_OFFSET                                                          0
#define NATC_CONTROL_ENTRY_NATC_HIT_WORD_OFFSET                                                     0
#define NATC_CONTROL_ENTRY_NATC_HIT_F_OFFSET_MOD8                                                   6
#define NATC_CONTROL_ENTRY_NATC_HIT_F_OFFSET_MOD16                                                  14
#define NATC_CONTROL_ENTRY_CACHE_HIT_F_OFFSET                                                       29
#define NATC_CONTROL_ENTRY_CACHE_HIT_F_WIDTH                                                        1
#define NATC_CONTROL_ENTRY_CACHE_HIT_OFFSET                                                         0
#define NATC_CONTROL_ENTRY_CACHE_HIT_WORD_OFFSET                                                    0
#define NATC_CONTROL_ENTRY_CACHE_HIT_F_OFFSET_MOD8                                                  5
#define NATC_CONTROL_ENTRY_CACHE_HIT_F_OFFSET_MOD16                                                 13
#define NATC_CONTROL_ENTRY_HW_RESERVED0_F_OFFSET                                                    24
#define NATC_CONTROL_ENTRY_HW_RESERVED0_F_WIDTH                                                     5
#define NATC_CONTROL_ENTRY_HW_RESERVED0_OFFSET                                                      0
#define NATC_CONTROL_ENTRY_HW_RESERVED0_WORD_OFFSET                                                 0
#define NATC_CONTROL_ENTRY_HW_RESERVED0_F_OFFSET_MOD8                                               0
#define NATC_CONTROL_ENTRY_HW_RESERVED0_F_OFFSET_MOD16                                              8
#define NATC_CONTROL_ENTRY_HAS_ITER_F_OFFSET                                                        20
#define NATC_CONTROL_ENTRY_HAS_ITER_F_WIDTH                                                         4
#define NATC_CONTROL_ENTRY_HAS_ITER_OFFSET                                                          1
#define NATC_CONTROL_ENTRY_HAS_ITER_WORD_OFFSET                                                     0
#define NATC_CONTROL_ENTRY_HAS_ITER_F_OFFSET_MOD8                                                   4
#define NATC_CONTROL_ENTRY_HAS_ITER_F_OFFSET_MOD16                                                  4
#define NATC_CONTROL_ENTRY_HW_RESERVED1_F_OFFSET                                                    18
#define NATC_CONTROL_ENTRY_HW_RESERVED1_F_WIDTH                                                     2
#define NATC_CONTROL_ENTRY_HW_RESERVED1_OFFSET                                                      1
#define NATC_CONTROL_ENTRY_HW_RESERVED1_WORD_OFFSET                                                 0
#define NATC_CONTROL_ENTRY_HW_RESERVED1_F_OFFSET_MOD8                                               2
#define NATC_CONTROL_ENTRY_HW_RESERVED1_F_OFFSET_MOD16                                              2
#define NATC_CONTROL_ENTRY_HASH_VAL_F_OFFSET                                                        0
#define NATC_CONTROL_ENTRY_HASH_VAL_F_WIDTH                                                         18
#define NATC_CONTROL_ENTRY_HASH_VAL_OFFSET                                                          0
#define NATC_CONTROL_ENTRY_HASH_VAL_WORD_OFFSET                                                     0
#define NATC_CONTROL_ENTRY_HW_RESERVED2_F_OFFSET                                                    0
#define NATC_CONTROL_ENTRY_HW_RESERVED2_F_WIDTH                                                     32
#define NATC_CONTROL_ENTRY_HW_RESERVED2_OFFSET                                                      4
#define NATC_CONTROL_ENTRY_HW_RESERVED2_WORD_OFFSET                                                 1

/* >>>RDD_NATC_CONTROL_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	done        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	natc_hit    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cache_hit   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hw_reserved0	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	has_iter    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hw_reserved1	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hash_val    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hw_reserved2	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	hash_val    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hw_reserved1	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	has_iter    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hw_reserved0	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	cache_hit   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	natc_hit    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	done        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hw_reserved2	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NATC_CONTROL_ENTRY_DTS;

typedef RDD_NATC_CONTROL_ENTRY_DTS * aligned_RDD_NATC_CONTROL_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_NATC_CONTROL_ENTRY_DTS fields;
} RDD_NATC_CONTROL_ENTRY_DTS_NEW;
typedef RDD_NATC_CONTROL_ENTRY_DTS_NEW * aligned_RDD_NATC_CONTROL_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_NATC_CONTROL_ENTRY_DONE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS), 7, 1, r)
#define RDD_NATC_CONTROL_ENTRY_DONE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS), 7, 1, v)
#define RDD_NATC_CONTROL_ENTRY_DONE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_NATC_CONTROL_ENTRY_DONE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_NATC_CONTROL_ENTRY_NATC_HIT_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS), 6, 1, r)
#define RDD_NATC_CONTROL_ENTRY_NATC_HIT_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS), 6, 1, v)
#define RDD_NATC_CONTROL_ENTRY_NATC_HIT_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p, 6, 1, r)
#define RDD_NATC_CONTROL_ENTRY_NATC_HIT_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p, 6, 1, v)
#define RDD_NATC_CONTROL_ENTRY_CACHE_HIT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS), 5, 1, r)
#define RDD_NATC_CONTROL_ENTRY_CACHE_HIT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS), 5, 1, v)
#define RDD_NATC_CONTROL_ENTRY_CACHE_HIT_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p, 5, 1, r)
#define RDD_NATC_CONTROL_ENTRY_CACHE_HIT_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p, 5, 1, v)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED0_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS), 0, 5, r)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED0_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS), 0, 5, v)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED0_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 0, 5, r)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED0_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 0, 5, v)
#define RDD_NATC_CONTROL_ENTRY_HAS_ITER_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS) + 1, 4, 4, r)
#define RDD_NATC_CONTROL_ENTRY_HAS_ITER_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS) + 1, 4, 4, v)
#define RDD_NATC_CONTROL_ENTRY_HAS_ITER_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 1, 4, 4, r)
#define RDD_NATC_CONTROL_ENTRY_HAS_ITER_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 1, 4, 4, v)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED1_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS) + 1, 2, 2, r)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED1_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS) + 1, 2, 2, v)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED1_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 1, 2, 2, r)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED1_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 1, 2, 2, v)
#define RDD_NATC_CONTROL_ENTRY_HASH_VAL_READ_G(r, g, idx)              GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS) + 0, 0, 18, r)
#define RDD_NATC_CONTROL_ENTRY_HASH_VAL_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS) + 0, 0, 18, v)
#define RDD_NATC_CONTROL_ENTRY_HASH_VAL_READ(r, p)                     FIELD_MREAD_32((uint8_t *)p + 0, 0, 18, r)
#define RDD_NATC_CONTROL_ENTRY_HASH_VAL_WRITE(v, p)                    FIELD_MWRITE_32((uint8_t *)p + 0, 0, 18, v)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED2_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS) + 4, r)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED2_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_NATC_CONTROL_ENTRY_DTS) + 4, v)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED2_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED2_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_NATC_CONTROL_ENTRY_DTS */

/* <<<RDD_NATC_CONTROL_ENTRY */


/* >>>RDD_NATC_COUNTERS_ENTRY */
#define NATC_COUNTERS_ENTRY_HIT_COUNTER_F_OFFSET                                                     0
#define NATC_COUNTERS_ENTRY_HIT_COUNTER_F_WIDTH                                                      32
#define NATC_COUNTERS_ENTRY_NATC_COUNTERS_ENTRY_OFFSET                                               0
#define NATC_COUNTERS_ENTRY_HIT_COUNTER_OFFSET                                                       0
#define NATC_COUNTERS_ENTRY_HIT_COUNTER_WORD_OFFSET                                                  0
#define NATC_COUNTERS_ENTRY_BYTES_COUNTER_F_OFFSET                                                   0
#define NATC_COUNTERS_ENTRY_BYTES_COUNTER_F_WIDTH                                                    32
#define NATC_COUNTERS_ENTRY_BYTES_COUNTER_OFFSET                                                     4
#define NATC_COUNTERS_ENTRY_BYTES_COUNTER_WORD_OFFSET                                                1

/* >>>RDD_NATC_COUNTERS_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	hit_counter  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bytes_counter	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	hit_counter  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bytes_counter	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_NATC_COUNTERS_ENTRY_DTS;

typedef RDD_NATC_COUNTERS_ENTRY_DTS * aligned_RDD_NATC_COUNTERS_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_NATC_COUNTERS_ENTRY_DTS fields;
} RDD_NATC_COUNTERS_ENTRY_DTS_NEW;
typedef RDD_NATC_COUNTERS_ENTRY_DTS_NEW * aligned_RDD_NATC_COUNTERS_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_NATC_COUNTERS_ENTRY_HIT_COUNTER_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_NATC_COUNTERS_ENTRY_DTS), r)
#define RDD_NATC_COUNTERS_ENTRY_HIT_COUNTER_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_NATC_COUNTERS_ENTRY_DTS), v)
#define RDD_NATC_COUNTERS_ENTRY_HIT_COUNTER_READ(r, p)                   MREAD_32((uint8_t *)p, r)
#define RDD_NATC_COUNTERS_ENTRY_HIT_COUNTER_WRITE(v, p)                  MWRITE_32((uint8_t *)p, v)
#define RDD_NATC_COUNTERS_ENTRY_BYTES_COUNTER_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_NATC_COUNTERS_ENTRY_DTS) + 4, r)
#define RDD_NATC_COUNTERS_ENTRY_BYTES_COUNTER_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_NATC_COUNTERS_ENTRY_DTS) + 4, v)
#define RDD_NATC_COUNTERS_ENTRY_BYTES_COUNTER_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_NATC_COUNTERS_ENTRY_BYTES_COUNTER_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_NATC_COUNTERS_ENTRY_DTS */

/* <<<RDD_NATC_COUNTERS_ENTRY */


/* >>>RDD_MCAST_FPM_HEADER_SLOT */
#define MCAST_FPM_HEADER_SLOT_MCAST_FPM_HEADER_SLOT_OFFSET                                             0
#define MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_OFFSET                                                   0
#define MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_WORD_OFFSET                                              0
#define MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_F_OFFSET_MOD16                                           0

/* >>>RDD_MCAST_FPM_HEADER_SLOT_DTS */
#define RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_NUMBER	64

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint8_t	header_max_size[RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_NUMBER];
#else
	uint8_t	header_max_size[RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_MCAST_FPM_HEADER_SLOT_DTS;

typedef RDD_MCAST_FPM_HEADER_SLOT_DTS * aligned_RDD_MCAST_FPM_HEADER_SLOT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[16];
    uint64_t dword_val64[8];
    RDD_MCAST_FPM_HEADER_SLOT_DTS fields;
} RDD_MCAST_FPM_HEADER_SLOT_DTS_NEW;
typedef RDD_MCAST_FPM_HEADER_SLOT_DTS_NEW * aligned_RDD_MCAST_FPM_HEADER_SLOT_DTS_NEW ALIGNMENT8;

#define RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_READ_G(r, g, idx, i)       GROUP_MREAD_I_8(g, idx*sizeof(RDD_MCAST_FPM_HEADER_SLOT_DTS), i, r)
#define RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8(g, idx*sizeof(RDD_MCAST_FPM_HEADER_SLOT_DTS), i, v)
#define RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_READ(r, p, i)              MREAD_I_8((uint8_t *)p, i, r)
#define RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)p, i, v)
/* <<<RDD_MCAST_FPM_HEADER_SLOT_DTS */

/* <<<RDD_MCAST_FPM_HEADER_SLOT */


/* >>>RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE */
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_F_OFFSET                                                       0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_F_WIDTH                                                        2
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_OFFSET                                                         3
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_WORD_OFFSET                                                    0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_F_OFFSET_MOD8                                                  0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_F_OFFSET_MOD16                                                 0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_F_OFFSET                                                       30
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_F_WIDTH                                                        2
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_OFFSET                                                         4
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_WORD_OFFSET                                                    1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_F_OFFSET_MOD8                                                  6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_F_OFFSET_MOD16                                                 14
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_F_OFFSET                                                    16
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_F_WIDTH                                                     14
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_OFFSET                                                      4
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_WORD_OFFSET                                                 1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_F_OFFSET_MOD16                                              0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_F_OFFSET                                                             15
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_F_WIDTH                                                              1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_OFFSET                                                               6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_WORD_OFFSET                                                          1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_F_OFFSET_MOD8                                                        7
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_F_OFFSET_MOD16                                                       15
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_F_OFFSET                                                     14
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_F_WIDTH                                                      1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_OFFSET                                                       6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_WORD_OFFSET                                                  1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_F_OFFSET_MOD8                                                6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_F_OFFSET_MOD16                                               14
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_F_OFFSET                                                             13
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_F_WIDTH                                                              1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_OFFSET                                                               6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_WORD_OFFSET                                                          1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_F_OFFSET_MOD8                                                        5
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_F_OFFSET_MOD16                                                       13
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_F_OFFSET                                                     12
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_F_WIDTH                                                      1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_OFFSET                                                       6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_WORD_OFFSET                                                  1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_F_OFFSET_MOD8                                                4
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_F_OFFSET_MOD16                                               12
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_F_OFFSET                                                    0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_F_WIDTH                                                     9
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_OFFSET                                                      6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_WORD_OFFSET                                                 1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_F_OFFSET_MOD16                                              0

/* >>>RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	reserved0   	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_pool0   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_pool1   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bytes_popped	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	agg         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	target_mem0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	abs         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	target_mem1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	queue_number	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	fpm_pool0   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0   	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	queue_number	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved1   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	target_mem1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	abs         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	target_mem0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	agg         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bytes_popped	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	fpm_pool1   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS;

typedef RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS * aligned_RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS fields;
} RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS_NEW;
typedef RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS_NEW * aligned_RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS_NEW ALIGNMENT8;

#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 3, 0, 2, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 3, 0, 2, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 3, 0, 2, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 3, 0, 2, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 4, 6, 2, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 4, 6, 2, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_READ(r, p)                    FIELD_MREAD_8((uint8_t *)p + 4, 6, 2, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)p + 4, 6, 2, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 4, 0, 14, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 4, 0, 14, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 4, 0, 14, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 4, 0, 14, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 6, 7, 1, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 6, 7, 1, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 6, 7, 1, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 6, 7, 1, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 6, 6, 1, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 6, 6, 1, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 6, 6, 1, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 6, 6, 1, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 6, 5, 1, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 6, 5, 1, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 6, 5, 1, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 6, 5, 1, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 6, 4, 1, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 6, 4, 1, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 6, 4, 1, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 6, 4, 1, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 6, 0, 9, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS) + 6, 0, 9, v)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 6, 0, 9, r)
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 6, 0, 9, v)
/* <<<RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_DTS */

/* <<<RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE */


/* >>>RDD_HASH_RESULT */
#define HASH_RESULT_MATCH_F_OFFSET                                                           30
#define HASH_RESULT_MATCH_F_WIDTH                                                            2
#define HASH_RESULT_HASH_RESULT_OFFSET                                                       0
#define HASH_RESULT_MATCH_OFFSET                                                             0
#define HASH_RESULT_MATCH_WORD_OFFSET                                                        0
#define HASH_RESULT_MATCH_F_OFFSET_MOD8                                                      6
#define HASH_RESULT_MATCH_F_OFFSET_MOD16                                                     14
#define HASH_RESULT_MATCH_INDEX_F_OFFSET                                                     19
#define HASH_RESULT_MATCH_INDEX_F_WIDTH                                                      11
#define HASH_RESULT_MATCH_INDEX_OFFSET                                                       0
#define HASH_RESULT_MATCH_INDEX_WORD_OFFSET                                                  0
#define HASH_RESULT_MATCH_INDEX_F_OFFSET_MOD16                                               3
#define HASH_RESULT_MATCH_ENGINE_F_OFFSET                                                    17
#define HASH_RESULT_MATCH_ENGINE_F_WIDTH                                                     2
#define HASH_RESULT_MATCH_ENGINE_OFFSET                                                      1
#define HASH_RESULT_MATCH_ENGINE_WORD_OFFSET                                                 0
#define HASH_RESULT_MATCH_ENGINE_F_OFFSET_MOD8                                               1
#define HASH_RESULT_MATCH_ENGINE_F_OFFSET_MOD16                                              1
#define HASH_RESULT_CONTEXT0_32_47_F_OFFSET                                                  0
#define HASH_RESULT_CONTEXT0_32_47_F_WIDTH                                                   16
#define HASH_RESULT_CONTEXT0_32_47_OFFSET                                                    2
#define HASH_RESULT_CONTEXT0_32_47_WORD_OFFSET                                               0
#define HASH_RESULT_CONTEXT0_0_31_F_OFFSET                                                   0
#define HASH_RESULT_CONTEXT0_0_31_F_WIDTH                                                    32
#define HASH_RESULT_CONTEXT0_0_31_OFFSET                                                     4
#define HASH_RESULT_CONTEXT0_0_31_WORD_OFFSET                                                1
#define HASH_RESULT_CONTEXT1_16_47_F_OFFSET                                                  0
#define HASH_RESULT_CONTEXT1_16_47_F_WIDTH                                                   32
#define HASH_RESULT_CONTEXT1_16_47_OFFSET                                                    8
#define HASH_RESULT_CONTEXT1_16_47_WORD_OFFSET                                               2
#define HASH_RESULT_CONTEXT1_0_15_F_OFFSET                                                   16
#define HASH_RESULT_CONTEXT1_0_15_F_WIDTH                                                    16
#define HASH_RESULT_CONTEXT1_0_15_OFFSET                                                     12
#define HASH_RESULT_CONTEXT1_0_15_WORD_OFFSET                                                3
#define HASH_RESULT_CONTEXT2_32_47_F_OFFSET                                                  0
#define HASH_RESULT_CONTEXT2_32_47_F_WIDTH                                                   16
#define HASH_RESULT_CONTEXT2_32_47_OFFSET                                                    14
#define HASH_RESULT_CONTEXT2_32_47_WORD_OFFSET                                               3
#define HASH_RESULT_CONTEXT2_0_31_F_OFFSET                                                   0
#define HASH_RESULT_CONTEXT2_0_31_F_WIDTH                                                    32
#define HASH_RESULT_CONTEXT2_0_31_OFFSET                                                     16
#define HASH_RESULT_CONTEXT2_0_31_WORD_OFFSET                                                4

/* >>>RDD_HASH_RESULT_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	match         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	match_index   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	match_engine  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context0_32_47	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context0_0_31 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context1_16_47	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context1_0_15 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context2_32_47	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context2_0_31 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_1    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	context0_32_47	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	match_engine  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	match_index   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	match         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context0_0_31 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context1_16_47	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context2_32_47	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context1_0_15 	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	context2_0_31 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_1    	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_HASH_RESULT_DTS;

typedef RDD_HASH_RESULT_DTS * aligned_RDD_HASH_RESULT_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[6];
    uint64_t dword_val64[3];
    RDD_HASH_RESULT_DTS fields;
} RDD_HASH_RESULT_DTS_NEW;
typedef RDD_HASH_RESULT_DTS_NEW * aligned_RDD_HASH_RESULT_DTS_NEW ALIGNMENT8;

#define RDD_HASH_RESULT_MATCH_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_HASH_RESULT_DTS), 6, 2, r)
#define RDD_HASH_RESULT_MATCH_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_HASH_RESULT_DTS), 6, 2, v)
#define RDD_HASH_RESULT_MATCH_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p, 6, 2, r)
#define RDD_HASH_RESULT_MATCH_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p, 6, 2, v)
#define RDD_HASH_RESULT_MATCH_INDEX_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_HASH_RESULT_DTS), 3, 11, r)
#define RDD_HASH_RESULT_MATCH_INDEX_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_HASH_RESULT_DTS), 3, 11, v)
#define RDD_HASH_RESULT_MATCH_INDEX_READ(r, p)                    FIELD_MREAD_16((uint8_t *)p, 3, 11, r)
#define RDD_HASH_RESULT_MATCH_INDEX_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)p, 3, 11, v)
#define RDD_HASH_RESULT_MATCH_ENGINE_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 1, 1, 2, r)
#define RDD_HASH_RESULT_MATCH_ENGINE_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 1, 1, 2, v)
#define RDD_HASH_RESULT_MATCH_ENGINE_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 1, 1, 2, r)
#define RDD_HASH_RESULT_MATCH_ENGINE_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 1, 1, 2, v)
#define RDD_HASH_RESULT_CONTEXT0_32_47_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 2, r)
#define RDD_HASH_RESULT_CONTEXT0_32_47_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 2, v)
#define RDD_HASH_RESULT_CONTEXT0_32_47_READ(r, p)                 MREAD_16((uint8_t *)p + 2, r)
#define RDD_HASH_RESULT_CONTEXT0_32_47_WRITE(v, p)                MWRITE_16((uint8_t *)p + 2, v)
#define RDD_HASH_RESULT_CONTEXT0_0_31_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 4, r)
#define RDD_HASH_RESULT_CONTEXT0_0_31_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 4, v)
#define RDD_HASH_RESULT_CONTEXT0_0_31_READ(r, p)                  MREAD_32((uint8_t *)p + 4, r)
#define RDD_HASH_RESULT_CONTEXT0_0_31_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 4, v)
#define RDD_HASH_RESULT_CONTEXT1_16_47_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 8, r)
#define RDD_HASH_RESULT_CONTEXT1_16_47_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 8, v)
#define RDD_HASH_RESULT_CONTEXT1_16_47_READ(r, p)                 MREAD_32((uint8_t *)p + 8, r)
#define RDD_HASH_RESULT_CONTEXT1_16_47_WRITE(v, p)                MWRITE_32((uint8_t *)p + 8, v)
#define RDD_HASH_RESULT_CONTEXT1_0_15_READ_G(r, g, idx)           GROUP_MREAD_16(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 12, r)
#define RDD_HASH_RESULT_CONTEXT1_0_15_WRITE_G(v, g, idx)          GROUP_MWRITE_16(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 12, v)
#define RDD_HASH_RESULT_CONTEXT1_0_15_READ(r, p)                  MREAD_16((uint8_t *)p + 12, r)
#define RDD_HASH_RESULT_CONTEXT1_0_15_WRITE(v, p)                 MWRITE_16((uint8_t *)p + 12, v)
#define RDD_HASH_RESULT_CONTEXT2_32_47_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 14, r)
#define RDD_HASH_RESULT_CONTEXT2_32_47_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 14, v)
#define RDD_HASH_RESULT_CONTEXT2_32_47_READ(r, p)                 MREAD_16((uint8_t *)p + 14, r)
#define RDD_HASH_RESULT_CONTEXT2_32_47_WRITE(v, p)                MWRITE_16((uint8_t *)p + 14, v)
#define RDD_HASH_RESULT_CONTEXT2_0_31_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 16, r)
#define RDD_HASH_RESULT_CONTEXT2_0_31_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_HASH_RESULT_DTS) + 16, v)
#define RDD_HASH_RESULT_CONTEXT2_0_31_READ(r, p)                  MREAD_32((uint8_t *)p + 16, r)
#define RDD_HASH_RESULT_CONTEXT2_0_31_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 16, v)
/* <<<RDD_HASH_RESULT_DTS */

/* <<<RDD_HASH_RESULT */


/* >>>RDD_TRACE_EVENT */
#define TRACE_EVENT_TIMESTAMP_F_OFFSET                                                       20
#define TRACE_EVENT_TIMESTAMP_F_WIDTH                                                        12
#define TRACE_EVENT_TRACE_EVENT_OFFSET                                                       0
#define TRACE_EVENT_TIMESTAMP_OFFSET                                                         0
#define TRACE_EVENT_TIMESTAMP_WORD_OFFSET                                                    0
#define TRACE_EVENT_TIMESTAMP_F_OFFSET_MOD16                                                 4
#define TRACE_EVENT_EVENT_ID_F_OFFSET                                                        18
#define TRACE_EVENT_EVENT_ID_F_WIDTH                                                         2
#define TRACE_EVENT_EVENT_ID_OFFSET                                                          1
#define TRACE_EVENT_EVENT_ID_WORD_OFFSET                                                     0
#define TRACE_EVENT_EVENT_ID_F_OFFSET_MOD8                                                   2
#define TRACE_EVENT_EVENT_ID_F_OFFSET_MOD16                                                  2
#define TRACE_EVENT_TRACE_EVENT_INFO_F_OFFSET                                                0
#define TRACE_EVENT_TRACE_EVENT_INFO_F_WIDTH                                                 18
#define TRACE_EVENT_TRACE_EVENT_INFO_OFFSET                                                  0
#define TRACE_EVENT_TRACE_EVENT_INFO_WORD_OFFSET                                             0
/* <<<RDD_TRACE_EVENT */


/* >>>RDD_CPU_RX_DESCRIPTOR */
#define CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_F_OFFSET                                          0
#define CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_F_WIDTH                                           32
#define CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_OFFSET                                            0
#define CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_WORD_OFFSET                                       0
#define CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_F_OFFSET                                         24
#define CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_F_WIDTH                                          8
#define CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_OFFSET                                           4
#define CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_WORD_OFFSET                                      1
#define CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_F_OFFSET_MOD16                                   8
#define CPU_RX_DESCRIPTOR_ABS_F_OFFSET                                                             16
#define CPU_RX_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define CPU_RX_DESCRIPTOR_ABS_OFFSET                                                               5
#define CPU_RX_DESCRIPTOR_ABS_WORD_OFFSET                                                          1
#define CPU_RX_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        0
#define CPU_RX_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       0
#define CPU_RX_DESCRIPTOR_PLEN_F_OFFSET                                                            2
#define CPU_RX_DESCRIPTOR_PLEN_F_WIDTH                                                             14
#define CPU_RX_DESCRIPTOR_PLEN_OFFSET                                                              6
#define CPU_RX_DESCRIPTOR_PLEN_WORD_OFFSET                                                         1
#define CPU_RX_DESCRIPTOR_PLEN_F_OFFSET_MOD16                                                      2
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_F_OFFSET                                              1
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_F_WIDTH                                               1
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_OFFSET                                                7
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_WORD_OFFSET                                           1
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_F_OFFSET_MOD8                                         1
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_F_OFFSET_MOD16                                        1
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_F_OFFSET                                                      31
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_F_WIDTH                                                       1
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_OFFSET                                                        8
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_WORD_OFFSET                                                   2
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_F_OFFSET_MOD8                                                 7
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_F_OFFSET_MOD16                                                15
#define CPU_RX_DESCRIPTOR_COLOR_F_OFFSET                                                           30
#define CPU_RX_DESCRIPTOR_COLOR_F_WIDTH                                                            1
#define CPU_RX_DESCRIPTOR_COLOR_OFFSET                                                             8
#define CPU_RX_DESCRIPTOR_COLOR_WORD_OFFSET                                                        2
#define CPU_RX_DESCRIPTOR_COLOR_F_OFFSET_MOD8                                                      6
#define CPU_RX_DESCRIPTOR_COLOR_F_OFFSET_MOD16                                                     14
#define CPU_RX_DESCRIPTOR_VPORT_F_OFFSET                                                           25
#define CPU_RX_DESCRIPTOR_VPORT_F_WIDTH                                                            5
#define CPU_RX_DESCRIPTOR_VPORT_OFFSET                                                             8
#define CPU_RX_DESCRIPTOR_VPORT_WORD_OFFSET                                                        2
#define CPU_RX_DESCRIPTOR_VPORT_F_OFFSET_MOD8                                                      1
#define CPU_RX_DESCRIPTOR_VPORT_F_OFFSET_MOD16                                                     9
#define CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_F_OFFSET                                                13
#define CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_F_WIDTH                                                 12
#define CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_OFFSET                                                  8
#define CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_WORD_OFFSET                                             2
#define CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_F_OFFSET_MOD16                                          13
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_F_OFFSET                                                     6
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_F_WIDTH                                                      7
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_OFFSET                                                       10
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_WORD_OFFSET                                                  2
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_F_OFFSET_MOD8                                                6
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_F_OFFSET_MOD16                                               6
#define CPU_RX_DESCRIPTOR_REASON_F_OFFSET                                                          0
#define CPU_RX_DESCRIPTOR_REASON_F_WIDTH                                                           6
#define CPU_RX_DESCRIPTOR_REASON_OFFSET                                                            11
#define CPU_RX_DESCRIPTOR_REASON_WORD_OFFSET                                                       2
#define CPU_RX_DESCRIPTOR_REASON_F_OFFSET_MOD8                                                     0
#define CPU_RX_DESCRIPTOR_REASON_F_OFFSET_MOD16                                                    0
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_F_OFFSET                                                    31
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_F_WIDTH                                                     1
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_OFFSET                                                      12
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_WORD_OFFSET                                                 3
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_F_OFFSET_MOD8                                               7
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_F_OFFSET_MOD16                                              15
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_F_OFFSET                                                   30
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_F_WIDTH                                                    1
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_OFFSET                                                     12
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_WORD_OFFSET                                                3
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_F_OFFSET_MOD8                                              6
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_F_OFFSET_MOD16                                             14
#define CPU_RX_DESCRIPTOR_IS_UCAST_F_OFFSET                                                        29
#define CPU_RX_DESCRIPTOR_IS_UCAST_F_WIDTH                                                         1
#define CPU_RX_DESCRIPTOR_IS_UCAST_OFFSET                                                          12
#define CPU_RX_DESCRIPTOR_IS_UCAST_WORD_OFFSET                                                     3
#define CPU_RX_DESCRIPTOR_IS_UCAST_F_OFFSET_MOD8                                                   5
#define CPU_RX_DESCRIPTOR_IS_UCAST_F_OFFSET_MOD16                                                  13
#define CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_F_OFFSET                                             16
#define CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_F_WIDTH                                              13
#define CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_OFFSET                                               12
#define CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_WORD_OFFSET                                          3
#define CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_F_OFFSET_MOD16                                       0
#define CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_F_OFFSET                                           0
#define CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_F_WIDTH                                            16
#define CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_OFFSET                                             14
#define CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_WORD_OFFSET                                        3

/* >>>RDD_CPU_RX_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	cpu_rx_data_ptr0_union  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	host_buffer_data_ptr_low          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_data_ptr0_union union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	fpm_idx                           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_data_ptr0_union union */
			uint32_t	reserved0                         	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_data_ptr0_union union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_cpu_rx_data_ptr0_union  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	host_buffer_data_ptr_hi 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	plen                    	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_chksum_verified      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_host_buffer_data_ptr_hi 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved1               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_plen                    	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_chksum_verified      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved2               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_host_buffer_data_ptr_hi 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved1               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_plen                    	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_chksum_verified      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved2               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_host_buffer_data_ptr_hi 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_reserved1               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_plen                    	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_is_chksum_verified      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_reserved2               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	is_src_lan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	color                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	vport                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_rx_src_union        	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	data_offset             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reason                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_is_src_lan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_color                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_vport                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	wan_flow_id                       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
			uint32_t	reserved1_data_offset             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reason                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_is_src_lan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_color                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_vport                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3                         	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
			uint32_t	reserved2_data_offset             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reason                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_is_src_lan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_color                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_vport                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ssid                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
			uint32_t	reserved4                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
			uint32_t	reserved3_data_offset             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_reason                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	is_exception            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_rx_offload           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_ucast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	mcast_tx_prio_union     	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	cpu_rx_metadata_union   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_is_exception            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_rx_offload           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_ucast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	mcast_tx_prio                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
			uint32_t	reserved5                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
			uint32_t	dst_ssid_vector                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_metadata_union union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_is_exception            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_rx_offload           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_ucast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved6                         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
			uint32_t	metadata_0                        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
			uint32_t	reserved7                         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
			uint32_t	metadata_1                        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_metadata_union union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_is_exception            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_is_rx_offload           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_is_ucast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_mcast_tx_prio_union     	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	egress_queue                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_metadata_union union */
			uint32_t	wan_flow                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_metadata_union union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	cpu_rx_data_ptr0_union  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	host_buffer_data_ptr_low          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_data_ptr0_union union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	fpm_idx                           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_data_ptr0_union union */
			uint32_t	reserved0                         	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_data_ptr0_union union */
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_cpu_rx_data_ptr0_union  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved2               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_chksum_verified      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	plen                    	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	host_buffer_data_ptr_hi 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved2               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_chksum_verified      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_plen                    	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved1               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_host_buffer_data_ptr_hi 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved2               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_chksum_verified      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_plen                    	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved1               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_host_buffer_data_ptr_hi 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_reserved2               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_is_chksum_verified      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_plen                    	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_abs                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_reserved1               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_host_buffer_data_ptr_hi 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reason                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	data_offset             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_rx_src_union        	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	vport                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	color                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_src_lan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reason                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_data_offset             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	wan_flow_id                       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
			uint32_t	reserved1_vport                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_color                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_src_lan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reason                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_data_offset             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3                         	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
			uint32_t	reserved2_vport                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_color                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_src_lan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	reserved3_reason                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_data_offset             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	ssid                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
			uint32_t	reserved4                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
			uint32_t	reserved3_vport                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_color                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_is_src_lan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	cpu_rx_metadata_union   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	mcast_tx_prio_union     	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	is_ucast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_rx_offload           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	is_exception            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	dst_ssid_vector                   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_metadata_union union */
			uint32_t	mcast_tx_prio                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
			uint32_t	reserved5                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
			uint32_t	reserved1_is_ucast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_rx_offload           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_is_exception            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	metadata_1                        	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_metadata_union union */
			uint32_t	reserved6                         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
			uint32_t	metadata_0                        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
			uint32_t	reserved7                         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
			uint32_t	reserved2_is_ucast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_rx_offload           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_is_exception            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
			uint32_t	egress_queue                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_metadata_union union */
			uint32_t	wan_flow                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_metadata_union union */
			uint32_t	reserved3_mcast_tx_prio_union     	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_is_ucast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_is_rx_offload           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3_is_exception            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_RX_DESCRIPTOR_DTS;

typedef RDD_CPU_RX_DESCRIPTOR_DTS * aligned_RDD_CPU_RX_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_CPU_RX_DESCRIPTOR_DTS fields;
} RDD_CPU_RX_DESCRIPTOR_DTS_NEW;
typedef RDD_CPU_RX_DESCRIPTOR_DTS_NEW * aligned_RDD_CPU_RX_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS), r)
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS), v)
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_READ(r, p)                   MREAD_32((uint8_t *)p, r)
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_WRITE(v, p)                  MWRITE_32((uint8_t *)p, v)
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_LOW_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS), r)
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_LOW_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS), v)
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_LOW_READ(r, p)                 MREAD_32((uint8_t *)p, r)
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_LOW_WRITE(v, p)                MWRITE_32((uint8_t *)p, v)
#define RDD_CPU_RX_DESCRIPTOR_FPM_IDX_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS), 14, 18, r)
#define RDD_CPU_RX_DESCRIPTOR_FPM_IDX_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS), 14, 18, v)
#define RDD_CPU_RX_DESCRIPTOR_FPM_IDX_READ(r, p)                                  FIELD_MREAD_32((uint8_t *)p, 14, 18, r)
#define RDD_CPU_RX_DESCRIPTOR_FPM_IDX_WRITE(v, p)                                 FIELD_MWRITE_32((uint8_t *)p, 14, 18, v)
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_READ_G(r, g, idx)           GROUP_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 4, r)
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_WRITE_G(v, g, idx)          GROUP_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 4, v)
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_READ(r, p)                  MREAD_8((uint8_t *)p + 4, r)
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_WRITE(v, p)                 MWRITE_8((uint8_t *)p + 4, v)
#define RDD_CPU_RX_DESCRIPTOR_ABS_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 5, 0, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 5, 0, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_ABS_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)p + 5, 0, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_ABS_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)p + 5, 0, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_PLEN_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 6, 2, 14, r)
#define RDD_CPU_RX_DESCRIPTOR_PLEN_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 6, 2, 14, v)
#define RDD_CPU_RX_DESCRIPTOR_PLEN_READ(r, p)                                     FIELD_MREAD_16((uint8_t *)p + 6, 2, 14, r)
#define RDD_CPU_RX_DESCRIPTOR_PLEN_WRITE(v, p)                                    FIELD_MWRITE_16((uint8_t *)p + 6, 2, 14, v)
#define RDD_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 7, 1, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 7, 1, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 7, 1, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 7, 1, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_IS_SRC_LAN_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 7, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_IS_SRC_LAN_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 7, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_IS_SRC_LAN_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 8, 7, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_IS_SRC_LAN_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 8, 7, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_COLOR_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 6, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 6, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_COLOR_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 8, 6, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_COLOR_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 8, 6, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_VPORT_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 1, 5, r)
#define RDD_CPU_RX_DESCRIPTOR_VPORT_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 1, 5, v)
#define RDD_CPU_RX_DESCRIPTOR_VPORT_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 8, 1, 5, r)
#define RDD_CPU_RX_DESCRIPTOR_VPORT_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 8, 1, 5, v)
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 13, 12, r)
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 13, 12, v)
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_READ(r, p)                         FIELD_MREAD_32((uint8_t *)p + 8, 13, 12, r)
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)p + 8, 13, 12, v)
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_ID_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 13, 12, r)
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_ID_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 13, 12, v)
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_ID_READ(r, p)                              FIELD_MREAD_32((uint8_t *)p + 8, 13, 12, r)
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_ID_WRITE(v, p)                             FIELD_MWRITE_32((uint8_t *)p + 8, 13, 12, v)
#define RDD_CPU_RX_DESCRIPTOR_SSID_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 5, 4, r)
#define RDD_CPU_RX_DESCRIPTOR_SSID_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 8, 5, 4, v)
#define RDD_CPU_RX_DESCRIPTOR_SSID_READ(r, p)                                     FIELD_MREAD_16((uint8_t *)p + 8, 5, 4, r)
#define RDD_CPU_RX_DESCRIPTOR_SSID_WRITE(v, p)                                    FIELD_MWRITE_16((uint8_t *)p + 8, 5, 4, v)
#define RDD_CPU_RX_DESCRIPTOR_DATA_OFFSET_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 10, 6, 7, r)
#define RDD_CPU_RX_DESCRIPTOR_DATA_OFFSET_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 10, 6, 7, v)
#define RDD_CPU_RX_DESCRIPTOR_DATA_OFFSET_READ(r, p)                              FIELD_MREAD_16((uint8_t *)p + 10, 6, 7, r)
#define RDD_CPU_RX_DESCRIPTOR_DATA_OFFSET_WRITE(v, p)                             FIELD_MWRITE_16((uint8_t *)p + 10, 6, 7, v)
#define RDD_CPU_RX_DESCRIPTOR_REASON_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 11, 0, 6, r)
#define RDD_CPU_RX_DESCRIPTOR_REASON_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 11, 0, 6, v)
#define RDD_CPU_RX_DESCRIPTOR_REASON_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)p + 11, 0, 6, r)
#define RDD_CPU_RX_DESCRIPTOR_REASON_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)p + 11, 0, 6, v)
#define RDD_CPU_RX_DESCRIPTOR_IS_EXCEPTION_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 7, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_IS_EXCEPTION_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 7, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_IS_EXCEPTION_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 12, 7, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_IS_EXCEPTION_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 12, 7, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 6, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 6, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 12, 6, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 12, 6, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_IS_UCAST_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 5, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_IS_UCAST_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 5, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_IS_UCAST_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)p + 12, 5, 1, r)
#define RDD_CPU_RX_DESCRIPTOR_IS_UCAST_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)p + 12, 5, 1, v)
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 0, 13, r)
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 0, 13, v)
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_READ(r, p)                      FIELD_MREAD_16((uint8_t *)p + 12, 0, 13, r)
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)p + 12, 0, 13, v)
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 2, 3, r)
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 2, 3, v)
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 12, 2, 3, r)
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 12, 2, 3, v)
#define RDD_CPU_RX_DESCRIPTOR_METADATA_0_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 5, 5, r)
#define RDD_CPU_RX_DESCRIPTOR_METADATA_0_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 12, 5, 5, v)
#define RDD_CPU_RX_DESCRIPTOR_METADATA_0_READ(r, p)                               FIELD_MREAD_16((uint8_t *)p + 12, 5, 5, r)
#define RDD_CPU_RX_DESCRIPTOR_METADATA_0_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)p + 12, 5, 5, v)
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_READ_G(r, g, idx)             GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 14, r)
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_WRITE_G(v, g, idx)            GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 14, v)
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_READ(r, p)                    MREAD_16((uint8_t *)p + 14, r)
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_WRITE(v, p)                   MWRITE_16((uint8_t *)p + 14, v)
#define RDD_CPU_RX_DESCRIPTOR_DST_SSID_VECTOR_READ_G(r, g, idx)                   GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 14, r)
#define RDD_CPU_RX_DESCRIPTOR_DST_SSID_VECTOR_WRITE_G(v, g, idx)                  GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 14, v)
#define RDD_CPU_RX_DESCRIPTOR_DST_SSID_VECTOR_READ(r, p)                          MREAD_16((uint8_t *)p + 14, r)
#define RDD_CPU_RX_DESCRIPTOR_DST_SSID_VECTOR_WRITE(v, p)                         MWRITE_16((uint8_t *)p + 14, v)
#define RDD_CPU_RX_DESCRIPTOR_METADATA_1_READ_G(r, g, idx)                        GROUP_MREAD_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 14, r)
#define RDD_CPU_RX_DESCRIPTOR_METADATA_1_WRITE_G(v, g, idx)                       GROUP_MWRITE_16(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 14, v)
#define RDD_CPU_RX_DESCRIPTOR_METADATA_1_READ(r, p)                               MREAD_16((uint8_t *)p + 14, r)
#define RDD_CPU_RX_DESCRIPTOR_METADATA_1_WRITE(v, p)                              MWRITE_16((uint8_t *)p + 14, v)
#define RDD_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_READ_G(r, g, idx)                      GROUP_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 14, r)
#define RDD_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_WRITE_G(v, g, idx)                     GROUP_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 14, v)
#define RDD_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_READ(r, p)                             MREAD_8((uint8_t *)p + 14, r)
#define RDD_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_WRITE(v, p)                            MWRITE_8((uint8_t *)p + 14, v)
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_READ_G(r, g, idx)                          GROUP_MREAD_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 15, r)
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_WRITE_G(v, g, idx)                         GROUP_MWRITE_8(g, idx*sizeof(RDD_CPU_RX_DESCRIPTOR_DTS) + 15, v)
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_READ(r, p)                                 MREAD_8((uint8_t *)p + 15, r)
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_WRITE(v, p)                                MWRITE_8((uint8_t *)p + 15, v)
/* <<<RDD_CPU_RX_DESCRIPTOR_DTS */

/* <<<RDD_CPU_RX_DESCRIPTOR */


/* >>>RDD_CPU_FEED_DESCRIPTOR */
#define CPU_FEED_DESCRIPTOR_PTR_LOW_F_OFFSET                                                         0
#define CPU_FEED_DESCRIPTOR_PTR_LOW_F_WIDTH                                                          32
#define CPU_FEED_DESCRIPTOR_CPU_FEED_DESCRIPTOR_OFFSET                                               0
#define CPU_FEED_DESCRIPTOR_PTR_LOW_OFFSET                                                           0
#define CPU_FEED_DESCRIPTOR_PTR_LOW_WORD_OFFSET                                                      0
#define CPU_FEED_DESCRIPTOR_TYPE_F_OFFSET                                                            8
#define CPU_FEED_DESCRIPTOR_TYPE_F_WIDTH                                                             1
#define CPU_FEED_DESCRIPTOR_TYPE_OFFSET                                                              6
#define CPU_FEED_DESCRIPTOR_TYPE_WORD_OFFSET                                                         1
#define CPU_FEED_DESCRIPTOR_TYPE_F_OFFSET_MOD8                                                       0
#define CPU_FEED_DESCRIPTOR_TYPE_F_OFFSET_MOD16                                                      8
#define CPU_FEED_DESCRIPTOR_PTR_HI_F_OFFSET                                                          0
#define CPU_FEED_DESCRIPTOR_PTR_HI_F_WIDTH                                                           8
#define CPU_FEED_DESCRIPTOR_PTR_HI_OFFSET                                                            7
#define CPU_FEED_DESCRIPTOR_PTR_HI_WORD_OFFSET                                                       1
#define CPU_FEED_DESCRIPTOR_PTR_HI_F_OFFSET_MOD16                                                    0

/* >>>RDD_CPU_FEED_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	ptr_low   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0 	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	type      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ptr_hi    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	ptr_low   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ptr_hi    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	type      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved0 	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_CPU_FEED_DESCRIPTOR_DTS;

typedef RDD_CPU_FEED_DESCRIPTOR_DTS * aligned_RDD_CPU_FEED_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_CPU_FEED_DESCRIPTOR_DTS fields;
} RDD_CPU_FEED_DESCRIPTOR_DTS_NEW;
typedef RDD_CPU_FEED_DESCRIPTOR_DTS_NEW * aligned_RDD_CPU_FEED_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_CPU_FEED_DESCRIPTOR_PTR_LOW_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_CPU_FEED_DESCRIPTOR_DTS), r)
#define RDD_CPU_FEED_DESCRIPTOR_PTR_LOW_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_CPU_FEED_DESCRIPTOR_DTS), v)
#define RDD_CPU_FEED_DESCRIPTOR_PTR_LOW_READ(r, p)                   MREAD_32((uint8_t *)p, r)
#define RDD_CPU_FEED_DESCRIPTOR_PTR_LOW_WRITE(v, p)                  MWRITE_32((uint8_t *)p, v)
#define RDD_CPU_FEED_DESCRIPTOR_TYPE_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_CPU_FEED_DESCRIPTOR_DTS) + 6, 0, 1, r)
#define RDD_CPU_FEED_DESCRIPTOR_TYPE_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_CPU_FEED_DESCRIPTOR_DTS) + 6, 0, 1, v)
#define RDD_CPU_FEED_DESCRIPTOR_TYPE_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 6, 0, 1, r)
#define RDD_CPU_FEED_DESCRIPTOR_TYPE_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 6, 0, 1, v)
#define RDD_CPU_FEED_DESCRIPTOR_PTR_HI_READ_G(r, g, idx)             GROUP_MREAD_8(g, idx*sizeof(RDD_CPU_FEED_DESCRIPTOR_DTS) + 7, r)
#define RDD_CPU_FEED_DESCRIPTOR_PTR_HI_WRITE_G(v, g, idx)            GROUP_MWRITE_8(g, idx*sizeof(RDD_CPU_FEED_DESCRIPTOR_DTS) + 7, v)
#define RDD_CPU_FEED_DESCRIPTOR_PTR_HI_READ(r, p)                    MREAD_8((uint8_t *)p + 7, r)
#define RDD_CPU_FEED_DESCRIPTOR_PTR_HI_WRITE(v, p)                   MWRITE_8((uint8_t *)p + 7, v)
/* <<<RDD_CPU_FEED_DESCRIPTOR_DTS */

/* <<<RDD_CPU_FEED_DESCRIPTOR */


/* >>>RDD_CPU_RING_DESCRIPTOR */
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_F_OFFSET                                                   27
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_F_WIDTH                                                    5
#define CPU_RING_DESCRIPTOR_CPU_RING_DESCRIPTOR_OFFSET                                               0
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_OFFSET                                                     0
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_WORD_OFFSET                                                0
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_F_OFFSET_MOD8                                              3
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_F_OFFSET_MOD16                                             11
#define CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_F_OFFSET                                               16
#define CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_F_WIDTH                                                11
#define CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_OFFSET                                                 0
#define CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_WORD_OFFSET                                            0
#define CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_F_OFFSET_MOD16                                         0
#define CPU_RING_DESCRIPTOR_INTERRUPT_ID_F_OFFSET                                                    0
#define CPU_RING_DESCRIPTOR_INTERRUPT_ID_F_WIDTH                                                     16
#define CPU_RING_DESCRIPTOR_INTERRUPT_ID_OFFSET                                                      2
#define CPU_RING_DESCRIPTOR_INTERRUPT_ID_WORD_OFFSET                                                 0
#define CPU_RING_DESCRIPTOR_DROP_COUNTER_F_OFFSET                                                    16
#define CPU_RING_DESCRIPTOR_DROP_COUNTER_F_WIDTH                                                     16
#define CPU_RING_DESCRIPTOR_DROP_COUNTER_OFFSET                                                      4
#define CPU_RING_DESCRIPTOR_DROP_COUNTER_WORD_OFFSET                                                 1
#define CPU_RING_DESCRIPTOR_WRITE_IDX_F_OFFSET                                                       0
#define CPU_RING_DESCRIPTOR_WRITE_IDX_F_WIDTH                                                        16
#define CPU_RING_DESCRIPTOR_WRITE_IDX_OFFSET                                                         6
#define CPU_RING_DESCRIPTOR_WRITE_IDX_WORD_OFFSET                                                    1
#define CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_F_OFFSET                                                   0
#define CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_F_WIDTH                                                    32
#define CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_OFFSET                                                     8
#define CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_WORD_OFFSET                                                2
#define CPU_RING_DESCRIPTOR_READ_IDX_F_OFFSET                                                        16
#define CPU_RING_DESCRIPTOR_READ_IDX_F_WIDTH                                                         16
#define CPU_RING_DESCRIPTOR_READ_IDX_OFFSET                                                          12
#define CPU_RING_DESCRIPTOR_READ_IDX_WORD_OFFSET                                                     3
#define CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_F_OFFSET                                                  0
#define CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_F_WIDTH                                                   8
#define CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_OFFSET                                                    15
#define CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_WORD_OFFSET                                               3
#define CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_F_OFFSET_MOD16                                            0
/* <<<RDD_CPU_RING_DESCRIPTOR */


/* >>>RDD_PERIPHERALS_STS */
#define PERIPHERALS_STS_SCHEDULER_DEBUG_F_OFFSET                                                 27
#define PERIPHERALS_STS_SCHEDULER_DEBUG_F_WIDTH                                                  5
#define PERIPHERALS_STS_PERIPHERALS_STS_OFFSET                                                   0
#define PERIPHERALS_STS_SCHEDULER_DEBUG_OFFSET                                                   0
#define PERIPHERALS_STS_SCHEDULER_DEBUG_WORD_OFFSET                                              0
#define PERIPHERALS_STS_SCHEDULER_DEBUG_F_OFFSET_MOD8                                            3
#define PERIPHERALS_STS_SCHEDULER_DEBUG_F_OFFSET_MOD16                                           11
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_F_OFFSET                                            26
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_F_WIDTH                                             1
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_OFFSET                                              0
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_WORD_OFFSET                                         0
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_F_OFFSET_MOD8                                       2
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_F_OFFSET_MOD16                                      10
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_F_OFFSET                                              21
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_F_WIDTH                                               5
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_OFFSET                                                0
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_WORD_OFFSET                                           0
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_F_OFFSET_MOD8                                         5
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_F_OFFSET_MOD16                                        5
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_F_OFFSET                                           16
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_F_WIDTH                                            5
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_OFFSET                                             1
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_WORD_OFFSET                                        0
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_F_OFFSET_MOD8                                      0
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_F_OFFSET_MOD16                                     0
#define PERIPHERALS_STS_TIMER_1_STATUS_F_OFFSET                                                  12
#define PERIPHERALS_STS_TIMER_1_STATUS_F_WIDTH                                                   1
#define PERIPHERALS_STS_TIMER_1_STATUS_OFFSET                                                    2
#define PERIPHERALS_STS_TIMER_1_STATUS_WORD_OFFSET                                               0
#define PERIPHERALS_STS_TIMER_1_STATUS_F_OFFSET_MOD8                                             4
#define PERIPHERALS_STS_TIMER_1_STATUS_F_OFFSET_MOD16                                            12
#define PERIPHERALS_STS_TIMER_0_STATUS_F_OFFSET                                                  11
#define PERIPHERALS_STS_TIMER_0_STATUS_F_WIDTH                                                   1
#define PERIPHERALS_STS_TIMER_0_STATUS_OFFSET                                                    2
#define PERIPHERALS_STS_TIMER_0_STATUS_WORD_OFFSET                                               0
#define PERIPHERALS_STS_TIMER_0_STATUS_F_OFFSET_MOD8                                             3
#define PERIPHERALS_STS_TIMER_0_STATUS_F_OFFSET_MOD16                                            11
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_F_OFFSET                                      8
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_F_WIDTH                                       1
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_OFFSET                                        2
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_WORD_OFFSET                                   0
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_F_OFFSET_MOD8                                 0
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_F_OFFSET_MOD16                                8
#define PERIPHERALS_STS_QUAD_ID_F_OFFSET                                                         6
#define PERIPHERALS_STS_QUAD_ID_F_WIDTH                                                          2
#define PERIPHERALS_STS_QUAD_ID_OFFSET                                                           3
#define PERIPHERALS_STS_QUAD_ID_WORD_OFFSET                                                      0
#define PERIPHERALS_STS_QUAD_ID_F_OFFSET_MOD8                                                    6
#define PERIPHERALS_STS_QUAD_ID_F_OFFSET_MOD16                                                   6
#define PERIPHERALS_STS_CORE_ID_F_OFFSET                                                         4
#define PERIPHERALS_STS_CORE_ID_F_WIDTH                                                          2
#define PERIPHERALS_STS_CORE_ID_OFFSET                                                           3
#define PERIPHERALS_STS_CORE_ID_WORD_OFFSET                                                      0
#define PERIPHERALS_STS_CORE_ID_F_OFFSET_MOD8                                                    4
#define PERIPHERALS_STS_CORE_ID_F_OFFSET_MOD16                                                   4
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_F_OFFSET                                              3
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_F_WIDTH                                               1
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_OFFSET                                                3
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_WORD_OFFSET                                           0
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_F_OFFSET_MOD8                                         3
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_F_OFFSET_MOD16                                        3
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_F_OFFSET                                      2
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_F_WIDTH                                       1
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_OFFSET                                        3
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_WORD_OFFSET                                   0
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_F_OFFSET_MOD8                                 2
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_F_OFFSET_MOD16                                2
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_F_OFFSET                                          1
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_F_WIDTH                                           1
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_OFFSET                                            3
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_WORD_OFFSET                                       0
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_F_OFFSET_MOD8                                     1
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_F_OFFSET_MOD16                                    1
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_F_OFFSET                                           0
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_F_WIDTH                                            1
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_OFFSET                                             3
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_WORD_OFFSET                                        0
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_F_OFFSET_MOD8                                      0
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_F_OFFSET_MOD16                                     0

/* >>>RDD_PERIPHERALS_STS_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	scheduler_debug           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	next_thread_is_ready      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	next_thread_number        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	current_thread_number     	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_1                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	timer_1_status            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	timer_0_status            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_2                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ram_read_command_fifo_full	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	quad_id                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	core_id                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bb_message_pending        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bbtx_command_fifo_is_empty	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bbtx_command_fifo_full    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dma_command_fifo_full     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	dma_command_fifo_full     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bbtx_command_fifo_full    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bbtx_command_fifo_is_empty	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	bb_message_pending        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	core_id                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	quad_id                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	ram_read_command_fifo_full	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_2                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	timer_0_status            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	timer_1_status            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved_1                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	current_thread_number     	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	next_thread_number        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	next_thread_is_ready      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	scheduler_debug           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_PERIPHERALS_STS_DTS;

typedef RDD_PERIPHERALS_STS_DTS * aligned_RDD_PERIPHERALS_STS_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[1];
    uint64_t dword_val64[0];
    RDD_PERIPHERALS_STS_DTS fields;
} RDD_PERIPHERALS_STS_DTS_NEW;
typedef RDD_PERIPHERALS_STS_DTS_NEW * aligned_RDD_PERIPHERALS_STS_DTS_NEW ALIGNMENT8;

#define RDD_PERIPHERALS_STS_SCHEDULER_DEBUG_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS), 3, 5, r)
#define RDD_PERIPHERALS_STS_SCHEDULER_DEBUG_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS), 3, 5, v)
#define RDD_PERIPHERALS_STS_SCHEDULER_DEBUG_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p, 3, 5, r)
#define RDD_PERIPHERALS_STS_SCHEDULER_DEBUG_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p, 3, 5, v)
#define RDD_PERIPHERALS_STS_NEXT_THREAD_IS_READY_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS), 2, 1, r)
#define RDD_PERIPHERALS_STS_NEXT_THREAD_IS_READY_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS), 2, 1, v)
#define RDD_PERIPHERALS_STS_NEXT_THREAD_IS_READY_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p, 2, 1, r)
#define RDD_PERIPHERALS_STS_NEXT_THREAD_IS_READY_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p, 2, 1, v)
#define RDD_PERIPHERALS_STS_NEXT_THREAD_NUMBER_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS), 5, 5, r)
#define RDD_PERIPHERALS_STS_NEXT_THREAD_NUMBER_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS), 5, 5, v)
#define RDD_PERIPHERALS_STS_NEXT_THREAD_NUMBER_READ(r, p)                         FIELD_MREAD_16((uint8_t *)p, 5, 5, r)
#define RDD_PERIPHERALS_STS_NEXT_THREAD_NUMBER_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)p, 5, 5, v)
#define RDD_PERIPHERALS_STS_CURRENT_THREAD_NUMBER_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 1, 0, 5, r)
#define RDD_PERIPHERALS_STS_CURRENT_THREAD_NUMBER_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 1, 0, 5, v)
#define RDD_PERIPHERALS_STS_CURRENT_THREAD_NUMBER_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 1, 0, 5, r)
#define RDD_PERIPHERALS_STS_CURRENT_THREAD_NUMBER_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 1, 0, 5, v)
#define RDD_PERIPHERALS_STS_TIMER_1_STATUS_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 2, 4, 1, r)
#define RDD_PERIPHERALS_STS_TIMER_1_STATUS_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 2, 4, 1, v)
#define RDD_PERIPHERALS_STS_TIMER_1_STATUS_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 2, 4, 1, r)
#define RDD_PERIPHERALS_STS_TIMER_1_STATUS_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 2, 4, 1, v)
#define RDD_PERIPHERALS_STS_TIMER_0_STATUS_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 2, 3, 1, r)
#define RDD_PERIPHERALS_STS_TIMER_0_STATUS_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 2, 3, 1, v)
#define RDD_PERIPHERALS_STS_TIMER_0_STATUS_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 2, 3, 1, r)
#define RDD_PERIPHERALS_STS_TIMER_0_STATUS_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 2, 3, 1, v)
#define RDD_PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 2, 0, 1, r)
#define RDD_PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 2, 0, 1, v)
#define RDD_PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 2, 0, 1, r)
#define RDD_PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 2, 0, 1, v)
#define RDD_PERIPHERALS_STS_QUAD_ID_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 6, 2, r)
#define RDD_PERIPHERALS_STS_QUAD_ID_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 6, 2, v)
#define RDD_PERIPHERALS_STS_QUAD_ID_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 3, 6, 2, r)
#define RDD_PERIPHERALS_STS_QUAD_ID_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 3, 6, 2, v)
#define RDD_PERIPHERALS_STS_CORE_ID_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 4, 2, r)
#define RDD_PERIPHERALS_STS_CORE_ID_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 4, 2, v)
#define RDD_PERIPHERALS_STS_CORE_ID_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)p + 3, 4, 2, r)
#define RDD_PERIPHERALS_STS_CORE_ID_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)p + 3, 4, 2, v)
#define RDD_PERIPHERALS_STS_BB_MESSAGE_PENDING_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 3, 1, r)
#define RDD_PERIPHERALS_STS_BB_MESSAGE_PENDING_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 3, 1, v)
#define RDD_PERIPHERALS_STS_BB_MESSAGE_PENDING_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 3, 3, 1, r)
#define RDD_PERIPHERALS_STS_BB_MESSAGE_PENDING_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 3, 3, 1, v)
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 2, 1, r)
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 2, 1, v)
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 3, 2, 1, r)
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 3, 2, 1, v)
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 1, 1, r)
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 1, 1, v)
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 3, 1, 1, r)
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 3, 1, 1, v)
#define RDD_PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 0, 1, r)
#define RDD_PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_PERIPHERALS_STS_DTS) + 3, 0, 1, v)
#define RDD_PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 3, 0, 1, r)
#define RDD_PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 3, 0, 1, v)
/* <<<RDD_PERIPHERALS_STS_DTS */

/* <<<RDD_PERIPHERALS_STS */


/* >>>RDD_ACB_CONTROL */
#define ACB_CONTROL_PORT_MASK_PORT_F_OFFSET                                                  8
#define ACB_CONTROL_PORT_MASK_PORT_F_WIDTH                                                   3
#define ACB_CONTROL_PORT_MASK_PORT_OFFSET                                                    0
#define ACB_CONTROL_PORT_MASK_PORT_WORD_OFFSET                                               0
#define ACB_CONTROL_PORT_MASK_PORT_F_OFFSET_MOD8                                             0
#define ACB_CONTROL_PORT_MASK_PORT_F_OFFSET_MOD16                                            8
#define ACB_CONTROL_IMP_PORT_F_OFFSET                                                        6
#define ACB_CONTROL_IMP_PORT_F_WIDTH                                                         2
#define ACB_CONTROL_IMP_PORT_OFFSET                                                          1
#define ACB_CONTROL_IMP_PORT_WORD_OFFSET                                                     0
#define ACB_CONTROL_IMP_PORT_F_OFFSET_MOD8                                                   6
#define ACB_CONTROL_IMP_PORT_F_OFFSET_MOD16                                                  6
#define ACB_CONTROL_EGRESS_PORT_F_OFFSET                                                     3
#define ACB_CONTROL_EGRESS_PORT_F_WIDTH                                                      3
#define ACB_CONTROL_EGRESS_PORT_OFFSET                                                       1
#define ACB_CONTROL_EGRESS_PORT_WORD_OFFSET                                                  0
#define ACB_CONTROL_EGRESS_PORT_F_OFFSET_MOD8                                                3
#define ACB_CONTROL_EGRESS_PORT_F_OFFSET_MOD16                                               3
#define ACB_CONTROL_EGRESS_QUEUE_ID_F_OFFSET                                                 0
#define ACB_CONTROL_EGRESS_QUEUE_ID_F_WIDTH                                                  3
#define ACB_CONTROL_EGRESS_QUEUE_ID_OFFSET                                                   1
#define ACB_CONTROL_EGRESS_QUEUE_ID_WORD_OFFSET                                              0
#define ACB_CONTROL_EGRESS_QUEUE_ID_F_OFFSET_MOD8                                            0
#define ACB_CONTROL_EGRESS_QUEUE_ID_F_OFFSET_MOD16                                           0

/* >>>RDD_ACB_CONTROL_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	reserved       	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	port_mask_port 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	imp_port       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	egress_port    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	egress_queue_id	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	egress_queue_id	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	egress_port    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	imp_port       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	port_mask_port 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	reserved       	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_ACB_CONTROL_DTS;

typedef RDD_ACB_CONTROL_DTS * aligned_RDD_ACB_CONTROL_DTS ALIGNMENT8;

#define RDD_ACB_CONTROL_PORT_MASK_PORT_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_ACB_CONTROL_DTS), 0, 3, r)
#define RDD_ACB_CONTROL_PORT_MASK_PORT_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_ACB_CONTROL_DTS), 0, 3, v)
#define RDD_ACB_CONTROL_PORT_MASK_PORT_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p, 0, 3, r)
#define RDD_ACB_CONTROL_PORT_MASK_PORT_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p, 0, 3, v)
#define RDD_ACB_CONTROL_IMP_PORT_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_ACB_CONTROL_DTS) + 1, 6, 2, r)
#define RDD_ACB_CONTROL_IMP_PORT_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_ACB_CONTROL_DTS) + 1, 6, 2, v)
#define RDD_ACB_CONTROL_IMP_PORT_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 1, 6, 2, r)
#define RDD_ACB_CONTROL_IMP_PORT_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 1, 6, 2, v)
#define RDD_ACB_CONTROL_EGRESS_PORT_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_ACB_CONTROL_DTS) + 1, 3, 3, r)
#define RDD_ACB_CONTROL_EGRESS_PORT_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_ACB_CONTROL_DTS) + 1, 3, 3, v)
#define RDD_ACB_CONTROL_EGRESS_PORT_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 1, 3, 3, r)
#define RDD_ACB_CONTROL_EGRESS_PORT_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 1, 3, 3, v)
#define RDD_ACB_CONTROL_EGRESS_QUEUE_ID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_ACB_CONTROL_DTS) + 1, 0, 3, r)
#define RDD_ACB_CONTROL_EGRESS_QUEUE_ID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_ACB_CONTROL_DTS) + 1, 0, 3, v)
#define RDD_ACB_CONTROL_EGRESS_QUEUE_ID_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 1, 0, 3, r)
#define RDD_ACB_CONTROL_EGRESS_QUEUE_ID_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 1, 0, 3, v)
/* <<<RDD_ACB_CONTROL_DTS */

/* <<<RDD_ACB_CONTROL */


/* >>>RDD_HASH_COMMAND */
#define HASH_COMMAND_KEY_1_F_OFFSET                                                           0
#define HASH_COMMAND_KEY_1_F_WIDTH                                                            32
#define HASH_COMMAND_HASH_COMMAND_OFFSET                                                      0
#define HASH_COMMAND_KEY_1_OFFSET                                                             0
#define HASH_COMMAND_KEY_1_WORD_OFFSET                                                        0
#define HASH_COMMAND_KEY_0_F_OFFSET                                                           4
#define HASH_COMMAND_KEY_0_F_WIDTH                                                            28
#define HASH_COMMAND_KEY_0_OFFSET                                                             4
#define HASH_COMMAND_KEY_0_WORD_OFFSET                                                        1
#define HASH_COMMAND_CONFIGURATION_F_OFFSET                                                   1
#define HASH_COMMAND_CONFIGURATION_F_WIDTH                                                    3
#define HASH_COMMAND_CONFIGURATION_OFFSET                                                     7
#define HASH_COMMAND_CONFIGURATION_WORD_OFFSET                                                1
#define HASH_COMMAND_CONFIGURATION_F_OFFSET_MOD8                                              1
#define HASH_COMMAND_CONFIGURATION_F_OFFSET_MOD16                                             1
#define HASH_COMMAND_AGING_F_OFFSET                                                           0
#define HASH_COMMAND_AGING_F_WIDTH                                                            1
#define HASH_COMMAND_AGING_OFFSET                                                             7
#define HASH_COMMAND_AGING_WORD_OFFSET                                                        1
#define HASH_COMMAND_AGING_F_OFFSET_MOD8                                                      0
#define HASH_COMMAND_AGING_F_OFFSET_MOD16                                                     0

/* >>>RDD_HASH_COMMAND_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	key_1        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_0        	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	configuration	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	aging        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	key_1        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	aging        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	configuration	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_0        	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_HASH_COMMAND_DTS;

typedef RDD_HASH_COMMAND_DTS * aligned_RDD_HASH_COMMAND_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_HASH_COMMAND_DTS fields;
} RDD_HASH_COMMAND_DTS_NEW;
typedef RDD_HASH_COMMAND_DTS_NEW * aligned_RDD_HASH_COMMAND_DTS_NEW ALIGNMENT8;

#define RDD_HASH_COMMAND_KEY_1_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_HASH_COMMAND_DTS), r)
#define RDD_HASH_COMMAND_KEY_1_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_HASH_COMMAND_DTS), v)
#define RDD_HASH_COMMAND_KEY_1_READ(r, p)                         MREAD_32((uint8_t *)p, r)
#define RDD_HASH_COMMAND_KEY_1_WRITE(v, p)                        MWRITE_32((uint8_t *)p, v)
#define RDD_HASH_COMMAND_KEY_0_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_HASH_COMMAND_DTS) + 4, 4, 28, r)
#define RDD_HASH_COMMAND_KEY_0_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_HASH_COMMAND_DTS) + 4, 4, 28, v)
#define RDD_HASH_COMMAND_KEY_0_READ(r, p)                         FIELD_MREAD_32((uint8_t *)p + 4, 4, 28, r)
#define RDD_HASH_COMMAND_KEY_0_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)p + 4, 4, 28, v)
#define RDD_HASH_COMMAND_CONFIGURATION_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_HASH_COMMAND_DTS) + 7, 1, 3, r)
#define RDD_HASH_COMMAND_CONFIGURATION_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_HASH_COMMAND_DTS) + 7, 1, 3, v)
#define RDD_HASH_COMMAND_CONFIGURATION_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 7, 1, 3, r)
#define RDD_HASH_COMMAND_CONFIGURATION_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 7, 1, 3, v)
#define RDD_HASH_COMMAND_AGING_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_HASH_COMMAND_DTS) + 7, 0, 1, r)
#define RDD_HASH_COMMAND_AGING_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_HASH_COMMAND_DTS) + 7, 0, 1, v)
#define RDD_HASH_COMMAND_AGING_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 7, 0, 1, r)
#define RDD_HASH_COMMAND_AGING_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 7, 0, 1, v)
/* <<<RDD_HASH_COMMAND_DTS */

/* <<<RDD_HASH_COMMAND */


/* >>>RDD_HASH_COMMAND_6836 */
#define HASH_COMMAND_6836_CONFIGURATION_F_OFFSET                                                   29
#define HASH_COMMAND_6836_CONFIGURATION_F_WIDTH                                                    3
#define HASH_COMMAND_6836_HASH_COMMAND_6836_OFFSET                                                 0
#define HASH_COMMAND_6836_CONFIGURATION_OFFSET                                                     0
#define HASH_COMMAND_6836_CONFIGURATION_WORD_OFFSET                                                0
#define HASH_COMMAND_6836_CONFIGURATION_F_OFFSET_MOD8                                              5
#define HASH_COMMAND_6836_CONFIGURATION_F_OFFSET_MOD16                                             13
#define HASH_COMMAND_6836_AGING_F_OFFSET                                                           28
#define HASH_COMMAND_6836_AGING_F_WIDTH                                                            1
#define HASH_COMMAND_6836_AGING_OFFSET                                                             0
#define HASH_COMMAND_6836_AGING_WORD_OFFSET                                                        0
#define HASH_COMMAND_6836_AGING_F_OFFSET_MOD8                                                      4
#define HASH_COMMAND_6836_AGING_F_OFFSET_MOD16                                                     12
#define HASH_COMMAND_6836_KEY_1_F_OFFSET                                                           0
#define HASH_COMMAND_6836_KEY_1_F_WIDTH                                                            28
#define HASH_COMMAND_6836_KEY_1_OFFSET                                                             0
#define HASH_COMMAND_6836_KEY_1_WORD_OFFSET                                                        0
#define HASH_COMMAND_6836_KEY_0_F_OFFSET                                                           0
#define HASH_COMMAND_6836_KEY_0_F_WIDTH                                                            32
#define HASH_COMMAND_6836_KEY_0_OFFSET                                                             4
#define HASH_COMMAND_6836_KEY_0_WORD_OFFSET                                                        1

/* >>>RDD_HASH_COMMAND_6836_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	configuration	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	aging        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_1        	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_0        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	key_1        	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	aging        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	configuration	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	key_0        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_HASH_COMMAND_6836_DTS;

typedef RDD_HASH_COMMAND_6836_DTS * aligned_RDD_HASH_COMMAND_6836_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_HASH_COMMAND_6836_DTS fields;
} RDD_HASH_COMMAND_6836_DTS_NEW;
typedef RDD_HASH_COMMAND_6836_DTS_NEW * aligned_RDD_HASH_COMMAND_6836_DTS_NEW ALIGNMENT8;

#define RDD_HASH_COMMAND_6836_CONFIGURATION_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_HASH_COMMAND_6836_DTS), 5, 3, r)
#define RDD_HASH_COMMAND_6836_CONFIGURATION_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_HASH_COMMAND_6836_DTS), 5, 3, v)
#define RDD_HASH_COMMAND_6836_CONFIGURATION_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 5, 3, r)
#define RDD_HASH_COMMAND_6836_CONFIGURATION_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 5, 3, v)
#define RDD_HASH_COMMAND_6836_AGING_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_HASH_COMMAND_6836_DTS), 4, 1, r)
#define RDD_HASH_COMMAND_6836_AGING_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_HASH_COMMAND_6836_DTS), 4, 1, v)
#define RDD_HASH_COMMAND_6836_AGING_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p, 4, 1, r)
#define RDD_HASH_COMMAND_6836_AGING_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p, 4, 1, v)
#define RDD_HASH_COMMAND_6836_KEY_1_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_HASH_COMMAND_6836_DTS), 0, 28, r)
#define RDD_HASH_COMMAND_6836_KEY_1_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_HASH_COMMAND_6836_DTS), 0, 28, v)
#define RDD_HASH_COMMAND_6836_KEY_1_READ(r, p)                         FIELD_MREAD_32((uint8_t *)p, 0, 28, r)
#define RDD_HASH_COMMAND_6836_KEY_1_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)p, 0, 28, v)
#define RDD_HASH_COMMAND_6836_KEY_0_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_HASH_COMMAND_6836_DTS) + 4, r)
#define RDD_HASH_COMMAND_6836_KEY_0_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_HASH_COMMAND_6836_DTS) + 4, v)
#define RDD_HASH_COMMAND_6836_KEY_0_READ(r, p)                         MREAD_32((uint8_t *)p + 4, r)
#define RDD_HASH_COMMAND_6836_KEY_0_WRITE(v, p)                        MWRITE_32((uint8_t *)p + 4, v)
/* <<<RDD_HASH_COMMAND_6836_DTS */

/* <<<RDD_HASH_COMMAND_6836 */


/* >>>RDD_GPE_COMMAND */
#define GPE_COMMAND_OPCODE_F_OFFSET                                                          12
#define GPE_COMMAND_OPCODE_F_WIDTH                                                           4
#define GPE_COMMAND_GPE_COMMAND_OFFSET                                                       0
#define GPE_COMMAND_OPCODE_OFFSET                                                            0
#define GPE_COMMAND_OPCODE_WORD_OFFSET                                                       0
#define GPE_COMMAND_OPCODE_F_OFFSET_MOD8                                                     4
#define GPE_COMMAND_OPCODE_F_OFFSET_MOD16                                                    12
#define GPE_COMMAND_OFFSET_F_OFFSET                                                          6
#define GPE_COMMAND_OFFSET_F_WIDTH                                                           6
#define GPE_COMMAND_OFFSET_OFFSET                                                            0
#define GPE_COMMAND_OFFSET_WORD_OFFSET                                                       0
#define GPE_COMMAND_OFFSET_F_OFFSET_MOD8                                                     6
#define GPE_COMMAND_OFFSET_F_OFFSET_MOD16                                                    6
#define GPE_COMMAND_TARGET_MEMORY_F_OFFSET                                                   4
#define GPE_COMMAND_TARGET_MEMORY_F_WIDTH                                                    2
#define GPE_COMMAND_TARGET_MEMORY_OFFSET                                                     1
#define GPE_COMMAND_TARGET_MEMORY_WORD_OFFSET                                                0
#define GPE_COMMAND_TARGET_MEMORY_F_OFFSET_MOD8                                              4
#define GPE_COMMAND_TARGET_MEMORY_F_OFFSET_MOD16                                             4
#define GPE_COMMAND_LENGTH_F_OFFSET                                                          0
#define GPE_COMMAND_LENGTH_F_WIDTH                                                           4
#define GPE_COMMAND_LENGTH_OFFSET                                                            1
#define GPE_COMMAND_LENGTH_WORD_OFFSET                                                       0
#define GPE_COMMAND_LENGTH_F_OFFSET_MOD8                                                     0
#define GPE_COMMAND_LENGTH_F_OFFSET_MOD16                                                    0

/* >>>RDD_GPE_COMMAND_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	opcode       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	offset       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	target_memory	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	length       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint16_t	length       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	target_memory	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	offset       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint16_t	opcode       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_GPE_COMMAND_DTS;

typedef RDD_GPE_COMMAND_DTS * aligned_RDD_GPE_COMMAND_DTS ALIGNMENT8;

#define RDD_GPE_COMMAND_OPCODE_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_GPE_COMMAND_DTS), 4, 4, r)
#define RDD_GPE_COMMAND_OPCODE_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_GPE_COMMAND_DTS), 4, 4, v)
#define RDD_GPE_COMMAND_OPCODE_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p, 4, 4, r)
#define RDD_GPE_COMMAND_OPCODE_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p, 4, 4, v)
#define RDD_GPE_COMMAND_OFFSET_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_GPE_COMMAND_DTS), 6, 6, r)
#define RDD_GPE_COMMAND_OFFSET_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_GPE_COMMAND_DTS), 6, 6, v)
#define RDD_GPE_COMMAND_OFFSET_READ(r, p)                        FIELD_MREAD_16((uint8_t *)p, 6, 6, r)
#define RDD_GPE_COMMAND_OFFSET_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)p, 6, 6, v)
#define RDD_GPE_COMMAND_TARGET_MEMORY_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_GPE_COMMAND_DTS) + 1, 4, 2, r)
#define RDD_GPE_COMMAND_TARGET_MEMORY_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_GPE_COMMAND_DTS) + 1, 4, 2, v)
#define RDD_GPE_COMMAND_TARGET_MEMORY_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 1, 4, 2, r)
#define RDD_GPE_COMMAND_TARGET_MEMORY_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 1, 4, 2, v)
#define RDD_GPE_COMMAND_LENGTH_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_GPE_COMMAND_DTS) + 1, 0, 4, r)
#define RDD_GPE_COMMAND_LENGTH_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_GPE_COMMAND_DTS) + 1, 0, 4, v)
#define RDD_GPE_COMMAND_LENGTH_READ(r, p)                        FIELD_MREAD_8((uint8_t *)p + 1, 0, 4, r)
#define RDD_GPE_COMMAND_LENGTH_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)p + 1, 0, 4, v)
/* <<<RDD_GPE_COMMAND_DTS */

/* <<<RDD_GPE_COMMAND */


/* >>>RDD_RULE_BASED_NATC_CONTEXT_ENTRY */
#define RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_F_OFFSET                                                    0
#define RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_F_WIDTH                                                     32
#define RULE_BASED_NATC_CONTEXT_ENTRY_RULE_BASED_NATC_CONTEXT_ENTRY_OFFSET                                     0
#define RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_OFFSET                                                      0
#define RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_WORD_OFFSET                                                 0
#define RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_F_OFFSET                                                    0
#define RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_F_WIDTH                                                     32
#define RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_OFFSET                                                      4
#define RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_WORD_OFFSET                                                 1
#define RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_F_OFFSET                                                 24
#define RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_F_WIDTH                                                  8
#define RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_OFFSET                                                   8
#define RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_WORD_OFFSET                                              2
#define RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_F_OFFSET_MOD16                                           8
#define RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_F_OFFSET                                                 16
#define RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_F_WIDTH                                                  8
#define RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_OFFSET                                                   9
#define RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_WORD_OFFSET                                              2
#define RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_F_OFFSET_MOD16                                           0
#define RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_F_OFFSET                                            8
#define RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_F_WIDTH                                             8
#define RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_OFFSET                                              10
#define RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_WORD_OFFSET                                         2
#define RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_F_OFFSET_MOD16                                      8
#define RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_F_OFFSET                                              0
#define RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_F_WIDTH                                               8
#define RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_OFFSET                                                11
#define RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_WORD_OFFSET                                           2
#define RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_F_OFFSET_MOD16                                        0
#define RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_OFFSET                                                          12
#define RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_WORD_OFFSET                                                     3
#define RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_F_OFFSET_MOD16                                                  8

/* >>>RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS */
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_NUMBER	52

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	natc_control                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hw_reserved0                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	untagged_offset                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	p_tag_cl_offset                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	single_tag_cl_offset                                           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dual_tag_cl_offset                                             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	cmd_list[RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_NUMBER];
#else
	uint32_t	natc_control                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	hw_reserved0                                                   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	dual_tag_cl_offset                                             	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	single_tag_cl_offset                                           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	p_tag_cl_offset                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	untagged_offset                                                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	cmd_list[RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS;

typedef RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS * aligned_RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[16];
    uint64_t dword_val64[8];
    RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS fields;
} RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS_NEW;
typedef RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS_NEW * aligned_RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS), r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS), v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_READ(r, p)                         MREAD_32((uint8_t *)p, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_WRITE(v, p)                        MWRITE_32((uint8_t *)p, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 4, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 4, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_READ(r, p)                         MREAD_32((uint8_t *)p + 4, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_WRITE(v, p)                        MWRITE_32((uint8_t *)p + 4, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_READ_G(r, g, idx)               GROUP_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 8, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_WRITE_G(v, g, idx)              GROUP_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 8, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_READ(r, p)                      MREAD_8((uint8_t *)p + 8, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_WRITE(v, p)                     MWRITE_8((uint8_t *)p + 8, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_READ_G(r, g, idx)               GROUP_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 9, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_WRITE_G(v, g, idx)              GROUP_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 9, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_READ(r, p)                      MREAD_8((uint8_t *)p + 9, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_WRITE(v, p)                     MWRITE_8((uint8_t *)p + 9, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 10, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 10, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_READ(r, p)                 MREAD_8((uint8_t *)p + 10, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_WRITE(v, p)                MWRITE_8((uint8_t *)p + 10, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_READ_G(r, g, idx)            GROUP_MREAD_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 11, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_WRITE_G(v, g, idx)           GROUP_MWRITE_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 11, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_READ(r, p)                   MREAD_8((uint8_t *)p + 11, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_WRITE(v, p)                  MWRITE_8((uint8_t *)p + 11, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_READ_G(r, g, idx, i)                   GROUP_MREAD_I_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 12, i, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_WRITE_G(v, g, idx, i)                  GROUP_MWRITE_I_8(g, idx*sizeof(RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS) + 12, i, v)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_READ(r, p, i)                          MREAD_I_8((uint8_t *)p + 12, i, r)
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_WRITE(v, p, i)                         MWRITE_I_8((uint8_t *)p + 12, i, v)
/* <<<RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DTS */

/* <<<RDD_RULE_BASED_NATC_CONTEXT_ENTRY */


/* >>>RDD_VLAN_ACTION_CONTEXT_ENTRY */
#define VLAN_ACTION_CONTEXT_ENTRY_VLAN_ACTION_CONTEXT_ENTRY_OFFSET                                         0
#define VLAN_ACTION_CONTEXT_ENTRY_CMD_OFFSET                                                               0
#define VLAN_ACTION_CONTEXT_ENTRY_CMD_WORD_OFFSET                                                          0

/* >>>RDD_VLAN_ACTION_CONTEXT_ENTRY_DTS */
#define RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_NUMBER	32

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint16_t	cmd[RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_NUMBER];
#else
	uint16_t	cmd[RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_VLAN_ACTION_CONTEXT_ENTRY_DTS;

typedef RDD_VLAN_ACTION_CONTEXT_ENTRY_DTS * aligned_RDD_VLAN_ACTION_CONTEXT_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[16];
    uint64_t dword_val64[8];
    RDD_VLAN_ACTION_CONTEXT_ENTRY_DTS fields;
} RDD_VLAN_ACTION_CONTEXT_ENTRY_DTS_NEW;
typedef RDD_VLAN_ACTION_CONTEXT_ENTRY_DTS_NEW * aligned_RDD_VLAN_ACTION_CONTEXT_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_READ_G(r, g, idx, i)       GROUP_MREAD_I_16(g, idx*sizeof(RDD_VLAN_ACTION_CONTEXT_ENTRY_DTS), i, r)
#define RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_16(g, idx*sizeof(RDD_VLAN_ACTION_CONTEXT_ENTRY_DTS), i, v)
#define RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_READ(r, p, i)              MREAD_I_16((uint8_t *)p, i, r)
#define RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_WRITE(v, p, i)             MWRITE_I_16((uint8_t *)p, i, v)
/* <<<RDD_VLAN_ACTION_CONTEXT_ENTRY_DTS */

/* <<<RDD_VLAN_ACTION_CONTEXT_ENTRY */


/* >>>RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR */
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_F_OFFSET                                                         31
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_F_WIDTH                                                          1
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_COMPLEX_RATE_LIMITER_DESCRIPTOR_OFFSET                                   0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_OFFSET                                                           0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_WORD_OFFSET                                                      0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_F_OFFSET_MOD8                                                    7
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_F_OFFSET_MOD16                                                   15
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_F_OFFSET                                                      8
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_F_WIDTH                                                       1
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_OFFSET                                                        2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_WORD_OFFSET                                                   0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_F_OFFSET_MOD8                                                 0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_F_OFFSET_MOD16                                                8
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_F_OFFSET                                                     0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_F_WIDTH                                                      8
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_OFFSET                                                       3
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_WORD_OFFSET                                                  0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_F_OFFSET_MOD16                                               0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_F_OFFSET                                              0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_F_WIDTH                                               32
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_OFFSET                                                4
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_WORD_OFFSET                                           1
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_F_OFFSET                                              18
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_F_WIDTH                                               14
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_OFFSET                                                8
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_WORD_OFFSET                                           2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_F_OFFSET_MOD16                                        2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_F_OFFSET                                              16
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_F_WIDTH                                               2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_OFFSET                                                9
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_WORD_OFFSET                                           2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_F_OFFSET_MOD8                                         0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_F_OFFSET_MOD16                                        0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_F_OFFSET                                              2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_F_WIDTH                                               14
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_OFFSET                                                10
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_WORD_OFFSET                                           2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_F_OFFSET_MOD16                                        2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_F_OFFSET                                              0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_F_WIDTH                                               2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_OFFSET                                                11
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_WORD_OFFSET                                           2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_F_OFFSET_MOD8                                         0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_F_OFFSET_MOD16                                        0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_F_OFFSET                                              0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_F_WIDTH                                               32
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_OFFSET                                                12
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_WORD_OFFSET                                           3
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_F_OFFSET                                              18
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_F_WIDTH                                               14
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_OFFSET                                                16
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_WORD_OFFSET                                           4
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_F_OFFSET_MOD16                                        2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_F_OFFSET                                              16
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_F_WIDTH                                               2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_OFFSET                                                17
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_WORD_OFFSET                                           4
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_F_OFFSET_MOD8                                         0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_F_OFFSET_MOD16                                        0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_F_OFFSET                                              2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_F_WIDTH                                               14
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_OFFSET                                                18
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_WORD_OFFSET                                           4
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_F_OFFSET_MOD16                                        2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_F_OFFSET                                              0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_F_WIDTH                                               2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_OFFSET                                                19
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_WORD_OFFSET                                           4
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_F_OFFSET_MOD8                                         0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_F_OFFSET_MOD16                                        0

/* >>>RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS */
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RESERVED_NUMBER	12

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	rl_type                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2                                                        	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	block_type                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	block_index                                                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sir_current_budget                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sir_alloc_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sir_alloc_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sir_limit_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sir_limit_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pir_current_budget                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pir_alloc_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pir_alloc_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pir_limit_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pir_limit_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved[RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RESERVED_NUMBER];
#else
	uint32_t	block_index                                                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	block_type                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved2                                                        	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	rl_type                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sir_current_budget                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sir_limit_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sir_limit_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sir_alloc_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	sir_alloc_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pir_current_budget                                               	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pir_limit_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pir_limit_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pir_alloc_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	pir_alloc_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint8_t	reserved[RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RESERVED_NUMBER];
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS;

typedef RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS * aligned_RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[8];
    uint64_t dword_val64[4];
    RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS fields;
} RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS_NEW;
typedef RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS_NEW * aligned_RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 2, 0, 1, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 2, 0, 1, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 2, 0, 1, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 2, 0, 1, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_READ_G(r, g, idx)                 GROUP_MREAD_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 3, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_WRITE_G(v, g, idx)                GROUP_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 3, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_READ(r, p)                        MREAD_8((uint8_t *)p + 3, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_WRITE(v, p)                       MWRITE_8((uint8_t *)p + 3, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 4, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 4, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 8, 2, 14, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 8, 2, 14, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 8, 2, 14, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 8, 2, 14, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 9, 0, 2, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 9, 0, 2, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 9, 0, 2, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 9, 0, 2, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 10, 2, 14, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 10, 2, 14, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 10, 2, 14, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 10, 2, 14, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 11, 0, 2, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 11, 0, 2, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 11, 0, 2, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 11, 0, 2, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 12, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 12, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_READ(r, p)                 MREAD_32((uint8_t *)p + 12, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_WRITE(v, p)                MWRITE_32((uint8_t *)p + 12, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 16, 2, 14, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 16, 2, 14, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 16, 2, 14, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 16, 2, 14, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 17, 0, 2, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 17, 0, 2, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 17, 0, 2, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 17, 0, 2, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 18, 2, 14, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 18, 2, 14, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 18, 2, 14, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 18, 2, 14, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 19, 0, 2, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS) + 19, 0, 2, v)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 19, 0, 2, r)
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 19, 0, 2, v)
/* <<<RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_DTS */

/* <<<RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR */


/* >>>RDD_DHD_TX_POST_DESCRIPTOR */
#define DHD_TX_POST_DESCRIPTOR_MSG_TYPE_F_OFFSET                                                        24
#define DHD_TX_POST_DESCRIPTOR_MSG_TYPE_F_WIDTH                                                         8
#define DHD_TX_POST_DESCRIPTOR_DHD_TX_POST_DESCRIPTOR_OFFSET                                            0
#define DHD_TX_POST_DESCRIPTOR_MSG_TYPE_OFFSET                                                          0
#define DHD_TX_POST_DESCRIPTOR_MSG_TYPE_WORD_OFFSET                                                     0
#define DHD_TX_POST_DESCRIPTOR_MSG_TYPE_F_OFFSET_MOD16                                                  8
#define DHD_TX_POST_DESCRIPTOR_IF_ID_F_OFFSET                                                           16
#define DHD_TX_POST_DESCRIPTOR_IF_ID_F_WIDTH                                                            8
#define DHD_TX_POST_DESCRIPTOR_IF_ID_OFFSET                                                             1
#define DHD_TX_POST_DESCRIPTOR_IF_ID_WORD_OFFSET                                                        0
#define DHD_TX_POST_DESCRIPTOR_IF_ID_F_OFFSET_MOD16                                                     0
#define DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET                                                8
#define DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_WIDTH                                                 8
#define DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_OFFSET                                                  2
#define DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WORD_OFFSET                                             0
#define DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET_MOD16                                          8
#define DHD_TX_POST_DESCRIPTOR_EPOCH_F_OFFSET                                                           0
#define DHD_TX_POST_DESCRIPTOR_EPOCH_F_WIDTH                                                            8
#define DHD_TX_POST_DESCRIPTOR_EPOCH_OFFSET                                                             3
#define DHD_TX_POST_DESCRIPTOR_EPOCH_WORD_OFFSET                                                        0
#define DHD_TX_POST_DESCRIPTOR_EPOCH_F_OFFSET_MOD16                                                     0
#define DHD_TX_POST_DESCRIPTOR_REQUEST_ID_F_OFFSET                                                      0
#define DHD_TX_POST_DESCRIPTOR_REQUEST_ID_F_WIDTH                                                       32
#define DHD_TX_POST_DESCRIPTOR_REQUEST_ID_OFFSET                                                        4
#define DHD_TX_POST_DESCRIPTOR_REQUEST_ID_WORD_OFFSET                                                   1
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_OFFSET                                                      8
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_WORD_OFFSET                                                 2
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_OFFSET                                                      12
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_WORD_OFFSET                                                 3
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_OFFSET                                                      16
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_WORD_OFFSET                                                 4
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_F_OFFSET                                                    16
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_F_WIDTH                                                     16
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_OFFSET                                                      20
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_WORD_OFFSET                                                 5
#define DHD_TX_POST_DESCRIPTOR_FLAGS_F_OFFSET                                                           8
#define DHD_TX_POST_DESCRIPTOR_FLAGS_F_WIDTH                                                            8
#define DHD_TX_POST_DESCRIPTOR_FLAGS_OFFSET                                                             22
#define DHD_TX_POST_DESCRIPTOR_FLAGS_WORD_OFFSET                                                        5
#define DHD_TX_POST_DESCRIPTOR_FLAGS_F_OFFSET_MOD16                                                     8
#define DHD_TX_POST_DESCRIPTOR_SEG_CNT_F_OFFSET                                                         0
#define DHD_TX_POST_DESCRIPTOR_SEG_CNT_F_WIDTH                                                          8
#define DHD_TX_POST_DESCRIPTOR_SEG_CNT_OFFSET                                                           23
#define DHD_TX_POST_DESCRIPTOR_SEG_CNT_WORD_OFFSET                                                      5
#define DHD_TX_POST_DESCRIPTOR_SEG_CNT_F_OFFSET_MOD16                                                   0
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_F_OFFSET                                           0
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_F_WIDTH                                            32
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_OFFSET                                             24
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WORD_OFFSET                                        6
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_F_OFFSET                                            0
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_F_WIDTH                                             32
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_OFFSET                                              28
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WORD_OFFSET                                         7
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_F_OFFSET                                               0
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_F_WIDTH                                                32
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_OFFSET                                                 32
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WORD_OFFSET                                            8
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_F_OFFSET                                                0
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_F_WIDTH                                                 32
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_OFFSET                                                  36
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WORD_OFFSET                                             9
#define DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_F_OFFSET                                                    16
#define DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_F_WIDTH                                                     16
#define DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_OFFSET                                                      40
#define DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_WORD_OFFSET                                                 10
#define DHD_TX_POST_DESCRIPTOR_DATA_LEN_F_OFFSET                                                        0
#define DHD_TX_POST_DESCRIPTOR_DATA_LEN_F_WIDTH                                                         16
#define DHD_TX_POST_DESCRIPTOR_DATA_LEN_OFFSET                                                          42
#define DHD_TX_POST_DESCRIPTOR_DATA_LEN_WORD_OFFSET                                                     10
/* <<<RDD_DHD_TX_POST_DESCRIPTOR */


/* >>>RDD_DHD_TX_COMPLETE_DESCRIPTOR */
#define DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_OFFSET                                                        24
#define DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_WIDTH                                                         8
#define DHD_TX_COMPLETE_DESCRIPTOR_DHD_TX_COMPLETE_DESCRIPTOR_OFFSET                                        0
#define DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_OFFSET                                                          0
#define DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_WORD_OFFSET                                                     0
#define DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_OFFSET_MOD16                                                  8
#define DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_F_OFFSET                                                           16
#define DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_F_WIDTH                                                            8
#define DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_OFFSET                                                             1
#define DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_WORD_OFFSET                                                        0
#define DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_F_OFFSET_MOD16                                                     0
#define DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET                                                8
#define DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_WIDTH                                                 8
#define DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_OFFSET                                                  2
#define DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WORD_OFFSET                                             0
#define DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET_MOD16                                          8
#define DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_F_OFFSET                                                           0
#define DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_F_WIDTH                                                            8
#define DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_OFFSET                                                             3
#define DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_WORD_OFFSET                                                        0
#define DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_F_OFFSET_MOD16                                                     0
#define DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_F_OFFSET                                                      0
#define DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_F_WIDTH                                                       32
#define DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_OFFSET                                                        4
#define DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_WORD_OFFSET                                                   1
#define DHD_TX_COMPLETE_DESCRIPTOR_STATUS_F_OFFSET                                                          16
#define DHD_TX_COMPLETE_DESCRIPTOR_STATUS_F_WIDTH                                                           16
#define DHD_TX_COMPLETE_DESCRIPTOR_STATUS_OFFSET                                                            8
#define DHD_TX_COMPLETE_DESCRIPTOR_STATUS_WORD_OFFSET                                                       2
#define DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_F_OFFSET                                                    0
#define DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_F_WIDTH                                                     16
#define DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_OFFSET                                                      10
#define DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WORD_OFFSET                                                 2
#define DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_F_OFFSET                                                   0
#define DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_F_WIDTH                                                    32
#define DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_OFFSET                                                     12
#define DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WORD_OFFSET                                                3
/* <<<RDD_DHD_TX_COMPLETE_DESCRIPTOR */


/* >>>RDD_DHD_RX_COMPLETE_DESCRIPTOR */
#define DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_OFFSET                                                        24
#define DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_WIDTH                                                         8
#define DHD_RX_COMPLETE_DESCRIPTOR_DHD_RX_COMPLETE_DESCRIPTOR_OFFSET                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_OFFSET                                                          0
#define DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_WORD_OFFSET                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_OFFSET_MOD16                                                  8
#define DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_F_OFFSET                                                           16
#define DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_F_WIDTH                                                            8
#define DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_OFFSET                                                             1
#define DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_WORD_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_F_OFFSET_MOD16                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET                                                8
#define DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_WIDTH                                                 8
#define DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_OFFSET                                                  2
#define DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WORD_OFFSET                                             0
#define DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET_MOD16                                          8
#define DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_F_OFFSET                                                           0
#define DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_F_WIDTH                                                            8
#define DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_OFFSET                                                             3
#define DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_WORD_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_F_OFFSET_MOD16                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_F_OFFSET                                                      0
#define DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_F_WIDTH                                                       32
#define DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_OFFSET                                                        4
#define DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_WORD_OFFSET                                                   1
#define DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_F_OFFSET                                            16
#define DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_F_WIDTH                                             16
#define DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_OFFSET                                              8
#define DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_WORD_OFFSET                                         2
#define DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_F_OFFSET                                                    0
#define DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_F_WIDTH                                                     16
#define DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_OFFSET                                                      10
#define DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WORD_OFFSET                                                 2
#define DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_F_OFFSET                                                    16
#define DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_F_WIDTH                                                     16
#define DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_OFFSET                                                      12
#define DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_WORD_OFFSET                                                 3
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_F_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_F_WIDTH                                                         16
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_OFFSET                                                          14
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_WORD_OFFSET                                                     3
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_F_OFFSET                                                     16
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_F_WIDTH                                                      16
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_OFFSET                                                       16
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_WORD_OFFSET                                                  4
#define DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_F_OFFSET                                                           0
#define DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_F_WIDTH                                                            16
#define DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_OFFSET                                                             18
#define DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_WORD_OFFSET                                                        4
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_F_OFFSET                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_F_WIDTH                                                      32
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_OFFSET                                                       20
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_WORD_OFFSET                                                  5
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_F_OFFSET                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_F_WIDTH                                                      32
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_OFFSET                                                       24
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_WORD_OFFSET                                                  6
#define DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_F_OFFSET                                                   0
#define DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_F_WIDTH                                                    32
#define DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_OFFSET                                                     28
#define DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WORD_OFFSET                                                7
/* <<<RDD_DHD_RX_COMPLETE_DESCRIPTOR */


/* >>>RDD_DHD_RX_POST_DESCRIPTOR */
#define DHD_RX_POST_DESCRIPTOR_MSG_TYPE_F_OFFSET                                                        24
#define DHD_RX_POST_DESCRIPTOR_MSG_TYPE_F_WIDTH                                                         8
#define DHD_RX_POST_DESCRIPTOR_DHD_RX_POST_DESCRIPTOR_OFFSET                                            0
#define DHD_RX_POST_DESCRIPTOR_MSG_TYPE_OFFSET                                                          0
#define DHD_RX_POST_DESCRIPTOR_MSG_TYPE_WORD_OFFSET                                                     0
#define DHD_RX_POST_DESCRIPTOR_MSG_TYPE_F_OFFSET_MOD16                                                  8
#define DHD_RX_POST_DESCRIPTOR_IF_ID_F_OFFSET                                                           16
#define DHD_RX_POST_DESCRIPTOR_IF_ID_F_WIDTH                                                            8
#define DHD_RX_POST_DESCRIPTOR_IF_ID_OFFSET                                                             1
#define DHD_RX_POST_DESCRIPTOR_IF_ID_WORD_OFFSET                                                        0
#define DHD_RX_POST_DESCRIPTOR_IF_ID_F_OFFSET_MOD16                                                     0
#define DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET                                                8
#define DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_WIDTH                                                 8
#define DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_OFFSET                                                  2
#define DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WORD_OFFSET                                             0
#define DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET_MOD16                                          8
#define DHD_RX_POST_DESCRIPTOR_EPOCH_F_OFFSET                                                           0
#define DHD_RX_POST_DESCRIPTOR_EPOCH_F_WIDTH                                                            8
#define DHD_RX_POST_DESCRIPTOR_EPOCH_OFFSET                                                             3
#define DHD_RX_POST_DESCRIPTOR_EPOCH_WORD_OFFSET                                                        0
#define DHD_RX_POST_DESCRIPTOR_EPOCH_F_OFFSET_MOD16                                                     0
#define DHD_RX_POST_DESCRIPTOR_REQUEST_ID_F_OFFSET                                                      0
#define DHD_RX_POST_DESCRIPTOR_REQUEST_ID_F_WIDTH                                                       32
#define DHD_RX_POST_DESCRIPTOR_REQUEST_ID_OFFSET                                                        4
#define DHD_RX_POST_DESCRIPTOR_REQUEST_ID_WORD_OFFSET                                                   1
#define DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_F_OFFSET                                                    16
#define DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_F_WIDTH                                                     16
#define DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_OFFSET                                                      8
#define DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_WORD_OFFSET                                                 2
#define DHD_RX_POST_DESCRIPTOR_DATA_LEN_F_OFFSET                                                        0
#define DHD_RX_POST_DESCRIPTOR_DATA_LEN_F_WIDTH                                                         16
#define DHD_RX_POST_DESCRIPTOR_DATA_LEN_OFFSET                                                          10
#define DHD_RX_POST_DESCRIPTOR_DATA_LEN_WORD_OFFSET                                                     2
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_F_OFFSET                                           0
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_F_WIDTH                                            32
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_OFFSET                                             16
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WORD_OFFSET                                        4
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_F_OFFSET                                            0
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_F_WIDTH                                             32
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_OFFSET                                              20
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WORD_OFFSET                                         5
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_F_OFFSET                                               0
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_F_WIDTH                                                32
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_OFFSET                                                 24
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WORD_OFFSET                                            6
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_F_OFFSET                                                0
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_F_WIDTH                                                 32
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_OFFSET                                                  28
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WORD_OFFSET                                             7
/* <<<RDD_DHD_RX_POST_DESCRIPTOR */


/* >>>RDD_DHD_TX_POST_DESCRIPTOR_CWI32 */
#define DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_F_OFFSET                                                      0
#define DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_F_WIDTH                                                       32
#define DHD_TX_POST_DESCRIPTOR_CWI32_DHD_TX_POST_DESCRIPTOR_CWI32_OFFSET                                      0
#define DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_OFFSET                                                        0
#define DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WORD_OFFSET                                                   0
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_F_OFFSET                                                            29
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_F_WIDTH                                                             3
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_OFFSET                                                              4
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_WORD_OFFSET                                                         1
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_F_OFFSET_MOD8                                                       5
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_F_OFFSET_MOD16                                                      13
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_F_OFFSET                                                           24
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_F_WIDTH                                                            5
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_OFFSET                                                             4
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_WORD_OFFSET                                                        1
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_F_OFFSET_MOD8                                                      0
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_F_OFFSET_MOD16                                                     8
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_F_OFFSET                                                           17
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_F_WIDTH                                                            7
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_OFFSET                                                             5
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_WORD_OFFSET                                                        1
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_F_OFFSET_MOD8                                                      1
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_F_OFFSET_MOD16                                                     1
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_F_OFFSET                                                            16
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_F_WIDTH                                                             1
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_OFFSET                                                              5
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_WORD_OFFSET                                                         1
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_F_OFFSET_MOD8                                                       0
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_F_OFFSET_MOD16                                                      0
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_F_OFFSET                                                        0
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_F_WIDTH                                                         16
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_OFFSET                                                          6
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_WORD_OFFSET                                                     1
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_F_OFFSET                                               0
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_F_WIDTH                                                32
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_OFFSET                                                 8
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WORD_OFFSET                                            2
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_F_OFFSET                                              0
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_F_WIDTH                                               32
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_OFFSET                                                12
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_WORD_OFFSET                                           3
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_OFFSET                                                      16
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_WORD_OFFSET                                                 4
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_OFFSET                                                      20
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_WORD_OFFSET                                                 5
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_OFFSET                                                      24
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_WORD_OFFSET                                                 6
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_F_OFFSET                                                    16
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_F_WIDTH                                                     16
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_OFFSET                                                      28
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_WORD_OFFSET                                                 7
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_F_OFFSET                                                 4
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_F_WIDTH                                                  12
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_OFFSET                                                   30
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_WORD_OFFSET                                              7
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_F_OFFSET_MOD16                                           4
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_F_OFFSET                                                            0
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_F_WIDTH                                                             4
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_OFFSET                                                              31
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_WORD_OFFSET                                                         7
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_F_OFFSET_MOD8                                                       0
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_F_OFFSET_MOD16                                                      0

/* >>>RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	request_id        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	prio              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flags             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	copy              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_len          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_low 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_high	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_0      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_1      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_2      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_3      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flowid_override   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	info              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	request_id        	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_len          	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	copy              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flags             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	prio              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_low 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_high	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_0      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_1      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_2      	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	info              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flowid_override   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	tx_eth_hdr_3      	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS;

typedef RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS * aligned_RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[8];
    uint64_t dword_val64[4];
    RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS fields;
} RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS_NEW;
typedef RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS_NEW * aligned_RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS_NEW ALIGNMENT8;

#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_READ_G(r, g, idx)                  GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS), r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WRITE_G(v, g, idx)                 GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS), v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_READ(r, p)                         MREAD_32((uint8_t *)p, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WRITE(v, p)                        MWRITE_32((uint8_t *)p, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_L_READ( wv )                       FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_L_WRITE( v, wv )                   FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 4, 5, 3, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 4, 5, 3, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 4, 5, 3, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 4, 5, 3, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_L_READ( wv )                             FIELD_GET( wv, 29, 3 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_L_WRITE( v, wv )                         FIELD_SET( v, 29, 3, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 4, 0, 5, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 4, 0, 5, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 4, 0, 5, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 4, 0, 5, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_L_READ( wv )                            FIELD_GET( wv, 24, 5 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_L_WRITE( v, wv )                        FIELD_SET( v, 24, 5, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 5, 1, 7, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 5, 1, 7, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p + 5, 1, 7, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p + 5, 1, 7, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_L_READ( wv )                            FIELD_GET( wv, 17, 7 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_L_WRITE( v, wv )                        FIELD_SET( v, 17, 7, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 5, 0, 1, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 5, 0, 1, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 5, 0, 1, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 5, 0, 1, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_L_READ( wv )                             FIELD_GET( wv, 16, 1 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_L_WRITE( v, wv )                         FIELD_SET( v, 16, 1, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_READ_G(r, g, idx)                    GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 6, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_WRITE_G(v, g, idx)                   GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 6, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_READ(r, p)                           MREAD_16((uint8_t *)p + 6, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_WRITE(v, p)                          MWRITE_16((uint8_t *)p + 6, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_L_READ( wv )                         FIELD_GET( wv, 0, 16 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_L_WRITE( v, wv )                     FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 8, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 8, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_READ(r, p)                  MREAD_32((uint8_t *)p + 8, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 8, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 12, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 12, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)p + 12, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)p + 12, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_L_READ( wv )               FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_L_WRITE( v, wv )           FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 16, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 16, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_READ(r, p)                       MREAD_32((uint8_t *)p + 16, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 16, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_L_READ( wv )                     FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_L_WRITE( v, wv )                 FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 20, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 20, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_READ(r, p)                       MREAD_32((uint8_t *)p + 20, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 20, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_L_READ( wv )                     FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_L_WRITE( v, wv )                 FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_READ_G(r, g, idx)                GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 24, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_WRITE_G(v, g, idx)               GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 24, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_READ(r, p)                       MREAD_32((uint8_t *)p + 24, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_WRITE(v, p)                      MWRITE_32((uint8_t *)p + 24, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_L_READ( wv )                     FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_L_WRITE( v, wv )                 FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_READ_G(r, g, idx)                GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 28, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_WRITE_G(v, g, idx)               GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 28, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_READ(r, p)                       MREAD_16((uint8_t *)p + 28, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_WRITE(v, p)                      MWRITE_16((uint8_t *)p + 28, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_L_READ( wv )                     FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_L_WRITE( v, wv )                 FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 30, 4, 12, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 30, 4, 12, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_READ(r, p)                    FIELD_MREAD_16((uint8_t *)p + 30, 4, 12, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)p + 30, 4, 12, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_L_READ( wv )                  FIELD_GET( wv, 4, 12 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_L_WRITE( v, wv )              FIELD_SET( v, 4, 12, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 31, 0, 4, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS) + 31, 0, 4, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 31, 0, 4, r)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 31, 0, 4, v)
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_L_READ( wv )                             FIELD_GET( wv, 0, 4 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_L_WRITE( v, wv )                         FIELD_SET( v, 0, 4, wv )
/* <<<RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DTS */

/* <<<RDD_DHD_TX_POST_DESCRIPTOR_CWI32 */


/* >>>RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32 */
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_F_OFFSET                                                      0
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_F_WIDTH                                                       32
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_OFFSET                                  0
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_OFFSET                                                        0
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WORD_OFFSET                                                   0
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_F_OFFSET                                                    16
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_F_WIDTH                                                     16
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_OFFSET                                                      4
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_WORD_OFFSET                                                 1
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_OFFSET                                                           8
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_WIDTH                                                            8
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_OFFSET                                                             6
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WORD_OFFSET                                                        1
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_OFFSET_MOD16                                                     8

/* >>>RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	request_id  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_id	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	request_id  	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	reserved    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id       	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flow_ring_id	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS;

typedef RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS * aligned_RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS fields;
} RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS_NEW;
typedef RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS_NEW * aligned_RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS_NEW ALIGNMENT8;

#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_READ_G(r, g, idx)            GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS), r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WRITE_G(v, g, idx)           GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS), v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_READ(r, p)                   MREAD_32((uint8_t *)p, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WRITE(v, p)                  MWRITE_32((uint8_t *)p, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_L_READ( wv )                 FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_L_WRITE( v, wv )             FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_READ_G(r, g, idx)          GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS) + 4, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_WRITE_G(v, g, idx)         GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS) + 4, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_READ(r, p)                 MREAD_16((uint8_t *)p + 4, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_WRITE(v, p)                MWRITE_16((uint8_t *)p + 4, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_L_READ( wv )               FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_L_WRITE( v, wv )           FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_READ_G(r, g, idx)                 GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS) + 6, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WRITE_G(v, g, idx)                GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS) + 6, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_READ(r, p)                        MREAD_8((uint8_t *)p + 6, r)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WRITE(v, p)                       MWRITE_8((uint8_t *)p + 6, v)
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_L_READ( wv )                      FIELD_GET( wv, 8, 8 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_L_WRITE( v, wv )                  FIELD_SET( v, 8, 8, wv )
/* <<<RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DTS */

/* <<<RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32 */


/* >>>RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32 */
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_F_OFFSET                                                           29
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_F_WIDTH                                                            3
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_OFFSET                                  0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_OFFSET                                                             0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_WORD_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_F_OFFSET_MOD8                                                      5
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_F_OFFSET_MOD16                                                     13
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_OFFSET                                                           24
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_WIDTH                                                            5
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_OFFSET                                                             0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WORD_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_OFFSET_MOD8                                                      0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_OFFSET_MOD16                                                     8
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_F_OFFSET                                                     16
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_F_WIDTH                                                      8
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_OFFSET                                                       1
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_WORD_OFFSET                                                  0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_F_OFFSET_MOD16                                               0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_F_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_F_WIDTH                                                         16
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_OFFSET                                                          2
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_WORD_OFFSET                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_F_OFFSET                                                      0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_F_WIDTH                                                       32
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_OFFSET                                                        4
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WORD_OFFSET                                                   1

/* >>>RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	flags      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_offset	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_len   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	request_id 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	data_len   	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_offset	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	if_id      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	flags      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	request_id 	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS;

typedef RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS * aligned_RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS fields;
} RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS_NEW;
typedef RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS_NEW * aligned_RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS_NEW ALIGNMENT8;

#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS), 5, 3, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS), 5, 3, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p, 5, 3, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p, 5, 3, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_L_READ( wv )                     FIELD_GET( wv, 29, 3 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_L_WRITE( v, wv )                 FIELD_SET( v, 29, 3, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS), 0, 5, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS), 0, 5, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p, 0, 5, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p, 0, 5, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_L_READ( wv )                     FIELD_GET( wv, 24, 5 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_L_WRITE( v, wv )                 FIELD_SET( v, 24, 5, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS) + 1, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS) + 1, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_READ(r, p)                 MREAD_8((uint8_t *)p + 1, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_WRITE(v, p)                MWRITE_8((uint8_t *)p + 1, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_L_READ( wv )               FIELD_GET( wv, 16, 8 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_L_WRITE( v, wv )           FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_READ_G(r, g, idx)             GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS) + 2, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_WRITE_G(v, g, idx)            GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS) + 2, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_READ(r, p)                    MREAD_16((uint8_t *)p + 2, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_WRITE(v, p)                   MWRITE_16((uint8_t *)p + 2, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_L_READ( wv )                  FIELD_GET( wv, 0, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_L_WRITE( v, wv )              FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS) + 4, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS) + 4, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_READ(r, p)                  MREAD_32((uint8_t *)p + 4, r)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 4, v)
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
/* <<<RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DTS */

/* <<<RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32 */


/* >>>RDD_DHD_RX_POST_DESCRIPTOR_CWI32 */
#define DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_F_OFFSET                                                      0
#define DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_F_WIDTH                                                       32
#define DHD_RX_POST_DESCRIPTOR_CWI32_DHD_RX_POST_DESCRIPTOR_CWI32_OFFSET                                      0
#define DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_OFFSET                                                        0
#define DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WORD_OFFSET                                                   0
#define DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_F_OFFSET                                               0
#define DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_F_WIDTH                                                32
#define DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_OFFSET                                                 4
#define DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WORD_OFFSET                                            1

/* >>>RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	uint32_t	request_id       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
	uint32_t	request_id       	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
	uint32_t	data_buf_addr_low	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS;

typedef RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS * aligned_RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS fields;
} RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS_NEW;
typedef RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS_NEW * aligned_RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS_NEW ALIGNMENT8;

#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_READ_G(r, g, idx)                 GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS), r)
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WRITE_G(v, g, idx)                GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS), v)
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_READ(r, p)                        MREAD_32((uint8_t *)p, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WRITE(v, p)                       MWRITE_32((uint8_t *)p, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_L_READ( wv )                      FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_L_WRITE( v, wv )                  FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_READ_G(r, g, idx)          GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS) + 4, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)         GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS) + 4, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_READ(r, p)                 MREAD_32((uint8_t *)p + 4, r)
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WRITE(v, p)                MWRITE_32((uint8_t *)p + 4, v)
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_L_READ( wv )               FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_L_WRITE( v, wv )           FIELD_SET( v, 0, 32, wv )
/* <<<RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DTS */

/* <<<RDD_DHD_RX_POST_DESCRIPTOR_CWI32 */


/* >>>RDD_DHD_POST_COMMON_RADIO_ENTRY */
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_F_OFFSET                                    0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_F_WIDTH                                     32
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_POST_COMMON_RADIO_ENTRY_OFFSET                                       0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_OFFSET                                      0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_WORD_OFFSET                                 0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_F_OFFSET                                   0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_F_WIDTH                                    32
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_OFFSET                                     4
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_WORD_OFFSET                                1
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_F_OFFSET                                  0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_F_WIDTH                                   32
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_OFFSET                                    8
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_WORD_OFFSET                               2
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_F_OFFSET                                 0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_F_WIDTH                                  32
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_OFFSET                                   12
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_WORD_OFFSET                              3
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_F_OFFSET                                  0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_F_WIDTH                                   32
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_OFFSET                                    16
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_WORD_OFFSET                               4
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_F_OFFSET                                 0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_F_WIDTH                                  32
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_OFFSET                                   20
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_WORD_OFFSET                              5
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_F_OFFSET                                      0
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_F_WIDTH                                       32
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_OFFSET                                        24
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_WORD_OFFSET                                   6
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_F_OFFSET                                     0
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_F_WIDTH                                      32
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_OFFSET                                       28
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_WORD_OFFSET                                  7
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_F_OFFSET                                                0
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_F_WIDTH                                                 32
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_OFFSET                                                  32
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WORD_OFFSET                                             8
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_F_OFFSET                                               0
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_F_WIDTH                                                32
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_OFFSET                                                 36
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WORD_OFFSET                                            9
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_F_OFFSET                                                  16
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_F_WIDTH                                                   16
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_OFFSET                                                    40
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_WORD_OFFSET                                               10
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_F_OFFSET                                                  0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_F_WIDTH                                                   16
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_OFFSET                                                    42
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_WORD_OFFSET                                               10
#define DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_F_OFFSET                                                        0
#define DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_F_WIDTH                                                         32
#define DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_OFFSET                                                          44
#define DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_WORD_OFFSET                                                     11
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_F_OFFSET                                              31
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_F_WIDTH                                               1
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_OFFSET                                                48
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_WORD_OFFSET                                           12
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_F_OFFSET_MOD8                                         7
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_F_OFFSET_MOD16                                        15
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_F_OFFSET                                       30
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_F_WIDTH                                        1
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_OFFSET                                         48
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_WORD_OFFSET                                    12
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_F_OFFSET_MOD8                                  6
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_F_OFFSET_MOD16                                 14
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_F_OFFSET                                  29
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_F_WIDTH                                   1
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_OFFSET                                    48
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_WORD_OFFSET                               12
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_F_OFFSET_MOD8                             5
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_F_OFFSET_MOD16                            13
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET                                                26
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_WIDTH                                                 3
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_OFFSET                                                  48
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WORD_OFFSET                                             12
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET_MOD8                                           2
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET_MOD16                                          10
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET                                                     25
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_WIDTH                                                      1
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_OFFSET                                                       48
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WORD_OFFSET                                                  12
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET_MOD8                                                1
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET_MOD16                                               9
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_F_OFFSET                                   16
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_F_WIDTH                                    8
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_OFFSET                                     49
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_WORD_OFFSET                                12
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_F_OFFSET_MOD16                             0
#define DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_F_OFFSET                                        8
#define DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_F_WIDTH                                         8
#define DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_OFFSET                                          50
#define DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_WORD_OFFSET                                     12
#define DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_F_OFFSET_MOD16                                  8
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_F_OFFSET                                                0
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_F_WIDTH                                                 8
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_OFFSET                                                  51
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_WORD_OFFSET                                             12
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_F_OFFSET_MOD16                                          0
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_OFFSET                                     52
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_WORD_OFFSET                                13
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_F_OFFSET_MOD16                             8
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_OFFSET                                       56
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_WORD_OFFSET                                  14
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_F_OFFSET_MOD16                               8
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_OFFSET                                  60
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_WORD_OFFSET                             15
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_F_OFFSET_MOD16                          8
#define DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_OFFSET                                                        64
#define DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_WORD_OFFSET                                                   16
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_F_OFFSET                                                   16
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_F_WIDTH                                                    16
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_OFFSET                                                     84
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_WORD_OFFSET                                                21
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_F_OFFSET                                                   0
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_F_WIDTH                                                    16
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_OFFSET                                                     86
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_WORD_OFFSET                                                21
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_F_OFFSET                                                    31
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_F_WIDTH                                                     1
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_OFFSET                                                      88
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_WORD_OFFSET                                                 22
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_F_OFFSET_MOD8                                               7
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_F_OFFSET_MOD16                                              15
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_F_OFFSET                                                 30
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_F_WIDTH                                                  1
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_OFFSET                                                   88
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_WORD_OFFSET                                              22
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_F_OFFSET_MOD8                                            6
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_F_OFFSET_MOD16                                           14
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_F_OFFSET                                                 16
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_F_WIDTH                                                  14
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_OFFSET                                                   88
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_WORD_OFFSET                                              22
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_F_OFFSET_MOD16                                           0
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_F_OFFSET                                                     13
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_F_WIDTH                                                      3
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_OFFSET                                                       90
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_WORD_OFFSET                                                  22
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_F_OFFSET_MOD8                                                5
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_F_OFFSET_MOD16                                               13
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET                                              8
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_F_WIDTH                                               2
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_OFFSET                                                90
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_WORD_OFFSET                                           22
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET_MOD8                                         0
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET_MOD16                                        8
#define DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_F_OFFSET                                                0
#define DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_F_WIDTH                                                 8
#define DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_OFFSET                                                  91
#define DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_WORD_OFFSET                                             22
#define DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_F_OFFSET_MOD16                                          0
#define DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_F_OFFSET                                                 0
#define DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_F_WIDTH                                                  32
#define DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_OFFSET                                                   92
#define DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_WORD_OFFSET                                              23
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_F_OFFSET                                          0
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_F_WIDTH                                           32
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_OFFSET                                            96
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_WORD_OFFSET                                       24
#define DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_F_OFFSET                                                      0
#define DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_F_WIDTH                                                       32
#define DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_OFFSET                                                        100
#define DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_WORD_OFFSET                                                   25
#define DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_F_OFFSET                                           16
#define DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_F_WIDTH                                            16
#define DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_OFFSET                                             104
#define DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_WORD_OFFSET                                        26
#define DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_F_OFFSET                                                    8
#define DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_F_WIDTH                                                     8
#define DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_OFFSET                                                      106
#define DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_WORD_OFFSET                                                 26
#define DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_F_OFFSET_MOD16                                              8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_F_OFFSET                                            0
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_F_WIDTH                                             8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_OFFSET                                              107
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_WORD_OFFSET                                         26
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_F_OFFSET_MOD16                                      0
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_OFFSET                                                 108
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_WORD_OFFSET                                            27
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_F_OFFSET_MOD16                                         8
#define DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_F_OFFSET                                                      24
#define DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_F_WIDTH                                                       8
#define DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_OFFSET                                                        124
#define DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_WORD_OFFSET                                                   31
#define DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_F_OFFSET_MOD16                                                8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_F_OFFSET                                              16
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_F_WIDTH                                               8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_OFFSET                                                125
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_WORD_OFFSET                                           31
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_F_OFFSET_MOD16                                        0
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_F_OFFSET                                         8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_F_WIDTH                                          8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_OFFSET                                           126
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_WORD_OFFSET                                      31
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_F_OFFSET_MOD16                                   8
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_F_OFFSET                                                 31
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_F_WIDTH                                                  1
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_OFFSET                                                   128
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_WORD_OFFSET                                              32
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_F_OFFSET_MOD8                                            7
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_F_OFFSET_MOD16                                           15
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_F_OFFSET                                                       25
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_F_WIDTH                                                        6
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_OFFSET                                                         128
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_WORD_OFFSET                                                    32
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_F_OFFSET_MOD8                                                  1
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_F_OFFSET_MOD16                                                 9
#define DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_F_OFFSET                                                       16
#define DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_F_WIDTH                                                        9
#define DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_OFFSET                                                         128
#define DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_WORD_OFFSET                                                    32
#define DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_F_OFFSET_MOD16                                                 0
/* <<<RDD_DHD_POST_COMMON_RADIO_ENTRY */


/* >>>RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY */
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_F_OFFSET                                     0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_F_WIDTH                                      32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_COMPLETE_COMMON_RADIO_ENTRY_OFFSET                                   0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_OFFSET                                       0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_WORD_OFFSET                                  0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_F_OFFSET                                    0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_F_WIDTH                                     32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_OFFSET                                      4
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_WORD_OFFSET                                 1
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_F_OFFSET                                   0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_F_WIDTH                                    32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_OFFSET                                     8
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_WORD_OFFSET                                2
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_F_OFFSET                                  0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_F_WIDTH                                   32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_OFFSET                                    12
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_WORD_OFFSET                               3
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_F_OFFSET                                   0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_F_WIDTH                                    32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_OFFSET                                     16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_WORD_OFFSET                                4
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_F_OFFSET                                  0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_F_WIDTH                                   32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_OFFSET                                    20
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_WORD_OFFSET                               5
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_F_OFFSET                                     0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_F_WIDTH                                      32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_OFFSET                                       24
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_WORD_OFFSET                                  6
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_F_OFFSET                                    0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_F_WIDTH                                     32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_OFFSET                                      28
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_WORD_OFFSET                                 7
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_F_OFFSET                                   0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_F_WIDTH                                    32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_OFFSET                                     32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_WORD_OFFSET                                8
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_F_OFFSET                                  0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_F_WIDTH                                   32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_OFFSET                                    36
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_WORD_OFFSET                               9
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_F_OFFSET                                   0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_F_WIDTH                                    32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_OFFSET                                     40
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_WORD_OFFSET                                10
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_F_OFFSET                                  0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_F_WIDTH                                   32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_OFFSET                                    44
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_WORD_OFFSET                               11
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_F_OFFSET                                         0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_F_WIDTH                                          32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_OFFSET                                           48
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_WORD_OFFSET                                      12
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_F_OFFSET                                        0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_F_WIDTH                                         32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_OFFSET                                          52
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_WORD_OFFSET                                     13
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_F_OFFSET                                       0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_F_WIDTH                                        32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_OFFSET                                         56
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_WORD_OFFSET                                    14
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_F_OFFSET                                      0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_F_WIDTH                                       32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_OFFSET                                        60
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_WORD_OFFSET                                   15
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_F_OFFSET                                       0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_F_WIDTH                                        32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_OFFSET                                         64
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_WORD_OFFSET                                    16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_F_OFFSET                                      0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_F_WIDTH                                       32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_OFFSET                                        68
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_WORD_OFFSET                                   17
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_F_OFFSET                                                0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_F_WIDTH                                                 32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_OFFSET                                                  72
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WORD_OFFSET                                             18
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_F_OFFSET                                               0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_F_WIDTH                                                32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_OFFSET                                                 76
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WORD_OFFSET                                            19
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_F_OFFSET                                              16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_F_WIDTH                                               16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_OFFSET                                                80
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_WORD_OFFSET                                           20
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_F_OFFSET                                              0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_F_WIDTH                                               16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_OFFSET                                                82
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_WORD_OFFSET                                           20
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_F_OFFSET                                              16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_F_WIDTH                                               16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_OFFSET                                                84
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_WORD_OFFSET                                           21
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_F_OFFSET                                              0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_F_WIDTH                                               16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_OFFSET                                                86
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_WORD_OFFSET                                           21
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_F_OFFSET                                                  16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_F_WIDTH                                                   16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_OFFSET                                                    88
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_WORD_OFFSET                                               22
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET                                                13
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_WIDTH                                                 3
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_OFFSET                                                  90
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WORD_OFFSET                                             22
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET_MOD8                                           5
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET_MOD16                                          13
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET                                                     12
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_WIDTH                                                      1
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_OFFSET                                                       90
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WORD_OFFSET                                                  22
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET_MOD8                                                4
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET_MOD16                                               12
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_OFFSET                                                        96
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_WORD_OFFSET                                                   24
/* <<<RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY */


/* >>>RDD_DHD_COMPLETE_RING_ENTRY */
#define DHD_COMPLETE_RING_ENTRY_RING_VALUE_F_OFFSET                                                      0
#define DHD_COMPLETE_RING_ENTRY_RING_VALUE_F_WIDTH                                                       32
#define DHD_COMPLETE_RING_ENTRY_RING_VALUE_OFFSET                                                        0
#define DHD_COMPLETE_RING_ENTRY_RING_VALUE_WORD_OFFSET                                                   0
#define DHD_COMPLETE_RING_ENTRY_STATUS_F_OFFSET                                                          16
#define DHD_COMPLETE_RING_ENTRY_STATUS_F_WIDTH                                                           16
#define DHD_COMPLETE_RING_ENTRY_STATUS_OFFSET                                                            4
#define DHD_COMPLETE_RING_ENTRY_STATUS_WORD_OFFSET                                                       1
#define DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_F_OFFSET                                                0
#define DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_F_WIDTH                                                 16
#define DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_OFFSET                                                  6
#define DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_WORD_OFFSET                                             1

/* >>>RDD_DHD_COMPLETE_RING_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	ring_value   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	request_id             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	req_reserved0          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
			uint32_t	buffer_type            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
			uint32_t	req_reserved1          	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	status       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	fr_id_drop_value	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_status       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow_ring_id           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_status       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	fr_reserved0           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
			uint32_t	drop                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
			uint32_t	fr_reserved1           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	ring_value   	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	request_id             	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	req_reserved0          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
			uint32_t	buffer_type            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
			uint32_t	req_reserved1          	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	fr_id_drop_value	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	status       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	flow_ring_id           	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
			uint32_t	reserved1_status       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	fr_reserved0           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
			uint32_t	drop                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
			uint32_t	fr_reserved1           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
			uint32_t	reserved2_status       	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_COMPLETE_RING_ENTRY_DTS;

typedef RDD_DHD_COMPLETE_RING_ENTRY_DTS * aligned_RDD_DHD_COMPLETE_RING_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[2];
    uint64_t dword_val64[1];
    RDD_DHD_COMPLETE_RING_ENTRY_DTS fields;
} RDD_DHD_COMPLETE_RING_ENTRY_DTS_NEW;
typedef RDD_DHD_COMPLETE_RING_ENTRY_DTS_NEW * aligned_RDD_DHD_COMPLETE_RING_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS), r)
#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS), v)
#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_READ(r, p)                    MREAD_32((uint8_t *)p, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_WRITE(v, p)                   MWRITE_32((uint8_t *)p, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_L_READ( wv )                  FIELD_GET( wv, 0, 32 )
#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_L_WRITE( v, wv )              FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_READ_G(r, g, idx)             GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS), r)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_WRITE_G(v, g, idx)            GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS), v)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_READ(r, p)                    MREAD_32((uint8_t *)p, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_WRITE(v, p)                   MWRITE_32((uint8_t *)p, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_L_READ( wv )                  FIELD_GET( wv, 0, 32 )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_L_WRITE( v, wv )              FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS), 2, 6, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS), 2, 6, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p, 2, 6, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p, 2, 6, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_L_READ( wv )               FIELD_GET( wv, 26, 6 )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_L_WRITE( v, wv )           FIELD_SET( v, 26, 6, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS), 0, 2, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS), 0, 2, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p, 0, 2, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p, 0, 2, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_L_READ( wv )                 FIELD_GET( wv, 24, 2 )
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_L_WRITE( v, wv )             FIELD_SET( v, 24, 2, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 0, 0, 24, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 0, 0, 24, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_READ(r, p)                 FIELD_MREAD_32((uint8_t *)p + 0, 0, 24, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)p + 0, 0, 24, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_L_READ( wv )               FIELD_GET( wv, 0, 24 )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_L_WRITE( v, wv )           FIELD_SET( v, 0, 24, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_READ_G(r, g, idx)                 GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 4, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_WRITE_G(v, g, idx)                GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 4, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_READ(r, p)                        MREAD_16((uint8_t *)p + 4, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_WRITE(v, p)                       MWRITE_16((uint8_t *)p + 4, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_L_READ( wv )                      FIELD_GET( wv, 16, 16 )
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_L_WRITE( v, wv )                  FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_READ_G(r, g, idx)       GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 6, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_WRITE_G(v, g, idx)      GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 6, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_READ(r, p)              MREAD_16((uint8_t *)p + 6, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_WRITE(v, p)             MWRITE_16((uint8_t *)p + 6, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_L_READ( wv )            FIELD_GET( wv, 0, 16 )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_L_WRITE( v, wv )        FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_READ_G(r, g, idx)           GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 6, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_WRITE_G(v, g, idx)          GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 6, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_READ(r, p)                  MREAD_16((uint8_t *)p + 6, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_WRITE(v, p)                 MWRITE_16((uint8_t *)p + 6, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_L_READ( wv )                FIELD_GET( wv, 0, 16 )
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_L_WRITE( v, wv )            FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_READ_G(r, g, idx)           GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 6, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_WRITE_G(v, g, idx)          GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 6, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_READ(r, p)                  MREAD_8((uint8_t *)p + 6, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_WRITE(v, p)                 MWRITE_8((uint8_t *)p + 6, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_L_READ( wv )                FIELD_GET( wv, 8, 8 )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_L_WRITE( v, wv )            FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 7, 7, 1, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 7, 7, 1, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 7, 7, 1, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 7, 7, 1, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_L_READ( wv )                        FIELD_GET( wv, 7, 1 )
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_L_WRITE( v, wv )                    FIELD_SET( v, 7, 1, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 7, 0, 7, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_COMPLETE_RING_ENTRY_DTS) + 7, 0, 7, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_READ(r, p)                  FIELD_MREAD_8((uint8_t *)p + 7, 0, 7, r)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)p + 7, 0, 7, v)
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_L_READ( wv )                FIELD_GET( wv, 0, 7 )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_L_WRITE( v, wv )            FIELD_SET( v, 0, 7, wv )
/* <<<RDD_DHD_COMPLETE_RING_ENTRY_DTS */

/* <<<RDD_DHD_COMPLETE_RING_ENTRY */


/* >>>RDD_DHD_CPU_QM_DESCRIPTOR */
#define DHD_CPU_QM_DESCRIPTOR_VALID_F_OFFSET                                                           31
#define DHD_CPU_QM_DESCRIPTOR_VALID_F_WIDTH                                                            1
#define DHD_CPU_QM_DESCRIPTOR_DHD_CPU_QM_DESCRIPTOR_OFFSET                                             0
#define DHD_CPU_QM_DESCRIPTOR_VALID_OFFSET                                                             0
#define DHD_CPU_QM_DESCRIPTOR_VALID_WORD_OFFSET                                                        0
#define DHD_CPU_QM_DESCRIPTOR_VALID_F_OFFSET_MOD8                                                      7
#define DHD_CPU_QM_DESCRIPTOR_VALID_F_OFFSET_MOD16                                                     15
#define DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_F_OFFSET                                                    21
#define DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_F_WIDTH                                                     10
#define DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_OFFSET                                                      0
#define DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_WORD_OFFSET                                                 0
#define DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_F_OFFSET_MOD16                                              5
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_OFFSET                                              20
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_WIDTH                                               1
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_OFFSET                                                1
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_WORD_OFFSET                                           0
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_OFFSET_MOD8                                         4
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_OFFSET_MOD16                                        4
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_F_OFFSET                                                    18
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_F_WIDTH                                                     2
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_OFFSET                                                      1
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_WORD_OFFSET                                                 0
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_F_OFFSET_MOD8                                               2
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_F_OFFSET_MOD16                                              2
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_F_OFFSET                                                          17
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_F_WIDTH                                                           1
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_OFFSET                                                            1
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_WORD_OFFSET                                                       0
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_F_OFFSET_MOD8                                                     1
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_F_OFFSET_MOD16                                                    1
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_F_OFFSET                                                         16
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_F_WIDTH                                                          1
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_OFFSET                                                           1
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_WORD_OFFSET                                                      0
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_F_OFFSET_MOD8                                                    0
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_F_OFFSET_MOD16                                                   0
#define DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET                                                   7
#define DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_F_WIDTH                                                    9
#define DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_OFFSET                                                     2
#define DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_WORD_OFFSET                                                0
#define DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET_MOD16                                             7
#define DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_F_OFFSET                                              18
#define DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_F_WIDTH                                               14
#define DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_OFFSET                                                4
#define DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_WORD_OFFSET                                           1
#define DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_F_OFFSET_MOD16                                        2
#define DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_F_OFFSET                                                   0
#define DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_F_WIDTH                                                    14
#define DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_OFFSET                                                     6
#define DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_WORD_OFFSET                                                1
#define DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_F_OFFSET_MOD16                                             0
#define DHD_CPU_QM_DESCRIPTOR_DROP_F_OFFSET                                                            31
#define DHD_CPU_QM_DESCRIPTOR_DROP_F_WIDTH                                                             1
#define DHD_CPU_QM_DESCRIPTOR_DROP_OFFSET                                                              8
#define DHD_CPU_QM_DESCRIPTOR_DROP_WORD_OFFSET                                                         2
#define DHD_CPU_QM_DESCRIPTOR_DROP_F_OFFSET_MOD8                                                       7
#define DHD_CPU_QM_DESCRIPTOR_DROP_F_OFFSET_MOD16                                                      15
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_F_OFFSET                                                       28
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_F_WIDTH                                                        2
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_OFFSET                                                         8
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_WORD_OFFSET                                                    2
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_F_OFFSET_MOD8                                                  4
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_F_OFFSET_MOD16                                                 12
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_F_OFFSET                                                   19
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_F_WIDTH                                                    3
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_OFFSET                                                     9
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_WORD_OFFSET                                                2
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_F_OFFSET_MOD8                                              3
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_F_OFFSET_MOD16                                             3
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_F_OFFSET                                                          17
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_F_WIDTH                                                           1
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_OFFSET                                                            9
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_WORD_OFFSET                                                       2
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_F_OFFSET_MOD8                                                     1
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_F_OFFSET_MOD16                                                    1
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_F_OFFSET                                                        0
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_F_WIDTH                                                         13
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_OFFSET                                                          10
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_WORD_OFFSET                                                     2
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_F_OFFSET_MOD16                                                  0
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_F_OFFSET                                                          31
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_F_WIDTH                                                           1
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_OFFSET                                                            12
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_WORD_OFFSET                                                       3
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_F_OFFSET_MOD8                                                     7
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_F_OFFSET_MOD16                                                    15
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    30
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      12
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 3
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               6
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              14
#define DHD_CPU_QM_DESCRIPTOR_ABS_F_OFFSET                                                             29
#define DHD_CPU_QM_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define DHD_CPU_QM_DESCRIPTOR_ABS_OFFSET                                                               12
#define DHD_CPU_QM_DESCRIPTOR_ABS_WORD_OFFSET                                                          3
#define DHD_CPU_QM_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        5
#define DHD_CPU_QM_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       13
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_F_OFFSET                                                        0
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_F_WIDTH                                                         29
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_OFFSET                                                          12
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_WORD_OFFSET                                                     3

/* >>>RDD_DHD_CPU_QM_DESCRIPTOR_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow_ring_id      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tx_complete_wakeup	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_msg_type      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_msg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	first_level_q     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flow_ring_id      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tx_complete_wakeup	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cpu_msg_type      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cpu_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cpu_msg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_first_level_q     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved1         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flow_ring_id      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tx_complete_wakeup	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cpu_msg_type      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cpu_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cpu_msg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_first_level_q     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved1         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	pkt_id_or_read_idx	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	reserved3         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	pkt_id                      	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
			uint32_t	reserved1_reserved3         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	read_idx_valid              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
			uint32_t	reserved2                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
			uint32_t	read_idx                    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
			uint32_t	reserved2_reserved3         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	radio_idx         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved5         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	wifi_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved6         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	spdsvc            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved7         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs_ptr2          	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved4         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_radio_idx         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved5         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_wifi_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved6         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_spdsvc            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved7         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs_ptr2          	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved4         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_radio_idx         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved5         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_wifi_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved6         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_spdsvc            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved7         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs_ptr2          	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs_ptr1          	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs_ptr1          	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs_ptr1          	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved1         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	first_level_q     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_msg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	cpu_msg_type      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	tx_complete_wakeup	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	flow_ring_id      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved1         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_first_level_q     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cpu_msg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cpu_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_cpu_msg_type      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_tx_complete_wakeup	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_flow_ring_id      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved1         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_first_level_q     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cpu_msg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cpu_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_cpu_msg_type      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_tx_complete_wakeup	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_flow_ring_id      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	pkt_id_or_read_idx	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved3         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	pkt_id                      	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved3         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	read_idx_valid              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
			uint32_t	reserved2                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
			uint32_t	read_idx                    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	abs_ptr2          	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved7         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	spdsvc            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved6         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	wifi_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved5         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	radio_idx         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_abs_ptr2          	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved7         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_spdsvc            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved6         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_wifi_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved5         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_radio_idx         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved4         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_abs_ptr2          	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved7         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_spdsvc            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved6         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_wifi_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved5         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_radio_idx         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved4         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	abs_ptr1          	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_abs_ptr1          	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_abs_ptr1          	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_CPU_QM_DESCRIPTOR_DTS;

typedef RDD_DHD_CPU_QM_DESCRIPTOR_DTS * aligned_RDD_DHD_CPU_QM_DESCRIPTOR_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_DHD_CPU_QM_DESCRIPTOR_DTS fields;
} RDD_DHD_CPU_QM_DESCRIPTOR_DTS_NEW;
typedef RDD_DHD_CPU_QM_DESCRIPTOR_DTS_NEW * aligned_RDD_DHD_CPU_QM_DESCRIPTOR_DTS_NEW ALIGNMENT8;

#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS), 7, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS), 7, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_READ(r, p)                              FIELD_MREAD_8((uint8_t *)p, 7, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)p, 7, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_L_READ( wv )                            FIELD_GET( wv, 31, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_L_WRITE( v, wv )                        FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS), 5, 10, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS), 5, 10, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_READ(r, p)                       FIELD_MREAD_16((uint8_t *)p, 5, 10, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)p, 5, 10, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_L_READ( wv )                     FIELD_GET( wv, 21, 10 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_L_WRITE( v, wv )                 FIELD_SET( v, 21, 10, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 1, 4, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 1, 4, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_READ(r, p)                 FIELD_MREAD_8((uint8_t *)p + 1, 4, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)p + 1, 4, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_L_READ( wv )               FIELD_GET( wv, 20, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_L_WRITE( v, wv )           FIELD_SET( v, 20, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 1, 2, 2, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 1, 2, 2, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 1, 2, 2, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 1, 2, 2, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_L_READ( wv )                     FIELD_GET( wv, 18, 2 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_L_WRITE( v, wv )                 FIELD_SET( v, 18, 2, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 1, 1, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 1, 1, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 1, 1, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 1, 1, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_L_READ( wv )                           FIELD_GET( wv, 17, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_L_WRITE( v, wv )                       FIELD_SET( v, 17, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 1, 0, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 1, 0, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_READ(r, p)                            FIELD_MREAD_8((uint8_t *)p + 1, 0, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)p + 1, 0, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_L_READ( wv )                          FIELD_GET( wv, 16, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_L_WRITE( v, wv )                      FIELD_SET( v, 16, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 2, 7, 9, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 2, 7, 9, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                      FIELD_MREAD_16((uint8_t *)p + 2, 7, 9, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)p + 2, 7, 9, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_L_READ( wv )                    FIELD_GET( wv, 7, 9 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_L_WRITE( v, wv )                FIELD_SET( v, 7, 9, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 4, 2, 14, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 4, 2, 14, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_READ(r, p)                 FIELD_MREAD_16((uint8_t *)p + 4, 2, 14, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)p + 4, 2, 14, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_L_READ( wv )               FIELD_GET( wv, 18, 14 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_L_WRITE( v, wv )           FIELD_SET( v, 18, 14, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 4, 2, 14, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 4, 2, 14, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_READ(r, p)                             FIELD_MREAD_16((uint8_t *)p + 4, 2, 14, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_WRITE(v, p)                            FIELD_MWRITE_16((uint8_t *)p + 4, 2, 14, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_L_READ( wv )                           FIELD_GET( wv, 18, 14 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_L_WRITE( v, wv )                       FIELD_SET( v, 18, 14, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 4, 7, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 4, 7, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_READ(r, p)                     FIELD_MREAD_8((uint8_t *)p + 4, 7, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)p + 4, 7, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_L_READ( wv )                   FIELD_GET( wv, 31, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_L_WRITE( v, wv )               FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 4, 2, 10, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 4, 2, 10, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_READ(r, p)                           FIELD_MREAD_16((uint8_t *)p + 4, 2, 10, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)p + 4, 2, 10, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_L_READ( wv )                         FIELD_GET( wv, 18, 10 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_L_WRITE( v, wv )                     FIELD_SET( v, 18, 10, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 6, 0, 14, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 6, 0, 14, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                      FIELD_MREAD_16((uint8_t *)p + 6, 0, 14, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)p + 6, 0, 14, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_L_READ( wv )                    FIELD_GET( wv, 0, 14 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_L_WRITE( v, wv )                FIELD_SET( v, 0, 14, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 8, 7, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 8, 7, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_READ(r, p)                               FIELD_MREAD_8((uint8_t *)p + 8, 7, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)p + 8, 7, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_L_READ( wv )                             FIELD_GET( wv, 31, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_L_WRITE( v, wv )                         FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 8, 4, 2, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 8, 4, 2, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 8, 4, 2, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 8, 4, 2, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_L_READ( wv )                        FIELD_GET( wv, 28, 2 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_L_WRITE( v, wv )                    FIELD_SET( v, 28, 2, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 9, 3, 3, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 9, 3, 3, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 9, 3, 3, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 9, 3, 3, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_L_READ( wv )                    FIELD_GET( wv, 19, 3 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_L_WRITE( v, wv )                FIELD_SET( v, 19, 3, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 9, 1, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 9, 1, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 9, 1, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 9, 1, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_L_READ( wv )                           FIELD_GET( wv, 17, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_L_WRITE( v, wv )                       FIELD_SET( v, 17, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 10, 0, 13, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 10, 0, 13, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_READ(r, p)                           FIELD_MREAD_16((uint8_t *)p + 10, 0, 13, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)p + 10, 0, 13, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_L_READ( wv )                         FIELD_GET( wv, 0, 13 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_L_WRITE( v, wv )                     FIELD_SET( v, 0, 13, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 12, 7, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 12, 7, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_READ(r, p)                             FIELD_MREAD_8((uint8_t *)p + 12, 7, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)p + 12, 7, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_L_READ( wv )                           FIELD_GET( wv, 31, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_L_WRITE( v, wv )                       FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 12, 6, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 12, 6, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                       FIELD_MREAD_8((uint8_t *)p + 12, 6, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)p + 12, 6, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_L_READ( wv )                     FIELD_GET( wv, 30, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_L_WRITE( v, wv )                 FIELD_SET( v, 30, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 12, 5, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 12, 5, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_READ(r, p)                                FIELD_MREAD_8((uint8_t *)p + 12, 5, 1, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)p + 12, 5, 1, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_L_READ( wv )                              FIELD_GET( wv, 29, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_L_WRITE( v, wv )                          FIELD_SET( v, 29, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 12, 0, 29, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32(g, idx*sizeof(RDD_DHD_CPU_QM_DESCRIPTOR_DTS) + 12, 0, 29, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_READ(r, p)                           FIELD_MREAD_32((uint8_t *)p + 12, 0, 29, r)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)p + 12, 0, 29, v)
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_L_READ( wv )                         FIELD_GET( wv, 0, 29 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_L_WRITE( v, wv )                     FIELD_SET( v, 0, 29, wv )
/* <<<RDD_DHD_CPU_QM_DESCRIPTOR_DTS */

/* <<<RDD_DHD_CPU_QM_DESCRIPTOR */


/* >>>RDD_DHD_BACKUP_ENTRY */
#define DHD_BACKUP_ENTRY_NEXT_IDX_F_OFFSET                                                        16
#define DHD_BACKUP_ENTRY_NEXT_IDX_F_WIDTH                                                         16
#define DHD_BACKUP_ENTRY_DHD_BACKUP_ENTRY_OFFSET                                                  0
#define DHD_BACKUP_ENTRY_NEXT_IDX_OFFSET                                                          0
#define DHD_BACKUP_ENTRY_NEXT_IDX_WORD_OFFSET                                                     0
#define DHD_BACKUP_ENTRY_REQUEST_ID_F_OFFSET                                                      0
#define DHD_BACKUP_ENTRY_REQUEST_ID_F_WIDTH                                                       32
#define DHD_BACKUP_ENTRY_REQUEST_ID_OFFSET                                                        4
#define DHD_BACKUP_ENTRY_REQUEST_ID_WORD_OFFSET                                                   1
#define DHD_BACKUP_ENTRY_PACKET_VALID_F_OFFSET                                                    31
#define DHD_BACKUP_ENTRY_PACKET_VALID_F_WIDTH                                                     1
#define DHD_BACKUP_ENTRY_PACKET_VALID_OFFSET                                                      8
#define DHD_BACKUP_ENTRY_PACKET_VALID_WORD_OFFSET                                                 2
#define DHD_BACKUP_ENTRY_PACKET_VALID_F_OFFSET_MOD8                                               7
#define DHD_BACKUP_ENTRY_PACKET_VALID_F_OFFSET_MOD16                                              15
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_F_OFFSET                                                 30
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_F_WIDTH                                                  1
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_OFFSET                                                   8
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_WORD_OFFSET                                              2
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_F_OFFSET_MOD8                                            6
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_F_OFFSET_MOD16                                           14
#define DHD_BACKUP_ENTRY_PACKET_DATA_LEN_F_OFFSET                                                 16
#define DHD_BACKUP_ENTRY_PACKET_DATA_LEN_F_WIDTH                                                  14
#define DHD_BACKUP_ENTRY_PACKET_DATA_LEN_OFFSET                                                   8
#define DHD_BACKUP_ENTRY_PACKET_DATA_LEN_WORD_OFFSET                                              2
#define DHD_BACKUP_ENTRY_PACKET_DATA_LEN_F_OFFSET_MOD16                                           0
#define DHD_BACKUP_ENTRY_PACKET_PRIO_F_OFFSET                                                     13
#define DHD_BACKUP_ENTRY_PACKET_PRIO_F_WIDTH                                                      3
#define DHD_BACKUP_ENTRY_PACKET_PRIO_OFFSET                                                       10
#define DHD_BACKUP_ENTRY_PACKET_PRIO_WORD_OFFSET                                                  2
#define DHD_BACKUP_ENTRY_PACKET_PRIO_F_OFFSET_MOD8                                                5
#define DHD_BACKUP_ENTRY_PACKET_PRIO_F_OFFSET_MOD16                                               13
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET                                              8
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_F_WIDTH                                               2
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_OFFSET                                                10
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_WORD_OFFSET                                           2
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET_MOD8                                         0
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET_MOD16                                        8
#define DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_F_OFFSET                                                0
#define DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_F_WIDTH                                                 8
#define DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_OFFSET                                                  11
#define DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_WORD_OFFSET                                             2
#define DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_F_OFFSET_MOD16                                          0
#define DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_F_OFFSET                                                 0
#define DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_F_WIDTH                                                  32
#define DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_OFFSET                                                   12
#define DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_WORD_OFFSET                                              3

/* >>>RDD_DHD_BACKUP_ENTRY_DTS */

typedef struct
{
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	next_idx            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_next_idx            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_next_idx            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	request_id          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_request_id          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_request_id          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	packet_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_abs_addr     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_data_len     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_prio         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_l4_protocol  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	rsv_address_high    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_packet_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_abs_addr     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_data_len     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_prio         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_l4_protocol  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved4                     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rsv_address_high union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_packet_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_abs_addr     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_data_len     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_prio         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_l4_protocol  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_data_ptr_high          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rsv_address_high union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	fpm_address_low     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	packet_fpm_pool               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	packet_packet_sop             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	reserved5                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	packet_bn0                    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	packet_data_ptr_low           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	reserved            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	next_idx            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_reserved            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_next_idx            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_reserved            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_next_idx            	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	request_id          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved1_request_id          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	reserved2_request_id          	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	rsv_address_high    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
			uint32_t	packet_l4_protocol  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_prio         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_data_len     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_abs_addr     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	packet_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
			uint32_t	reserved4                     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rsv_address_high union */
			uint32_t	reserved1_packet_l4_protocol  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_prio         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_data_len     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_abs_addr     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved1_packet_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
			uint32_t	packet_data_ptr_high          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of rsv_address_high union */
			uint32_t	reserved2_packet_l4_protocol  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_prio         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_data_len     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_abs_addr     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
			uint32_t	reserved2_packet_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
			uint32_t	fpm_address_low     	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
			uint32_t	packet_fpm_pool               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	packet_packet_sop             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	reserved5                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
			uint32_t	packet_bn0                    	:16	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
		/* Sub Union 2 */
		struct{
			uint32_t	packet_data_ptr_low           	:32	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
	};
#endif
}
__PACKING_ATTRIBUTE_STRUCT_END__ RDD_DHD_BACKUP_ENTRY_DTS;

typedef RDD_DHD_BACKUP_ENTRY_DTS * aligned_RDD_DHD_BACKUP_ENTRY_DTS ALIGNMENT8;

typedef union
{
    uint32_t word_val[4];
    uint64_t dword_val64[2];
    RDD_DHD_BACKUP_ENTRY_DTS fields;
} RDD_DHD_BACKUP_ENTRY_DTS_NEW;
typedef RDD_DHD_BACKUP_ENTRY_DTS_NEW * aligned_RDD_DHD_BACKUP_ENTRY_DTS_NEW ALIGNMENT8;

#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_READ_G(r, g, idx)                      GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS), r)
#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_WRITE_G(v, g, idx)                     GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS), v)
#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_READ(r, p)                             MREAD_16((uint8_t *)p, r)
#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_WRITE(v, p)                            MWRITE_16((uint8_t *)p, v)
#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_L_READ( wv )                           FIELD_GET( wv, 16, 16 )
#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_L_WRITE( v, wv )                       FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_READ_G(r, g, idx)                    GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 4, r)
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_WRITE_G(v, g, idx)                   GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 4, v)
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_READ(r, p)                           MREAD_32((uint8_t *)p + 4, r)
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_WRITE(v, p)                          MWRITE_32((uint8_t *)p + 4, v)
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_L_READ( wv )                         FIELD_GET( wv, 0, 32 )
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_L_WRITE( v, wv )                     FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 8, 7, 1, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 8, 7, 1, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)p + 8, 7, 1, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)p + 8, 7, 1, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_L_READ( wv )                       FIELD_GET( wv, 31, 1 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_L_WRITE( v, wv )                   FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 8, 6, 1, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 8, 6, 1, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 8, 6, 1, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 8, 6, 1, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_L_READ( wv )                    FIELD_GET( wv, 30, 1 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_L_WRITE( v, wv )                FIELD_SET( v, 30, 1, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 8, 0, 14, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 8, 0, 14, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_READ(r, p)                      FIELD_MREAD_16((uint8_t *)p + 8, 0, 14, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)p + 8, 0, 14, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_L_READ( wv )                    FIELD_GET( wv, 16, 14 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_L_WRITE( v, wv )                FIELD_SET( v, 16, 14, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 10, 5, 3, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 10, 5, 3, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_READ(r, p)                          FIELD_MREAD_8((uint8_t *)p + 10, 5, 3, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)p + 10, 5, 3, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_L_READ( wv )                        FIELD_GET( wv, 13, 3 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_L_WRITE( v, wv )                    FIELD_SET( v, 13, 3, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 10, 0, 2, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 10, 0, 2, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_READ(r, p)                   FIELD_MREAD_8((uint8_t *)p + 10, 0, 2, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)p + 10, 0, 2, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_L_READ( wv )                 FIELD_GET( wv, 8, 2 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_L_WRITE( v, wv )             FIELD_SET( v, 8, 2, wv )
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_READ_G(r, g, idx)              GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 11, r)
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 11, v)
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_READ(r, p)                     MREAD_8((uint8_t *)p + 11, r)
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_WRITE(v, p)                    MWRITE_8((uint8_t *)p + 11, v)
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_L_READ( wv )                   FIELD_GET( wv, 0, 8 )
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_L_WRITE( v, wv )               FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 11, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 11, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_READ(r, p)                 MREAD_8((uint8_t *)p + 11, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_WRITE(v, p)                MWRITE_8((uint8_t *)p + 11, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_L_READ( wv )               FIELD_GET( wv, 0, 8 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_L_WRITE( v, wv )           FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_READ_G(r, g, idx)               GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 12, r)
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 12, v)
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_READ(r, p)                      MREAD_32((uint8_t *)p + 12, r)
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)p + 12, v)
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_L_READ( wv )                    FIELD_GET( wv, 0, 32 )
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_L_WRITE( v, wv )                FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 12, 6, 2, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 12, 6, 2, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_READ(r, p)                      FIELD_MREAD_8((uint8_t *)p + 12, 6, 2, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)p + 12, 6, 2, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_L_READ( wv )                    FIELD_GET( wv, 30, 2 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_L_WRITE( v, wv )                FIELD_SET( v, 30, 2, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 12, 3, 11, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 12, 3, 11, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_READ(r, p)                    FIELD_MREAD_16((uint8_t *)p + 12, 3, 11, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)p + 12, 3, 11, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_L_READ( wv )                  FIELD_GET( wv, 19, 11 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_L_WRITE( v, wv )              FIELD_SET( v, 19, 11, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_READ_G(r, g, idx)                    GROUP_MREAD_16(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 14, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_WRITE_G(v, g, idx)                   GROUP_MWRITE_16(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 14, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_READ(r, p)                           MREAD_16((uint8_t *)p + 14, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_WRITE(v, p)                          MWRITE_16((uint8_t *)p + 14, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_L_READ( wv )                         FIELD_GET( wv, 0, 16 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_L_WRITE( v, wv )                     FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 12, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32(g, idx*sizeof(RDD_DHD_BACKUP_ENTRY_DTS) + 12, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)p + 12, r)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)p + 12, v)
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
/* <<<RDD_DHD_BACKUP_ENTRY_DTS */

/* <<<RDD_DHD_BACKUP_ENTRY */


/* >>>RDD_DHD_BACKUP_IDX_CACHE_TABLE */
#define DHD_BACKUP_IDX_CACHE_TABLE_DHD_BACKUP_IDX_CACHE_TABLE_OFFSET                                        0
#define DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_OFFSET                                                           0
#define DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_WORD_OFFSET                                                      0
/* <<<RDD_DHD_BACKUP_IDX_CACHE_TABLE */

#endif /* _RDD_DATA_STRUCTURES_AUTO_H_ */
