#***********************************************************************
#
#  Copyright (c) 2006-2013  Broadcom Corporation
#  All Rights Reserved
#
#***********************************************************************/

#
# In most cases, you only need to modify this first section.
#
LIB = oal.a

REAL_OBJS = rcl_main.o rcl_lan.o rcl_system.o rcl_route.o rcl_porttriggering.o\
       rcl_virtualserver.o rcl_parentalcntrl.o rcl_qos.o rcl_pmap.o \
       rcl_cert.o rcl_pmirror.o rcl_ethswitch.o rcl_ddns.o rcl_network.o rcl_urlfilter.o \
       rcl_diag.o rcl_ipp.o rcl_dlna.o rcl_time.o rcl_ipfilter.o rcl_macfilter.o rcl_tr69c.o \
       rcl_wan.o rcl_dsl.o rcl_xtmlinkcfg.o  rcl_ipsec.o rcl_moca.o rcl_standby.o rcl_lan6.o rcl_iptunnel.o \
       stl_main.o stl_diag.o stl_dlna.o stl_lan.o stl_tr69c.o \
       stl_wan.o stl_dsl.o stl_xtmlinkcfg.o stl_moca.o \
       rcl_storageservice.o stl_storageservice.o rut_storageservice.o \
       rut_lan.o rut_system.o rut_util.o rut_ebtables.o rut_dnsproxy.o \
       rut_qosDefaultClassifications.o rut_qos.o rut_qos_class.o \
       rut_qos_queue.o rut_qos_policer.o rut_qos_ratelimit.o \
       rut_iptables.o rut_pmap.o rut_upnp.o rut_cert.o rut_ethswitch.o rut_ddns.o rut_rip.o rut_network.o \
       rut_diag.o rut_time.o rut_policyrouting.o rut_route.o rut_moca.o \
       rut_wan.o rut_ethintf.o rut_dsl.o rut_atm.o rut_ptm.o rut_xtmlinkcfg.o rut_pppconcfg.o rut_ipconcfg.o \
       rut_wan6.o rut_ipconcfg6.o rut_pppconcfg6.o rut_lan6.o rut_iptunnel.o \
       oal_mdm.o oal_locks.o rcl_snmp.o rut_snmp.o rut_ipsec.o rut_top.o rcl_pwrmngt.o rut_pwrmngt.o rut_wanlayer2.o \
       rut_pmirror.o \
       stl_bmu.o rcl_bmu.o \
       rcl_multicast.o rut_multicast.o rut_multicast6.o \
       rcl_l2tpac.o rut_l2tpac.o rut_standby.o \
       rcl_pptpac.o rut_pptpac.o \
       rcl_ponwan.o rcl_gponwan.o rut_gponwan.o \
       rcl_swmodules_osgi.o stl_swmodules_osgi.o \
       rcl_linmosd.o stl_linmosd.o \
       rcl_openwrtd.o stl_openwrtd.o \
       rcl_dockermd.o stl_dockermd.o \
       rcl_container.o stl_container.o \
       rcl_eponwan.o rut_eponwan.o \
       rut_dns.o rut_dns6.o rut_wifiwan.o \
       rcl_xpon.o stl_xpon.o stl_selt.o rcl_selt.o \
       rcl_nfc.o rut_nfc.o stl_nfc.o \
       rcl_spdsvc.o stl_spdsvc.o rut_spdsvc.o rut_tmctl_wrap.o \
       rcl_pmd.o stl_pmd.o \
       rcl_cwmpd.o stl_cwmpd.o \
       rcl_dad.o stl_dad.o \
       rcl_dmad.o stl_dmad.o \
       rut_dhcp.o rut_dhcp6.o \
       rcl_bbcd.o stl_bbcd.o \
       rcl_firewalld.o stl_firewalld.o \
       rcl_omci.o stl_omci.o rut_omci.o



GENERATED_OBJS = build_timestamp.o

all: $(LIB)

clean: generic_clean
	rm -f build_timestamp.c

#
# Generate a timestamp file that is used by stl_main.c only.
# Make v3.80 does not like autogenerating .h file, so we autogenerate a .c file
# Make v3.80 on Fedora Core 3 does not like generating dependencies for the
# autogenerated .c file, so list that separately under GENERATED_OBJS
#
.FORCE:

BUILD_TIMESTAMP := $(shell date +%y%m%d_%H%M)
BUILD_DATE_SEC := $(shell date +%s)
build_timestamp.c: .FORCE
	@echo const char *build_timestamp=\"$(BUILD_TIMESTAMP)\"\; > build_timestamp.c
	@echo const long build_date_sec=$(BUILD_DATE_SEC)\; >> build_timestamp.c


#
# Set our CommEngine directory (by splitting the pwd into two words
# at /userspace and taking the first word only).
# Then include the common defines under CommEngine.
# You do not need to modify this part.
#
CURR_DIR := $(shell pwd)
BUILD_DIR:=$(subst /userspace, /userspace,$(CURR_DIR))
BUILD_DIR:=$(word 1, $(BUILD_DIR))

include $(BUILD_DIR)/make.common

ifneq ($(strip $(BRCM_VOICE_SUPPORT)),)
include $(BUILD_DIR)/make.voice
endif

ifneq ($(strip $(BUILD_BRCM_UNFWLCFG)),)
REAL_OBJS += rcl_unfwireless.o stl_unfwlan.o rut_unfwlan.o
else
REAL_OBJS += rcl_wireless.o stl_wlan.o rut_wlan.o
endif

HAVESRC := $(wildcard rut_beepiptables.c)

ifneq ($(strip $(BUILD_BEEP)),)
BINARY_ONLY_OBJS = rut_beepiptables.o
else
BINARY_ONLY_OBJS =
REAL_OBJS += rut_beepstub.o
endif


ifeq ($(BCM_PON),y)
REAL_OBJS += rcl_ingress_filters.o stl_ingress_filters.o rut_ingress_filters.o
endif

ifneq ($(strip $(BUILD_EPON_SDK_VOICE_OAM)),)
REAL_OBJS += stl_epon_oam.o rcl_epon_oam.o rut_epon_oam.o
endif

ifneq ($(strip $(BUILD_TR69_PERIODIC_STATISTICS)),)
REAL_OBJS += rcl_periodicstats.o stl_periodicstats.o rut_periodicstats.o
endif

ifneq ($(strip $(BUILD_DBUSREMOTE_TCP)),)
REAL_OBJS += rcl_dbus.o stl_dbus.o
endif

ifneq ($(strip $(BUILD_OPENVSWITCH)),)
REAL_OBJS += rcl_openvswitch.o stl_openvswitch.o rut_openvswitch.o
endif

ifneq ($(strip $(BRCM_PKTCBL_SUPPORT)),)
REAL_OBJS += rcl_snmpPktcbl.o stl_snmpPktcbl.o rut_snmpPktcbl.o
endif

ifeq ($(strip $(BRCM_MULTIPLE_TR69C_SUPPORT)),2)
REAL_OBJS += rcl_system_ene.o
REAL_OBJS += stl_main_ene.o
endif

ifneq ($(strip $(BUILD_DM_TR104_V2)),)
REAL_OBJS += rcl2_voice.o stl2_voice.o rut2_voice.o rut_pon_voice.o
else
REAL_OBJS += rcl_voice.o stl_voice.o rut_voice.o rut_pon_voice.o
endif

ifeq ($(BCM_PON),y)
CFLAGS += -DINIT_WAN_QUEUE_ON_LINKUP
endif

ifneq ($(findstring _$(strip $(BRCM_CHIP))_,_63158_),)
CFLAGS += -DINIT_WAN_QUEUE_ON_LINKUP
endif

COMBINEDOBJS = $(REAL_OBJS) $(BINARY_ONLY_OBJS)
OBJS = $(COMBINEDOBJS) $(GENERATED_OBJS)

#
# Private apps and libs are allowed to include header files from the
# private and public directories
#
# WARNING: Do not modify this section unless you understand the
# license implications of what you are doing.
#
ALLOWED_INCLUDE_PATHS := -I. -I..\
                         -I$(BUILD_DIR)/userspace/public/include  \
                         -I$(BUILD_DIR)/userspace/public/include/$(OALDIR) \
                         -I$(BUILD_DIR)/userspace/private/include  \
                         -I$(BUILD_DIR)/userspace/private/include/$(OALDIR) \
                         -I$(BCM_FSBUILD_DIR)/public/include \
                         -I$(BCM_FSBUILD_DIR)/private/include

ALLOWED_INCLUDE_PATHS += -I$(BUILD_DIR)/userspace/public/libs/bcm_util

ALLOWED_INCLUDE_PATHS += -I$(BUILD_DIR)/userspace/public/libs/bcm_flashutil

# stl_main.c needs cms_boardioctl.h, so we need to include these kernel header files
ALLOWED_INCLUDE_PATHS += -I$(INC_BRCMDRIVER_PUB_PATH)/$(BRCM_BOARD)  \
                         -I$(INC_BRCMDRIVER_PRIV_PATH)/$(BRCM_BOARD) \
                         -I$(INC_BRCMSHARED_PUB_PATH)/$(BRCM_BOARD)

ALLOWED_INCLUDE_PATHS += -I$(KERNEL_LINKS_DIR)

ifeq ($(BUILD_RDPA),y)
ALLOWED_INCLUDE_PATHS += $(INC_RDP_FLAGS)

ifeq ($(strip $(BUILD_RDPACTL)),y)
CFLAGS += -DSUPPORT_RDPA
endif
endif

ifneq ($(strip $(BUILD_CUSTOMER)),)
ALLOWED_INCLUDE_PATHS += -I$(BUILD_DIR)/userspace/private/libs/mdm_cbk_customer/common
endif

ifneq ($(strip $(BRCM_DRIVER_WIRELESS)), )
ALLOWED_INCLUDE_PATHS +=  -I$(BUILD_DIR)/userspace/private/apps/wlan/wlmngr \

ifeq ($(strip $(BUILD_UNIFIED_WLMNGR)),y)
CFLAGS += -DSUPPORT_UNIFIED_WLMNGR
endif

endif

ifneq ($(strip $(BUILD_BRCM_UNFWLCFG)),)
ALLOWED_INCLUDE_PATHS += -I$(BUILD_DIR)/userspace/private/libs/wlmdm/src
endif

ifeq ($(strip $(BCM_JUMBO_FRAME)),y)
CFLAGS += -DCONFIG_BCM_JUMBO_FRAME
endif

ifeq ($(strip $(BRCM_XDSL_DISTPOINT_USE_G9991)),y)
CFLAGS += -DG9991
endif

#ifeq ($(strip $(BUILD_6802_MOCA)),y)
#CFLAGS += -DCONFIG_BCM_6802_MoCA
#endif

CFLAGS += $(SSP_TYP_COMPILER_OPTS)
BCM_LD_FLAGS += -L$(INSTALL_DIR)/lib $(SSP_TYP_LIBS)


# treat all warnings as errors
CUSTOM_CFLAGS += -Werror -Wfatal-errors # NEW_FORBID_WARNINGS


#
# Implicit rule will make the .c into a .o
# Implicit rule is $(CC) -c $(CPPFLAGS) $(CFLAGS)
# See Section 10.2 of Gnu Make manual
#


#
# Generic rule makes the library oal.a
# see make.common
#
$(LIB):$(OBJS)

#
# Include the rule for making dependency files.
# The '-' in front of the second include suppresses
# error messages when make cannot find the .d files.
# It will just regenerate them.
# See Section 4.14 of Gnu Make.
#

include $(BUILD_DIR)/make.deprules

ifeq ($(strip $(HAVESRC)),)
rut_beepiptables.o: rut_beepiptables.o.$(PROFILE_ARCH).save
	cat $< > $@

-include $(REAL_OBJS:.o=.d)

else
-include $(COMBINEDOBJS:.o=.d)
endif

