diff -Naur obuspa_orig/src/core/stomp.c obuspa_new/src/core/stomp.c
--- obuspa_orig/src/core/stomp.c	2022-09-06 18:37:54.000000000 -0700
+++ obuspa_new/src/core/stomp.c	2022-09-12 10:35:44.679827389 -0700
@@ -78,6 +78,9 @@
 #include "nu_macaddr.h"
 #include "retry_wait.h"
 
+#ifdef BDK_USP
+#include "bdk_usp.h"
+#endif
 
 //------------------------------------------------------------------------------
 // General definitions used in code
@@ -280,6 +283,9 @@
 void QueueUspConnectRecord_STOMP(stomp_connection_t *sc, mtp_send_item_t *msi, char *controller_queue, char *agent_queue, time_t expiry_time);
 int HandleStompRunningState(stomp_connection_t *sc, socket_set_t *set);
 int GetNextStompMsgToSend(stomp_connection_t *sc);
+#ifdef BDK_USP
+static void setStompConnectionStatus(stomp_connection_t *sc);
+#endif
 
 /*********************************************************************//**
 **
@@ -994,7 +1000,20 @@
         // and the agent's queue is not overridden by the STOMP server, and a reconnect is not pending
         if ((sc->subscribe_dest == NULL) && (sc->schedule_reconnect == kScheduledAction_Off))
         {
+#ifdef BDK_USP
+            /*
+             * Originally, obuspa sets this flag to Signalled to ensure all
+             * responses are sent back before subscribe to new destination.
+             * In BDK, this function is triggered by rcl handler to inform 
+             * destination is changed. At this time, all responses should be
+             * sent back already. So set this flag to Activated directly to
+             * trigger unsubscribe/subscribe operation. This change fixes
+             * usp_conformance_6_10 cdrouter test case.
+             */
+            sc->schedule_resubscribe = kScheduledAction_Activated;
+#else
             sc->schedule_resubscribe = kScheduledAction_Signalled;
+#endif
         }
     }
 
@@ -1343,10 +1362,26 @@
     // Exit if unable to connect to the STOMP server
     // NOTE: The connect is performed in non-blocking mode
     err = connect(sc->socket_fd, (struct sockaddr *) &saddr, saddr_len);
+#ifdef BDK_USP
+    if ((err == -1) &&
+        ((errno == ENETUNREACH) || (errno == EHOSTUNREACH)))
+    {
+        // kStompFailure_Connect has special meaning for BDK code.
+        // In BDK, this means the network is not up yet and we cannot reach
+        // the STOMP server, so we should NOT increase backoff timer.  See
+        // HandleStompSocketError.
+        stomp_err = kStompFailure_Connect;
+        goto exit;
+    }
+#endif
     if ((err == -1) && (errno != EINPROGRESS))
     {
         USP_ERR_ERRNO("connect", errno);
+#ifdef BDK_USP
+        stomp_err = kStompFailure_OtherError;
+#else
         stomp_err = kStompFailure_Connect;
+#endif
         goto exit;
     }
 
@@ -1361,7 +1396,11 @@
     if (num_sockets == 0)
     {
         USP_LOG_Error("%s: connect timed out", __FUNCTION__);
+#ifdef BDK_USP
+        stomp_err = kStompFailure_OtherError;
+#else
         stomp_err = kStompFailure_Connect;
+#endif
         goto exit;
     }
 
@@ -1370,7 +1409,11 @@
     if (err == -1)
     {
         USP_ERR_ERRNO("getsockopt", errno);
+#ifdef BDK_USP
+        stomp_err = kStompFailure_OtherError;
+#else
         stomp_err = kStompFailure_Connect;
+#endif
         goto exit;
     }
 
@@ -1378,7 +1421,11 @@
     if (so_err != 0)
     {
         USP_LOG_Error("%s: async connect failed", __FUNCTION__);
+#ifdef BDK_USP
+        stomp_err = kStompFailure_OtherError;
+#else
         stomp_err = kStompFailure_Connect;
+#endif
         goto exit;
     }
 
@@ -1394,8 +1441,19 @@
     }
     else
     {
+#ifdef BDK_USP
+        // Role is used to match with Inherited Role, and Inherited Role
+        // is depended on certificate, but not on encryption.
+        // ROLE_NON_SSL is used when certificates are NOT imported.
+        // But when encryption is disabled, certificates still can be
+        // imported to connect with HTTP server through HTTPS.
+        // So when encryption is disabled, role should be ROLE_UNKNOWN
+        // instead of ROLE_NON_SSL.
+        sc->role = ROLE_UNKNOWN;
+#else
         // If encryption is off, then use the Non SSL role
         sc->role = ROLE_NON_SSL;
+#endif
     }
 
     // Update the address used to connect to the controller
@@ -1415,7 +1473,12 @@
 #ifndef CONNECT_ONLY_OVER_WAN_INTERFACE
 #endif
 
+#ifdef BDK_USP
+    USP_LOG_Info("Connected to %s (host=%s, port=%d) from interface=%s/%s", nu_ipaddr_str(&dst, buf, sizeof(buf)),
+                 sc->host, sc->port, sc->mgmt_if_name, sc->mgmt_ip_addr);
+#else
     USP_LOG_Info("Connected to %s (host=%s, port=%d) from interface=%s", nu_ipaddr_str(&dst, buf, sizeof(buf)), sc->host, sc->port, sc->mgmt_if_name);
+#endif
 
     // Exit if unable to queue the initial STOMP frame for sending
     err = StartSendingFrame_STOMP(sc);
@@ -1481,6 +1544,9 @@
     sc->cert_chain = NULL;
     sc->role = ROLE_DEFAULT;
     USP_SAFE_FREE(sc->subscribe_dest);
+#ifdef BDK_USP
+    DEVICE_STOMP_SetDestinationFromServer(sc->instance, "");
+#endif
     sc->agent_heartbeat_period = 0;
     sc->server_heartbeat_period = 0;
     sc->next_heartbeat_time = INVALID_TIME;
@@ -1543,6 +1609,9 @@
     sc->cert_chain = NULL;
     sc->role = ROLE_DEFAULT;
     sc->subscribe_dest = NULL;
+#ifdef BDK_USP
+    DEVICE_STOMP_SetDestinationFromServer(sc->instance, "");
+#endif
 
     sc->agent_heartbeat_period = 0;
     sc->server_heartbeat_period = 0;
@@ -1564,6 +1633,9 @@
     if (sc->failure_code == kStompFailure_None)
     {
         sc->last_status_change = cur_time;
+#ifdef BDK_USP
+        setStompConnectionStatus(sc);
+#endif
     }
 
 }
@@ -2191,6 +2263,9 @@
             // This will also unblock the Boot! event, subscriptions, and restarting of operations
             agent_queue = (sc->subscribe_dest != NULL) ? sc->subscribe_dest : sc->provisionned_queue;
             DM_EXEC_PostStompHandshakeComplete(sc->instance, agent_queue, sc->role);
+#ifdef BDK_USP
+            setStompConnectionStatus(sc);
+#endif
             break;
 
         default:
@@ -2436,7 +2511,16 @@
     // This code blocks until the retry has completed, or the retry has timed out
     #define ONE_SECOND_IN_MICROSECONDS (1000000)
     #define SSL_RETRY_SLEEP (ONE_SECOND_IN_MICROSECONDS/20)             // Retry 20 times a second
+#ifdef BDK_USP
+    // In many CD Router profile test cases, such as USP_Device2_ProviderBridge_get_1,
+    // the data of the whole tree is getting from these tests, obuspa
+    // can terminate connection immaturely (specially with firmware that
+    // has wireless, or voice parameters) since timeout is expired.
+    // --> increase ssl retry timeout to fix this issue.
+    #define SSL_RETRY_TIMEOUT  (20*ONE_SECOND_IN_MICROSECONDS)          // Retry for upto 20 seconds
+#else
     #define SSL_RETRY_TIMEOUT  (5*ONE_SECOND_IN_MICROSECONDS)           // Retry for upto 5 seconds
+#endif
     #define MAX_SSL_RETRY_COUNT  (SSL_RETRY_TIMEOUT/SSL_RETRY_SLEEP)
     err = SSL_ERROR_WANT_WRITE;
     retry_count = 0;
@@ -3063,6 +3147,9 @@
     if (is_present)
     {
         sc->subscribe_dest = USP_STRDUP(buf);
+#ifdef BDK_USP
+        DEVICE_STOMP_SetDestinationFromServer(sc->instance, sc->subscribe_dest);
+#endif
     }
 }
 
@@ -3149,6 +3236,9 @@
     {
         sc->last_status_change = time(NULL);
         sc->failure_code = failure_code;
+#ifdef BDK_USP
+        setStompConnectionStatus(sc);
+#endif
     }
 
     // Undo transient state associated with the connection
@@ -3157,7 +3247,29 @@
 
     // Start retrying this connection
     sc->state = kStompState_Retrying;
+#ifdef BDK_USP
+    bool network_failure = ((failure_code == kStompFailure_Connect) ||
+                            (failure_code == kStompFailure_ServerDNS));
+    bool is_first_try = (sc->retry_count == 0);
+    if (is_first_try && network_failure)
+    {
+        /* Do NOT increase retry_count if it is the first try AND
+         * failure is because of network (no route to stomp server or server unreachable) OR
+         * failure is because of serverDNS (cannot resolve hostname of stomp server).
+         * Our device is not yet "network aware".
+         * It makes retry_count be matched with retry_count at controller
+         * and usp_conformance_6_3 (STOMP Connection Retry) can pass */
+         // Do nothing in this block.
+    }
+    else
+    {
+        /* stomp server is busy, some real or unusual network error occured,
+         * increment count as usual. */
+        sc->retry_count++;
+    }
+#else
     sc->retry_count++;
+#endif
 
     // Calculate time until next retry
     wait_time = CalculateStompRetryWaitTime(sc->retry_count, sc->retry.initial_interval, sc->retry.interval_multiplier);
@@ -3230,6 +3342,9 @@
     char escaped_username[256];
     char escaped_password[256];
     char *endpoint_id;
+#ifdef BDK_USP
+    char virtualHost[128];
+#endif
 
     // Write the heartbeat header arguments into a buffer (if enabled)
     heartbeat_args[0] = '\0';
@@ -3266,6 +3381,33 @@
                                 "\n"        \
                                 EMPTY_BODY
 
+#ifdef BDK_USP
+    if (sc->virtual_host)
+    {
+       strncpy(virtualHost, sc->virtual_host, sizeof(virtualHost)-1);
+    }
+    else
+    {
+       strncpy(virtualHost, "", sizeof(virtualHost)-1);
+    }
+
+    // Allocate a buffer to store the frame in
+    // NOTE: The code assumes that none of the strings (host, login, passcode) contain embedded NULLs or CR/LF
+    len = sizeof(STOMP_FRAME_FORMAT) + strlen(virtualHost) + strlen(heartbeat_args)
+                                     + strlen(escaped_endpoint_id) + strlen(password_args) - 8; // Minus 8 to remove all "%s" from the frame
+    buf = USP_MALLOC(len);
+
+    // Print the STOMP frame for debug (does not contain password)
+    USP_LOG_Info("Sending STOMP frame to (host=%s, port=%d)", sc->host, sc->port);
+    if (enable_protocol_trace)
+    {
+        USP_SNPRINTF(((char *)buf), len, STOMP_FRAME_FORMAT, virtualHost, heartbeat_args, escaped_endpoint_id, debug_pw_args);
+        USP_PROTOCOL("%s", buf);
+    }
+
+    // Form the real STOMP frame
+    USP_SNPRINTF(((char *)buf), len, STOMP_FRAME_FORMAT, virtualHost, heartbeat_args, escaped_endpoint_id, password_args);
+#else
     // Allocate a buffer to store the frame in
     // NOTE: The code assumes that none of the strings (host, login, passcode) contain embedded NULLs or CR/LF
     len = sizeof(STOMP_FRAME_FORMAT) + strlen(sc->virtual_host) + strlen(heartbeat_args)
@@ -3282,6 +3424,7 @@
 
     // Form the real STOMP frame
     USP_SNPRINTF(((char *)buf), len, STOMP_FRAME_FORMAT, sc->virtual_host, heartbeat_args, escaped_endpoint_id, password_args);
+#endif
 
     // Save the frame to transmit
     USP_ASSERT(sc->txframe == NULL);
@@ -4182,4 +4325,138 @@
     DLLIST_LinkToHead(&sc->usp_record_send_queue, send_item);
 }
 
+#ifdef BDK_USP
+/*********************************************************************//**
+**
+** HandleStompIntfChanges - sysdir publishes interface event to obuspa
+**    which only is interested in layer3 interface, and this routine is called
+**
+** 1. connection has been established on this layer3 interface, and there is an IP address change or intf down
+** 2. connection has not been establish, restart it so it can retry right away
+** Input parameters: info of the changed interface
+** \param   interfaceName, isLinkUp, isIpv4Up, isIpv6Up
+**          ipv4Addr, ipv6Addr
+**
+** \return  None
+**
+**************************************************************************/
+void HandleStompIntfChanges(char *intfName, bool isLinkUp, bool isIpv4Up, bool isIpv6Up, char *ipv4Addr, char *ipv6GlobalAddr)
+{
+    int i;
+    stomp_connection_t *sc;
+    bool has_changed=0;
+
+    USP_LOG_Info("%s: RX intf event ifName %s, isIpv4UP %d", __FUNCTION__,intfName,isIpv4Up);
+    for (i=0; i<MAX_STOMP_CONNECTIONS; i++)
+    {
+        sc = &stomp_connections[i];
+        if (sc->instance != INVALID)
+        {
+           /* there are 2 cases- one is already connected on this interface; another is it is still trying to find a route
+            * to send the traffic
+            */
+           if ((sc->mgmt_if_name[0] != '\0') && (sc->mgmt_ip_addr[0] != '\0'))
+           {
+              /* this is the case when connection has been established.  If there is a change, then restart the connection */
+              if (strcmp(intfName,sc->mgmt_if_name) == 0)
+              {
+                 if ((!isIpv4Up) || ((ipv4Addr == NULL) || (strlen(ipv4Addr) == 0)))
+                 {
+                    /* link down */
+                    has_changed = 1;
+                    USP_LOG_Info("%s, instance %d, established. Interface intfName %s down", __FUNCTION__, sc->instance,intfName);               
+                 }
+                 else
+                 {
+                    /* is the IP address changed.   In our system, when IP address changes, links goes down first and then up 
+                     * with the new IP address.  So it's unlikely we would get here
+                     */
+                    if (strcmp(ipv4Addr,sc->mgmt_ip_addr))
+                    {
+                       has_changed = 1;
+                       USP_LOG_Info("%s, instance %d, established. IPaddr sc->mgmt_ip_addr %s, new %s",
+                                    __FUNCTION__, sc->instance,sc->mgmt_ip_addr,ipv4Addr);
+                    }
+                 }
+              }  /* interface matched */
+           } /* established connection */
+           else
+           {
+              /* There is no connection established yet, but an interface has come up.
+               * Restart again.
+               */
+              if (isIpv4Up)
+              {
+                 USP_LOG_Info("%s, instance %d, not established yet, restart the connection to retry again", __FUNCTION__, sc->instance);
+                 has_changed = 1;
+              }
+           } /* connection not established */
+           
+           if (has_changed)
+           {
+              // Stop, then restart the STOMP connection
+              USP_LOG_Warning("Has changed. Restarting STOMP connection %d.", sc->instance);
+              OS_UTILS_LockMutex(&stomp_access_mutex);
+              // Exit if MTP thread has exited
+              if (is_stomp_mtp_thread_exited)
+              {
+                 OS_UTILS_UnlockMutex(&stomp_access_mutex);
+                 return;
+              }
+              StopStompConnection(sc, DONT_PURGE_QUEUED_MESSAGES);
+              StartStompConnection(sc);
+              OS_UTILS_UnlockMutex(&stomp_access_mutex);
+              MTP_EXEC_StompWakeup();
+              has_changed = 0;
+           } /* has_changed */
+        } /* valid instance */
+    } /* loop through all sc */
+} /* HandleStompIntfChanges */
+
+
+static void setStompConnectionStatus(stomp_connection_t *sc)
+{
+   int ret;
+   char *status;
+   char lastChangeDate[256];
+
+   /* This function simply reads the stomp connection status and update the MDM.
+    * The logic is copied from STOMP_GetConnectionStatus() function. And the main
+    * reason is to avoid using the MUTEX code.
+    */
+   switch(sc->state)
+   {
+      case kStompState_Running:
+         status = "Enabled";
+         break;
+      default:
+      case kStompState_Idle:
+      case kStompState_SendingStompFrame:
+      case kStompState_AwaitingConnectedFrame:
+      case kStompState_SendingSubscribeFrame:
+         status = "Connecting";
+         break;
+   }
+
+   // If an error condition has occured, then override the status with the error
+   if (sc->failure_code != kStompFailure_None)
+   {
+      status = TEXT_UTILS_EnumToString(sc->failure_code, stomp_failure_strings, NUM_ELEM(stomp_failure_strings));
+   }
+
+   iso8601_from_unix_time(sc->last_status_change, lastChangeDate, sizeof(lastChangeDate)-1);
+
+   ret = setStompConnStatusToMdm(sc->instance, status, lastChangeDate);
+
+   if (ret)
+   {
+      USP_LOG_Error("%s: Cannot set status<%s>", __FUNCTION__, status);
+   }
+
+   return;
+
+}  /* End of setStompConnectionStatus() */
+
+#endif /* BDK_USP */
+
 #endif // DISABLE_STOMP
diff -Naur obuspa_orig/src/core/stomp.h obuspa_new/src/core/stomp.h
--- obuspa_orig/src/core/stomp.h	2022-09-06 18:37:54.000000000 -0700
+++ obuspa_new/src/core/stomp.h	2022-09-12 10:35:44.679827389 -0700
@@ -1,6 +1,6 @@
 /*
  *
- * Copyright (C) 2019-2022, Broadband Forum
+ * Copyright (C) 2019, Broadband Forum
  * Copyright (C) 2016-2019  CommScope, Inc
  *
  * Redistribution and use in source and binary forms, with or without
@@ -95,6 +95,10 @@
 void STOMP_UpdateRetryParams(int instance, stomp_retry_params_t *retry_params);
 void STOMP_GetDestinationFromServer(int instance, char *buf, int len);
 
+#ifdef BDK_USP
+void HandleStompIntfChanges(char *intfName, bool isLinkUp, bool isIpv4Up, bool isIpv6Up, char *ipv4Addr, char *ipv6GlobalAddr);
+int setStompConnStatusToMdm(int instance, const char *status, const char *date);
+#endif
 
 // Readability definitions for 'purge_queued_messages' argument of STOMP_StopConnection()
 #define PURGE_QUEUED_MESSAGES true
