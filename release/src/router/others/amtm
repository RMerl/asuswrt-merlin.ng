#!/bin/sh
#bof

# amtm is free to use under the GNU General Public License version 3 (GPL-3.0)
# https://opensource.org/licenses/GPL-3.0

# Proudly coded by thelonelycoder
# Copyright (c) 2016-2066 thelonelycoder - All Rights Reserved
# https://www.snbforums.com/members/thelonelycoder.25480/
# https://diversion.ch/amtm.html

add=/jffs/addons/amtm
amtmURL=https://fwupdate.asuswrt-merlin.net/amtm_fw

ascii_logo(){
	echo "              _"
	echo "   ____ ____ | |_  ____"
	echo "  / _  |    \|  _)|    \ "
	echo " ( ( | | | | | |__| | | |"
	echo "  \_||_|_|_|_|\___)_|_|_|"
	echo
	echo " $1"
}

about_amtm(){
	p_e_l
	echo " amtm, the $title
 Version $version FW, released on $release
 (Built-in firmware version)

 amtm is a front end that manages popular scripts
 for wireless routers running Asuswrt-Merlin firmware.

 For updates and discussion visit this thread:
 https://www.snbforums.com/threads/amtm-the-snbforums-asuswrt-merlin-terminal-menu.42415

 Proudly coded by thelonelycoder:
 Copyright (c) 2016-2066 thelonelycoder - All Rights Reserved
 https://www.snbforums.com/members/thelonelycoder.25480
 https://diversion.ch/amtm.html

 $contributors

 amtm License:
 amtm is free to use under the GNU General
 Public License, version 3 (GPL-3.0).
 https://opensource.org/licenses/GPL-3.0

 Follow amtm on Twitter or Reddit:
 https://twitter.com/DiversionBlock
 https://www.reddit.com/r/diversion"
	p_r_l
	p_e_t "return to menu"
	show_amtm menu
}

a_m(){ [ -z "$am" ] && am=$1 || am="$am\\n$1";}
c_e(){ [ ! -f /opt/bin/opkg ] && show_amtm " $1 requires the Entware repository\\n installed. Enter ${GN_BG}ep${NC} to install Entware now.";}
c_nl(){ [ -n "$(tail -c2 "$1")" ] && echo >> "$1";}
c_j_s(){ if [ ! -f "$1" ]; then echo "#!/bin/sh" >"$1"; echo >>"$1"; elif [ -f "$1" ] && ! head -1 "$1" | grep -qE "^#!/bin/sh"; then c_nl "$1"; echo >>"$1"; sed -i '1s~^~#!/bin/sh\n~' "$1";fi; d_t_u "$1"; c_nl "$1"; [ ! -x "$1" ] && chmod 0755 "$1";}
c_d(){ p_e_l;while true;do printf " Continue? [1=Yes e=Exit] ";read -r continue;case "$continue" in 1)echo;break;;[Ee])am=;show_amtm menu;break;;*)printf "\\n input is not an option\\n\\n";;esac done;}
c_url(){ /usr/sbin/curl -fsNL --retry 3 "$@";}
d_t_u(){ dos2unix < $1 | cmp -s - $1;[ "$?" = 1 ] && dos2unix $1;}
p_e_t(){ printf "\\n Press Enter to $1 ";read -r;echo;}
p_r_l(){ echo "${R}_____________________________________________${NC}";}
p_e_l(){ p_r_l;echo;}
r_w_e(){ [ "$(sed '/^[[:space:]]*$/d; /#!\/bin\/sh/d' "$1" | wc -c)" = 0 ] && rm "$1";}
r_m(){ [ -f "${add}/$1" ] && rm -f "${add}/$1";}
s_p(){ for i in "$1"/*; do if [ -d "$i" ]; then s_p "$i";elif [ -f "$i" ]; then	[ ! -w "$i" ] && chmod 666 "$i";d_t_u "$i";fi;done;}
theme_standard(){ R='[31m';R_BG='[41m';E_BG='[41m';GN='[92m';GN_BG='[42m';B='[94m';GY='[90m';NC='[0m';COR=20;}
theme_green(){ R='[33m';R_BG='[42m';E_BG='[41m';GN='[92m';GN_BG='[42m';B='[94m';GY='[90m';NC='[0m';COR=20;}
theme_blue(){ R='[34m';R_BG='[44m';E_BG='[101m';GN='[94m';GN_BG='[104m';B='[38;5;112m';GY='[90m';NC='[0m';COR=21;}
theme_blue_on_white(){ R='[34m';R_BG='[104m';E_BG='[101m';GN='[94m';GN_BG='[104m';B='[38;5;112m';GY='[90m';NC='[0m';COR=21;}
theme_high_contrast(){ R='[91m';R_BG='[41m';E_BG='[41m';GN='[32m';GN_BG='[42m';B='[38;5;51m';GY='[90m';NC='[0m';COR=20;}
theme_reduced(){ R='[31m';R_BG='[100m';E_BG='[100m';GN='[37m';GN_BG='[100m';B='[37m';GY='[90m';NC='[0m';COR=21;}
theme_reduced_w(){ R='[31m';R_BG='[97;40m';E_BG='[97;40m';GN='[32m';GN_BG='[97;40m';B='[30m';GY='[90m';NC='[0m';COR=23;}
theme_reduced_cw(){ R='[31m';R_BG='[97;40m';E_BG='[97;41m';GN='[32m';GN_BG='[30;42m';B='[30m';GY='[90m';NC='[0m';COR=23;}
theme_reduced_b(){ R='[38;5;209m';R_BG='[100m';E_BG='[100m';GN='[38;5;157m';GN_BG='[100m';B='[37m';GY='[90m';NC='[0m';COR=21;}
theme_reduced_cb(){ R='[31m';R_BG='[100m';E_BG='[30;41m';GN='[38;5;157m';GN_BG='[30;42m';B='[37m';GY='[90m';NC='[0m';COR=23;}
theme_basic(){ R='[31m';R_BG=;E_BG=;GN=;GN_BG=;B=;GY='[90m';NC='[0m';COR=15;}
f_b_url(){ a_m " ! using ${R}fallback server${NC} diversion.ch\\n";amtmURL=https://diversion.ch/amtm_fw;}

c_t(){
	[ -f "${add}"/.amtm_theme ] && . "${add}"/.amtm_theme
	divconf=/opt/share/diversion/.conf/diversion.conf
	if [ -s "$divconf" ]; then
		[ ! -f "${add}"/.amtm_theme ] && theme="$(grep "THEME=" "$divconf" | sed -e 's/THEME=//')"
	fi
	[ "$theme" ] || theme_amtm new
	theme_$theme
}

g_m(){
	[ "$1" = amtm.mod ] && set -- "$1" "$2" "${add}/a_fw"
	[ "$3" ] || set -- "$1" "$2" "${add}"
	if [ "$2" = new ]; then
		c_url "$amtmURL/$1" -o "$3/${1}.new"
		if [ -s "$3/${1}.new" ]; then
			if grep -wq '^#bof' "$3/${1}.new" && grep -wq '^#eof' "$3/${1}.new"; then
				mv -f "$3/${1}.new" "$3/$1"
				a_m " - Module ${GN}$1${NC} ${rdl}downloaded"
				sfp=1
			else
				rm -f "$3/${1}.new"
				a_m " ! Module ${R}$1${NC} is not an amtm file"
				f_b_url
				g_m "$@"
			fi
		elif [ -f "$3/$1" ]; then
			rm -f "$3/${1}.new"
			a_m " ! Module ${R}$1${NC} ${rdl}download failed, using existing file"
			f_b_url
			g_m "$@"
		else
			rm -f "$3/${1}.new"
			a_m " ! Module ${R}$1${NC} ${rdl}download failed"
			f_b_url
			g_m "$@"
		fi
	fi
	if [ "$2" = include ]; then
		if [ -f "$3/$1" ]; then
			. "$3/$1"
		else
			g_m "$1" new "$3"
			[ -f "$3/$1" ] && . "$3/$1"
		fi
	fi
}

reset_amtm(){
	p_e_l
	echo " Do you want to reset amtm settings now?"
	echo
	echo " Note that resetting amtm will not remove or"
	echo " uninstall any installed SNBForum scripts."
	echo
	echo " However, it will remove the Disk check"
	echo " script and log, the Format disk log and the"
	echo " reboot scheduler when found."
	c_d
	if [ -f /jffs/scripts/disk-check ]; then
		sed -i '\~/jffs/scripts/disk-check ~d' /jffs/scripts/pre-mount
		r_w_e /jffs/scripts/pre-mount
		rm -f /jffs/scripts/disk-check
	fi
	if [ -f /jffs/scripts/init-start ] && grep -qE "amtm_RebootScheduler" /jffs/scripts/init-start; then
		sed -i '\~amtm_RebootScheduler~d' /jffs/scripts/init-start
		r_w_e /jffs/scripts/init-start
		cru d amtm_RebootScheduler
	fi
	rm -rf "${add}"
	clear
	ascii_logo "  amtm settings reset"
	echo
	echo "   Goodbye!"
	echo
	exit 0
}

theme_amtm(){
	p_e_l
	if [ -z "$1" ]; then
		printf " This changes the amtm theme. All used colors\\n are shown in the themes below.\\n"
		printf "\\n Your current theme is: ${R_BG} $theme ${NC}\\n\\n"
	else
		printf " Select a theme that works best in your\\n SSH client. All colors in use are shown.\\n\\n"
	fi
	themes='standard green blue blue_on_white high_contrast reduced reduced_w reduced_cw reduced_b reduced_cb'
	i=1
	for theme in $themes; do
		ncorr=' '
		case $theme in
			blue)			corr1=-1;corr2=-1;;
			blue_on_white)	corr2=-1;;
			reduced)		corr2=-1;;
			reduced_w)		corr2=-3;;
			reduced_cw)		corr2=-3;;
			reduced_b)		corr2=+5;;
			reduced_cb)		corr1=-2;corr2=+3;ncorr=;;
		esac
		theme_$theme
		printf "%-$((COR+2$corr1))s %-$((COR+4))s %-$((COR-6))s\\n" "${R_BG}$ncorr$i. $theme" "${NC}${GN_BG} $theme" "${NC}${B} ${theme:0:10}${NC}"
		printf "   %-$((COR-1))s %-$((COR+4$corr2))s %-s\\n" "${E_BG} $theme" "${NC}${GN} $theme" "${NC}${GY} ${theme:0:10}${NC}"
		p_e_l
		i=$((i+1))
		unset corr2 corr1 ncorr
	done
	theme_basic
	printf "${R_BG}11. basic         ${NC}${GN_BG} basic${NC}\\n"
	p_r_l
	ton=11;noad=
	if [ -f "$divconf" ]; then
		printf "\\n12. Let Diversion set theme ($(grep "THEME=" "$divconf" | sed -e 's/THEME=//'))\\n"
		p_r_l
		ton=12;noad=12
	fi
	printf "\\n The basic and reduced themes use no or fewer\\n"
	printf " colors, service states may not be visible.\\n"
	theme_standard
	while true; do
		if [ -z "$1" ]; then
			printf "\\n Set new amtm theme: [1-$ton e=Exit] ";read -r continue
		else
			printf "\\n Select amtm theme: [1-$ton] ";read -r continue
		fi
		case "$continue" in
			1) theme=standard;break;;
			2) theme=green;break;;
			3) theme=blue;break;;
			4) theme=blue_on_white;break;;
			5) theme=high_contrast;break;;
			6) theme=reduced;break;;
			7) theme=reduced_w;break;;
			8) theme=reduced_cw;break;;
			9) theme=reduced_b;break;;
			10) theme=reduced_cb;break;;
			11) theme=basic;break;;
		$noad)	[ -f "${add}"/.amtm_theme ] && rm "${add}"/.amtm_theme
				theme=
				show_amtm " amtm now uses the Diversion theme"
				break;;
		 [Ee]) 	show_amtm menu;;
			*)	printf "\\n input is not an option\\n";;
		esac
	done
	echo "theme=$theme" >"${add}"/.amtm_theme
	[ "$1" ] || show_amtm " changed theme to $theme"
}

update_amtm(){
	urlNOK=
	if ! c_url "$amtmURL/amtm.mod" | grep -q "^version="; then
		urlNOK=1
		f_b_url
	fi
	if [ "$urlNOK" ] && ! c_url "$amtmURL/amtm.mod" | grep -q "^version="; then
		if [ "$su" = 1 ]; then
			updErr=1
			thisrem=" ${E_BG}upd err${NC}"
			amtmUpd=0
		else
			a_m " Update aborted, could not retrieve version"
			show_amtm menu
		fi
	else
		urlNOK=
	fi
	if [ -z "$urlNOK" ]; then
		amtmRemotever="$(curl -fsNL --retry 3 "$amtmURL/amtm.mod" | grep "^version=" | sed -e 's/version=//')"
		localmd5="$(md5sum "${add}"/a_fw/amtm.mod | awk '{print $1}')"
		remotemd5="$(curl -fsNL --retry 3 "$amtmURL/amtm.mod" | md5sum | awk '{print $1}')"

		if [ "$su" = 1 ]; then
			if [ "$version" != "$amtmRemotever" ]; then
				thisrem="${E_BG}-> v$amtmRemotever${NC}"
				amtmUpd=1
			elif [ "$localmd5" != "$remotemd5" ]; then
				thisrem="${E_BG}-> min upd${NC}"
				amtmUpd=2
			else
				thisrem="${GN_BG}v$version${NC}"
				amtmUpd=0
			fi
		else
			if [ "$version" != "$amtmRemotever" ]; then
				a_m " amtm updated from v$version to v$amtmRemotever"
			elif [ "$localmd5" != "$remotemd5" ]; then
				a_m " amtm minor version update applied"
			else
				a_m " amtm force updated to v$amtmRemotever"
			fi
			get_i_modules "${add}"
			exec "$0" "$am"
		fi
	fi
}

run_amtm(){
	if [ ! -f "${add}"/a_fw/amtm.mod ] || [ -f /jffs/scripts/amtm ]; then
		mkdir -p /jffs/scripts
		[ -d "${add}" ] && fmd= || fmd=1
		mkdir -p "${add}/a_fw"

		if [ ! -d "${add}" ]; then
			printf "\\n amtm failed to create the directory\\n ${add}\\n Please investigate. Aborting amtm now.\\n\\n"
			exit 1
		fi

		[ -f /jffs/.amtm_theme ] && mv /jffs/.amtm_theme "${add}"
		[ -f /jffs/amtm-format-disk.log ] && mv /jffs/amtm-format-disk.log "${add}"
		[ -f /jffs/amtm-disk-check.log ] && mv /jffs/amtm-disk-check.log "${add}"

		c_t

		if [ -f /jffs/scripts/amtm ] || [ -f /opt/bin/amtm ]; then
			rm -f /jffs/scripts/amtm
			rm -f /opt/bin/amtm
			if [ -f "/jffs/configs/profile.add" ]; then
				sed -i '/alias amtm=/d' /jffs/configs/profile.add >/dev/null
				r_w_e /jffs/configs/profile.add
			fi
			a_m " amtm migrated to integrated firmware version"
		else
			a_m " Initializing amtm for first run"
		fi

		[ "$fmd" ] && a_m " - Created ${GN}${add}${NC} directory"

		if [ "$(nvram get jffs2_scripts)" != 1 ]; then
			a_m " - JFFS custom scripts and configs enabled"
			nvram set jffs2_scripts=1
			nvram commit
		fi
		g_m amtm.mod new
		if [ ! -f "${add}"/a_fw/amtm.mod ]; then
			p_e_l
			printf "$am\\n\\n Exiting amtm now\\n"
			p_e_l
			exit 1
		fi
		exec "$0" "$am"
	elif [ -z "$1" ]; then
		[ "$am" ] && show_amtm "$am" || show_amtm menu
	elif [ "$1" = tpu ]; then
		su=1;suUpd=0;updErr=;tpu=1
		> /tmp/amtm-tpu-check
		show_amtm >/dev/null 2>&1
	else
		show_amtm "$1"
	fi
}
[ -f "${add}"/a_fw/amtm.mod ] && . "${add}"/a_fw/amtm.mod
run_amtm "$@"
#eof
